'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var https = require('https');
var https__default = _interopDefault(https);
var fs = require('fs');
var fs__default = _interopDefault(fs);
var sirv = _interopDefault(require('sirv'));
var polka = _interopDefault(require('polka'));
var compression = _interopDefault(require('compression'));
var path = _interopDefault(require('path'));
var fetch$1 = _interopDefault(require('node-fetch'));
var Toast = _interopDefault(require('svelte-toast'));
var Stream = _interopDefault(require('stream'));
var http = _interopDefault(require('http'));
var Url = _interopDefault(require('url'));
var zlib = _interopDefault(require('zlib'));

function noop() { }
function run(fn) {
    return fn();
}
function blank_object() {
    return Object.create(null);
}
function run_all(fns) {
    fns.forEach(run);
}
function safe_not_equal(a, b) {
    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
}
function subscribe(store, callback) {
    const unsub = store.subscribe(callback);
    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
}
function get_store_value(store) {
    let value;
    subscribe(store, _ => value = _)();
    return value;
}
function custom_event(type, detail) {
    const e = document.createEvent('CustomEvent');
    e.initCustomEvent(type, false, false, detail);
    return e;
}

let current_component;
function set_current_component(component) {
    current_component = component;
}
function get_current_component() {
    if (!current_component)
        throw new Error(`Function called outside component initialization`);
    return current_component;
}
function onMount(fn) {
    get_current_component().$$.on_mount.push(fn);
}
function onDestroy(fn) {
    get_current_component().$$.on_destroy.push(fn);
}
function createEventDispatcher() {
    const component = current_component;
    return (type, detail) => {
        const callbacks = component.$$.callbacks[type];
        if (callbacks) {
            // TODO are there situations where events could be dispatched
            // in a server (non-DOM) environment?
            const event = custom_event(type, detail);
            callbacks.slice().forEach(fn => {
                fn.call(component, event);
            });
        }
    };
}
function setContext(key, context) {
    get_current_component().$$.context.set(key, context);
}
const escaped = {
    '"': '&quot;',
    "'": '&#39;',
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;'
};
function escape$1(html) {
    return String(html).replace(/["'&<>]/g, match => escaped[match]);
}
function each(items, fn) {
    let str = '';
    for (let i = 0; i < items.length; i += 1) {
        str += fn(items[i], i);
    }
    return str;
}
const missing_component = {
    $$render: () => ''
};
function validate_component(component, name) {
    if (!component || !component.$$render) {
        if (name === 'svelte:component')
            name += ' this={...}';
        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);
    }
    return component;
}
let on_destroy;
function create_ssr_component(fn) {
    function $$render(result, props, bindings, slots) {
        const parent_component = current_component;
        const $$ = {
            on_destroy,
            context: new Map(parent_component ? parent_component.$$.context : []),
            // these will be immediately discarded
            on_mount: [],
            before_update: [],
            after_update: [],
            callbacks: blank_object()
        };
        set_current_component({ $$ });
        const html = fn(result, props, bindings, slots);
        set_current_component(parent_component);
        return html;
    }
    return {
        render: (props = {}, options = {}) => {
            on_destroy = [];
            const result = { head: '', css: new Set() };
            const html = $$render(result, props, {}, options);
            run_all(on_destroy);
            return {
                html,
                css: {
                    code: Array.from(result.css).map(css => css.code).join('\n'),
                    map: null // TODO
                },
                head: result.head
            };
        },
        $$render
    };
}
function add_attribute(name, value, boolean) {
    if (value == null || (boolean && !value))
        return '';
    return ` ${name}${value === true ? '' : `=${typeof value === 'string' ? JSON.stringify(escape$1(value)) : `"${value}"`}`}`;
}
function add_classes(classes) {
    return classes ? ` class="${classes}"` : ``;
}

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2014-2016 Patrick Gansterer <paroga@paroga.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

var POW_2_24 = 5.960464477539063e-8,
    POW_2_32 = 4294967296,
    POW_2_53 = 9007199254740992;

function encode(value) {
  var data = new ArrayBuffer(256);
  var dataView = new DataView(data);
  var lastLength;
  var offset = 0;

  function prepareWrite(length) {
    var newByteLength = data.byteLength;
    var requiredLength = offset + length;
    while (newByteLength < requiredLength)
      newByteLength <<= 1;
    if (newByteLength !== data.byteLength) {
      var oldDataView = dataView;
      data = new ArrayBuffer(newByteLength);
      dataView = new DataView(data);
      var uint32count = (offset + 3) >> 2;
      for (var i = 0; i < uint32count; ++i)
        dataView.setUint32(i << 2, oldDataView.getUint32(i << 2));
    }

    lastLength = length;
    return dataView;
  }
  function commitWrite() {
    offset += lastLength;
  }
  function writeFloat64(value) {
    commitWrite(prepareWrite(8).setFloat64(offset, value));
  }
  function writeUint8(value) {
    commitWrite(prepareWrite(1).setUint8(offset, value));
  }
  function writeUint8Array(value) {
    var dataView = prepareWrite(value.length);
    for (var i = 0; i < value.length; ++i)
      dataView.setUint8(offset + i, value[i]);
    commitWrite();
  }
  function writeUint16(value) {
    commitWrite(prepareWrite(2).setUint16(offset, value));
  }
  function writeUint32(value) {
    commitWrite(prepareWrite(4).setUint32(offset, value));
  }
  function writeUint64(value) {
    var low = value % POW_2_32;
    var high = (value - low) / POW_2_32;
    var dataView = prepareWrite(8);
    dataView.setUint32(offset, high);
    dataView.setUint32(offset + 4, low);
    commitWrite();
  }
  function writeTypeAndLength(type, length) {
    if (length < 24) {
      writeUint8(type << 5 | length);
    } else if (length < 0x100) {
      writeUint8(type << 5 | 24);
      writeUint8(length);
    } else if (length < 0x10000) {
      writeUint8(type << 5 | 25);
      writeUint16(length);
    } else if (length < 0x100000000) {
      writeUint8(type << 5 | 26);
      writeUint32(length);
    } else {
      writeUint8(type << 5 | 27);
      writeUint64(length);
    }
  }

  function encodeItem(value) {
    var i;

    if (value === false)
      return writeUint8(0xf4);
    if (value === true)
      return writeUint8(0xf5);
    if (value === null)
      return writeUint8(0xf6);
    if (value === undefined)
      return writeUint8(0xf7);

    switch (typeof value) {
      case "number":
        if (Math.floor(value) === value) {
          if (0 <= value && value <= POW_2_53)
            return writeTypeAndLength(0, value);
          if (-POW_2_53 <= value && value < 0)
            return writeTypeAndLength(1, -(value + 1));
        }
        writeUint8(0xfb);
        return writeFloat64(value);

      case "string":
        var utf8data = [];
        for (i = 0; i < value.length; ++i) {
          var charCode = value.charCodeAt(i);
          if (charCode < 0x80) {
            utf8data.push(charCode);
          } else if (charCode < 0x800) {
            utf8data.push(0xc0 | charCode >> 6);
            utf8data.push(0x80 | charCode & 0x3f);
          } else if (charCode < 0xd800) {
            utf8data.push(0xe0 | charCode >> 12);
            utf8data.push(0x80 | (charCode >> 6)  & 0x3f);
            utf8data.push(0x80 | charCode & 0x3f);
          } else {
            charCode = (charCode & 0x3ff) << 10;
            charCode |= value.charCodeAt(++i) & 0x3ff;
            charCode += 0x10000;

            utf8data.push(0xf0 | charCode >> 18);
            utf8data.push(0x80 | (charCode >> 12)  & 0x3f);
            utf8data.push(0x80 | (charCode >> 6)  & 0x3f);
            utf8data.push(0x80 | charCode & 0x3f);
          }
        }

        writeTypeAndLength(3, utf8data.length);
        return writeUint8Array(utf8data);

      default:
        var length;
        if (Array.isArray(value)) {
          length = value.length;
          writeTypeAndLength(4, length);
          for (i = 0; i < length; ++i)
            encodeItem(value[i]);
        } else if (value instanceof Uint8Array) {
          writeTypeAndLength(2, value.length);
          writeUint8Array(value);
        } else {
          var keys = Object.keys(value);
          length = keys.length;
          writeTypeAndLength(5, length);
          for (i = 0; i < length; ++i) {
            var key = keys[i];
            encodeItem(key);
            encodeItem(value[key]);
          }
        }
    }
  }

  encodeItem(value);

  if ("slice" in data)
    return data.slice(0, offset);

  var ret = new ArrayBuffer(offset);
  var retView = new DataView(ret);
  for (var i = 0; i < offset; ++i)
    retView.setUint8(i, dataView.getUint8(i));
  return ret;
}

function decode(data, tagger, simpleValue) {
  var dataView = new DataView(data);
  var offset = 0;

  if (typeof tagger !== "function")
    tagger = function(value) { return value; };
  if (typeof simpleValue !== "function")
    simpleValue = function() { return undefined; };

  function commitRead(length, value) {
    offset += length;
    return value;
  }
  function readArrayBuffer(length) {
    return commitRead(length, new Uint8Array(data, offset, length));
  }
  function readFloat16() {
    var tempArrayBuffer = new ArrayBuffer(4);
    var tempDataView = new DataView(tempArrayBuffer);
    var value = readUint16();

    var sign = value & 0x8000;
    var exponent = value & 0x7c00;
    var fraction = value & 0x03ff;

    if (exponent === 0x7c00)
      exponent = 0xff << 10;
    else if (exponent !== 0)
      exponent += (127 - 15) << 10;
    else if (fraction !== 0)
      return (sign ? -1 : 1) * fraction * POW_2_24;

    tempDataView.setUint32(0, sign << 16 | exponent << 13 | fraction << 13);
    return tempDataView.getFloat32(0);
  }
  function readFloat32() {
    return commitRead(4, dataView.getFloat32(offset));
  }
  function readFloat64() {
    return commitRead(8, dataView.getFloat64(offset));
  }
  function readUint8() {
    return commitRead(1, dataView.getUint8(offset));
  }
  function readUint16() {
    return commitRead(2, dataView.getUint16(offset));
  }
  function readUint32() {
    return commitRead(4, dataView.getUint32(offset));
  }
  function readUint64() {
    return readUint32() * POW_2_32 + readUint32();
  }
  function readBreak() {
    if (dataView.getUint8(offset) !== 0xff)
      return false;
    offset += 1;
    return true;
  }
  function readLength(additionalInformation) {
    if (additionalInformation < 24)
      return additionalInformation;
    if (additionalInformation === 24)
      return readUint8();
    if (additionalInformation === 25)
      return readUint16();
    if (additionalInformation === 26)
      return readUint32();
    if (additionalInformation === 27)
      return readUint64();
    if (additionalInformation === 31)
      return -1;
    throw "Invalid length encoding";
  }
  function readIndefiniteStringLength(majorType) {
    var initialByte = readUint8();
    if (initialByte === 0xff)
      return -1;
    var length = readLength(initialByte & 0x1f);
    if (length < 0 || (initialByte >> 5) !== majorType)
      throw "Invalid indefinite length element";
    return length;
  }

  function appendUtf16Data(utf16data, length) {
    for (var i = 0; i < length; ++i) {
      var value = readUint8();
      if (value & 0x80) {
        if (value < 0xe0) {
          value = (value & 0x1f) <<  6
                | (readUint8() & 0x3f);
          length -= 1;
        } else if (value < 0xf0) {
          value = (value & 0x0f) << 12
                | (readUint8() & 0x3f) << 6
                | (readUint8() & 0x3f);
          length -= 2;
        } else {
          value = (value & 0x0f) << 18
                | (readUint8() & 0x3f) << 12
                | (readUint8() & 0x3f) << 6
                | (readUint8() & 0x3f);
          length -= 3;
        }
      }

      if (value < 0x10000) {
        utf16data.push(value);
      } else {
        value -= 0x10000;
        utf16data.push(0xd800 | (value >> 10));
        utf16data.push(0xdc00 | (value & 0x3ff));
      }
    }
  }

  function decodeItem() {
    var initialByte = readUint8();
    var majorType = initialByte >> 5;
    var additionalInformation = initialByte & 0x1f;
    var i;
    var length;

    if (majorType === 7) {
      switch (additionalInformation) {
        case 25:
          return readFloat16();
        case 26:
          return readFloat32();
        case 27:
          return readFloat64();
      }
    }

    length = readLength(additionalInformation);
    if (length < 0 && (majorType < 2 || 6 < majorType))
      throw "Invalid length";

    switch (majorType) {
      case 0:
        return length;
      case 1:
        return -1 - length;
      case 2:
        if (length < 0) {
          var elements = [];
          var fullArrayLength = 0;
          while ((length = readIndefiniteStringLength(majorType)) >= 0) {
            fullArrayLength += length;
            elements.push(readArrayBuffer(length));
          }
          var fullArray = new Uint8Array(fullArrayLength);
          var fullArrayOffset = 0;
          for (i = 0; i < elements.length; ++i) {
            fullArray.set(elements[i], fullArrayOffset);
            fullArrayOffset += elements[i].length;
          }
          return fullArray;
        }
        return readArrayBuffer(length);
      case 3:
        var utf16data = [];
        if (length < 0) {
          while ((length = readIndefiniteStringLength(majorType)) >= 0)
            appendUtf16Data(utf16data, length);
        } else
          appendUtf16Data(utf16data, length);
        return String.fromCharCode.apply(null, utf16data);
      case 4:
        var retArray;
        if (length < 0) {
          retArray = [];
          while (!readBreak())
            retArray.push(decodeItem());
        } else {
          retArray = new Array(length);
          for (i = 0; i < length; ++i)
            retArray[i] = decodeItem();
        }
        return retArray;
      case 5:
        var retObject = {};
        for (i = 0; i < length || length < 0 && !readBreak(); ++i) {
          var key = decodeItem();
          retObject[key] = decodeItem();
        }
        return retObject;
      case 6:
        return tagger(decodeItem(), length);
      case 7:
        switch (length) {
          case 20:
            return false;
          case 21:
            return true;
          case 22:
            return null;
          case 23:
            return undefined;
          default:
            return simpleValue(length);
        }
    }
  }

  var ret = decodeItem();
  if (offset !== data.byteLength)
    throw "Remaining bytes";
  return ret;
}

const CBOR = { encode: encode, decode: decode };

const API_SERVER_HOST = "https://tsu.gg:3000";
const BLACKLIST = [
  462658994, //포칸지우티비
  484584043, //폭스홀짝
  474785904, //폭스족보단까얏발리
  466083252, //발리폭스원투족보
  468998632, //발리폭스홀짝족보
  468998632, //발리폭스버경족보
  463542108, //포칸투견족보
  480159898, //포칸마카오
  463016486, //포칸금은동이
  480566876, //포칸마카오족보
  462658994, //포칸지우티비
];
async function _fetch(path, params) {
  let res;
  if(this != null && this.fetch != null) 
    res = await this.fetch(path, params);
  /*else if(window != undefined && window.fetch != null)
    return await window.fetch(path);*/
  else
    res = await fetch$1(path, params);
  if(res.status != 200)
    throw res.status;
  else return res;
}
async function fetch_cbor(path) {
  let res = await _fetch(path);
  let body = await res.arrayBuffer();
  return CBOR.decode(body);
}
const API = {
  streamer_map: async function () {
    return (await fetch_cbor(API_SERVER_HOST + "/api/streamer-map")).filter(s => !BLACKLIST.includes(s.id));
  },
  streamer: async function (id) {
    return await fetch_cbor(API_SERVER_HOST + `/api/streamer/${id}`);
  },
  thin_streamers: async function (search_or_ids) {
    if(typeof(search_or_ids) == "string") 
      return await fetch_cbor(API_SERVER_HOST + `/api/thin-streamers?search=${search_or_ids}`);
    else{
      search_or_ids = "ids[]=" + search_or_ids.join("&ids[]=");
      return await fetch_cbor(API_SERVER_HOST + `/api/thin-streamers?${search_or_ids}`);
    }
  },
  timeline: async function (id, from, to) {
    return await fetch_cbor(API_SERVER_HOST + `/api/streamer/${id}/timeline?from=${from.toISOString()}&to=${to.toISOString()}`);
  },
  similar_streamers: async function (id, offset=0) {
    if(!BLACKLIST.includes(id-0))
      return (await fetch_cbor(API_SERVER_HOST + `/api/streamer/${id}/similar-streamers?offset=${offset}`)).filter(s => !BLACKLIST.includes(s.id));
    else
      return (await fetch_cbor(API_SERVER_HOST + `/api/streamer/${id}/similar-streamers?offset=${offset}`)).filter(s => BLACKLIST.includes(s.id));
  },
  stream_ranges: async function (id, from, to) {
    return await fetch_cbor(API_SERVER_HOST + `/api/streamer/${id}/stream-ranges?from=${from.toISOString()}&to=${to.toISOString()}`);
    /*return [
        [new Date() / 1000 - 60*60*29, new Date()/1000 - 60*60*24],
        [new Date() / 1000 - 60*60*23, new Date()/1000 - 60*60*21],
        [new Date() / 1000 - 60*60*5, new Date()/1000 - 60*60*4],
        [new Date() / 1000 - 60*60*2, new Date()/1000 - 60*60],
      ];*/
  },
  comments: async function(id, offset=0) {
    return await fetch_cbor(API_SERVER_HOST + `/api/streamer/${id}/comments?offset=${offset}`);
  },
  write_comment: async function(id, nickname, password, contents, parent_id=null) {
    return await _fetch(API_SERVER_HOST + `/api/streamer/${id}/comments`, {
      method: "POST",
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        nickname: nickname, 
        password: password,
        contents: contents,
        parent_id: parent_id,
      }),
    })
  },
  vote_comment: async function(id, comment_id, upvote) {
    return await _fetch(API_SERVER_HOST + `/api/streamer/${id}/comments`, {
      method: "PATCH",
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        upvote: upvote,
        id: comment_id,
      }),
    });
  },
  fingerprint_hash: async function() {
    return await fetch_cbor(API_SERVER_HOST + '/api/me/fingerprint-hash');
  },
  keywords: async function(id) {
    return await fetch_cbor(API_SERVER_HOST + `/api/streamer/${id}/chatting/keywords`);
  },
  average_subscriber_distribution: async function(id) {
    return await fetch_cbor(API_SERVER_HOST + `/api/streamer/${id}/subscriber/average-distribution`);
  },
  realtime_chatting_speed_streamer_ranking: async function(offset=0) {
    return await fetch_cbor(API_SERVER_HOST + `/api/streamer-ranking/realtime-chatting-speed?offset=${offset}`);
  },
  average_viewer_count_streamer_ranking: async function(offset=0) {
    return await fetch_cbor(API_SERVER_HOST + `/api/streamer-ranking/average-viewer-count?offset=${offset}`);
  },
  streamer_ranking: async function(offset=0, order_by="chatting_speed", desc=true) {
    return (await fetch_cbor(API_SERVER_HOST + `/api/streamer-ranking?offset=${offset}&order_by=${order_by}&desc=${desc}`)).filter(s => !BLACKLIST.includes(s.id));
  },
  viewer_migration_counts: async function(id1, id2, from, to) {
    return await fetch_cbor(API_SERVER_HOST + `/api/viewer-migrations?id1=${id1}&id2=${id2}&from=${from.toISOString()}&to=${to.toISOString()}`);
  },
  viewer_migration_count_ranking: async function(offset) {
    return await fetch_cbor(API_SERVER_HOST + `/api/viewer-migration-ranking?offset=${offset}`);
  },
};

function unwrapExports (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var faQuestion = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, '__esModule', { value: true });
var prefix = 'fas';
var iconName = 'question';
var width = 384;
var height = 512;
var ligatures = [];
var unicode = 'f128';
var svgPathData = 'M202.021 0C122.202 0 70.503 32.703 29.914 91.026c-7.363 10.58-5.093 25.086 5.178 32.874l43.138 32.709c10.373 7.865 25.132 6.026 33.253-4.148 25.049-31.381 43.63-49.449 82.757-49.449 30.764 0 68.816 19.799 68.816 49.631 0 22.552-18.617 34.134-48.993 51.164-35.423 19.86-82.299 44.576-82.299 106.405V320c0 13.255 10.745 24 24 24h72.471c13.255 0 24-10.745 24-24v-5.773c0-42.86 125.268-44.645 125.268-160.627C377.504 66.256 286.902 0 202.021 0zM192 373.459c-38.196 0-69.271 31.075-69.271 69.271 0 38.195 31.075 69.27 69.271 69.27s69.271-31.075 69.271-69.271-31.075-69.27-69.271-69.27z';

exports.definition = {
  prefix: prefix,
  iconName: iconName,
  icon: [
    width,
    height,
    ligatures,
    unicode,
    svgPathData
  ]};

exports.faQuestion = exports.definition;
exports.prefix = prefix;
exports.iconName = iconName;
exports.width = width;
exports.height = height;
exports.ligatures = ligatures;
exports.unicode = unicode;
exports.svgPathData = svgPathData;
});

unwrapExports(faQuestion);
var faQuestion_1 = faQuestion.definition;
var faQuestion_2 = faQuestion.faQuestion;
var faQuestion_3 = faQuestion.prefix;
var faQuestion_4 = faQuestion.iconName;
var faQuestion_5 = faQuestion.width;
var faQuestion_6 = faQuestion.height;
var faQuestion_7 = faQuestion.ligatures;
var faQuestion_8 = faQuestion.unicode;
var faQuestion_9 = faQuestion.svgPathData;

/* src/components/Tip.svelte generated by Svelte v3.12.1 */

const css = {
	code: ".right.tooltip-arrow.svelte-1buxecj{box-shadow:0 3px 6px rgba(0, 0, 0, 0.1);z-index:500;width:max-content}.right.tooltip-arrow.svelte-1buxecj::before{content:\"\";position:absolute;top:0.4rem;right:100%;border-width:6px;border-style:solid;border-color:transparent #000 transparent transparent}.right.tooltip-arrow.svelte-1buxecj::after{content:\"\";position:absolute;top:calc(0.4rem + 1px);right:calc(100% - 1px);border-width:5px;border-style:solid;border-color:transparent #000 transparent transparent}.bottom.tooltip-arrow.svelte-1buxecj{box-shadow:0 3px 6px rgba(0, 0, 0, 0.1);z-index:500;top:150%;right:50%;transform:translate(50%, 0);width:max-content}.bottom.tooltip-arrow.svelte-1buxecj::after{content:\"\";position:absolute;bottom:100%;left:50%;margin-left:-5px;border-width:5px;border-style:solid;border-color:transparent transparent #000 transparent}",
	map: "{\"version\":3,\"file\":\"Tip.svelte\",\"sources\":[\"Tip.svelte\"],\"sourcesContent\":[\"<div class=\\\"relative inline-block align-top\\\" on:mouseover={mouseover} on:mouseout={mouseout} on:click={click} on:touchstart={click} class:cursor-pointer={click}>\\n  <div class=\\\"absolute ml-6 tooltip-arrow bg-black text-white text-xs opacity-75 p-2\\\" class:hidden={!mouse_overed} class:right={position==\\\"right\\\"} class:bottom={position==\\\"bottom\\\"}>\\n    <slot name=\\\"tip\\\"></slot>\\n  </div>\\n  <slot name=\\\"contents\\\">\\n    <svg area-hidden=\\\"true\\\" role=\\\"img\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 {faQuestion.icon[0]} {faQuestion.icon[1]}\\\" class=\\\"w-4 h-4 -mt-1 overflow-visible inline-block\\\">\\n      <path fill=\\\"currentColor\\\" d=\\\"{faQuestion.icon[4]}\\\"/>\\n    </svg>\\n  </slot>\\n</div>\\n\\n<style>\\n.right.tooltip-arrow {\\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.1);\\n  z-index: 500;\\n  width: max-content;\\n}\\n.right.tooltip-arrow::before {\\n  content: \\\"\\\";\\n  position: absolute;\\n  top: 0.4rem;\\n  right: 100%;\\n  border-width: 6px;\\n  border-style: solid;\\n  border-color: transparent #000 transparent transparent;\\n}\\n.right.tooltip-arrow::after {\\n  content: \\\"\\\";\\n  position: absolute;\\n  top: calc(0.4rem + 1px);\\n  right: calc(100% - 1px); \\n  border-width: 5px;\\n  border-style: solid;\\n  border-color: transparent #000 transparent transparent;\\n}\\n\\n.bottom.tooltip-arrow {\\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.1);\\n  z-index: 500;\\n  top: 150%;\\n  right: 50%;\\n  transform: translate(50%, 0);\\n  width: max-content;\\n}\\n.bottom.tooltip-arrow::after {\\n  content: \\\"\\\";\\n  position: absolute;\\n  bottom: 100%;  \\n  left: 50%;\\n  margin-left: -5px;\\n  border-width: 5px;\\n  border-style: solid;\\n  border-color: transparent transparent #000 transparent;\\n}\\n</style>\\n\\n<script>\\nimport { faQuestion as faQuestion } from '@fortawesome/free-solid-svg-icons/faQuestion'\\nlet mouse_overed = false;\\nexport let position = \\\"right\\\";\\nfunction mouseover(){\\n  mouse_overed = true;\\n}\\nfunction mouseout(){\\n  mouse_overed = false;\\n}\\nexport let click = null;\\n</script>\\n\"],\"names\":[],\"mappings\":\"AAYA,MAAM,cAAc,eAAC,CAAC,AACpB,UAAU,CAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CACxC,OAAO,CAAE,GAAG,CACZ,KAAK,CAAE,WAAW,AACpB,CAAC,AACD,MAAM,6BAAc,QAAQ,AAAC,CAAC,AAC5B,OAAO,CAAE,EAAE,CACX,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,MAAM,CACX,KAAK,CAAE,IAAI,CACX,YAAY,CAAE,GAAG,CACjB,YAAY,CAAE,KAAK,CACnB,YAAY,CAAE,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,WAAW,AACxD,CAAC,AACD,MAAM,6BAAc,OAAO,AAAC,CAAC,AAC3B,OAAO,CAAE,EAAE,CACX,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,KAAK,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CACvB,KAAK,CAAE,KAAK,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CACvB,YAAY,CAAE,GAAG,CACjB,YAAY,CAAE,KAAK,CACnB,YAAY,CAAE,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,WAAW,AACxD,CAAC,AAED,OAAO,cAAc,eAAC,CAAC,AACrB,UAAU,CAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CACxC,OAAO,CAAE,GAAG,CACZ,GAAG,CAAE,IAAI,CACT,KAAK,CAAE,GAAG,CACV,SAAS,CAAE,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC,CAC5B,KAAK,CAAE,WAAW,AACpB,CAAC,AACD,OAAO,6BAAc,OAAO,AAAC,CAAC,AAC5B,OAAO,CAAE,EAAE,CACX,QAAQ,CAAE,QAAQ,CAClB,MAAM,CAAE,IAAI,CACZ,IAAI,CAAE,GAAG,CACT,WAAW,CAAE,IAAI,CACjB,YAAY,CAAE,GAAG,CACjB,YAAY,CAAE,KAAK,CACnB,YAAY,CAAE,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,AACxD,CAAC\"}"
};

const Tip = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	let mouse_overed = false;
let { position = "right" } = $$props;
let { click = null } = $$props;

	if ($$props.position === void 0 && $$bindings.position && position !== void 0) $$bindings.position(position);
	if ($$props.click === void 0 && $$bindings.click && click !== void 0) $$bindings.click(click);

	$$result.css.add(css);

	return `<div class="${[`relative inline-block align-top`, click ? "cursor-pointer" : ""].join(' ').trim() }">
	  <div class="${[`absolute ml-6 tooltip-arrow bg-black text-white text-xs opacity-75 p-2 svelte-1buxecj`, !mouse_overed ? "hidden" : "", position=="right" ? "right" : "", position=="bottom" ? "bottom" : ""].join(' ').trim() }">
	    ${$$slots.tip ? $$slots.tip({}) : ``}
	  </div>
	  ${$$slots.contents ? $$slots.contents({}) : `
	    <svg area-hidden="true" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 ${escape$1(faQuestion_2.icon[0])} ${escape$1(faQuestion_2.icon[1])}" class="w-4 h-4 -mt-1 overflow-visible inline-block">
	      <path fill="currentColor"${add_attribute("d", faQuestion_2.icon[4], 0)}></path>
	    </svg>
	  `}
	</div>`;
});

/* src/components/Panel.svelte generated by Svelte v3.12.1 */

const css$1 = {
	code: "@media(min-width: 768px){.panel.svelte-unzc0l{}.contents.svelte-unzc0l{}}.contents.svelte-unzc0l{z-index:2;border-radius:2px}.left.svelte-unzc0l{margin-left:0}.right.svelte-unzc0l{margin-right:0}",
	map: "{\"version\":3,\"file\":\"Panel.svelte\",\"sources\":[\"Panel.svelte\"],\"sourcesContent\":[\"<div class=\\\"{$$props.class} md:p-2 mt-2 mb-2 md:mb-0 border rounded-lg border-gray-600 md:border-none md:rounded-none\\\">\\n<div class=\\\"panel md:bg-white md:border md:shadow w-full\\\" \\n  class:left=\\\"{left}\\\"\\n  class:right=\\\"{right}\\\"\\n  >\\n  <div class=\\\"title-container font-bold md:m-4 m-2 text-lg\\\" class:show=\\\"{title_show || static_title}\\\" on:mouseover={onmouseover} on:mouseleave={onmouseleave}>\\n    <slot name=\\\"title\\\" >\\n    </slot>\\n    {#if tip}\\n      <Tip>\\n        <slot name=\\\"tip\\\">\\n        </slot>\\n      </Tip>\\n    {/if}\\n  </div>\\n  <div class=\\\"overflow-hidden w-full h-full relative contents\\\"\\n     on:mouseover={onmouseover} on:mouseleave={onmouseleave}>\\n    <slot name=\\\"contents\\\">\\n    </slot>\\n  </div>\\n</div>\\n</div>\\n\\n<script>\\nimport Tip from './Tip.svelte';\\n\\nexport let tip = false;\\nexport let static_title =false;\\nexport let left =false;\\nexport let right =false;\\n\\nlet title_show = false;\\nlet timer = null;\\nfunction onmouseover(e) {\\n  title_show = true;\\n  /*  console.log(title_show);\\n  if(timer) {\\n    clearTimeout(timer);\\n    timer = null;\\n  }\\n  timer = setTimeout(()=>{\\n    console.log(title_show);\\n    title_show = false;\\n  }, 1000);*/\\n}\\n\\nfunction onmouseleave(e) {\\n  title_show = false;\\n}\\n</script>\\n\\n\\n<style>\\n/*.title-container {\\n  position: relative;\\n  padding: 0.5rem;\\n}*/\\n/*.title-container.show {\\n  transform: translate(0, -100%);\\n  z-index: 3;\\n}*/\\n/*.panel {\\n  display: inline-block;\\n  position: relative;\\n  height: fit-content;\\n}*/\\n\\n\\n@media (min-width: 768px) { \\n  .panel {\\n  }\\n  .contents {\\n  }\\n}\\n\\n.contents {\\n  z-index: 2;\\n  border-radius: 2px;\\n}\\n.left {\\n  margin-left: 0;\\n}\\n.right {\\n  margin-right: 0;\\n}\\n</style>\\n\"],\"names\":[],\"mappings\":\"AAoEA,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AACzB,MAAM,cAAC,CAAC,AACR,CAAC,AACD,SAAS,cAAC,CAAC,AACX,CAAC,AACH,CAAC,AAED,SAAS,cAAC,CAAC,AACT,OAAO,CAAE,CAAC,CACV,aAAa,CAAE,GAAG,AACpB,CAAC,AACD,KAAK,cAAC,CAAC,AACL,WAAW,CAAE,CAAC,AAChB,CAAC,AACD,MAAM,cAAC,CAAC,AACN,YAAY,CAAE,CAAC,AACjB,CAAC\"}"
};

const Panel = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	let { tip = false, static_title =false, left =false, right =false } = $$props;

let title_show = false;

	if ($$props.tip === void 0 && $$bindings.tip && tip !== void 0) $$bindings.tip(tip);
	if ($$props.static_title === void 0 && $$bindings.static_title && static_title !== void 0) $$bindings.static_title(static_title);
	if ($$props.left === void 0 && $$bindings.left && left !== void 0) $$bindings.left(left);
	if ($$props.right === void 0 && $$bindings.right && right !== void 0) $$bindings.right(right);

	$$result.css.add(css$1);

	return `<div class="${escape$1($$props.class)} md:p-2 mt-2 mb-2 md:mb-0 border rounded-lg border-gray-600 md:border-none md:rounded-none svelte-unzc0l">
	<div class="${[`panel md:bg-white md:border md:shadow w-full svelte-unzc0l`, left ? "left" : "", right ? "right" : ""].join(' ').trim() }">
	  <div class="${[`title-container font-bold md:m-4 m-2 text-lg`, title_show || static_title ? "show" : ""].join(' ').trim() }">
	    ${$$slots.title ? $$slots.title({}) : `
	    `}
	    ${ tip ? `${validate_component(Tip, 'Tip').$$render($$result, {}, {}, {
		default: () => `
	        ${$$slots.tip ? $$slots.tip({}) : `
	        `}
	      `
	})}` : `` }
	  </div>
	  <div class="overflow-hidden w-full h-full relative contents svelte-unzc0l">
	    ${$$slots.contents ? $$slots.contents({}) : `
	    `}
	  </div>
	</div>
	</div>`;
});

function random_hsl_color(min, max, seed) {
  let random;
  if(typeof(seed) == "string")
    random = mulberry32(hash(seed));
  else
    random = mulberry32(seed);
  return 'hsl(' +
    (random() * 360).toFixed() + ',' +
    (random() * 30 + 70).toFixed() + '%,' +
    (random() * (max - min) + min).toFixed() + '%)';
}
function mulberry32(a) {
  return function() {
    var t = a += 0x6D2B79F5;
    t = Math.imul(t ^ t >>> 15, t | 1);
    t ^= t + Math.imul(t ^ t >>> 7, t | 61);
    return ((t ^ t >>> 14) >>> 0) / 4294967296;
  }
}
function hash(seed) {
  let hash = 0, i, chr;
  if (seed.length === 0) return hash;
  for (i = 0; i < seed.length; i++) {
    chr   = seed.charCodeAt(i);
    hash  = ((hash << 5) - hash) + chr;
    hash |= 0; 
  }
  return hash;
}const dark_random_color = (seed) => {
  return random_hsl_color(10, 50, seed);
};



const locales = {
  prefix: '',
  sufix:  '',
  
  seconds: '몇초전',
  minute:  '1분전',
  minutes: '%d분전',
  hour:    '한시간전',
  hours:   '%d시간전',
  day:     '하루전',
  days:    '%d일전',
  month:   '한달전',
  months:  '%d달전',
  year:    '일년전',
  years:   '%d년전'
};

const time_ago = function(time) {
  var seconds = Math.floor((new Date() - time) / 1000),
      separator =  ' ',
      words = locales.prefix + separator,
      interval = 0,
      intervals = {
        year:   seconds / 31536000,
        month:  seconds / 2592000,
        day:    seconds / 86400,
        hour:   seconds / 3600,
        minute: seconds / 60
      };
  
  var distance = locales.seconds;
  
  for (var key in intervals) {
    interval = Math.floor(intervals[key]);
    
    if (interval > 1) {
      distance = locales[key + 's'];
      break;
    } else if (interval === 1) {
      distance = locales[key];
      break;
    }
  }
  
  distance = distance.replace(/%d/i, interval);
  words += distance + separator + locales.sufix;
  return words.trim();
};

const findLastIndex = function(array, predicate) {
    let l = array.length;
    while (l--) {
        if (predicate(array[l], l, array))
            return l;
    }
    return -1;
};

/* src/components/Badges.svelte generated by Svelte v3.12.1 */

const css$2 = {
	code: "li.svelte-oix4tn{font-size:0.5rem}",
	map: "{\"version\":3,\"file\":\"Badges.svelte\",\"sources\":[\"Badges.svelte\"],\"sourcesContent\":[\"<ul class=\\\"{$$props.class} font-bold rounded-lg\\\">\\n  {#if streamer.broadcaster_type == \\\"partner\\\"}\\n    <li class=\\\"py-px mb-1 mr-1 inline-block\\\">\\n      <Tip position=\\\"bottom\\\">\\n        <div slot=\\\"contents\\\">\\n          <img src=\\\"/twitch_glitch.png\\\" alt=\\\"partner\\\" class=\\\"w-3 h-3 inline\\\"/>\\n        </div>\\n        <span slot=\\\"tip\\\">\\n          트위치 파트너 스트리머\\n        </span>\\n      </Tip>\\n    </li>\\n  {/if}\\n  {#if streamer.broadcaster_type == \\\"affiliate\\\"}\\n    <li class=\\\"py-px mb-1 mr-1 inline-block\\\">\\n      <Tip position=\\\"bottom\\\">\\n        <div slot=\\\"contents\\\">\\n          <img src=\\\"/verified_icon.png\\\" alt=\\\"affiliate\\\" class=\\\"w-3 h-3 inline\\\"/>\\n        </div>\\n        <span slot=\\\"tip\\\">\\n          트위치 제휴 스트리머\\n        </span>\\n      </Tip>\\n    </li>\\n  {/if}\\n  {#if 0}\\n  {#if streamer.streaming_hours_per_week >= 56}\\n    <li class=\\\"py-px mb-1 mr-1 inline-block\\\">\\n      <Tip position=\\\"bottom\\\">\\n        <div slot=\\\"contents\\\">\\n          <svg area-hidden=\\\"true\\\" role=\\\"img\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 {faRobot.icon[0]} {faRobot.icon[1]}\\\" class=\\\"w-4 h-4 overflow-visible inline-block\\\">\\n            <path fill=\\\"currentColor\\\" d=\\\"{faRobot.icon[4]}\\\"/>\\n          </svg>\\n        </div>\\n        <span slot=\\\"tip\\\">\\n          로봇 - 이 스트리머는 한 주에 56시간 이상 방송합니다.\\n        </span>\\n      </Tip>\\n    </li>\\n  {/if}\\n  {#if streamer.average_viewer_count >= 10000}\\n    <li class=\\\"py-px mb-1 mr-1 inline-block\\\">\\n      <Tip position=\\\"bottom\\\">\\n        <div slot=\\\"contents\\\">\\n          <svg area-hidden=\\\"true\\\" role=\\\"img\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 {faCity.icon[0]} {faCity.icon[1]}\\\" class=\\\"w-4 h-4 overflow-visible inline-block\\\">\\n            <path fill=\\\"currentColor\\\" d=\\\"{faCity.icon[4]}\\\"/>\\n          </svg>\\n        </div>\\n        <span slot=\\\"tip\\\">\\n          도시 - 이 스트리머의 방송을 평균 만명 이상 시청합니다.\\n        </span>\\n      </Tip>\\n    </li>\\n  {:else if streamer.average_viewer_count >= 1000}\\n    <li class=\\\"py-px mb-1 mr-1 inline-block\\\">\\n      <Tip position=\\\"bottom\\\">\\n        <div slot=\\\"contents\\\">\\n          <svg area-hidden=\\\"true\\\" role=\\\"img\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 {faBuilding.icon[0]} {faBuilding.icon[1]}\\\" class=\\\"w-4 h-4 overflow-visible inline-block\\\">\\n            <path fill=\\\"currentColor\\\" d=\\\"{faBuilding.icon[4]}\\\"/>\\n          </svg>\\n        </div>\\n        <span slot=\\\"tip\\\">\\n          빌딩 - 이 스트리머의 방송을 평균 천명 이상 시청합니다.\\n        </span>\\n      </Tip>\\n    </li>\\n  {:else if streamer.average_viewer_count >= 100}\\n    <li class=\\\"py-px mb-1 mr-1 inline-block\\\">\\n      <Tip position=\\\"bottom\\\">\\n        <div slot=\\\"contents\\\">\\n          <svg area-hidden=\\\"true\\\" role=\\\"img\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 {faHome.icon[0]} {faHome.icon[1]}\\\" class=\\\"w-4 h-4 overflow-visible inline-block\\\">\\n            <path fill=\\\"currentColor\\\" d=\\\"{faHome.icon[4]}\\\"/>\\n          </svg>\\n        </div>\\n        <span slot=\\\"tip\\\">\\n          주택 - 이 스트리머의 방송을 평균 백명 이상 시청합니다.\\n        </span>\\n      </Tip>\\n    </li>\\n  {/if}\\n  {/if}\\n  {#if streamer.is_streaming}\\n    <!--<li class=\\\"py-px mb-1 mr-1 font-bold rounded-lg tracking-tighter inline-block\\\" style=\\\"color: #FF4560;\\\">ON AIR</li>-->\\n  {/if}\\n  {#each badges as badge}\\n    {#if !badge[2]}\\n      <li class=\\\"mb-1 mr-1 inline-block\\\">\\n        <Tip position=\\\"bottom\\\">\\n          <div slot=\\\"contents\\\" class=\\\"px-1 py-px font-bold rounded-lg\\\" style=\\\"color: {badge[1]}; border: 2px solid {badge[1]};\\\">\\n            {badge[0]}\\n          </div>\\n          <span slot=\\\"tip\\\">\\n            {badge[3]}\\n          </span>\\n        </Tip>\\n      </li>\\n    {:else}\\n      <li class=\\\"mb-1 mr-1 inline-block\\\">\\n        <Tip position=\\\"bottom\\\">\\n          <div slot=\\\"contents\\\" class=\\\"px-1 py-px font-bold rounded-lg\\\" style=\\\"color: white; background-color: {badge[1]}; border: 2px solid {badge[1]};\\\">\\n            {badge[0]}\\n          </div>\\n          <span slot=\\\"tip\\\">\\n            {badge[3]}\\n          </span>\\n        </Tip>\\n      </li>\\n    {/if}\\n  {/each}\\n</ul>\\n\\n<script>\\n  import { dark_random_color } from \\\"../util.js\\\";\\n  import { faRobot } from '@fortawesome/free-solid-svg-icons/faRobot';\\n  import { faBuilding } from '@fortawesome/free-solid-svg-icons/faBuilding';\\n  import { faHome } from '@fortawesome/free-solid-svg-icons/faHome';\\n  import { faCity } from '@fortawesome/free-solid-svg-icons/faCity';\\n  import Tip from \\\"./Tip.svelte\\\";\\n  export let streamer; \\n  let last_streamer = null;\\n  let badges = [];\\n  $: if(streamer != last_streamer){\\n    last_streamer = streamer;\\n  }\\n</script>\\n\\n<style>\\n  li {\\n    font-size: 0.5rem;\\n  }\\n</style>\\n\"],\"names\":[],\"mappings\":\"AA+HE,EAAE,cAAC,CAAC,AACF,SAAS,CAAE,MAAM,AACnB,CAAC\"}"
};

const Badges = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	
  let { streamer } = $$props; 
  let badges = [];

	if ($$props.streamer === void 0 && $$bindings.streamer && streamer !== void 0) $$bindings.streamer(streamer);

	$$result.css.add(css$2);

	return `<ul class="${escape$1($$props.class)} font-bold rounded-lg">
	  ${ streamer.broadcaster_type == "partner" ? `<li class="py-px mb-1 mr-1 inline-block svelte-oix4tn">
	      ${validate_component(Tip, 'Tip').$$render($$result, { position: "bottom" }, {}, {
		default: () => `
	        `,
		contents: () => `<div slot="contents">
	          <img src="/twitch_glitch.png" alt="partner" class="w-3 h-3 inline">
	        </div>
	        `,
		tip: () => `<span slot="tip">
	          트위치 파트너 스트리머
	        </span>
	      `
	})}
	    </li>` : `` }
	  ${ streamer.broadcaster_type == "affiliate" ? `<li class="py-px mb-1 mr-1 inline-block svelte-oix4tn">
	      ${validate_component(Tip, 'Tip').$$render($$result, { position: "bottom" }, {}, {
		default: () => `
	        `,
		contents: () => `<div slot="contents">
	          <img src="/verified_icon.png" alt="affiliate" class="w-3 h-3 inline">
	        </div>
	        `,
		tip: () => `<span slot="tip">
	          트위치 제휴 스트리머
	        </span>
	      `
	})}
	    </li>` : `` }
	  ${  `` }
	  ${ streamer.is_streaming ? `` : `` }
	  ${each(badges, (badge) => `${ !badge[2] ? `<li class="mb-1 mr-1 inline-block svelte-oix4tn">
	        ${validate_component(Tip, 'Tip').$$render($$result, { position: "bottom" }, {}, {
		default: () => `
	          `,
		contents: () => `<div slot="contents" class="px-1 py-px font-bold rounded-lg" style="color: ${escape$1(badge[1])}; border: 2px solid ${escape$1(badge[1])};">
	            ${escape$1(badge[0])}
	          </div>
	          `,
		tip: () => `<span slot="tip">
	            ${escape$1(badge[3])}
	          </span>
	        `
	})}
	      </li>` : `<li class="mb-1 mr-1 inline-block svelte-oix4tn">
	        ${validate_component(Tip, 'Tip').$$render($$result, { position: "bottom" }, {}, {
		default: () => `
	          `,
		contents: () => `<div slot="contents" class="px-1 py-px font-bold rounded-lg" style="color: white; background-color: ${escape$1(badge[1])}; border: 2px solid ${escape$1(badge[1])};">
	            ${escape$1(badge[0])}
	          </div>
	          `,
		tip: () => `<span slot="tip">
	            ${escape$1(badge[3])}
	          </span>
	        `
	})}
	      </li>` }`)}
	</ul>`;
});

/* src/components/GameBadges.svelte generated by Svelte v3.12.1 */

const css$3 = {
	code: "li.svelte-1d1rkia{font-size:0.5rem;text-align:center}",
	map: "{\"version\":3,\"file\":\"GameBadges.svelte\",\"sources\":[\"GameBadges.svelte\"],\"sourcesContent\":[\"<ul class=\\\"{$$props.class} font-bold rounded-lg\\\">\\n  {#each badges as badge}\\n    {#if !badge[2]}\\n      <li class=\\\"mb-1 mr-1\\\">\\n        <Tip position=\\\"bottom\\\">\\n          <div slot=\\\"contents\\\" class=\\\"px-1 py-px font-bold rounded-lg truncate\\\" style=\\\"color: {badge[1]}; border: 2px solid {badge[1]}; max-width: 12rem;\\\"\\n                                                                                title=\\\"{badge[0]}\\\">\\n            {badge[0]}\\n          </div>\\n          <span slot=\\\"tip\\\">\\n            {badge[3]}\\n          </span>\\n        </Tip>\\n      </li>\\n    {:else}\\n      <li class=\\\"mb-1 mr-1\\\">\\n        <Tip position=\\\"bottom\\\">\\n          <div slot=\\\"contents\\\" class=\\\"px-1 py-px font-bold rounded-lg truncate\\\" style=\\\"color: white; background-color: {badge[1]}; border: 2px solid {badge[1]}; max-width: 12rem;\\\"\\n                                                                                title=\\\"{badge[0]}\\\">\\n            {badge[0]}\\n          </div>\\n          <span slot=\\\"tip\\\">\\n            {badge[3]}\\n          </span>\\n        </Tip>\\n      </li>\\n    {/if}\\n  {/each}\\n</ul>\\n\\n<script>\\n  import { dark_random_color } from \\\"../util.js\\\";\\n  import Tip from \\\"./Tip.svelte\\\";\\n  export let streamer; \\n  let last_streamer = null;\\n  let badges = [];\\n  $: if(streamer != last_streamer){\\n    last_streamer = streamer;\\n    badges = [];\\n    if(streamer.primary_game_name)\\n      badges.push([streamer.primary_game_name, dark_random_color(streamer.primary_game_id), 1, \\\"가장 많이하는 컨텐츠\\\"]);\\n    if(streamer.secondary_game_name)\\n      badges.push([streamer.secondary_game_name, dark_random_color(streamer.secondary_game_id), 1, \\\"두번째로 많이하는 컨텐츠\\\"]);\\n    badges = badges;\\n  }\\n</script>\\n\\n<style>\\n  li {\\n    font-size: 0.5rem;\\n    /* white-space: normal;*/\\n    text-align: center;\\n  }\\n</style>\\n\"],\"names\":[],\"mappings\":\"AAgDE,EAAE,eAAC,CAAC,AACF,SAAS,CAAE,MAAM,CAEjB,UAAU,CAAE,MAAM,AACpB,CAAC\"}"
};

const GameBadges = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	
  let { streamer } = $$props; 
  let last_streamer = null;
  let badges = [];

	if ($$props.streamer === void 0 && $$bindings.streamer && streamer !== void 0) $$bindings.streamer(streamer);

	$$result.css.add(css$3);

	if(streamer != last_streamer){
        last_streamer = streamer;
        badges = [];
        if(streamer.primary_game_name)
          badges.push([streamer.primary_game_name, dark_random_color(streamer.primary_game_id), 1, "가장 많이하는 컨텐츠"]);
        if(streamer.secondary_game_name)
          badges.push([streamer.secondary_game_name, dark_random_color(streamer.secondary_game_id), 1, "두번째로 많이하는 컨텐츠"]);
        badges = badges;
      }

	return `<ul class="${escape$1($$props.class)} font-bold rounded-lg">
	  ${each(badges, (badge) => `${ !badge[2] ? `<li class="mb-1 mr-1 svelte-1d1rkia">
	        ${validate_component(Tip, 'Tip').$$render($$result, { position: "bottom" }, {}, {
		default: () => `
	          `,
		contents: () => `<div slot="contents" class="px-1 py-px font-bold rounded-lg truncate" style="color: ${escape$1(badge[1])}; border: 2px solid ${escape$1(badge[1])}; max-width: 12rem;"${add_attribute("title", badge[0], 0)}>
	            ${escape$1(badge[0])}
	          </div>
	          `,
		tip: () => `<span slot="tip">
	            ${escape$1(badge[3])}
	          </span>
	        `
	})}
	      </li>` : `<li class="mb-1 mr-1 svelte-1d1rkia">
	        ${validate_component(Tip, 'Tip').$$render($$result, { position: "bottom" }, {}, {
		default: () => `
	          `,
		contents: () => `<div slot="contents" class="px-1 py-px font-bold rounded-lg truncate" style="color: white; background-color: ${escape$1(badge[1])}; border: 2px solid ${escape$1(badge[1])}; max-width: 12rem;"${add_attribute("title", badge[0], 0)}>
	            ${escape$1(badge[0])}
	          </div>
	          `,
		tip: () => `<span slot="tip">
	            ${escape$1(badge[3])}
	          </span>
	        `
	})}
	      </li>` }`)}
	</ul>`;
});

/* src/components/FaIcon.svelte generated by Svelte v3.12.1 */

const FaIcon = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	let { icon } = $$props;

	if ($$props.icon === void 0 && $$bindings.icon && icon !== void 0) $$bindings.icon(icon);

	return `<svg area-hidden="true" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 ${escape$1(icon.icon[0])} ${escape$1(icon.icon[1])}" class="${escape$1($$props.class)} overflow-visible inline-block"${add_attribute("style", $$props.style, 0)}>
	  <path fill="currentColor"${add_attribute("d", icon.icon[4], 0)}></path>
	</svg>`;
});

/* src/components/StreamerAutoComplete.svelte generated by Svelte v3.12.1 */

let next_id=0;
const local_storage_recent_search_key = 'streamer-auto-complete-recent-search-history';
function load_recent_search(id){
  return JSON.parse(localStorage.getItem(local_storage_recent_search_key + id)) || [];
}

const StreamerAutoComplete = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	

  let { streamers = [], selected = null, placeholder = "", onselect = (e)=>{} } = $$props;
  let { inputid = "", input_class = "border rounded focus:outline-none md:w-48 w-32 text-sm leading-loose pr-5 transition-all focus:outline-0 border border-transparent focus:bg-white focus:border-primary-600 placeholder-gray-600 rounded-lg  bg-primary-100 pl-7", icon = true, id = next_id++, autocomplete_class = "md:w-48 w-32", icon_class = "w-3 h-3" } = $$props;
  
  
  let input_element;
  let { input_value="" } = $$props;
  let filtered_streamers = [];
  let recent_search_history = [];

  onMount(()=>{
    recent_search_history = load_recent_search(id);
    recent_search_history = recent_search_history.map(r => streamers.find(s => s.id == r.id) || r);
  });

	if ($$props.streamers === void 0 && $$bindings.streamers && streamers !== void 0) $$bindings.streamers(streamers);
	if ($$props.selected === void 0 && $$bindings.selected && selected !== void 0) $$bindings.selected(selected);
	if ($$props.placeholder === void 0 && $$bindings.placeholder && placeholder !== void 0) $$bindings.placeholder(placeholder);
	if ($$props.onselect === void 0 && $$bindings.onselect && onselect !== void 0) $$bindings.onselect(onselect);
	if ($$props.inputid === void 0 && $$bindings.inputid && inputid !== void 0) $$bindings.inputid(inputid);
	if ($$props.input_class === void 0 && $$bindings.input_class && input_class !== void 0) $$bindings.input_class(input_class);
	if ($$props.icon === void 0 && $$bindings.icon && icon !== void 0) $$bindings.icon(icon);
	if ($$props.id === void 0 && $$bindings.id && id !== void 0) $$bindings.id(id);
	if ($$props.autocomplete_class === void 0 && $$bindings.autocomplete_class && autocomplete_class !== void 0) $$bindings.autocomplete_class(autocomplete_class);
	if ($$props.icon_class === void 0 && $$bindings.icon_class && icon_class !== void 0) $$bindings.icon_class(icon_class);
	if ($$props.input_value === void 0 && $$bindings.input_value && input_value !== void 0) $$bindings.input_value(input_value);

	return `<div class="inline-block relative ${escape$1($$props.class)}">
	  <input${add_attribute("placeholder", placeholder, 0)}${add_attribute("id", inputid, 0)}${add_attribute("class", input_class, 0)}${add_attribute("value", input_value, 1)}${add_attribute("this", input_element, 1)}>
	  ${ icon === true ? `<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 56.966 56.966" xml:space="preserve" width="512px" height="512px" id="Capa_1" class="${escape$1(icon_class)} text-gray-600 fill-current absolute" style="enable-background:new 0 0 56.966 56.966; top: 50%; transform: translateY(-50%); left: 0.6rem;">
	        <path d="M55.146,51.887L41.588,37.786c3.486-4.144,5.396-9.358,5.396-14.786c0-12.682-10.318-23-23-23s-23,10.318-23,23  s10.318,23,23,23c4.761,0,9.298-1.436,13.177-4.162l13.661,14.208c0.571,0.593,1.339,0.92,2.162,0.92  c0.779,0,1.518-0.297,2.079-0.837C56.255,54.982,56.293,53.08,55.146,51.887z M23.984,6c9.374,0,17,7.626,17,17s-7.626,17-17,17  s-17-7.626-17-17S14.61,6,23.984,6z"></path>
	  </svg>` : `` }
	  <ul class="${[`absolute bg-white z-50`,  "hidden" ].join(' ').trim() }">
	    ${ !input_value && recent_search_history ? `${each(recent_search_history, (streamer) => `<li class="md:w-48 w-32 px-2 py-2 hover:bg-purple-500 hover:text-white text-black flex flex-row items-center truncate bg-white flex-wrap">
	          <img class="rounded-full h-8 w-8"${add_attribute("src", streamer.profile_image_url, 0)}>
	          <div class="px-2"><span>${escape$1(streamer.name)}</span></div>
	        </li>
	        <button style="line-height: 1rem" class="absolute right-0 w-4 h-4 text-center -mr-6 -mt-8 text-gray-800 bg-white rounded-full">🞩</button>`)}` : `${each(filtered_streamers, (streamer) => `<li class="${escape$1(autocomplete_class)} px-2 py-2 hover:bg-purple-500 hover:text-white text-black flex flex-row items-center truncate bg-white">
	          <img class="rounded-full h-8 w-8"${add_attribute("src", streamer.profile_image_url, 0)}>
	          <div class="px-2"><span>${escape$1(streamer._left)}</span><span class="text-red-500">${escape$1(streamer._center)}</span><span>${escape$1(streamer._right)}</span></div>
	        </li>`)}` }
	  </ul>
	</div>`;
});

var faComment = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, '__esModule', { value: true });
var prefix = 'fas';
var iconName = 'comment';
var width = 512;
var height = 512;
var ligatures = [];
var unicode = 'f075';
var svgPathData = 'M256 32C114.6 32 0 125.1 0 240c0 49.6 21.4 95 57 130.7C44.5 421.1 2.7 466 2.2 466.5c-2.2 2.3-2.8 5.7-1.5 8.7S4.8 480 8 480c66.3 0 116-31.8 140.6-51.4 32.7 12.3 69 19.4 107.4 19.4 141.4 0 256-93.1 256-208S397.4 32 256 32z';

exports.definition = {
  prefix: prefix,
  iconName: iconName,
  icon: [
    width,
    height,
    ligatures,
    unicode,
    svgPathData
  ]};

exports.faComment = exports.definition;
exports.prefix = prefix;
exports.iconName = iconName;
exports.width = width;
exports.height = height;
exports.ligatures = ligatures;
exports.unicode = unicode;
exports.svgPathData = svgPathData;
});

unwrapExports(faComment);
var faComment_1 = faComment.definition;
var faComment_2 = faComment.faComment;
var faComment_3 = faComment.prefix;
var faComment_4 = faComment.iconName;
var faComment_5 = faComment.width;
var faComment_6 = faComment.height;
var faComment_7 = faComment.ligatures;
var faComment_8 = faComment.unicode;
var faComment_9 = faComment.svgPathData;

var faKey = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, '__esModule', { value: true });
var prefix = 'fas';
var iconName = 'key';
var width = 512;
var height = 512;
var ligatures = [];
var unicode = 'f084';
var svgPathData = 'M512 176.001C512 273.203 433.202 352 336 352c-11.22 0-22.19-1.062-32.827-3.069l-24.012 27.014A23.999 23.999 0 0 1 261.223 384H224v40c0 13.255-10.745 24-24 24h-40v40c0 13.255-10.745 24-24 24H24c-13.255 0-24-10.745-24-24v-78.059c0-6.365 2.529-12.47 7.029-16.971l161.802-161.802C163.108 213.814 160 195.271 160 176 160 78.798 238.797.001 335.999 0 433.488-.001 512 78.511 512 176.001zM336 128c0 26.51 21.49 48 48 48s48-21.49 48-48-21.49-48-48-48-48 21.49-48 48z';

exports.definition = {
  prefix: prefix,
  iconName: iconName,
  icon: [
    width,
    height,
    ligatures,
    unicode,
    svgPathData
  ]};

exports.faKey = exports.definition;
exports.prefix = prefix;
exports.iconName = iconName;
exports.width = width;
exports.height = height;
exports.ligatures = ligatures;
exports.unicode = unicode;
exports.svgPathData = svgPathData;
});

unwrapExports(faKey);
var faKey_1 = faKey.definition;
var faKey_2 = faKey.faKey;
var faKey_3 = faKey.prefix;
var faKey_4 = faKey.iconName;
var faKey_5 = faKey.width;
var faKey_6 = faKey.height;
var faKey_7 = faKey.ligatures;
var faKey_8 = faKey.unicode;
var faKey_9 = faKey.svgPathData;

var faUser = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, '__esModule', { value: true });
var prefix = 'fas';
var iconName = 'user';
var width = 448;
var height = 512;
var ligatures = [];
var unicode = 'f007';
var svgPathData = 'M224 256c70.7 0 128-57.3 128-128S294.7 0 224 0 96 57.3 96 128s57.3 128 128 128zm89.6 32h-16.7c-22.2 10.2-46.9 16-72.9 16s-50.6-5.8-72.9-16h-16.7C60.2 288 0 348.2 0 422.4V464c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48v-41.6c0-74.2-60.2-134.4-134.4-134.4z';

exports.definition = {
  prefix: prefix,
  iconName: iconName,
  icon: [
    width,
    height,
    ligatures,
    unicode,
    svgPathData
  ]};

exports.faUser = exports.definition;
exports.prefix = prefix;
exports.iconName = iconName;
exports.width = width;
exports.height = height;
exports.ligatures = ligatures;
exports.unicode = unicode;
exports.svgPathData = svgPathData;
});

unwrapExports(faUser);
var faUser_1 = faUser.definition;
var faUser_2 = faUser.faUser;
var faUser_3 = faUser.prefix;
var faUser_4 = faUser.iconName;
var faUser_5 = faUser.width;
var faUser_6 = faUser.height;
var faUser_7 = faUser.ligatures;
var faUser_8 = faUser.unicode;
var faUser_9 = faUser.svgPathData;

var faUserClock = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, '__esModule', { value: true });
var prefix = 'fas';
var iconName = 'user-clock';
var width = 640;
var height = 512;
var ligatures = [];
var unicode = 'f4fd';
var svgPathData = 'M496 224c-79.6 0-144 64.4-144 144s64.4 144 144 144 144-64.4 144-144-64.4-144-144-144zm64 150.3c0 5.3-4.4 9.7-9.7 9.7h-60.6c-5.3 0-9.7-4.4-9.7-9.7v-76.6c0-5.3 4.4-9.7 9.7-9.7h12.6c5.3 0 9.7 4.4 9.7 9.7V352h38.3c5.3 0 9.7 4.4 9.7 9.7v12.6zM320 368c0-27.8 6.7-54.1 18.2-77.5-8-1.5-16.2-2.5-24.6-2.5h-16.7c-22.2 10.2-46.9 16-72.9 16s-50.6-5.8-72.9-16h-16.7C60.2 288 0 348.2 0 422.4V464c0 26.5 21.5 48 48 48h347.1c-45.3-31.9-75.1-84.5-75.1-144zm-96-112c70.7 0 128-57.3 128-128S294.7 0 224 0 96 57.3 96 128s57.3 128 128 128z';

exports.definition = {
  prefix: prefix,
  iconName: iconName,
  icon: [
    width,
    height,
    ligatures,
    unicode,
    svgPathData
  ]};

exports.faUserClock = exports.definition;
exports.prefix = prefix;
exports.iconName = iconName;
exports.width = width;
exports.height = height;
exports.ligatures = ligatures;
exports.unicode = unicode;
exports.svgPathData = svgPathData;
});

unwrapExports(faUserClock);
var faUserClock_1 = faUserClock.definition;
var faUserClock_2 = faUserClock.faUserClock;
var faUserClock_3 = faUserClock.prefix;
var faUserClock_4 = faUserClock.iconName;
var faUserClock_5 = faUserClock.width;
var faUserClock_6 = faUserClock.height;
var faUserClock_7 = faUserClock.ligatures;
var faUserClock_8 = faUserClock.unicode;
var faUserClock_9 = faUserClock.svgPathData;

var faUserLock = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, '__esModule', { value: true });
var prefix = 'fas';
var iconName = 'user-lock';
var width = 640;
var height = 512;
var ligatures = [];
var unicode = 'f502';
var svgPathData = 'M224 256A128 128 0 1 0 96 128a128 128 0 0 0 128 128zm96 64a63.08 63.08 0 0 1 8.1-30.5c-4.8-.5-9.5-1.5-14.5-1.5h-16.7a174.08 174.08 0 0 1-145.8 0h-16.7A134.43 134.43 0 0 0 0 422.4V464a48 48 0 0 0 48 48h280.9a63.54 63.54 0 0 1-8.9-32zm288-32h-32v-80a80 80 0 0 0-160 0v80h-32a32 32 0 0 0-32 32v160a32 32 0 0 0 32 32h224a32 32 0 0 0 32-32V320a32 32 0 0 0-32-32zM496 432a32 32 0 1 1 32-32 32 32 0 0 1-32 32zm32-144h-64v-80a32 32 0 0 1 64 0z';

exports.definition = {
  prefix: prefix,
  iconName: iconName,
  icon: [
    width,
    height,
    ligatures,
    unicode,
    svgPathData
  ]};

exports.faUserLock = exports.definition;
exports.prefix = prefix;
exports.iconName = iconName;
exports.width = width;
exports.height = height;
exports.ligatures = ligatures;
exports.unicode = unicode;
exports.svgPathData = svgPathData;
});

unwrapExports(faUserLock);
var faUserLock_1 = faUserLock.definition;
var faUserLock_2 = faUserLock.faUserLock;
var faUserLock_3 = faUserLock.prefix;
var faUserLock_4 = faUserLock.iconName;
var faUserLock_5 = faUserLock.width;
var faUserLock_6 = faUserLock.height;
var faUserLock_7 = faUserLock.ligatures;
var faUserLock_8 = faUserLock.unicode;
var faUserLock_9 = faUserLock.svgPathData;

var faHourglassHalf = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, '__esModule', { value: true });
var prefix = 'fas';
var iconName = 'hourglass-half';
var width = 384;
var height = 512;
var ligatures = [];
var unicode = 'f252';
var svgPathData = 'M360 0H24C10.745 0 0 10.745 0 24v16c0 13.255 10.745 24 24 24 0 90.965 51.016 167.734 120.842 192C75.016 280.266 24 357.035 24 448c-13.255 0-24 10.745-24 24v16c0 13.255 10.745 24 24 24h336c13.255 0 24-10.745 24-24v-16c0-13.255-10.745-24-24-24 0-90.965-51.016-167.734-120.842-192C308.984 231.734 360 154.965 360 64c13.255 0 24-10.745 24-24V24c0-13.255-10.745-24-24-24zm-75.078 384H99.08c17.059-46.797 52.096-80 92.92-80 40.821 0 75.862 33.196 92.922 80zm.019-256H99.078C91.988 108.548 88 86.748 88 64h208c0 22.805-3.987 44.587-11.059 64z';

exports.definition = {
  prefix: prefix,
  iconName: iconName,
  icon: [
    width,
    height,
    ligatures,
    unicode,
    svgPathData
  ]};

exports.faHourglassHalf = exports.definition;
exports.prefix = prefix;
exports.iconName = iconName;
exports.width = width;
exports.height = height;
exports.ligatures = ligatures;
exports.unicode = unicode;
exports.svgPathData = svgPathData;
});

unwrapExports(faHourglassHalf);
var faHourglassHalf_1 = faHourglassHalf.definition;
var faHourglassHalf_2 = faHourglassHalf.faHourglassHalf;
var faHourglassHalf_3 = faHourglassHalf.prefix;
var faHourglassHalf_4 = faHourglassHalf.iconName;
var faHourglassHalf_5 = faHourglassHalf.width;
var faHourglassHalf_6 = faHourglassHalf.height;
var faHourglassHalf_7 = faHourglassHalf.ligatures;
var faHourglassHalf_8 = faHourglassHalf.unicode;
var faHourglassHalf_9 = faHourglassHalf.svgPathData;

var faHistory = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, '__esModule', { value: true });
var prefix = 'fas';
var iconName = 'history';
var width = 512;
var height = 512;
var ligatures = [];
var unicode = 'f1da';
var svgPathData = 'M504 255.531c.253 136.64-111.18 248.372-247.82 248.468-59.015.042-113.223-20.53-155.822-54.911-11.077-8.94-11.905-25.541-1.839-35.607l11.267-11.267c8.609-8.609 22.353-9.551 31.891-1.984C173.062 425.135 212.781 440 256 440c101.705 0 184-82.311 184-184 0-101.705-82.311-184-184-184-48.814 0-93.149 18.969-126.068 49.932l50.754 50.754c10.08 10.08 2.941 27.314-11.313 27.314H24c-8.837 0-16-7.163-16-16V38.627c0-14.254 17.234-21.393 27.314-11.314l49.372 49.372C129.209 34.136 189.552 8 256 8c136.81 0 247.747 110.78 248 247.531zm-180.912 78.784l9.823-12.63c8.138-10.463 6.253-25.542-4.21-33.679L288 256.349V152c0-13.255-10.745-24-24-24h-16c-13.255 0-24 10.745-24 24v135.651l65.409 50.874c10.463 8.137 25.541 6.253 33.679-4.21z';

exports.definition = {
  prefix: prefix,
  iconName: iconName,
  icon: [
    width,
    height,
    ligatures,
    unicode,
    svgPathData
  ]};

exports.faHistory = exports.definition;
exports.prefix = prefix;
exports.iconName = iconName;
exports.width = width;
exports.height = height;
exports.ligatures = ligatures;
exports.unicode = unicode;
exports.svgPathData = svgPathData;
});

unwrapExports(faHistory);
var faHistory_1 = faHistory.definition;
var faHistory_2 = faHistory.faHistory;
var faHistory_3 = faHistory.prefix;
var faHistory_4 = faHistory.iconName;
var faHistory_5 = faHistory.width;
var faHistory_6 = faHistory.height;
var faHistory_7 = faHistory.ligatures;
var faHistory_8 = faHistory.unicode;
var faHistory_9 = faHistory.svgPathData;

var faDollarSign = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, '__esModule', { value: true });
var prefix = 'fas';
var iconName = 'dollar-sign';
var width = 288;
var height = 512;
var ligatures = [];
var unicode = 'f155';
var svgPathData = 'M209.2 233.4l-108-31.6C88.7 198.2 80 186.5 80 173.5c0-16.3 13.2-29.5 29.5-29.5h66.3c12.2 0 24.2 3.7 34.2 10.5 6.1 4.1 14.3 3.1 19.5-2l34.8-34c7.1-6.9 6.1-18.4-1.8-24.5C238 74.8 207.4 64.1 176 64V16c0-8.8-7.2-16-16-16h-32c-8.8 0-16 7.2-16 16v48h-2.5C45.8 64-5.4 118.7.5 183.6c4.2 46.1 39.4 83.6 83.8 96.6l102.5 30c12.5 3.7 21.2 15.3 21.2 28.3 0 16.3-13.2 29.5-29.5 29.5h-66.3C100 368 88 364.3 78 357.5c-6.1-4.1-14.3-3.1-19.5 2l-34.8 34c-7.1 6.9-6.1 18.4 1.8 24.5 24.5 19.2 55.1 29.9 86.5 30v48c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16v-48.2c46.6-.9 90.3-28.6 105.7-72.7 21.5-61.6-14.6-124.8-72.5-141.7z';

exports.definition = {
  prefix: prefix,
  iconName: iconName,
  icon: [
    width,
    height,
    ligatures,
    unicode,
    svgPathData
  ]};

exports.faDollarSign = exports.definition;
exports.prefix = prefix;
exports.iconName = iconName;
exports.width = width;
exports.height = height;
exports.ligatures = ligatures;
exports.unicode = unicode;
exports.svgPathData = svgPathData;
});

unwrapExports(faDollarSign);
var faDollarSign_1 = faDollarSign.definition;
var faDollarSign_2 = faDollarSign.faDollarSign;
var faDollarSign_3 = faDollarSign.prefix;
var faDollarSign_4 = faDollarSign.iconName;
var faDollarSign_5 = faDollarSign.width;
var faDollarSign_6 = faDollarSign.height;
var faDollarSign_7 = faDollarSign.ligatures;
var faDollarSign_8 = faDollarSign.unicode;
var faDollarSign_9 = faDollarSign.svgPathData;

var faStar = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, '__esModule', { value: true });
var prefix = 'fas';
var iconName = 'star';
var width = 576;
var height = 512;
var ligatures = [];
var unicode = 'f005';
var svgPathData = 'M259.3 17.8L194 150.2 47.9 171.5c-26.2 3.8-36.7 36.1-17.7 54.6l105.7 103-25 145.5c-4.5 26.3 23.2 46 46.4 33.7L288 439.6l130.7 68.7c23.2 12.2 50.9-7.4 46.4-33.7l-25-145.5 105.7-103c19-18.5 8.5-50.8-17.7-54.6L382 150.2 316.7 17.8c-11.7-23.6-45.6-23.9-57.4 0z';

exports.definition = {
  prefix: prefix,
  iconName: iconName,
  icon: [
    width,
    height,
    ligatures,
    unicode,
    svgPathData
  ]};

exports.faStar = exports.definition;
exports.prefix = prefix;
exports.iconName = iconName;
exports.width = width;
exports.height = height;
exports.ligatures = ligatures;
exports.unicode = unicode;
exports.svgPathData = svgPathData;
});

unwrapExports(faStar);
var faStar_1 = faStar.definition;
var faStar_2 = faStar.faStar;
var faStar_3 = faStar.prefix;
var faStar_4 = faStar.iconName;
var faStar_5 = faStar.width;
var faStar_6 = faStar.height;
var faStar_7 = faStar.ligatures;
var faStar_8 = faStar.unicode;
var faStar_9 = faStar.svgPathData;

var faExchangeAlt = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, '__esModule', { value: true });
var prefix = 'fas';
var iconName = 'exchange-alt';
var width = 512;
var height = 512;
var ligatures = [];
var unicode = 'f362';
var svgPathData = 'M0 168v-16c0-13.255 10.745-24 24-24h360V80c0-21.367 25.899-32.042 40.971-16.971l80 80c9.372 9.373 9.372 24.569 0 33.941l-80 80C409.956 271.982 384 261.456 384 240v-48H24c-13.255 0-24-10.745-24-24zm488 152H128v-48c0-21.314-25.862-32.08-40.971-16.971l-80 80c-9.372 9.373-9.372 24.569 0 33.941l80 80C102.057 463.997 128 453.437 128 432v-48h360c13.255 0 24-10.745 24-24v-16c0-13.255-10.745-24-24-24z';

exports.definition = {
  prefix: prefix,
  iconName: iconName,
  icon: [
    width,
    height,
    ligatures,
    unicode,
    svgPathData
  ]};

exports.faExchangeAlt = exports.definition;
exports.prefix = prefix;
exports.iconName = iconName;
exports.width = width;
exports.height = height;
exports.ligatures = ligatures;
exports.unicode = unicode;
exports.svgPathData = svgPathData;
});

unwrapExports(faExchangeAlt);
var faExchangeAlt_1 = faExchangeAlt.definition;
var faExchangeAlt_2 = faExchangeAlt.faExchangeAlt;
var faExchangeAlt_3 = faExchangeAlt.prefix;
var faExchangeAlt_4 = faExchangeAlt.iconName;
var faExchangeAlt_5 = faExchangeAlt.width;
var faExchangeAlt_6 = faExchangeAlt.height;
var faExchangeAlt_7 = faExchangeAlt.ligatures;
var faExchangeAlt_8 = faExchangeAlt.unicode;
var faExchangeAlt_9 = faExchangeAlt.svgPathData;

var faCaretUp = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, '__esModule', { value: true });
var prefix = 'fas';
var iconName = 'caret-up';
var width = 320;
var height = 512;
var ligatures = [];
var unicode = 'f0d8';
var svgPathData = 'M288.662 352H31.338c-17.818 0-26.741-21.543-14.142-34.142l128.662-128.662c7.81-7.81 20.474-7.81 28.284 0l128.662 128.662c12.6 12.599 3.676 34.142-14.142 34.142z';

exports.definition = {
  prefix: prefix,
  iconName: iconName,
  icon: [
    width,
    height,
    ligatures,
    unicode,
    svgPathData
  ]};

exports.faCaretUp = exports.definition;
exports.prefix = prefix;
exports.iconName = iconName;
exports.width = width;
exports.height = height;
exports.ligatures = ligatures;
exports.unicode = unicode;
exports.svgPathData = svgPathData;
});

unwrapExports(faCaretUp);
var faCaretUp_1 = faCaretUp.definition;
var faCaretUp_2 = faCaretUp.faCaretUp;
var faCaretUp_3 = faCaretUp.prefix;
var faCaretUp_4 = faCaretUp.iconName;
var faCaretUp_5 = faCaretUp.width;
var faCaretUp_6 = faCaretUp.height;
var faCaretUp_7 = faCaretUp.ligatures;
var faCaretUp_8 = faCaretUp.unicode;
var faCaretUp_9 = faCaretUp.svgPathData;

var faCaretDown = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, '__esModule', { value: true });
var prefix = 'fas';
var iconName = 'caret-down';
var width = 320;
var height = 512;
var ligatures = [];
var unicode = 'f0d7';
var svgPathData = 'M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z';

exports.definition = {
  prefix: prefix,
  iconName: iconName,
  icon: [
    width,
    height,
    ligatures,
    unicode,
    svgPathData
  ]};

exports.faCaretDown = exports.definition;
exports.prefix = prefix;
exports.iconName = iconName;
exports.width = width;
exports.height = height;
exports.ligatures = ligatures;
exports.unicode = unicode;
exports.svgPathData = svgPathData;
});

unwrapExports(faCaretDown);
var faCaretDown_1 = faCaretDown.definition;
var faCaretDown_2 = faCaretDown.faCaretDown;
var faCaretDown_3 = faCaretDown.prefix;
var faCaretDown_4 = faCaretDown.iconName;
var faCaretDown_5 = faCaretDown.width;
var faCaretDown_6 = faCaretDown.height;
var faCaretDown_7 = faCaretDown.ligatures;
var faCaretDown_8 = faCaretDown.unicode;
var faCaretDown_9 = faCaretDown.svgPathData;

/* src/routes/index.svelte generated by Svelte v3.12.1 */

const css$4 = {
	code: "@media(min-width: 768px){.streamer-ranking.svelte-1lmtari tbody td.svelte-1lmtari{padding:0.5rem 0.25rem;padding-top:1.0rem;padding-bottom:1.0rem;text-align:center}.streamer-ranking.svelte-1lmtari thead th.svelte-1lmtari{padding-left:1rem;padding-right:1rem;padding-bottom:.5rem;padding-top:.5rem}}.streamer-ranking.svelte-1lmtari tbody td.svelte-1lmtari{padding:0.5rem 0.25rem;padding-top:1.0rem;padding-bottom:1.0rem;text-align:center}.streamer-ranking.svelte-1lmtari thead th.svelte-1lmtari{padding-left:0.5rem;padding-right:0.5rem;padding-bottom:.5rem;padding-top:.5rem}.streamer-ranking.svelte-1lmtari tbody tr td.svelte-1lmtari:last-child{padding-right:1rem}.streamer-ranking.svelte-1lmtari .ordered.svelte-1lmtari{border-bottom-width:2px}",
	map: "{\"version\":3,\"file\":\"index.svelte\",\"sources\":[\"index.svelte\"],\"sourcesContent\":[\"<svelte:head>\\n\\t<title>스트리머 순위 - 트수gg</title>\\n</svelte:head>\\n\\n<svg class=\\\"hidden\\\">\\n</svg>\\n<div class=\\\"flex flex-col md:items-start items-stretch container m-auto w-full\\\">\\n  <div class=\\\"pt-10 pb-2 m-auto\\\">\\n    <StreamerAutoComplete bind:onselect={on_streamer_search} \\n          placeholder=\\\"스트리머 검색\\\" \\n          inputid=\\\"streamer-search-input\\\" \\n          id=\\\"navigation-streamer-search\\\"\\n          class=\\\"w-full md:w-128\\\"\\n          input_class=\\\"border w-full text-normal p-6 px-7 py-4 pl-10 bg-white shadow\\\"\\n          autocomplete_class=\\\"w-full\\\"\\n          icon_class=\\\"w-4 h-4 ml-2\\\"\\n          />\\n    <div class=\\\"text-sm text-gray-400 mt-2 text-center\\\">\\n      * 시청자가 25명 이상인 스트리머가 자동으로 등록됩니다.\\n    </div>\\n  </div>\\n  <Panel class=\\\"md:p-4\\\">\\n    <h3 slot=\\\"title\\\" class=\\\"inline-block md:font-base font-2xl\\\"> \\n      실시간 시청자 이동\\n      <Tip>\\n        <span slot=\\\"tip\\\"> \\n          스트리머 간 시청자의 흐름을 실시간으로 살펴볼수 있습니다.<br>\\n          각 화살표를 클릭해서 더 자세한 정보를 확인해보세요.\\n        <br>\\n        * 약 한 시간 간격으로 업데이트됩니다.\\n        </span>\\n      </Tip>\\n      {#if viewer_migration_count_ranking.length}\\n        <span class=\\\"text-gray-600 ml-2 text-sm\\\">\\n          {time_ago(new Date(viewer_migration_count_ranking[0].time))}에 업데이트됨\\n        </span>\\n      {/if}\\n    </h3>\\n    <div slot=\\\"contents\\\" class=\\\"w-full text-xs whitespace-no-wrap flex flex-row flex-wrap\\\">\\n      {#each viewer_migration_count_ranking as v, i (v.source_id + \\\"-\\\" + v.destination_id)}\\n        <div class=\\\"md:w-1/5 w-1/2 p-2\\\">\\n          <span class=\\\"flex flex-row items-center justify-center\\\">\\n            <a class=\\\"flex-none p-2\\\" href=\\\"/streamer/{v.source_id}\\\">\\n              <img class=\\\"rounded-full h-12 w-12 border border-gray-600\\\" src={v.source_profile_image_url} />\\n              <div class=\\\"pt-1 truncate w-12\\\" title=\\\"{v.source_name}\\\">{v.source_name}</div>\\n            </a>\\n            <a class=\\\"text-center\\\" href=\\\"/migration?id1={v.source_id}&id2={v.destination_id}&date={new Date().getTime()}\\\">\\n              <svg class=\\\"w-8 h-4 overflow-visible inline-block\\\" viewBox=\\\"0,0,20,1\\\">\\n                <defs>\\n                  <marker id=\\\"head\\\" \\n                    markerWidth=\\\"2\\\" markerHeight=\\\"4\\\" \\n                                    refX=\\\"0.1\\\" refY=\\\"2\\\" orient=\\\"auto\\\" >\\n                    <path d=\\\"M0,0 V4 L2,2 Z\\\" fill=\\\"currentColor\\\" />\\n                </defs>\\n                  <path fill=\\\"currentColor\\\" d=\\\"M0,0 L{20-Math.sqrt(v.migration_count)/10*2},0\\\" stroke-width=\\\"{Math.sqrt(v.migration_count)/10}\\\" stroke=\\\"currentColor\\\" marker-end=\\\"url(#head)\\\" />\\n              </svg>\\n              <div class=\\\"text-gray-600\\\">\\n                {v.migration_count}명\\n              </div>\\n            </a>\\n            <a class=\\\"flex-none p-2\\\" href=\\\"/streamer/{v.destination_id}\\\">\\n              <img class=\\\"rounded-full h-12 w-12 border border-gray-600\\\" src={v.destination_profile_image_url} />\\n              <div class=\\\"pt-1 truncate w-12\\\" title=\\\"{v.destination_name}\\\">{v.destination_name}</div>\\n            </a>\\n          </span>\\n        </div>\\n      {/each}\\n        <button on:click={load_viewer_migration_count_ranking} class=\\\"w-full py-4 border-t\\\">\\n            더 보기\\n        </button>\\n    </div>\\n  </Panel>\\n  <Panel class=\\\"md:p-4\\\">\\n    <h3 slot=\\\"title\\\" class=\\\"inline-block md:font-base font-2xl\\\"> \\n      스트리머 순위\\n      <Tip>\\n        <span slot=\\\"tip\\\"> \\n        다양한 지표를 기준으로 스트리머 순위를 확인할 수 있습니다.<br> \\n        표 상단의 각 지표를 클릭하여 정렬시켜보세요.<br>\\n        * 약 5분 간격으로 업데이트됩니다.\\n        </span>\\n      </Tip>\\n      {#if viewer_migration_count_ranking.length}\\n        <span class=\\\"text-gray-600 ml-2 text-sm\\\">\\n          {time_ago(new Date(ranking_update_time))}에 업데이트됨\\n        </span>\\n      {/if}\\n    </h3>\\n    <table slot=\\\"contents\\\" class=\\\"w-full text-xs whitespace-no-wrap streamer-ranking\\\" width=\\\"1000\\\">\\n      <thead>\\n        <tr class=\\\"border-b border-gray-400\\\">\\n          <th class=\\\"\\\" width=\\\"50\\\">순위</th>\\n          <th width=\\\"400\\\">스트리머</th>\\n          <th width=\\\"100\\\" class=\\\"group cursor-pointer hover:bg-red-600 hover:text-white text-red-600 border-red-600\\\" \\n              class:ordered={state.order_by==\\\"chatting_speed\\\"} \\n              on:click={e=>change_order(\\\"chatting_speed\\\", true)} title=\\\"실시간 채팅속도\\\">\\n            {#if state.order_by == \\\"chatting_speed\\\"}\\n              {#if state.desc}\\n                <FaIcon icon={faCaretDown} class=\\\"w-4 h-4\\\" />\\n              {:else}\\n                <FaIcon icon={faCaretUp} class=\\\"w-4 h-4\\\" />\\n              {/if}\\n            {/if}\\n            <FaIcon icon={faComment} class=\\\"w-4 h-4\\\" />\\n            <span class=\\\"xl:inline hidden text-gray-800 group-hover:text-white\\\">\\n              실시간 채팅속도\\n            </span>\\n          </th>\\n          <th width=\\\"100\\\" class=\\\"group cursor-pointer hover:bg-yellow-600 hover:text-white text-yellow-600 border-yellow-600\\\" \\n              class:ordered={state.order_by==\\\"viewer_count\\\"}\\n              on:click={e=>change_order(\\\"viewer_count\\\", true)} title=\\\"실청자\\\">\\n            {#if state.order_by == \\\"viewer_count\\\"}\\n              {#if state.desc}\\n                <FaIcon icon={faCaretDown} class=\\\"w-4 h-4\\\" />\\n              {:else}\\n                <FaIcon icon={faCaretUp} class=\\\"w-4 h-4\\\" />\\n              {/if}\\n            {/if}\\n            <FaIcon icon={faUser} class=\\\"w-4 h-4\\\" />\\n            <span class=\\\"xl:inline hidden text-gray-800 group-hover:text-white\\\">\\n              실청자 \\n            </span>\\n          </th>\\n          <th width=\\\"100\\\" class=\\\"group cursor-pointer hover:bg-purple-600 hover:text-white text-purple-600 border-purple-600\\\" \\n              class:ordered={state.order_by==\\\"follower_count\\\"}\\n              on:click={e=>change_order(\\\"follower_count\\\", true)} title=\\\"팔로워\\\">\\n            {#if state.order_by == \\\"follower_count\\\"}\\n              {#if state.desc}\\n                <FaIcon icon={faCaretDown} class=\\\"w-4 h-4\\\" />\\n              {:else}\\n                <FaIcon icon={faCaretUp} class=\\\"w-4 h-4\\\" />\\n              {/if}\\n            {/if}\\n            <FaIcon icon={faStar} class=\\\"w-4 h-4\\\" />\\n            <span class=\\\"xl:inline hidden text-gray-800 group-hover:text-white\\\">\\n              팔로워\\n            </span>\\n          </th>\\n          <th width=\\\"100\\\" class=\\\"group cursor-pointer hover:bg-orange-600 hover:text-white text-orange-600 border-orange-600\\\" \\n              class:ordered={state.order_by==\\\"average_viewer_count\\\"}\\n              on:click={e=>change_order(\\\"average_viewer_count\\\", true)} title=\\\"평청자\\\">\\n            {#if state.order_by == \\\"average_viewer_count\\\"}\\n              {#if state.desc}\\n                <FaIcon icon={faCaretDown} class=\\\"w-4 h-4\\\" />\\n              {:else}\\n                <FaIcon icon={faCaretUp} class=\\\"w-4 h-4\\\" />\\n              {/if}\\n            {/if}\\n            <FaIcon icon={faUserClock} class=\\\"w-5 h-4\\\" />\\n            <span class=\\\"xl:inline hidden text-gray-800 group-hover:text-white\\\">\\n              평청자 \\n            </span>\\n          </th>\\n          <th width=\\\"100\\\" class=\\\"group cursor-pointer hover:bg-green-600 hover:text-white text-green-600 hidden md:table-cell border-green-600\\\" \\n              class:ordered={state.order_by==\\\"viewer_chatter_ratio\\\"}\\n              on:click={e=>change_order(\\\"viewer_chatter_ratio\\\", false)} title=\\\"로그인/실청자 비율\\\">\\n            {#if state.order_by == \\\"viewer_chatter_ratio\\\"}\\n              {#if state.desc}\\n                <FaIcon icon={faCaretDown} class=\\\"w-4 h-4\\\" />\\n              {:else}\\n                <FaIcon icon={faCaretUp} class=\\\"w-4 h-4\\\" />\\n              {/if}\\n            {/if}\\n            <FaIcon icon={faUserLock} class=\\\"w-5 h-4\\\" />\\n            <span class=\\\"xl:inline hidden text-gray-800 group-hover:text-white\\\">\\n              로그인비\\n            </span>\\n          </th>\\n          <th width=\\\"100\\\" class=\\\"group cursor-pointer hover:bg-teal-600 hover:text-white text-teal-600 hidden md:table-cell border-teal-600\\\" \\n              class:ordered={state.order_by==\\\"average_subscriber_ratio\\\"}\\n              on:click={e=>change_order(\\\"average_subscriber_ratio\\\", true)} title=\\\"구독자비율\\\">\\n            {#if state.order_by == \\\"average_subscriber_ratio\\\"}\\n              {#if state.desc}\\n                <FaIcon icon={faCaretDown} class=\\\"w-4 h-4\\\" />\\n              {:else}\\n                <FaIcon icon={faCaretUp} class=\\\"w-4 h-4\\\" />\\n              {/if}\\n            {/if}\\n            <span>\\n              <FaIcon icon={faUser} class=\\\"w-4 h-4\\\" />\\n              <FaIcon icon={faDollarSign} class=\\\"w-3 h-3 -ml-2 -mt-2\\\" />\\n            </span>\\n            <span class=\\\"xl:inline hidden text-gray-800 group-hover:text-white\\\">\\n              구독자비 \\n            </span>\\n          </th>\\n          <th width=\\\"100\\\" class=\\\"group cursor-pointer hover:bg-blue-600 hover:text-white text-blue-600 border-blue-600 hidden md:table-cell\\\" \\n              class:ordered={state.order_by==\\\"streaming_hours_per_week\\\"}\\n              on:click={e=>change_order(\\\"streaming_hours_per_week\\\", true)} title=\\\"방송시간\\\">\\n            {#if state.order_by == \\\"streaming_hours_per_week\\\"}\\n              {#if state.desc}\\n                <svg area-hidden=\\\"true\\\" role=\\\"img\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 {faCaretDown.icon[0]} {faCaretDown.icon[1]}\\\" class=\\\"w-4 h-4 overflow-visible inline-block\\\">\\n                  <path fill=\\\"currentColor\\\" d=\\\"{faCaretDown.icon[4]}\\\"/>\\n                </svg>\\n              {:else}\\n                <svg area-hidden=\\\"true\\\" role=\\\"img\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 {faCaretUp.icon[0]} {faCaretUp.icon[1]}\\\" class=\\\"w-4 h-4 overflow-visible inline-block\\\">\\n                  <path fill=\\\"currentColor\\\" d=\\\"{faCaretUp.icon[4]}\\\"/>\\n                </svg>\\n              {/if}\\n            {/if}\\n            {#if state.order_by == \\\"streaming_hours_per_week\\\"}\\n              {#if state.desc}\\n                <FaIcon icon={faCaretDown} class=\\\"w-4 h-4\\\" />\\n              {:else}\\n                <FaIcon icon={faCaretUp} class=\\\"w-4 h-4\\\" />\\n              {/if}\\n            {/if}\\n            <FaIcon icon={faHourglassHalf} class=\\\"w-4 h-4\\\" />\\n            <span class=\\\"xl:inline hidden text-gray-800 group-hover:text-white\\\">\\n              방송시간 \\n            </span>\\n          </th>\\n          <th width=\\\"100\\\" class=\\\"hidden md:table-cell\\\" title=\\\"마지막 방송\\\">\\n            <FaIcon icon={faHistory} class=\\\"w-4 h-4\\\" />\\n            <span class=\\\"xl:inline hidden text-gray-800\\\">\\n              마지막 방송\\n            </span>\\n          </th>\\n        </tr>\\n      </thead>\\n      <tbody class=\\\"\\\">\\n        {#each rankings[JSON.stringify(state)] as streamer, i (streamer.id)}\\n        <tr class=\\\"odd:bg-gray-100\\\">\\n          <td class=\\\"text-xl text-gray-600 text-center\\\">\\n            {i+1}\\n          </td>\\n          <td class=\\\"flex flex-row items-center max-w-5xl\\\">\\n            <a class=\\\"flex-none self-start md:self-center\\\" href=\\\"/streamer/{streamer.id}\\\">\\n              <img class=\\\"rounded-full md:h-12 md:w-12 h-8 w-8 border border-gray-600\\\" src={streamer.profile_image_url} />\\n            </a>\\n            <div class=\\\"flex-shrink md:pl-2 text-left\\\">\\n              <div>\\n                <a class=\\\"\\\" href=\\\"/streamer/{streamer.id}\\\">\\n                  <span class=\\\"pl-2\\\">{streamer.name}</span>\\n                </a>\\n                <Badges {streamer} class=\\\"inline-block block ml-1\\\"> </Badges>\\n              </div>\\n              <GameBadges {streamer} class=\\\"flex flex-row md:ml-2 -ml-8 md:pt-1 pt-4 flex-wrap\\\"> </GameBadges>\\n            </div>\\n          </td>\\n          <td class=\\\"text-red-600\\\">\\n            {#if streamer.chatting_speed}\\n              {streamer.chatting_speed.toFixed(1)}개/초\\n            {/if}\\n          </td>\\n          <td class=\\\"text-yellow-600\\\">\\n            {#if streamer.viewer_count != null}\\n              {streamer.viewer_count.toLocaleString('ko', {useGrouping:true})}명\\n            {/if}\\n          </td>\\n          <td class=\\\"text-purple-600\\\">\\n            {streamer.follower_count.toLocaleString('ko', {useGrouping:true})}명\\n          </td>\\n          <td class=\\\"text-orange-600\\\">\\n            {streamer.average_viewer_count.toLocaleString('ko', {useGrouping:true})}명\\n          </td>\\n          <td class=\\\"text-green-600 hidden md:table-cell\\\">\\n            {#if streamer.viewer_chatter_ratio != null}\\n              {(streamer.viewer_chatter_ratio*100).toFixed(1)}%\\n            {/if}\\n          </td>\\n          <td class=\\\"text-teal-600 hidden md:table-cell\\\">\\n            {#if streamer.average_subscriber_ratio}\\n              {(streamer.average_subscriber_ratio*100).toFixed(1)}%\\n            {/if}\\n          </td>\\n          <td class=\\\"text-blue-600 w-32 hidden md:table-cell\\\">\\n            {#if streamer.streaming_hours_per_week}\\n              주 {streamer.streaming_hours_per_week.toFixed(1)}시간\\n            {:else}\\n            {/if}\\n          </td>\\n          <td class=\\\"text-gray-600 hidden md:table-cell\\\">\\n            {#if streamer.is_streaming}\\n              지금\\n            {:else if streamer.last_streaming_time}\\n              {time_ago(new Date(streamer.last_streaming_time))}\\n            {:else}\\n            {/if}\\n          </td>\\n        </tr>\\n        {/each}\\n      </tbody>\\n      <tfoot>\\n        <tr class=\\\"\\\">\\n          <td colspan=\\\"42\\\" class=\\\"\\\">\\n            <button on:click={load_ranking} class=\\\"w-full py-4 border-t\\\">\\n                더 보기\\n            </button>\\n          </td>\\n        </tr>\\n      </tfoot>\\n    </table>\\n  </Panel>\\n</div>\\n\\n<script>\\nimport { onMount } from \\\"svelte\\\";\\nimport { API } from '../api.js';\\nimport Panel from \\\"../components/Panel.svelte\\\";\\nimport Badges from \\\"../components/Badges.svelte\\\";\\nimport GameBadges from \\\"../components/GameBadges.svelte\\\";\\nimport Tip from '../components/Tip.svelte';\\nimport FaIcon from '../components/FaIcon.svelte';\\nimport StreamerAutoComplete from \\\"../components/StreamerAutoComplete.svelte\\\";\\nimport { time_ago } from \\\"../util.js\\\";\\n\\nimport { faComment } from '@fortawesome/free-solid-svg-icons/faComment';\\nimport { faKey } from '@fortawesome/free-solid-svg-icons/faKey';\\nimport { faUser } from '@fortawesome/free-solid-svg-icons/faUser';\\nimport { faUserClock } from '@fortawesome/free-solid-svg-icons/faUserClock';\\nimport { faUserLock } from '@fortawesome/free-solid-svg-icons/faUserLock';\\nimport { faHourglassHalf } from '@fortawesome/free-solid-svg-icons/faHourglassHalf';\\nimport { faHistory } from '@fortawesome/free-solid-svg-icons/faHistory';\\nimport { faDollarSign } from '@fortawesome/free-solid-svg-icons/faDollarSign';\\nimport { faStar } from '@fortawesome/free-solid-svg-icons/faStar';\\nimport { faArrowRight } from '@fortawesome/free-solid-svg-icons/faArrowRight';\\nimport { faExchangeAlt } from '@fortawesome/free-solid-svg-icons/faExchangeAlt';\\nimport { faCaretUp } from '@fortawesome/free-solid-svg-icons/faCaretUp';\\nimport { faCaretDown } from '@fortawesome/free-solid-svg-icons/faCaretDown';\\n\\nlet state = {\\n  \\\"order_by\\\": \\\"chatting_speed\\\",\\n  \\\"desc\\\": true,\\n}\\n\\nlet current_order_by = \\\"chatting_speed\\\";\\nlet current_desc = true;\\nlet rankings = { };\\nlet offsets = { };\\nlet ranking_update_time = null;\\n\\nlet viewer_migration_count_ranking = [];\\nlet viewer_migration_count_offset = 0;\\n\\nfunction change_order(order_by, desc) {\\n  /*if(order_by == state.order_by)\\n    state.desc = !state.desc;\\n  else*/\\n    state = {\\n      \\\"order_by\\\": order_by,\\n      \\\"desc\\\":  desc,\\n    };\\n  if(!rankings[JSON.stringify(state)]) {\\n    load_ranking();\\n  }\\n}\\n\\nfunction load_ranking(){\\n  if(offsets[JSON.stringify(state)] == null)\\n    offsets[JSON.stringify(state)] = 0;\\n  if(rankings[JSON.stringify(state)] == null)\\n    rankings[JSON.stringify(state)] = [];\\n  offsets[JSON.stringify(state)] = rankings[JSON.stringify(state)].length;\\n  let last_state = {\\n    \\\"order_by\\\": state.order_by,\\n    \\\"desc\\\": state.desc\\n  };\\n  API.streamer_ranking(offsets[JSON.stringify(last_state)], last_state.order_by, last_state.desc).then(ranking => {\\n    if(ranking){\\n      rankings[JSON.stringify(last_state)] = [...rankings[JSON.stringify(last_state)], ...ranking]\\n      console.log(ranking);\\n      ranking_update_time = Math.max(ranking_update_time, ...ranking.map(r => new Date(r.last_streaming_time).getTime()));\\n      console.log(ranking_update_time);\\n      console.log(new Date(ranking_update_time));\\n    }\\n  });\\n}\\n\\nfunction load_viewer_migration_count_ranking(){\\n  viewer_migration_count_offset = viewer_migration_count_ranking.length;\\n  API.viewer_migration_count_ranking(viewer_migration_count_offset).then(ranking => {\\n    if(ranking){\\n      viewer_migration_count_ranking = [...viewer_migration_count_ranking, ...ranking];\\n    }\\n  });\\n}\\n\\nload_ranking();\\nload_viewer_migration_count_ranking();\\n\\nfunction on_streamer_search(target) {\\n  window.location.pathname = \\\"/streamer/\\\" + target.id;\\n}\\n</script>\\n\\n<style>\\n  @media (min-width: 768px) { \\n    .streamer-ranking tbody td {\\n      padding: 0.5rem 0.25rem;\\n      padding-top: 1.0rem;\\n      padding-bottom: 1.0rem;\\n      text-align: center;\\n    }\\n    .streamer-ranking thead th {\\n      padding-left: 1rem;\\n      padding-right: 1rem;\\n      padding-bottom: .5rem;\\n      padding-top: .5rem;\\n    }\\n  }\\n  .streamer-ranking tbody td {\\n    padding: 0.5rem 0.25rem;\\n    padding-top: 1.0rem;\\n    padding-bottom: 1.0rem;\\n    text-align: center;\\n  }\\n  .streamer-ranking thead th {\\n    padding-left: 0.5rem;\\n    padding-right: 0.5rem;\\n    padding-bottom: .5rem;\\n    padding-top: .5rem;\\n  }\\n  .streamer-ranking tbody tr td:last-child {\\n    padding-right: 1rem;\\n  }\\n  .streamer-ranking .ordered {\\n    border-bottom-width: 2px;\\n  }\\n</style>\\n\"],\"names\":[],\"mappings\":\"AAmYE,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AACzB,gCAAiB,CAAC,KAAK,CAAC,EAAE,eAAC,CAAC,AAC1B,OAAO,CAAE,MAAM,CAAC,OAAO,CACvB,WAAW,CAAE,MAAM,CACnB,cAAc,CAAE,MAAM,CACtB,UAAU,CAAE,MAAM,AACpB,CAAC,AACD,gCAAiB,CAAC,KAAK,CAAC,EAAE,eAAC,CAAC,AAC1B,YAAY,CAAE,IAAI,CAClB,aAAa,CAAE,IAAI,CACnB,cAAc,CAAE,KAAK,CACrB,WAAW,CAAE,KAAK,AACpB,CAAC,AACH,CAAC,AACD,gCAAiB,CAAC,KAAK,CAAC,EAAE,eAAC,CAAC,AAC1B,OAAO,CAAE,MAAM,CAAC,OAAO,CACvB,WAAW,CAAE,MAAM,CACnB,cAAc,CAAE,MAAM,CACtB,UAAU,CAAE,MAAM,AACpB,CAAC,AACD,gCAAiB,CAAC,KAAK,CAAC,EAAE,eAAC,CAAC,AAC1B,YAAY,CAAE,MAAM,CACpB,aAAa,CAAE,MAAM,CACrB,cAAc,CAAE,KAAK,CACrB,WAAW,CAAE,KAAK,AACpB,CAAC,AACD,gCAAiB,CAAC,KAAK,CAAC,EAAE,CAAC,iBAAE,WAAW,AAAC,CAAC,AACxC,aAAa,CAAE,IAAI,AACrB,CAAC,AACD,gCAAiB,CAAC,QAAQ,eAAC,CAAC,AAC1B,mBAAmB,CAAE,GAAG,AAC1B,CAAC\"}"
};

const Index = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	

let state = {
  "order_by": "chatting_speed",
  "desc": true,
};
let rankings = { };
let offsets = { };
let ranking_update_time = null;

let viewer_migration_count_ranking = [];
let viewer_migration_count_offset = 0;

function load_ranking(){
  if(offsets[JSON.stringify(state)] == null)
    offsets[JSON.stringify(state)] = 0;
  if(rankings[JSON.stringify(state)] == null)
    rankings[JSON.stringify(state)] = [];
  offsets[JSON.stringify(state)] = rankings[JSON.stringify(state)].length;
  let last_state = {
    "order_by": state.order_by,
    "desc": state.desc
  };
  API.streamer_ranking(offsets[JSON.stringify(last_state)], last_state.order_by, last_state.desc).then(ranking => {
    if(ranking){
      rankings[JSON.stringify(last_state)] = [...rankings[JSON.stringify(last_state)], ...ranking];
      console.log(ranking);
      ranking_update_time = Math.max(ranking_update_time, ...ranking.map(r => new Date(r.last_streaming_time).getTime()));
      console.log(ranking_update_time);
      console.log(new Date(ranking_update_time));
    }
  });
}

function load_viewer_migration_count_ranking(){
  viewer_migration_count_offset = viewer_migration_count_ranking.length;
  API.viewer_migration_count_ranking(viewer_migration_count_offset).then(ranking => {
    if(ranking){
      viewer_migration_count_ranking = [...viewer_migration_count_ranking, ...ranking];
    }
  });
}

load_ranking();
load_viewer_migration_count_ranking();

function on_streamer_search(target) {
  window.location.pathname = "/streamer/" + target.id;
}

	$$result.css.add(css$4);

	let $$settled;
	let $$rendered;

	do {
		$$settled = true;

		$$rendered = `${($$result.head += `<title>스트리머 순위 - 트수gg</title>`, "")}

		<svg class="hidden">
		</svg>
		<div class="flex flex-col md:items-start items-stretch container m-auto w-full">
		  <div class="pt-10 pb-2 m-auto">
		    ${validate_component(StreamerAutoComplete, 'StreamerAutoComplete').$$render($$result, {
			placeholder: "스트리머 검색",
			inputid: "streamer-search-input",
			id: "navigation-streamer-search",
			class: "w-full md:w-128",
			input_class: "border w-full text-normal p-6 px-7 py-4 pl-10 bg-white shadow",
			autocomplete_class: "w-full",
			icon_class: "w-4 h-4 ml-2",
			onselect: on_streamer_search
		}, {
			onselect: $$value => { on_streamer_search = $$value; $$settled = false; }
		}, {})}
		    <div class="text-sm text-gray-400 mt-2 text-center">
		      * 시청자가 25명 이상인 스트리머가 자동으로 등록됩니다.
		    </div>
		  </div>
		  ${validate_component(Panel, 'Panel').$$render($$result, { class: "md:p-4" }, {}, {
			default: () => `
		    `,
			title: () => `<h3 slot="title" class="inline-block md:font-base font-2xl"> 
		      실시간 시청자 이동
		      ${validate_component(Tip, 'Tip').$$render($$result, {}, {}, {
			default: () => `
		        `,
			tip: () => `<span slot="tip"> 
		          스트리머 간 시청자의 흐름을 실시간으로 살펴볼수 있습니다.<br>
		          각 화살표를 클릭해서 더 자세한 정보를 확인해보세요.
		        <br>
		        * 약 한 시간 간격으로 업데이트됩니다.
		        </span>
		      `
		})}
		      ${ viewer_migration_count_ranking.length ? `<span class="text-gray-600 ml-2 text-sm">
		          ${escape$1(time_ago(new Date(viewer_migration_count_ranking[0].time)))}에 업데이트됨
		        </span>` : `` }
		    </h3>
		    `,
			contents: () => `<div slot="contents" class="w-full text-xs whitespace-no-wrap flex flex-row flex-wrap">
		      ${each(viewer_migration_count_ranking, (v, i) => `<div class="md:w-1/5 w-1/2 p-2">
		          <span class="flex flex-row items-center justify-center">
		            <a class="flex-none p-2" href="/streamer/${escape$1(v.source_id)}">
		              <img class="rounded-full h-12 w-12 border border-gray-600"${add_attribute("src", v.source_profile_image_url, 0)}>
		              <div class="pt-1 truncate w-12"${add_attribute("title", v.source_name, 0)}>${escape$1(v.source_name)}</div>
		            </a>
		            <a class="text-center" href="/migration?id1=${escape$1(v.source_id)}&id2=${escape$1(v.destination_id)}&date=${escape$1(new Date().getTime())}">
		              <svg class="w-8 h-4 overflow-visible inline-block" viewBox="0,0,20,1">
		                <defs>
		                  <marker id="head" markerWidth="2" markerHeight="4" refX="0.1" refY="2" orient="auto">
		                    <path d="M0,0 V4 L2,2 Z" fill="currentColor"></path>
		                </marker></defs>
		                  <path fill="currentColor" d="M0,0 L${escape$1(20-Math.sqrt(v.migration_count)/10*2)},0"${add_attribute("stroke-width", Math.sqrt(v.migration_count)/10, 0)} stroke="currentColor" marker-end="url(#head)"></path>
		              </svg>
		              <div class="text-gray-600">
		                ${escape$1(v.migration_count)}명
		              </div>
		            </a>
		            <a class="flex-none p-2" href="/streamer/${escape$1(v.destination_id)}">
		              <img class="rounded-full h-12 w-12 border border-gray-600"${add_attribute("src", v.destination_profile_image_url, 0)}>
		              <div class="pt-1 truncate w-12"${add_attribute("title", v.destination_name, 0)}>${escape$1(v.destination_name)}</div>
		            </a>
		          </span>
		        </div>`)}
		        <button class="w-full py-4 border-t">
		            더 보기
		        </button>
		    </div>
		  `
		})}
		  ${validate_component(Panel, 'Panel').$$render($$result, { class: "md:p-4" }, {}, {
			default: () => `
		    `,
			title: () => `<h3 slot="title" class="inline-block md:font-base font-2xl"> 
		      스트리머 순위
		      ${validate_component(Tip, 'Tip').$$render($$result, {}, {}, {
			default: () => `
		        `,
			tip: () => `<span slot="tip"> 
		        다양한 지표를 기준으로 스트리머 순위를 확인할 수 있습니다.<br> 
		        표 상단의 각 지표를 클릭하여 정렬시켜보세요.<br>
		        * 약 5분 간격으로 업데이트됩니다.
		        </span>
		      `
		})}
		      ${ viewer_migration_count_ranking.length ? `<span class="text-gray-600 ml-2 text-sm">
		          ${escape$1(time_ago(new Date(ranking_update_time)))}에 업데이트됨
		        </span>` : `` }
		    </h3>
		    `,
			contents: () => `<table slot="contents" class="w-full text-xs whitespace-no-wrap streamer-ranking svelte-1lmtari" width="1000">
		      <thead>
		        <tr class="border-b border-gray-400">
		          <th class=" svelte-1lmtari" width="50">순위</th>
		          <th width="400" class="svelte-1lmtari">스트리머</th>
		          <th width="100" class="${[`group cursor-pointer hover:bg-red-600 hover:text-white text-red-600 border-red-600 svelte-1lmtari`, state.order_by=="chatting_speed" ? "ordered" : ""].join(' ').trim() }" title="실시간 채팅속도">
		            ${ state.order_by == "chatting_speed" ? `${ state.desc ? `${validate_component(FaIcon, 'FaIcon').$$render($$result, { icon: faCaretDown_2, class: "w-4 h-4" }, {}, {})}` : `${validate_component(FaIcon, 'FaIcon').$$render($$result, { icon: faCaretUp_2, class: "w-4 h-4" }, {}, {})}` }` : `` }
		            ${validate_component(FaIcon, 'FaIcon').$$render($$result, { icon: faComment_2, class: "w-4 h-4" }, {}, {})}
		            <span class="xl:inline hidden text-gray-800 group-hover:text-white">
		              실시간 채팅속도
		            </span>
		          </th>
		          <th width="100" class="${[`group cursor-pointer hover:bg-yellow-600 hover:text-white text-yellow-600 border-yellow-600 svelte-1lmtari`, state.order_by=="viewer_count" ? "ordered" : ""].join(' ').trim() }" title="실청자">
		            ${ state.order_by == "viewer_count" ? `${ state.desc ? `${validate_component(FaIcon, 'FaIcon').$$render($$result, { icon: faCaretDown_2, class: "w-4 h-4" }, {}, {})}` : `${validate_component(FaIcon, 'FaIcon').$$render($$result, { icon: faCaretUp_2, class: "w-4 h-4" }, {}, {})}` }` : `` }
		            ${validate_component(FaIcon, 'FaIcon').$$render($$result, { icon: faUser_2, class: "w-4 h-4" }, {}, {})}
		            <span class="xl:inline hidden text-gray-800 group-hover:text-white">
		              실청자 
		            </span>
		          </th>
		          <th width="100" class="${[`group cursor-pointer hover:bg-purple-600 hover:text-white text-purple-600 border-purple-600 svelte-1lmtari`, state.order_by=="follower_count" ? "ordered" : ""].join(' ').trim() }" title="팔로워">
		            ${ state.order_by == "follower_count" ? `${ state.desc ? `${validate_component(FaIcon, 'FaIcon').$$render($$result, { icon: faCaretDown_2, class: "w-4 h-4" }, {}, {})}` : `${validate_component(FaIcon, 'FaIcon').$$render($$result, { icon: faCaretUp_2, class: "w-4 h-4" }, {}, {})}` }` : `` }
		            ${validate_component(FaIcon, 'FaIcon').$$render($$result, { icon: faStar_2, class: "w-4 h-4" }, {}, {})}
		            <span class="xl:inline hidden text-gray-800 group-hover:text-white">
		              팔로워
		            </span>
		          </th>
		          <th width="100" class="${[`group cursor-pointer hover:bg-orange-600 hover:text-white text-orange-600 border-orange-600 svelte-1lmtari`, state.order_by=="average_viewer_count" ? "ordered" : ""].join(' ').trim() }" title="평청자">
		            ${ state.order_by == "average_viewer_count" ? `${ state.desc ? `${validate_component(FaIcon, 'FaIcon').$$render($$result, { icon: faCaretDown_2, class: "w-4 h-4" }, {}, {})}` : `${validate_component(FaIcon, 'FaIcon').$$render($$result, { icon: faCaretUp_2, class: "w-4 h-4" }, {}, {})}` }` : `` }
		            ${validate_component(FaIcon, 'FaIcon').$$render($$result, { icon: faUserClock_2, class: "w-5 h-4" }, {}, {})}
		            <span class="xl:inline hidden text-gray-800 group-hover:text-white">
		              평청자 
		            </span>
		          </th>
		          <th width="100" class="${[`group cursor-pointer hover:bg-green-600 hover:text-white text-green-600 hidden md:table-cell border-green-600 svelte-1lmtari`, state.order_by=="viewer_chatter_ratio" ? "ordered" : ""].join(' ').trim() }" title="로그인/실청자 비율">
		            ${ state.order_by == "viewer_chatter_ratio" ? `${ state.desc ? `${validate_component(FaIcon, 'FaIcon').$$render($$result, { icon: faCaretDown_2, class: "w-4 h-4" }, {}, {})}` : `${validate_component(FaIcon, 'FaIcon').$$render($$result, { icon: faCaretUp_2, class: "w-4 h-4" }, {}, {})}` }` : `` }
		            ${validate_component(FaIcon, 'FaIcon').$$render($$result, { icon: faUserLock_2, class: "w-5 h-4" }, {}, {})}
		            <span class="xl:inline hidden text-gray-800 group-hover:text-white">
		              로그인비
		            </span>
		          </th>
		          <th width="100" class="${[`group cursor-pointer hover:bg-teal-600 hover:text-white text-teal-600 hidden md:table-cell border-teal-600 svelte-1lmtari`, state.order_by=="average_subscriber_ratio" ? "ordered" : ""].join(' ').trim() }" title="구독자비율">
		            ${ state.order_by == "average_subscriber_ratio" ? `${ state.desc ? `${validate_component(FaIcon, 'FaIcon').$$render($$result, { icon: faCaretDown_2, class: "w-4 h-4" }, {}, {})}` : `${validate_component(FaIcon, 'FaIcon').$$render($$result, { icon: faCaretUp_2, class: "w-4 h-4" }, {}, {})}` }` : `` }
		            <span>
		              ${validate_component(FaIcon, 'FaIcon').$$render($$result, { icon: faUser_2, class: "w-4 h-4" }, {}, {})}
		              ${validate_component(FaIcon, 'FaIcon').$$render($$result, {
			icon: faDollarSign_2,
			class: "w-3 h-3 -ml-2 -mt-2"
		}, {}, {})}
		            </span>
		            <span class="xl:inline hidden text-gray-800 group-hover:text-white">
		              구독자비 
		            </span>
		          </th>
		          <th width="100" class="${[`group cursor-pointer hover:bg-blue-600 hover:text-white text-blue-600 border-blue-600 hidden md:table-cell svelte-1lmtari`, state.order_by=="streaming_hours_per_week" ? "ordered" : ""].join(' ').trim() }" title="방송시간">
		            ${ state.order_by == "streaming_hours_per_week" ? `${ state.desc ? `<svg area-hidden="true" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 ${escape$1(faCaretDown_2.icon[0])} ${escape$1(faCaretDown_2.icon[1])}" class="w-4 h-4 overflow-visible inline-block">
		                  <path fill="currentColor"${add_attribute("d", faCaretDown_2.icon[4], 0)}></path>
		                </svg>` : `<svg area-hidden="true" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 ${escape$1(faCaretUp_2.icon[0])} ${escape$1(faCaretUp_2.icon[1])}" class="w-4 h-4 overflow-visible inline-block">
		                  <path fill="currentColor"${add_attribute("d", faCaretUp_2.icon[4], 0)}></path>
		                </svg>` }` : `` }
		            ${ state.order_by == "streaming_hours_per_week" ? `${ state.desc ? `${validate_component(FaIcon, 'FaIcon').$$render($$result, { icon: faCaretDown_2, class: "w-4 h-4" }, {}, {})}` : `${validate_component(FaIcon, 'FaIcon').$$render($$result, { icon: faCaretUp_2, class: "w-4 h-4" }, {}, {})}` }` : `` }
		            ${validate_component(FaIcon, 'FaIcon').$$render($$result, { icon: faHourglassHalf_2, class: "w-4 h-4" }, {}, {})}
		            <span class="xl:inline hidden text-gray-800 group-hover:text-white">
		              방송시간 
		            </span>
		          </th>
		          <th width="100" class="hidden md:table-cell svelte-1lmtari" title="마지막 방송">
		            ${validate_component(FaIcon, 'FaIcon').$$render($$result, { icon: faHistory_2, class: "w-4 h-4" }, {}, {})}
		            <span class="xl:inline hidden text-gray-800">
		              마지막 방송
		            </span>
		          </th>
		        </tr>
		      </thead>
		      <tbody class="">
		        ${each(rankings[JSON.stringify(state)], (streamer, i) => `<tr class="odd:bg-gray-100">
		          <td class="text-xl text-gray-600 text-center svelte-1lmtari">
		            ${escape$1(i+1)}
		          </td>
		          <td class="flex flex-row items-center max-w-5xl svelte-1lmtari">
		            <a class="flex-none self-start md:self-center" href="/streamer/${escape$1(streamer.id)}">
		              <img class="rounded-full md:h-12 md:w-12 h-8 w-8 border border-gray-600"${add_attribute("src", streamer.profile_image_url, 0)}>
		            </a>
		            <div class="flex-shrink md:pl-2 text-left">
		              <div>
		                <a class="" href="/streamer/${escape$1(streamer.id)}">
		                  <span class="pl-2">${escape$1(streamer.name)}</span>
		                </a>
		                ${validate_component(Badges, 'Badges').$$render($$result, {
			streamer: streamer,
			class: "inline-block block ml-1"
		}, {}, { default: () => ` ` })}
		              </div>
		              ${validate_component(GameBadges, 'GameBadges').$$render($$result, {
			streamer: streamer,
			class: "flex flex-row md:ml-2 -ml-8 md:pt-1 pt-4 flex-wrap"
		}, {}, { default: () => ` ` })}
		            </div>
		          </td>
		          <td class="text-red-600 svelte-1lmtari">
		            ${ streamer.chatting_speed ? `${escape$1(streamer.chatting_speed.toFixed(1))}개/초` : `` }
		          </td>
		          <td class="text-yellow-600 svelte-1lmtari">
		            ${ streamer.viewer_count != null ? `${escape$1(streamer.viewer_count.toLocaleString('ko', {useGrouping:true}))}명` : `` }
		          </td>
		          <td class="text-purple-600 svelte-1lmtari">
		            ${escape$1(streamer.follower_count.toLocaleString('ko', {useGrouping:true}))}명
		          </td>
		          <td class="text-orange-600 svelte-1lmtari">
		            ${escape$1(streamer.average_viewer_count.toLocaleString('ko', {useGrouping:true}))}명
		          </td>
		          <td class="text-green-600 hidden md:table-cell svelte-1lmtari">
		            ${ streamer.viewer_chatter_ratio != null ? `${escape$1((streamer.viewer_chatter_ratio*100).toFixed(1))}%` : `` }
		          </td>
		          <td class="text-teal-600 hidden md:table-cell svelte-1lmtari">
		            ${ streamer.average_subscriber_ratio ? `${escape$1((streamer.average_subscriber_ratio*100).toFixed(1))}%` : `` }
		          </td>
		          <td class="text-blue-600 w-32 hidden md:table-cell svelte-1lmtari">
		            ${ streamer.streaming_hours_per_week ? `주 ${escape$1(streamer.streaming_hours_per_week.toFixed(1))}시간` : `` }
		          </td>
		          <td class="text-gray-600 hidden md:table-cell svelte-1lmtari">
		            ${ streamer.is_streaming ? `지금` : `${ streamer.last_streaming_time ? `${escape$1(time_ago(new Date(streamer.last_streaming_time)))}` : `` }` }
		          </td>
		        </tr>`)}
		      </tbody>
		      <tfoot>
		        <tr class="">
		          <td colspan="42" class="">
		            <button class="w-full py-4 border-t">
		                더 보기
		            </button>
		          </td>
		        </tr>
		      </tfoot>
		    </table>
		  `
		})}
		</div>`;
	} while (!$$settled);

	return $$rendered;
});

/* src/routes/hidden-links.svelte generated by Svelte v3.12.1 */

const Hidden_links = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	return ``;
});

const subscriber_queue = [];
/**
 * Create a `Writable` store that allows both updating and reading by subscription.
 * @param {*=}value initial value
 * @param {StartStopNotifier=}start start and stop notifications for subscriptions
 */
function writable(value, start = noop) {
    let stop;
    const subscribers = [];
    function set(new_value) {
        if (safe_not_equal(value, new_value)) {
            value = new_value;
            if (stop) { // store is ready
                const run_queue = !subscriber_queue.length;
                for (let i = 0; i < subscribers.length; i += 1) {
                    const s = subscribers[i];
                    s[1]();
                    subscriber_queue.push(s, value);
                }
                if (run_queue) {
                    for (let i = 0; i < subscriber_queue.length; i += 2) {
                        subscriber_queue[i][0](subscriber_queue[i + 1]);
                    }
                    subscriber_queue.length = 0;
                }
            }
        }
    }
    function update(fn) {
        set(fn(value));
    }
    function subscribe(run, invalidate = noop) {
        const subscriber = [run, invalidate];
        subscribers.push(subscriber);
        if (subscribers.length === 1) {
            stop = start(set) || noop;
        }
        run(value);
        return () => {
            const index = subscribers.indexOf(subscriber);
            if (index !== -1) {
                subscribers.splice(index, 1);
            }
            if (subscribers.length === 0) {
                stop();
                stop = null;
            }
        };
    }
    return { set, update, subscribe };
}

var faUserSecret = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, '__esModule', { value: true });
var prefix = 'fas';
var iconName = 'user-secret';
var width = 448;
var height = 512;
var ligatures = [];
var unicode = 'f21b';
var svgPathData = 'M383.9 308.3l23.9-62.6c4-10.5-3.7-21.7-15-21.7h-58.5c11-18.9 17.8-40.6 17.8-64v-.3c39.2-7.8 64-19.1 64-31.7 0-13.3-27.3-25.1-70.1-33-9.2-32.8-27-65.8-40.6-82.8-9.5-11.9-25.9-15.6-39.5-8.8l-27.6 13.8c-9 4.5-19.6 4.5-28.6 0L182.1 3.4c-13.6-6.8-30-3.1-39.5 8.8-13.5 17-31.4 50-40.6 82.8-42.7 7.9-70 19.7-70 33 0 12.6 24.8 23.9 64 31.7v.3c0 23.4 6.8 45.1 17.8 64H56.3c-11.5 0-19.2 11.7-14.7 22.3l25.8 60.2C27.3 329.8 0 372.7 0 422.4v44.8C0 491.9 20.1 512 44.8 512h358.4c24.7 0 44.8-20.1 44.8-44.8v-44.8c0-48.4-25.8-90.4-64.1-114.1zM176 480l-41.6-192 49.6 32 24 40-32 120zm96 0l-32-120 24-40 49.6-32L272 480zm41.7-298.5c-3.9 11.9-7 24.6-16.5 33.4-10.1 9.3-48 22.4-64-25-2.8-8.4-15.4-8.4-18.3 0-17 50.2-56 32.4-64 25-9.5-8.8-12.7-21.5-16.5-33.4-.8-2.5-6.3-5.7-6.3-5.8v-10.8c28.3 3.6 61 5.8 96 5.8s67.7-2.1 96-5.8v10.8c-.1.1-5.6 3.2-6.4 5.8z';

exports.definition = {
  prefix: prefix,
  iconName: iconName,
  icon: [
    width,
    height,
    ligatures,
    unicode,
    svgPathData
  ]};

exports.faUserSecret = exports.definition;
exports.prefix = prefix;
exports.iconName = iconName;
exports.width = width;
exports.height = height;
exports.ligatures = ligatures;
exports.unicode = unicode;
exports.svgPathData = svgPathData;
});

unwrapExports(faUserSecret);
var faUserSecret_1 = faUserSecret.definition;
var faUserSecret_2 = faUserSecret.faUserSecret;
var faUserSecret_3 = faUserSecret.prefix;
var faUserSecret_4 = faUserSecret.iconName;
var faUserSecret_5 = faUserSecret.width;
var faUserSecret_6 = faUserSecret.height;
var faUserSecret_7 = faUserSecret.ligatures;
var faUserSecret_8 = faUserSecret.unicode;
var faUserSecret_9 = faUserSecret.svgPathData;

var faCommentDots = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, '__esModule', { value: true });
var prefix = 'fas';
var iconName = 'comment-dots';
var width = 512;
var height = 512;
var ligatures = [];
var unicode = 'f4ad';
var svgPathData = 'M256 32C114.6 32 0 125.1 0 240c0 49.6 21.4 95 57 130.7C44.5 421.1 2.7 466 2.2 466.5c-2.2 2.3-2.8 5.7-1.5 8.7S4.8 480 8 480c66.3 0 116-31.8 140.6-51.4 32.7 12.3 69 19.4 107.4 19.4 141.4 0 256-93.1 256-208S397.4 32 256 32zM128 272c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32zm128 0c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32zm128 0c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32z';

exports.definition = {
  prefix: prefix,
  iconName: iconName,
  icon: [
    width,
    height,
    ligatures,
    unicode,
    svgPathData
  ]};

exports.faCommentDots = exports.definition;
exports.prefix = prefix;
exports.iconName = iconName;
exports.width = width;
exports.height = height;
exports.ligatures = ligatures;
exports.unicode = unicode;
exports.svgPathData = svgPathData;
});

unwrapExports(faCommentDots);
var faCommentDots_1 = faCommentDots.definition;
var faCommentDots_2 = faCommentDots.faCommentDots;
var faCommentDots_3 = faCommentDots.prefix;
var faCommentDots_4 = faCommentDots.iconName;
var faCommentDots_5 = faCommentDots.width;
var faCommentDots_6 = faCommentDots.height;
var faCommentDots_7 = faCommentDots.ligatures;
var faCommentDots_8 = faCommentDots.unicode;
var faCommentDots_9 = faCommentDots.svgPathData;

var faSun = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, '__esModule', { value: true });
var prefix = 'fas';
var iconName = 'sun';
var width = 512;
var height = 512;
var ligatures = [];
var unicode = 'f185';
var svgPathData = 'M256 160c-52.9 0-96 43.1-96 96s43.1 96 96 96 96-43.1 96-96-43.1-96-96-96zm246.4 80.5l-94.7-47.3 33.5-100.4c4.5-13.6-8.4-26.5-21.9-21.9l-100.4 33.5-47.4-94.8c-6.4-12.8-24.6-12.8-31 0l-47.3 94.7L92.7 70.8c-13.6-4.5-26.5 8.4-21.9 21.9l33.5 100.4-94.7 47.4c-12.8 6.4-12.8 24.6 0 31l94.7 47.3-33.5 100.5c-4.5 13.6 8.4 26.5 21.9 21.9l100.4-33.5 47.3 94.7c6.4 12.8 24.6 12.8 31 0l47.3-94.7 100.4 33.5c13.6 4.5 26.5-8.4 21.9-21.9l-33.5-100.4 94.7-47.3c13-6.5 13-24.7.2-31.1zm-155.9 106c-49.9 49.9-131.1 49.9-181 0-49.9-49.9-49.9-131.1 0-181 49.9-49.9 131.1-49.9 181 0 49.9 49.9 49.9 131.1 0 181z';

exports.definition = {
  prefix: prefix,
  iconName: iconName,
  icon: [
    width,
    height,
    ligatures,
    unicode,
    svgPathData
  ]};

exports.faSun = exports.definition;
exports.prefix = prefix;
exports.iconName = iconName;
exports.width = width;
exports.height = height;
exports.ligatures = ligatures;
exports.unicode = unicode;
exports.svgPathData = svgPathData;
});

unwrapExports(faSun);
var faSun_1 = faSun.definition;
var faSun_2 = faSun.faSun;
var faSun_3 = faSun.prefix;
var faSun_4 = faSun.iconName;
var faSun_5 = faSun.width;
var faSun_6 = faSun.height;
var faSun_7 = faSun.ligatures;
var faSun_8 = faSun.unicode;
var faSun_9 = faSun.svgPathData;

var faMoon = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, '__esModule', { value: true });
var prefix = 'fas';
var iconName = 'moon';
var width = 512;
var height = 512;
var ligatures = [];
var unicode = 'f186';
var svgPathData = 'M283.211 512c78.962 0 151.079-35.925 198.857-94.792 7.068-8.708-.639-21.43-11.562-19.35-124.203 23.654-238.262-71.576-238.262-196.954 0-72.222 38.662-138.635 101.498-174.394 9.686-5.512 7.25-20.197-3.756-22.23A258.156 258.156 0 0 0 283.211 0c-141.309 0-256 114.511-256 256 0 141.309 114.511 256 256 256z';

exports.definition = {
  prefix: prefix,
  iconName: iconName,
  icon: [
    width,
    height,
    ligatures,
    unicode,
    svgPathData
  ]};

exports.faMoon = exports.definition;
exports.prefix = prefix;
exports.iconName = iconName;
exports.width = width;
exports.height = height;
exports.ligatures = ligatures;
exports.unicode = unicode;
exports.svgPathData = svgPathData;
});

unwrapExports(faMoon);
var faMoon_1 = faMoon.definition;
var faMoon_2 = faMoon.faMoon;
var faMoon_3 = faMoon.prefix;
var faMoon_4 = faMoon.iconName;
var faMoon_5 = faMoon.width;
var faMoon_6 = faMoon.height;
var faMoon_7 = faMoon.ligatures;
var faMoon_8 = faMoon.unicode;
var faMoon_9 = faMoon.svgPathData;

var faExternalLinkAlt = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, '__esModule', { value: true });
var prefix = 'fas';
var iconName = 'external-link-alt';
var width = 512;
var height = 512;
var ligatures = [];
var unicode = 'f35d';
var svgPathData = 'M432,320H400a16,16,0,0,0-16,16V448H64V128H208a16,16,0,0,0,16-16V80a16,16,0,0,0-16-16H48A48,48,0,0,0,0,112V464a48,48,0,0,0,48,48H400a48,48,0,0,0,48-48V336A16,16,0,0,0,432,320ZM488,0h-128c-21.37,0-32.05,25.91-17,41l35.73,35.73L135,320.37a24,24,0,0,0,0,34L157.67,377a24,24,0,0,0,34,0L435.28,133.32,471,169c15,15,41,4.5,41-17V24A24,24,0,0,0,488,0Z';

exports.definition = {
  prefix: prefix,
  iconName: iconName,
  icon: [
    width,
    height,
    ligatures,
    unicode,
    svgPathData
  ]};

exports.faExternalLinkAlt = exports.definition;
exports.prefix = prefix;
exports.iconName = iconName;
exports.width = width;
exports.height = height;
exports.ligatures = ligatures;
exports.unicode = unicode;
exports.svgPathData = svgPathData;
});

unwrapExports(faExternalLinkAlt);
var faExternalLinkAlt_1 = faExternalLinkAlt.definition;
var faExternalLinkAlt_2 = faExternalLinkAlt.faExternalLinkAlt;
var faExternalLinkAlt_3 = faExternalLinkAlt.prefix;
var faExternalLinkAlt_4 = faExternalLinkAlt.iconName;
var faExternalLinkAlt_5 = faExternalLinkAlt.width;
var faExternalLinkAlt_6 = faExternalLinkAlt.height;
var faExternalLinkAlt_7 = faExternalLinkAlt.ligatures;
var faExternalLinkAlt_8 = faExternalLinkAlt.unicode;
var faExternalLinkAlt_9 = faExternalLinkAlt.svgPathData;

/* src/components/MigrationTimeline.svelte generated by Svelte v3.12.1 */

const css$5 = {
	code: "@keyframes svelte-1mrw0kg-blinker{50%{opacity:0}}",
	map: "{\"version\":3,\"file\":\"MigrationTimeline.svelte\",\"sources\":[\"MigrationTimeline.svelte\"],\"sourcesContent\":[\"<div class=\\\"w-full relative\\\">\\n  <div class=\\\"w-full\\\">\\n    <svg class=\\\"flex-grow border-gray-900 w-full\\\" width={width} height={height} bind:this={svg}>\\n      <defs>\\n        {#each Object.values(games) as game}\\n        <pattern id=\\\"game-box-art-{game.id}\\\" width={game_box_art_width} height={game_box_art_height} patternUnits=\\\"userSpaceOnUse\\\" y={height*0.25}>\\n          {#if game.box_art_url}\\n            <image xlink:href={game.box_art_url.replace(\\\"{width}\\\", game_box_art_width).replace(\\\"{height}\\\", game_box_art_height)} width={game_box_art_width} height={game_box_art_height} x=0 y=0 > </image>\\n          {/if}\\n        </pattern>\\n        {/each}\\n        <marker id=\\\"bighead\\\" \\n          markerWidth=\\\"4\\\" markerHeight=\\\"8\\\" \\n                          refX=\\\"0.1\\\" refY=\\\"4\\\" orient=\\\"auto\\\" >\\n          <path d=\\\"M0,0 V8 L4,4 Z\\\" fill=\\\"#444\\\" />\\n        </marker>\\n      </defs>\\n      <!--<g shape-rendering=\\\"crispEdges\\\">\\n        <line x1=\\\"{width*0/8}\\\" x2=\\\"{width*0/8}\\\" y1=\\\"0\\\" y2=\\\"{height}\\\" stroke-width=\\\"1.0\\\" stroke=\\\"#444\\\"></line>\\n        <text x=\\\"0\\\" y=\\\"0\\\" fill=\\\"#444\\\" font-size=\\\"10\\\" font-family=\\\"Arial\\\" transform=\\\"translate({width*0/8 + 3}, 3) rotate(90)\\\">\\n          0am\\n        </text>\\n        <line x1=\\\"{width*1/8}\\\" x2=\\\"{width*1/8}\\\" y1=\\\"0\\\" y2=\\\"{height}\\\" stroke-width=\\\"1.0\\\" stroke=\\\"#aaa\\\"></line>\\n        <text x=\\\"0\\\" y=\\\"0\\\" fill=\\\"#aaa\\\" font-size=\\\"10\\\" font-family=\\\"Arial\\\" transform=\\\"translate({width*1/8 + 3}, 3) rotate(90)\\\">\\n          3am\\n        </text>\\n        <line x1=\\\"{width*2/8}\\\" x2=\\\"{width*2/8}\\\" y1=\\\"0\\\" y2=\\\"{height}\\\" stroke-width=\\\"1.0\\\" stroke=\\\"#666\\\"></line>\\n        <text fill=\\\"#666\\\" font-size=\\\"10\\\" font-family=\\\"Arial\\\" transform=\\\"translate({width*2/8 + 3}, 3) rotate(90)\\\">\\n          6am\\n        </text>\\n        <line x1=\\\"{width*3/8}\\\" x2=\\\"{width*3/8}\\\" y1=\\\"0\\\" y2=\\\"{height}\\\" stroke-width=\\\"1.0\\\" stroke=\\\"#aaa\\\"></line>\\n        <text fill=\\\"#aaa\\\" font-size=\\\"10\\\" font-family=\\\"Arial\\\" transform=\\\"translate({width*3/8 + 3}, 3) rotate(90)\\\">\\n          9am\\n        </text>\\n        <line x1=\\\"{width*4/8}\\\" x2=\\\"{width*4/8}\\\" y1=\\\"0\\\" y2=\\\"{height}\\\" stroke-width=\\\"1.0\\\" stroke=\\\"#444\\\"></line>\\n        <text fill=\\\"#444\\\" font-size=\\\"10\\\" font-family=\\\"Arial\\\" transform=\\\"translate({width*4/8 + 3}, 3) rotate(90)\\\">\\n          정오\\n        </text>\\n        <line x1=\\\"{width*5/8}\\\" x2=\\\"{width*5/8}\\\" y1=\\\"0\\\" y2=\\\"{height}\\\" stroke-width=\\\"1.0\\\" stroke=\\\"#aaa\\\"></line>\\n        <text fill=\\\"#aaa\\\" font-size=\\\"10\\\" font-family=\\\"Arial\\\" transform=\\\"translate({width*5/8 + 3}, 3) rotate(90)\\\">\\n          3pm\\n        </text>\\n        <line x1=\\\"{width*6/8}\\\" x2=\\\"{width*6/8}\\\" y1=\\\"0\\\" y2=\\\"{height}\\\" stroke-width=\\\"1.0\\\" stroke=\\\"#666\\\"></line>\\n        <text fill=\\\"#666\\\" font-size=\\\"10\\\" font-family=\\\"Arial\\\" transform=\\\"translate({width*6/8 + 3}, 3) rotate(90)\\\">\\n          6pm\\n        </text>\\n        <line x1=\\\"{width*7/8}\\\" x2=\\\"{width*7/8}\\\" y1=\\\"0\\\" y2=\\\"{height}\\\" stroke-width=\\\"1.0\\\" stroke=\\\"#aaa\\\"></line>\\n        <text fill=\\\"#aaa\\\" font-size=\\\"10\\\" font-family=\\\"Arial\\\" transform=\\\"translate({width*7/8 + 3}, 3) rotate(90)\\\">\\n          9pm\\n        </text>\\n        <line x1=\\\"{width*8/8}\\\" x2=\\\"{width*8/8}\\\" y1=\\\"0\\\" y2=\\\"{height}\\\" stroke-width=\\\"1.0\\\" stroke=\\\"#444\\\"></line>\\n        <text x=\\\"0\\\" y=\\\"0\\\" fill=\\\"#444\\\" font-size=\\\"10\\\" font-family=\\\"Arial\\\" transform=\\\"translate({width*8/8 + 3}, 3) rotate(90)\\\">\\n          12pm\\n        </text>\\n      </g>-->\\n      <g stroke=\\\"#A0AEC0\\\" stroke-width=1.0>\\n      <path \\n         d=\\\"M0,{height*0.5} L{width - 4},{height*0.5}\\\" \\n         fill=\\\"none\\\"\\n         marker-end=\\\"url(#bighead)\\\"\\n      /> \\n        {#each data_chunks as data}\\n          {#if data[0] && data[0][5] && data[0][5].game && games[data[0][5].game.id] && data[0][5].game.box_art_url}\\n            <path \\n              style=\\\"fill:url(#game-box-art-{data[0][5].game.id}); stroke-linejoin: round;\\\"\\n               d=\\\"{data.path}\\\" />\\n          {:else}\\n            <path \\n              style=\\\"stroke-linejoin: round;\\\"\\n              fill=\\\"#000000\\\" \\n               d=\\\"{data.path}\\\" />\\n          {/if}\\n        {/each}\\n      </g>\\n      <g shape-rendering=\\\"crispEdges\\\">\\n        <line class:hidden={tooltip_data == null} x1={tooltip_x} x2={tooltip_x} y1={0} y2={height} stroke=\\\"#000000\\\" stroke-width=0.5 \\n          stroke-dasharray=\\\"4 1\\\"\\n          />\\n      </g>\\n    </svg>\\n  </div>\\n\\t{#if tooltip_data} \\n    <div class=\\\"absolute bg-white opacity-75 z-50\\\" style=\\\"{tooltip_x < width*0.5? 'left:' + (tooltip_x+5) + 'px': 'right:' + ((width-tooltip_x)+5) + 'px'}; top: {tooltip_y + 5}px\\\"> \\n            <div class=\\\"flex flex-col font-sans custom-tooltip p-3 w-48 flex-unwrap\\\"> \\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"text-gray-600 text-xs font-semibold tracking-wide\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t{tooltip_data_time_format(tooltip_data)}\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n              <p class=\\\"break-all mt-1 text-gray italic tracking-tight\\\" style=\\\"font-size: 0.5rem\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t{tooltip_data[5].title}\\n              </p>\\n                <div class=\\\"mt-1 flex flex-row flex-wrap items-center text-gray-900\\\">\\n                  <svg area-hidden=\\\"true\\\" role=\\\"img\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 {faUser.icon[0]} {faUser.icon[1]}\\\" class=\\\"w-4 h-4 mr-2 overflow-visible inline-block\\\">\\n                    <path fill=\\\"currentColor\\\" d=\\\"{faUser.icon[4]}\\\"/>\\n                  </svg>\\n                  <b>{tooltip_data[1]}명</b>\\n                </div>\\n                <div class=\\\"flex flex-row flex-wrap items-center text-gray-600 text-xs\\\">\\n                  <svg area-hidden=\\\"true\\\" role=\\\"img\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 {faUserSecret.icon[0]} {faUserSecret.icon[1]}\\\" class=\\\"w-3 h-3 mr-2 overflow-visible inline-block\\\">\\n                    <path fill=\\\"currentColor\\\" d=\\\"{faUserSecret.icon[4]}\\\"/>\\n                  </svg>\\n                  <b>{tooltip_data[1] - tooltip_data[2]}명</b>\\n                </div>\\n                <div class=\\\"flex flex-row flex-wrap items-center text-yellow-700 text-xs\\\">\\n                  <svg area-hidden=\\\"true\\\" role=\\\"img\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 {faKey.icon[0]} {faKey.icon[1]}\\\" class=\\\"w-3 h-3 mr-2 overflow-visible inline-block\\\">\\n                    <path fill=\\\"currentColor\\\" d=\\\"{faKey.icon[4]}\\\"/>\\n                  </svg>\\n                  <b>{tooltip_data[2]}명</b>\\n                </div>\\n                <div class=\\\"mt-1 flex flex-row flex-wrap items-center\\\" style=\\\"color: #FF6F61\\\">\\n                  <svg area-hidden=\\\"true\\\" role=\\\"img\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 {faCommentDots.icon[0]} {faCommentDots.icon[1]}\\\" class=\\\"w-4 h-4 mr-2 overflow-visible inline-block\\\">\\n                    <path fill=\\\"currentColor\\\" d=\\\"{faCommentDots.icon[4]}\\\"/>\\n                  </svg>\\n                  <b>{tooltip_data[4].toFixed(1)}채팅/초</b>\\n                </div>\\n                <div class=\\\"mt-1 flex flex-row flex-wrap items-center text-purple-600\\\">\\n                  <svg area-hidden=\\\"true\\\" role=\\\"img\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 {faHistory.icon[0]} {faHistory.icon[1]}\\\" class=\\\"w-4 h-4 mr-2 overflow-visible inline-block\\\">\\n                    <path fill=\\\"currentColor\\\" d=\\\"{faHistory.icon[4]}\\\"/>\\n                  </svg>\\n                  <b>업타임 {Math.floor((tooltip_data[0] - tooltip_data[5].started_at) / 3600)}시간{Math.round((tooltip_data[0] - tooltip_data[5].started_at) % 3600 / 60)}분</b>\\n                </div>\\n              <p class=\\\"mt-2 text-xs px-1 border rounded-full text-white text-center\\\" style=\\\"background-color: {dark_random_color(tooltip_data[5].game && tooltip_data[5].game.id || 0)}\\\">\\n                {tooltip_data[5].game != null? tooltip_data[5].game.name : \\\"\\\"}\\n              </p>\\n          </div>\\n    </div>\\n\\t{/if}\\n</div>\\n\\n<script context=\\\"module\\\">\\n  import { writable } from 'svelte/store';\\n  let max_y_axis = writable(0);\\n  let max_y_axis_right = writable(0);\\n\\n\\tfunction tooltip_data_time_format(data) {\\n\\t\\tlet d = new Date(data[0]*1000),\\n\\t\\t\\t\\th = d.getHours(), m = d.getMinutes();\\n\\t\\treturn `${h<12? \\\"AM\\\": \\\"PM\\\"} ${(\\\"0\\\"+(h>12? h-12: h)).slice(-2)}:${(\\\"0\\\"+m).slice(-2)}`;\\n\\t}\\n</script>\\n\\n<script>\\nimport { onMount } from \\\"svelte\\\";\\nimport { faUser } from '@fortawesome/free-solid-svg-icons/faUser'\\nimport { faUserLock } from '@fortawesome/free-solid-svg-icons/faUserLock'\\nimport { faUserSecret } from '@fortawesome/free-solid-svg-icons/faUserSecret'\\nimport { faUserCheck } from '@fortawesome/free-solid-svg-icons/faUserCheck'\\nimport { faCommentDots } from '@fortawesome/free-solid-svg-icons/faCommentDots'\\nimport { faKey } from '@fortawesome/free-solid-svg-icons/faKey'\\nimport { faSun } from '@fortawesome/free-solid-svg-icons/faSun'\\nimport { faMoon } from '@fortawesome/free-solid-svg-icons/faMoon'\\nimport { faExternalLinkAlt } from '@fortawesome/free-solid-svg-icons/faExternalLinkAlt'\\nimport { faHistory } from '@fortawesome/free-solid-svg-icons/faHistory';\\nimport { dark_random_color, findLastIndex } from \\\"../util.js\\\";\\nimport { API } from '../api.js';\\n\\nexport let date;\\nexport let streamer;\\n\\n\\n\\nlet tooltip_x=0, \\n\\t\\ttooltip_y=0, \\n\\t\\ttooltip_data=null;\\n\\nlet today = new Date(date); today.setHours(0,0,0,0);\\nlet to = new Date(today.getTime() + 1000*60*60*24);\\nlet from = today;\\n\\nexport let height = 100;\\nlet width = 500;\\n\\nlet games = {};\\nlet data_chunks = [];\\nlet last_data = null;\\n$: game_box_art_width = height*0.4;\\n$: game_box_art_height = height*0.5;\\n\\nlet svg;\\n\\nlet to_timestamp = to.getTime()/1000;\\nlet from_timestamp = from.getTime()/1000;\\nfunction xscale(x) {\\n  return width * (x - from_timestamp) / (24*60*60);\\n}\\nfunction ixscale(x) {\\n  return x / width * (24*60*60) + from_timestamp\\n}\\nfunction yscale(x) {\\n  return height * ($max_y_axis - x) / $max_y_axis;\\n}\\nfunction yscale_right(x) {\\n  return height * ($max_y_axis_right - x) / $max_y_axis_right + 3;\\n}\\nfunction update_path() {\\n  for(let data of data_chunks){\\n    data.path = \\n      `M${xscale(data[0][0])},${height*0.5}` +\\n      data.map(d=>\\n        `L${xscale(d[0])},${yscale(d[2])*0.5}`\\n      ).join(\\\"\\\") + \\n      data.map((_, i, arr) =>\\n        `L${xscale(arr[arr.length - i - 1][0])},${yscale(arr[arr.length - i - 1][2])*-0.5 + height*1.0}`\\n      ).join(\\\"\\\") + \\n      `L${xscale(data[0][0])},${height*0.5}`;\\n  }\\n  data_chunks = data_chunks;\\n}\\nlet last_max_y_axis = $max_y_axis;\\nlet last_max_y_axis_right = $max_y_axis_right;\\n$: if(data_chunks && ((last_max_y_axis != $max_y_axis) || (last_max_y_axis_right != $max_y_axis_right))) {\\n  last_max_y_axis = $max_y_axis;\\n  last_max_y_axis_right = $max_y_axis_right;\\n  update_path();\\n}\\n\\nlet now_x = null;\\n\\nonMount(async ()=> {\\n\\twidth = svg.getBoundingClientRect().width;\\n  now_x = xscale(new Date().getTime()/1000);\\n  if(streamer == null)\\n    return;\\n  let {stream_changes, stream_metadata_changes} = await API.timeline(streamer.id, from, to);\\n  last_data = stream_changes[stream_changes.length-1];\\n  max_y_axis.update(x => Math.max(x, ...stream_changes.map(d=>Math.max(d[2]))));\\n  max_y_axis_right.update(x => Math.max(x, ...stream_changes.map(d=>d[4])));\\n  let j=0;\\n  let metadatas = stream_changes.map(x => {\\n    while(stream_metadata_changes.length > j && x[0] >= stream_metadata_changes[j].time) ++j;\\n    if(x[1] === null) return null;\\n    else if(j>0) return stream_metadata_changes[j-1];\\n    else return null;\\n  });\\n  stream_changes = stream_changes.map((d, i)=>[...d, metadatas[i]]);\\n  let sm_n = 20, chatting_speed_sm = [stream_changes.slice(0, sm_n).reduce((a,b)=>a+b[4], 0)/sm_n];\\n  for(let i=sm_n, l=stream_changes.length, sm=chatting_speed_sm[0]; i<l; ++i){\\n    sm = sm + (stream_changes[i][4] - stream_changes[i-sm_n][4])/sm_n;\\n    chatting_speed_sm.push(sm);\\n  }\\n  for(let i=0, sm=0; i<Math.min(sm_n, stream_changes.length); ++i){\\n    sm = sm*i/(i+1) + stream_changes[i][4]/(i+1);\\n    stream_changes[i][4] = sm;\\n  }\\n  for(let i=0, l=chatting_speed_sm.length; i<l; ++i)\\n    stream_changes[Math.min(stream_changes.length-1, i + sm_n-1)][4] = chatting_speed_sm[i];\\n\\n\\tsvg.onmousemove = function(e){\\n\\t\\tlet x = e.clientX - svg.getBoundingClientRect().x, \\n\\t\\t\\t\\ty = e.clientY - svg.getBoundingClientRect().y;\\n    tooltip_x = x; \\n    tooltip_y = y;\\n    let target_date = ixscale(x);\\n    let right_index = stream_changes.findIndex(d => d[0] >= target_date),\\n        left_index = findLastIndex(stream_changes, d => d[0] <= target_date);\\n    let nearest_index; \\n    if(right_index >= 0 && left_index >= 0) \\n      nearest_index = Math.abs(stream_changes[left_index][0] - target_date) <= Math.abs(stream_changes[right_index][0] - target_date)?\\n        left_index: right_index;\\n    else if(right_index >= 0)\\n      nearest_index = right_index;\\n    else if(left_index >= 0)\\n      nearest_index = left_index;\\n    else {\\n      tooltip_data = null;\\n      return;\\n    }\\n\\n    if(Math.abs(stream_changes[nearest_index][0] - target_date) < 60*60) {// || right_index != 0 && metadatas[right_index].started_at == metadatas[right_index-1].started_at) {\\n      tooltip_data = stream_changes[nearest_index];\\n    }\\n    else \\n      tooltip_data = null;\\n  }\\n  svg.onmouseleave = function(e){\\n    tooltip_data = null;\\n  }\\n  data_chunks.push([]);\\n\\tfor(let i=0, l=stream_changes.length, j=0; i<l; ++i) {\\n   \\t  if(i>0 && metadatas[i] != metadatas[i-1] && \\n          ((metadatas[i] == null || metadatas[i-1] == null) || \\n            metadatas[i].started_at != metadatas[i-1].started_at || \\n            (metadatas[i].game && metadatas[i].game.id) != (metadatas[i-1].game && metadatas[i-1].game.id) ||\\n            metadatas[i].title != metadatas[i-1].title)){\\n        ++j;\\n        data_chunks.push([]);\\n        if(metadatas[i] && metadatas[i-1] && metadatas[i].started_at == metadatas[i-1].started_at){\\n          let mid = stream_changes[i].slice(0, 5).map((d, j) => Math.floor((d + stream_changes[i-1][j])*0.5));\\n          data_chunks[j-1].push([...mid, metadatas[i-1]])\\n          data_chunks[j].push([...mid, metadatas[i]])\\n        }\\n      }\\n      data_chunks[j].push(stream_changes[i])\\n  }\\n  update_path();\\n  data_chunks = data_chunks;\\n  for(let data of data_chunks){\\n  \\tif(data[0] == null || data[0][5] == null || data[0][5].game == null) continue;\\n\\t\\tgames[data[0][5].game.id] = data[0][5].game;\\n\\t}\\n});\\n</script>\\n\\n<style>\\n.is_streaming_label {\\n  animation: blinker 1s linear infinite;\\n}\\n@keyframes blinker {\\n  50% {\\n    opacity: 0;\\n  }\\n}\\n</style>\\n\"],\"names\":[],\"mappings\":\"AAkTA,WAAW,sBAAQ,CAAC,AAClB,GAAG,AAAC,CAAC,AACH,OAAO,CAAE,CAAC,AACZ,CAAC,AACH,CAAC\"}"
};

let max_y_axis = writable(0);
let max_y_axis_right = writable(0);

	function tooltip_data_time_format(data) {
		let d = new Date(data[0]*1000),
				h = d.getHours(), m = d.getMinutes();
		return `${h<12? "AM": "PM"} ${("0"+(h>12? h-12: h)).slice(-2)}:${("0"+m).slice(-2)}`;
	}

const MigrationTimeline = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	let $max_y_axis = get_store_value(max_y_axis), $max_y_axis_right = get_store_value(max_y_axis_right);

	

let { date, streamer } = $$props;



let tooltip_x=0, 
		tooltip_y=0, 
		tooltip_data=null;

let today = new Date(date); today.setHours(0,0,0,0);
let to = new Date(today.getTime() + 1000*60*60*24);
let from = today;

let { height = 100 } = $$props;
let width = 500;

let games = {};
let data_chunks = [];
let last_data = null;

let svg;

let to_timestamp = to.getTime()/1000;
let from_timestamp = from.getTime()/1000;
function xscale(x) {
  return width * (x - from_timestamp) / (24*60*60);
}
function ixscale(x) {
  return x / width * (24*60*60) + from_timestamp
}
function yscale(x) {
  return height * ($max_y_axis - x) / $max_y_axis;
}
function update_path() {
  for(let data of data_chunks){
    data.path = 
      `M${xscale(data[0][0])},${height*0.5}` +
      data.map(d=>
        `L${xscale(d[0])},${yscale(d[2])*0.5}`
      ).join("") + 
      data.map((_, i, arr) =>
        `L${xscale(arr[arr.length - i - 1][0])},${yscale(arr[arr.length - i - 1][2])*-0.5 + height*1.0}`
      ).join("") + 
      `L${xscale(data[0][0])},${height*0.5}`;
  }
  data_chunks = data_chunks;
}
let last_max_y_axis = $max_y_axis;
let last_max_y_axis_right = $max_y_axis_right;

let now_x = null;

onMount(async ()=> {
	width = svg.getBoundingClientRect().width;
  now_x = xscale(new Date().getTime()/1000);
  if(streamer == null)
    return;
  let {stream_changes, stream_metadata_changes} = await API.timeline(streamer.id, from, to);
  last_data = stream_changes[stream_changes.length-1];
  max_y_axis.update(x => Math.max(x, ...stream_changes.map(d=>Math.max(d[2]))));
  max_y_axis_right.update(x => Math.max(x, ...stream_changes.map(d=>d[4])));
  let j=0;
  let metadatas = stream_changes.map(x => {
    while(stream_metadata_changes.length > j && x[0] >= stream_metadata_changes[j].time) ++j;
    if(x[1] === null) return null;
    else if(j>0) return stream_metadata_changes[j-1];
    else return null;
  });
  stream_changes = stream_changes.map((d, i)=>[...d, metadatas[i]]);
  let sm_n = 20, chatting_speed_sm = [stream_changes.slice(0, sm_n).reduce((a,b)=>a+b[4], 0)/sm_n];
  for(let i=sm_n, l=stream_changes.length, sm=chatting_speed_sm[0]; i<l; ++i){
    sm = sm + (stream_changes[i][4] - stream_changes[i-sm_n][4])/sm_n;
    chatting_speed_sm.push(sm);
  }
  for(let i=0, sm=0; i<Math.min(sm_n, stream_changes.length); ++i){
    sm = sm*i/(i+1) + stream_changes[i][4]/(i+1);
    stream_changes[i][4] = sm;
  }
  for(let i=0, l=chatting_speed_sm.length; i<l; ++i)
    stream_changes[Math.min(stream_changes.length-1, i + sm_n-1)][4] = chatting_speed_sm[i];

	svg.onmousemove = function(e){
		let x = e.clientX - svg.getBoundingClientRect().x, 
				y = e.clientY - svg.getBoundingClientRect().y;
    tooltip_x = x; 
    tooltip_y = y;
    let target_date = ixscale(x);
    let right_index = stream_changes.findIndex(d => d[0] >= target_date),
        left_index = findLastIndex(stream_changes, d => d[0] <= target_date);
    let nearest_index; 
    if(right_index >= 0 && left_index >= 0) 
      nearest_index = Math.abs(stream_changes[left_index][0] - target_date) <= Math.abs(stream_changes[right_index][0] - target_date)?
        left_index: right_index;
    else if(right_index >= 0)
      nearest_index = right_index;
    else if(left_index >= 0)
      nearest_index = left_index;
    else {
      tooltip_data = null;
      return;
    }

    if(Math.abs(stream_changes[nearest_index][0] - target_date) < 60*60) {// || right_index != 0 && metadatas[right_index].started_at == metadatas[right_index-1].started_at) {
      tooltip_data = stream_changes[nearest_index];
    }
    else 
      tooltip_data = null;
  };
  svg.onmouseleave = function(e){
    tooltip_data = null;
  };
  data_chunks.push([]);
	for(let i=0, l=stream_changes.length, j=0; i<l; ++i) {
   	  if(i>0 && metadatas[i] != metadatas[i-1] && 
          ((metadatas[i] == null || metadatas[i-1] == null) || 
            metadatas[i].started_at != metadatas[i-1].started_at || 
            (metadatas[i].game && metadatas[i].game.id) != (metadatas[i-1].game && metadatas[i-1].game.id) ||
            metadatas[i].title != metadatas[i-1].title)){
        ++j;
        data_chunks.push([]);
        if(metadatas[i] && metadatas[i-1] && metadatas[i].started_at == metadatas[i-1].started_at){
          let mid = stream_changes[i].slice(0, 5).map((d, j) => Math.floor((d + stream_changes[i-1][j])*0.5));
          data_chunks[j-1].push([...mid, metadatas[i-1]]);
          data_chunks[j].push([...mid, metadatas[i]]);
        }
      }
      data_chunks[j].push(stream_changes[i]);
  }
  update_path();
  data_chunks = data_chunks;
  for(let data of data_chunks){
  	if(data[0] == null || data[0][5] == null || data[0][5].game == null) continue;
		games[data[0][5].game.id] = data[0][5].game;
	}
});

	if ($$props.date === void 0 && $$bindings.date && date !== void 0) $$bindings.date(date);
	if ($$props.streamer === void 0 && $$bindings.streamer && streamer !== void 0) $$bindings.streamer(streamer);
	if ($$props.height === void 0 && $$bindings.height && height !== void 0) $$bindings.height(height);

	$$result.css.add(css$5);

	let game_box_art_width = height*0.4;
	let game_box_art_height = height*0.5;
	if(data_chunks && ((last_max_y_axis != $max_y_axis) || (last_max_y_axis_right != $max_y_axis_right))) {
      last_max_y_axis = $max_y_axis;
      last_max_y_axis_right = $max_y_axis_right;
      update_path();
    }

	return `<div class="w-full relative">
	  <div class="w-full">
	    <svg class="flex-grow border-gray-900 w-full"${add_attribute("width", width, 0)}${add_attribute("height", height, 0)}${add_attribute("this", svg, 1)}>
	      <defs>
	        ${each(Object.values(games), (game) => `<pattern id="game-box-art-${escape$1(game.id)}"${add_attribute("width", game_box_art_width, 0)}${add_attribute("height", game_box_art_height, 0)} patternUnits="userSpaceOnUse"${add_attribute("y", height*0.25, 0)}>
	          ${ game.box_art_url ? `<image${add_attribute("xlink:href", game.box_art_url.replace("{width}", game_box_art_width).replace("{height}", game_box_art_height), 0)}${add_attribute("width", game_box_art_width, 0)}${add_attribute("height", game_box_art_height, 0)} x="0" y="0"> </image>` : `` }
	        </pattern>`)}
	        <marker id="bighead" markerWidth="4" markerHeight="8" refX="0.1" refY="4" orient="auto">
	          <path d="M0,0 V8 L4,4 Z" fill="#444"></path>
	        </marker>
	      </defs>
	      
	      <g stroke="#A0AEC0" stroke-width="1.0">
	      <path d="M0,${escape$1(height*0.5)} L${escape$1(width - 4)},${escape$1(height*0.5)}" fill="none" marker-end="url(#bighead)"></path> 
	        ${each(data_chunks, (data) => `${ data[0] && data[0][5] && data[0][5].game && games[data[0][5].game.id] && data[0][5].game.box_art_url ? `<path style="fill:url(#game-box-art-${escape$1(data[0][5].game.id)}); stroke-linejoin: round;"${add_attribute("d", data.path, 0)}></path>` : `<path style="stroke-linejoin: round;" fill="#000000"${add_attribute("d", data.path, 0)}></path>` }`)}
	      </g>
	      <g shape-rendering="crispEdges">
	        <line${add_attribute("x1", tooltip_x, 0)}${add_attribute("x2", tooltip_x, 0)}${add_attribute("y1", 0, 0)}${add_attribute("y2", height, 0)} stroke="#000000" stroke-width="0.5" stroke-dasharray="4 1"${add_classes([tooltip_data == null ? "hidden" : ""].join(' ').trim())}></line>
	      </g>
	    </svg>
	  </div>
		${ tooltip_data ? `<div class="absolute bg-white opacity-75 z-50" style="${escape$1(tooltip_x < width*0.5? 'left:' + (tooltip_x+5) + 'px': 'right:' + ((width-tooltip_x)+5) + 'px')}; top: ${escape$1(tooltip_y + 5)}px"> 
	            <div class="flex flex-col font-sans custom-tooltip p-3 w-48 flex-unwrap"> 
								<div class="text-gray-600 text-xs font-semibold tracking-wide">
									${escape$1(tooltip_data_time_format(tooltip_data))}
								</div>
	              <p class="break-all mt-1 text-gray italic tracking-tight" style="font-size: 0.5rem">
									${escape$1(tooltip_data[5].title)}
	              </p>
	                <div class="mt-1 flex flex-row flex-wrap items-center text-gray-900">
	                  <svg area-hidden="true" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 ${escape$1(faUser_2.icon[0])} ${escape$1(faUser_2.icon[1])}" class="w-4 h-4 mr-2 overflow-visible inline-block">
	                    <path fill="currentColor"${add_attribute("d", faUser_2.icon[4], 0)}></path>
	                  </svg>
	                  <b>${escape$1(tooltip_data[1])}명</b>
	                </div>
	                <div class="flex flex-row flex-wrap items-center text-gray-600 text-xs">
	                  <svg area-hidden="true" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 ${escape$1(faUserSecret_2.icon[0])} ${escape$1(faUserSecret_2.icon[1])}" class="w-3 h-3 mr-2 overflow-visible inline-block">
	                    <path fill="currentColor"${add_attribute("d", faUserSecret_2.icon[4], 0)}></path>
	                  </svg>
	                  <b>${escape$1(tooltip_data[1] - tooltip_data[2])}명</b>
	                </div>
	                <div class="flex flex-row flex-wrap items-center text-yellow-700 text-xs">
	                  <svg area-hidden="true" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 ${escape$1(faKey_2.icon[0])} ${escape$1(faKey_2.icon[1])}" class="w-3 h-3 mr-2 overflow-visible inline-block">
	                    <path fill="currentColor"${add_attribute("d", faKey_2.icon[4], 0)}></path>
	                  </svg>
	                  <b>${escape$1(tooltip_data[2])}명</b>
	                </div>
	                <div class="mt-1 flex flex-row flex-wrap items-center" style="color: #FF6F61">
	                  <svg area-hidden="true" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 ${escape$1(faCommentDots_2.icon[0])} ${escape$1(faCommentDots_2.icon[1])}" class="w-4 h-4 mr-2 overflow-visible inline-block">
	                    <path fill="currentColor"${add_attribute("d", faCommentDots_2.icon[4], 0)}></path>
	                  </svg>
	                  <b>${escape$1(tooltip_data[4].toFixed(1))}채팅/초</b>
	                </div>
	                <div class="mt-1 flex flex-row flex-wrap items-center text-purple-600">
	                  <svg area-hidden="true" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 ${escape$1(faHistory_2.icon[0])} ${escape$1(faHistory_2.icon[1])}" class="w-4 h-4 mr-2 overflow-visible inline-block">
	                    <path fill="currentColor"${add_attribute("d", faHistory_2.icon[4], 0)}></path>
	                  </svg>
	                  <b>업타임 ${escape$1(Math.floor((tooltip_data[0] - tooltip_data[5].started_at) / 3600))}시간${escape$1(Math.round((tooltip_data[0] - tooltip_data[5].started_at) % 3600 / 60))}분</b>
	                </div>
	              <p class="mt-2 text-xs px-1 border rounded-full text-white text-center" style="background-color: ${escape$1(dark_random_color(tooltip_data[5].game && tooltip_data[5].game.id || 0))}">
	                ${escape$1(tooltip_data[5].game != null? tooltip_data[5].game.name : "")}
	              </p>
	          </div>
	    </div>` : `` }
	</div>`;
});

/* src/components/Migrations.svelte generated by Svelte v3.12.1 */

const Migrations = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	
  let width = 1;
  let svg;
  let { height = 100, timeline_height = 150, migrations, id1, id2 } = $$props;
  let today;
  onMount(()=> {
    width = svg.getBoundingClientRect().width;
  });

	if ($$props.height === void 0 && $$bindings.height && height !== void 0) $$bindings.height(height);
	if ($$props.timeline_height === void 0 && $$bindings.timeline_height && timeline_height !== void 0) $$bindings.timeline_height(timeline_height);
	if ($$props.migrations === void 0 && $$bindings.migrations && migrations !== void 0) $$bindings.migrations(migrations);
	if ($$props.id1 === void 0 && $$bindings.id1 && id1 !== void 0) $$bindings.id1(id1);
	if ($$props.id2 === void 0 && $$bindings.id2 && id2 !== void 0) $$bindings.id2(id2);

	{
        if(migrations.length){
          today = new Date(migrations[0].time);
          today.setHours(0,0,0,0);
        }
      }
	let paths = migrations.map(m => {
        let x = (new Date(m.time).getTime() - today.getTime() - 30*60*1000)*width/(24*60*60*1000);
        let w = Math.max(1, (Math.sqrt(m.migration_count) / 5)*width/1000);
        if(m.source == id1)
          //return `M${x},${0} C${x + length},${0} ${x},${height} ${x + length},${height}`;
          return {"path": `M${x},${-timeline_height*0.5} L${x},${height*2/3 - w*1.5}`, "width": w, "count": m.migration_count, "x": x};
        else
          //return `M${x},${height} C${x + length},${height} ${x},${0} ${x + length},${0}`;
          return {"path": `M${x},${height+timeline_height*0.5} L${x},${height*1/3 + w*1.5}`, "width": w, "count": m.migration_count, "x": x};
      });

	return `<svg class="w-full overflow-visible opacity-50 ${escape$1($$props.class)}" viewBox="0 0 ${escape$1(width)} ${escape$1(height)}"${add_attribute("width", width, 0)}${add_attribute("height", height, 0)}${add_attribute("this", svg, 1)}>
	  <defs>
	    <marker id="head" markerWidth="2" markerHeight="4" refX="0.1" refY="2" orient="auto">
	      <path d="M0,0 V4 L2,2 Z" fill="#718096"></path>
	    </marker>
	  </defs>
	  <g>
	    ${each(paths, (path) => `<path marker-end="url(#head)"${add_attribute("stroke-width", path.width, 0)} fill="none" stroke="#718096"${add_attribute("d", path.path, 0)}></path>
	      <text fill="#718096"${add_attribute("font-size", 10 + path.width*2, 0)} font-family="Arial" transform="translate(${escape$1(path.x + path.width)}, ${escape$1(height*0.5)}) rotate(90)" text-anchor="middle">
	        ${escape$1(path.count)}명
	      </text>`)}
	  </g>
	</svg>`;
});

const getCalendarPage = (month, year, dayProps, weekStart = 0) => {
  let date = new Date(year, month, 1);
  date.setDate(date.getDate() - date.getDay() + weekStart);
  let nextMonth = month === 11 ? 0 : month + 1;
  // ensure days starts on Sunday
  // and end on saturday
  let weeks = [];
  while (date.getMonth() !== nextMonth || date.getDay() !== weekStart || weeks.length !== 6) {
    if (date.getDay() === weekStart) weeks.unshift({ days: [], id: `${year}${month}${year}${weeks.length}` });
    const updated = Object.assign({
      partOfMonth: date.getMonth() === month,
      day: date.getDate(),
      month: date.getMonth(),
      year: date.getFullYear(),
      date: new Date(date)
    }, dayProps(date));
    weeks[0].days.push(updated);
    date.setDate(date.getDate() + 1);
  }
  weeks.reverse();
  return { month, year, weeks };
};

const getDayPropsHandler = (start, end, selectableCallback) => {
  let today = new Date();
  today.setHours(0, 0, 0, 0);
  return date => {
    const isInRange = date >= start && date <= end;
    return {
      isInRange,
      selectable: isInRange && (!selectableCallback || selectableCallback(date)),
      isToday: date.getTime() === today.getTime()
    };
  };
};

function getMonths(start, end, selectableCallback = null, weekStart = 0) {
  start.setHours(0, 0, 0, 0);
  end.setHours(0, 0, 0, 0);
  let endDate = new Date(end.getFullYear(), end.getMonth() + 1, 1);
  let months = [];
  let date = new Date(start.getFullYear(), start.getMonth(), 1);
  let dayPropsHandler = getDayPropsHandler(start, end, selectableCallback);
  while (date < endDate) {
    months.push(getCalendarPage(date.getMonth(), date.getFullYear(), dayPropsHandler, weekStart));
    date.setMonth(date.getMonth() + 1);
  }
  return months;
}

const areDatesEquivalent = (a, b) => a.getDate() === b.getDate()
  && a.getMonth() === b.getMonth()
  && a.getFullYear() === b.getFullYear();

/* node_modules/svelte-calendar/src/Components/Week.svelte generated by Svelte v3.12.1 */

const css$6 = {
	code: ".week.svelte-5wjnn4{padding:0;margin:0;display:-webkit-box;display:-moz-box;display:-ms-flexbox;display:-webkit-flex;display:flex;flex-flow:row;-webkit-flex-flow:row;justify-content:space-around;-ms-grid-column:1;grid-column:1}.week.svelte-5wjnn4:nth-child(6n + 1){-ms-grid-row:1;grid-row:1}.week.svelte-5wjnn4:nth-child(6n + 2){-ms-grid-row:2;grid-row:2}.week.svelte-5wjnn4:nth-child(6n + 3){-ms-grid-row:3;grid-row:3}.week.svelte-5wjnn4:nth-child(6n + 4){-ms-grid-row:4;grid-row:4}.week.svelte-5wjnn4:nth-child(6n + 5){-ms-grid-row:5;grid-row:5}.week.svelte-5wjnn4:nth-child(6n + 6){-ms-grid-row:6;grid-row:6}.day.svelte-5wjnn4{margin:2px;color:var(--day-text-color);font-weight:bold;text-align:center;font-size:16px;flex:1 0 auto;height:auto;display:flex;flex-basis:0}.day.outside-month.svelte-5wjnn4,.day.is-disabled.svelte-5wjnn4{opacity:0.35}.day.svelte-5wjnn4:before{content:'';float:left;padding-top:100%}.day--label.svelte-5wjnn4{color:var(--day-text-color);display:flex;justify-content:center;flex-direction:column;width:100%;position:relative;border:1px solid #fff;border-radius:50%;margin:10%;padding:0;align-items:center;background:var(--day-background-color);cursor:pointer;transition:all 100ms linear;font-weight:normal}.day--label.disabled.svelte-5wjnn4{cursor:default}@media(min-width: 480px){.day--label.highlighted.svelte-5wjnn4,.day--label.svelte-5wjnn4:not(.disabled):hover{background:var(--day-highlighted-background-color);border-color:var(--day-highlighted-background-color);color:var(--day-highlighted-text-color)}}.day--label.shake-date.svelte-5wjnn4{animation:svelte-5wjnn4-shake 0.4s 1 linear}.day--label.selected.svelte-5wjnn4:hover,.day--label.selected.svelte-5wjnn4,.day--label.svelte-5wjnn4:active:not(.disabled){background-color:var(--highlight-color);border-color:var(--highlight-color);color:#fff}.day.is-today.svelte-5wjnn4 .day--label.svelte-5wjnn4,.day.is-today.svelte-5wjnn4 .day--label.svelte-5wjnn4:hover{opacity:1;background:none;border-color:var(--highlight-color);color:#000}@keyframes svelte-5wjnn4-shake{0%{transform:translate(7px)}20%{transform:translate(-7px)}40%{transform:translate(3px)}60%{transform:translate(-3px)}80%{transform:translate(1px)}100%{transform:translate(0px)}}",
	map: "{\"version\":3,\"file\":\"Week.svelte\",\"sources\":[\"Week.svelte\"],\"sourcesContent\":[\"<script>\\n  import { areDatesEquivalent } from './lib/helpers';\\n  import { fly, fade } from 'svelte/transition';\\n  import { createEventDispatcher } from 'svelte';\\n\\n  const dispatch = createEventDispatcher();\\n\\n  export let days;\\n  export let selected;\\n  export let highlighted;\\n  export let shouldShakeDate;\\n  export let direction;\\n</script>\\r\\n\\r\\n<div \\r\\n  class=\\\"week\\\" \\r\\n  in:fly={{ x: direction * 50, duration: 180, delay: 90 }}\\r\\n  out:fade={{ duration: 180 }}\\r\\n>\\r\\n  {#each days as day}\\r\\n    <div \\r\\n      class=\\\"day\\\" \\r\\n      class:outside-month={!day.partOfMonth}\\r\\n      class:is-today={day.isToday}\\r\\n      class:is-disabled={!day.selectable}\\r\\n    >\\r\\n      <button \\r\\n        class=\\\"day--label\\\" \\r\\n        class:selected={areDatesEquivalent(day.date, selected)}\\r\\n        class:highlighted={areDatesEquivalent(day.date, highlighted)}\\r\\n        class:shake-date={shouldShakeDate && areDatesEquivalent(day.date, shouldShakeDate)}\\r\\n        class:disabled={!day.selectable}\\r\\n        type=\\\"button\\\"\\r\\n        on:click={() => dispatch('dateSelected', day.date)}\\r\\n      >\\r\\n        {day.date.getDate()}\\r\\n      </button>\\r\\n    </div>\\r\\n  {/each}\\r\\n</div>\\r\\n\\r\\n<style>\\r\\n  .week { \\r\\n    padding: 0;\\r\\n    margin: 0;\\r\\n    display: -webkit-box;\\r\\n    display: -moz-box;\\r\\n    display: -ms-flexbox;\\r\\n    display: -webkit-flex;\\r\\n    display: flex;\\r\\n    flex-flow: row;\\r\\n    -webkit-flex-flow: row;\\r\\n    justify-content: space-around;\\r\\n    -ms-grid-column: 1;\\r\\n    grid-column: 1; \\r\\n  }\\r\\n  .week:nth-child(6n + 1) { \\r\\n    -ms-grid-row: 1; \\r\\n    grid-row: 1; \\r\\n  }\\r\\n  .week:nth-child(6n + 2) { \\r\\n    -ms-grid-row: 2; \\r\\n    grid-row: 2; \\r\\n  }\\r\\n  .week:nth-child(6n + 3) { \\r\\n    -ms-grid-row: 3; \\r\\n    grid-row: 3; \\r\\n  }\\r\\n  .week:nth-child(6n + 4) { \\r\\n    -ms-grid-row: 4; \\r\\n    grid-row: 4; \\r\\n  }\\r\\n  .week:nth-child(6n + 5) { \\r\\n    -ms-grid-row: 5; \\r\\n    grid-row: 5; \\r\\n  }\\r\\n  .week:nth-child(6n + 6) { \\r\\n    -ms-grid-row: 6; \\r\\n    grid-row: 6; \\r\\n  }\\r\\n  .day { \\r\\n    margin: 2px;\\r\\n    color: var(--day-text-color);\\r\\n    font-weight: bold;\\r\\n    text-align: center;\\r\\n    font-size: 16px;\\r\\n    flex: 1 0 auto;\\r\\n    height: auto;\\r\\n    display: flex; \\r\\n    flex-basis: 0;\\r\\n  }\\r\\n  .day.outside-month, \\r\\n  .day.is-disabled { \\r\\n    opacity: 0.35;\\r\\n  }\\r\\n  .day:before { \\r\\n    content: '';\\r\\n    float: left;\\r\\n    padding-top: 100%;\\r\\n  }\\r\\n  .day--label { \\r\\n    color: var(--day-text-color);\\r\\n    display: flex;\\r\\n    justify-content: center;\\r\\n    flex-direction: column;\\r\\n    width: 100%;\\r\\n    position: relative;\\r\\n    border: 1px solid #fff;\\r\\n    border-radius: 50%; \\r\\n    margin: 10%;\\r\\n    padding: 0;\\r\\n    align-items: center;\\r\\n    background: var(--day-background-color);\\r\\n    cursor: pointer;\\r\\n    transition: all 100ms linear;\\r\\n    font-weight: normal;\\r\\n  }\\r\\n  .day--label.disabled { \\r\\n    cursor: default;\\r\\n  }\\r\\n  @media (min-width: 480px) { \\r\\n    .day--label.highlighted,\\r\\n    .day--label:not(.disabled):hover { \\r\\n      background: var(--day-highlighted-background-color);\\r\\n      border-color: var(--day-highlighted-background-color);\\r\\n      color: var(--day-highlighted-text-color);\\r\\n    }\\r\\n  }\\r\\n  .day--label.shake-date { \\r\\n    animation: shake 0.4s 1 linear;\\r\\n  }\\r\\n  .day--label.selected:hover,\\r\\n  .day--label.selected,\\r\\n  .day--label:active:not(.disabled) { \\r\\n    background-color: var(--highlight-color);\\r\\n    border-color: var(--highlight-color);\\r\\n    color: #fff;\\r\\n  }\\r\\n  .day.is-today .day--label, \\r\\n  .day.is-today .day--label:hover { \\r\\n    opacity: 1; \\r\\n    background: none;\\r\\n    border-color: var(--highlight-color);\\r\\n    color: #000;\\r\\n  }\\r\\n\\r\\n  @keyframes shake {\\r\\n    0% { transform: translate(7px); }\\r\\n    20% { transform: translate(-7px); }\\r\\n    40% { transform: translate(3px); }\\r\\n    60% { transform: translate(-3px); }\\r\\n    80% { transform: translate(1px); }\\r\\n    100% { transform: translate(0px); }\\r\\n  }\\r\\n</style>\\r\\n\"],\"names\":[],\"mappings\":\"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\"}"
};

const Week = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {

  let { days, selected, highlighted, shouldShakeDate, direction } = $$props;

	if ($$props.days === void 0 && $$bindings.days && days !== void 0) $$bindings.days(days);
	if ($$props.selected === void 0 && $$bindings.selected && selected !== void 0) $$bindings.selected(selected);
	if ($$props.highlighted === void 0 && $$bindings.highlighted && highlighted !== void 0) $$bindings.highlighted(highlighted);
	if ($$props.shouldShakeDate === void 0 && $$bindings.shouldShakeDate && shouldShakeDate !== void 0) $$bindings.shouldShakeDate(shouldShakeDate);
	if ($$props.direction === void 0 && $$bindings.direction && direction !== void 0) $$bindings.direction(direction);

	$$result.css.add(css$6);

	return `<div class="week svelte-5wjnn4">
	  ${each(days, (day) => `<div class="${[`day svelte-5wjnn4`, !day.partOfMonth ? "outside-month" : "", day.isToday ? "is-today" : "", !day.selectable ? "is-disabled" : ""].join(' ').trim() }">
	      <button class="${[`day--label svelte-5wjnn4`, areDatesEquivalent(day.date, selected) ? "selected" : "", areDatesEquivalent(day.date, highlighted) ? "highlighted" : "", shouldShakeDate && areDatesEquivalent(day.date, shouldShakeDate) ? "shake-date" : "", !day.selectable ? "disabled" : ""].join(' ').trim() }" type="button">
	        ${escape$1(day.date.getDate())}
	      </button>
	    </div>`)}
	</div>`;
});

/* node_modules/svelte-calendar/src/Components/Month.svelte generated by Svelte v3.12.1 */

const css$7 = {
	code: ".month-container.svelte-1y5dcxc{width:100%;display:-ms-grid;display:grid;-ms-grid-columns:1fr;-ms-grid-rows:1fr}",
	map: "{\"version\":3,\"file\":\"Month.svelte\",\"sources\":[\"Month.svelte\"],\"sourcesContent\":[\"<script>\\n  import Week from './Week.svelte';\\n\\n  export let id;\\n  export let visibleMonth;\\n  export let selected;\\n  export let highlighted;\\n  export let shouldShakeDate;\\n\\n  let lastId = id;\\n  let direction;\\n\\n  $: {\\n    direction = lastId < id ? 1 : -1;\\n    lastId = id;\\n  }\\n</script>\\r\\n\\r\\n<div class=\\\"month-container\\\">\\r\\n  {#each visibleMonth.weeks as week (week.id) }\\r\\n    <Week \\r\\n      days={week.days} \\r\\n      {selected} \\r\\n      {highlighted} \\r\\n      {shouldShakeDate} \\r\\n      {direction}\\r\\n      on:dateSelected \\r\\n    />\\r\\n  {/each}\\r\\n</div>\\r\\n\\r\\n<style>\\r\\n  .month-container { \\r\\n    width: 100%;\\r\\n    display: -ms-grid;\\r\\n    display: grid;\\r\\n    -ms-grid-columns: 1fr;\\r\\n    -ms-grid-rows: 1fr;\\r\\n  }\\r\\n</style>\\r\\n\"],\"names\":[],\"mappings\":\"AAgCE,gBAAgB,eAAC,CAAC,AAChB,KAAK,CAAE,IAAI,CACX,OAAO,CAAE,QAAQ,CACjB,OAAO,CAAE,IAAI,CACb,gBAAgB,CAAE,GAAG,CACrB,aAAa,CAAE,GAAG,AACpB,CAAC\"}"
};

const Month = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	let { id, visibleMonth, selected, highlighted, shouldShakeDate } = $$props;

  let lastId = id;
  let direction;

	if ($$props.id === void 0 && $$bindings.id && id !== void 0) $$bindings.id(id);
	if ($$props.visibleMonth === void 0 && $$bindings.visibleMonth && visibleMonth !== void 0) $$bindings.visibleMonth(visibleMonth);
	if ($$props.selected === void 0 && $$bindings.selected && selected !== void 0) $$bindings.selected(selected);
	if ($$props.highlighted === void 0 && $$bindings.highlighted && highlighted !== void 0) $$bindings.highlighted(highlighted);
	if ($$props.shouldShakeDate === void 0 && $$bindings.shouldShakeDate && shouldShakeDate !== void 0) $$bindings.shouldShakeDate(shouldShakeDate);

	$$result.css.add(css$7);

	{
        direction = lastId < id ? 1 : -1;
        lastId = id;
      }

	return `<div class="month-container svelte-1y5dcxc">
	  ${each(visibleMonth.weeks, (week) => `${validate_component(Week, 'Week').$$render($$result, {
		days: week.days,
		selected: selected,
		highlighted: highlighted,
		shouldShakeDate: shouldShakeDate,
		direction: direction
	}, {}, {})}`)}
	</div>`;
});

/* node_modules/svelte-calendar/src/Components/NavBar.svelte generated by Svelte v3.12.1 */

const css$8 = {
	code: ".heading-section.svelte-1uccyem{font-size:20px;padding:24px 15px;display:flex;justify-content:space-between;color:#3d4548;font-weight:bold}.label.svelte-1uccyem{cursor:pointer}.month-selector.svelte-1uccyem{position:absolute;top:75px;left:0;right:0;bottom:0;background-color:#fff;transition:all 300ms;transform:scale(1.2);opacity:0;visibility:hidden;z-index:1;text-align:center}.month-selector.open.svelte-1uccyem{transform:scale(1);visibility:visible;opacity:1}.month-selector--month.svelte-1uccyem{width:31.333%;margin:.5%;height:23%;display:inline-block;color:#4a4a4a;border:1px solid #efefef;opacity:0.2}.month-selector--month.selectable.svelte-1uccyem{opacity:1}.month-selector--month.selectable.svelte-1uccyem:hover{cursor:pointer;box-shadow:0px 0px 3px rgba(0,0,0,0.15)}.month-selector--month.selected.svelte-1uccyem{background:var(--highlight-color);color:#fff}.month-selector--month.svelte-1uccyem:before{content:' ';display:inline-block;height:100%;vertical-align:middle}.month-selector--month.svelte-1uccyem span.svelte-1uccyem{vertical-align:middle;display:inline-block}.control.svelte-1uccyem{padding:0 8px;opacity:0.2;transform:translateY(3px)}.control.enabled.svelte-1uccyem{opacity:1;cursor:pointer}.arrow.svelte-1uccyem{display:inline-block;width:18px;height:18px;border-style:solid;border-color:#a9a9a9;border-width:0;border-bottom-width:2px;border-right-width:2px}.arrow.right.svelte-1uccyem{transform:rotate(-45deg);-webkit-transform:rotate(-45deg)}.arrow.left.svelte-1uccyem{transform:rotate(135deg);-webkit-transform:rotate(135deg)}",
	map: "{\"version\":3,\"file\":\"NavBar.svelte\",\"sources\":[\"NavBar.svelte\"],\"sourcesContent\":[\"<script>\\n  import { createEventDispatcher } from 'svelte';\\n\\n  const dispatch = createEventDispatcher();\\n\\n  export let month;\\n  export let year;\\n  export let start;\\n  export let end;\\n  export let canIncrementMonth;\\n  export let canDecrementMonth;\\n  export let monthsOfYear;\\n\\n  let monthSelectorOpen = false;\\n  let availableMonths;\\n\\n  $: {\\n    let isOnLowerBoundary = start.getFullYear() === year;\\n    let isOnUpperBoundary = end.getFullYear() === year;\\n    availableMonths = monthsOfYear.map((m, i) => {\\n      return Object.assign({}, {\\n        name: m[0],\\n        abbrev: m[1]\\n      }, {\\n        selectable:\\n          (!isOnLowerBoundary && !isOnUpperBoundary)\\n          || (\\n            (!isOnLowerBoundary || i >= start.getMonth())\\n            && (!isOnUpperBoundary || i <= end.getMonth())\\n          )\\n      });\\n    });\\n  }\\n\\n  function toggleMonthSelectorOpen() {\\n    monthSelectorOpen = !monthSelectorOpen;\\n  }\\n\\n  function monthSelected(event, { m, i }) {\\n    event.stopPropagation();\\n    if (!m.selectable) return;\\n    dispatch('monthSelected', i);\\n    toggleMonthSelectorOpen();\\n  }\\n</script>\\r\\n\\r\\n<div class=\\\"title\\\">\\r\\n  <div class=\\\"heading-section\\\">\\r\\n    <div class=\\\"control\\\" \\r\\n      class:enabled={canDecrementMonth}\\r\\n      on:click={() => dispatch('incrementMonth', -1)}>\\r\\n      <i class=\\\"arrow left\\\"></i>\\r\\n    </div>\\r\\n    <div class=\\\"label\\\" on:click={toggleMonthSelectorOpen}>\\r\\n      {monthsOfYear[month][0]} {year}\\r\\n    </div> \\r\\n    <div class=\\\"control\\\"\\r\\n      class:enabled={canIncrementMonth}\\r\\n      on:click={() => dispatch('incrementMonth', 1)}>\\r\\n      <i class=\\\"arrow right\\\"></i>\\r\\n    </div>\\r\\n  </div>\\r\\n  <div class=\\\"month-selector\\\" class:open={monthSelectorOpen}>\\r\\n    {#each availableMonths as monthDefinition, index}\\r\\n      <div \\r\\n        class=\\\"month-selector--month\\\" \\r\\n        class:selected={index === month}\\r\\n        class:selectable={monthDefinition.selectable}\\r\\n        on:click={e => monthSelected(e, { m: monthDefinition, i: index })}\\r\\n      >\\r\\n        <span>{monthDefinition.abbrev}</span>\\r\\n      </div>\\r\\n    {/each}\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n<style>\\r\\n  .heading-section { \\r\\n    font-size: 20px;\\r\\n    padding: 24px 15px;\\r\\n    display: flex;\\r\\n    justify-content: space-between;\\r\\n    color: #3d4548;\\r\\n    font-weight: bold;\\r\\n  }\\r\\n  .label { \\r\\n    cursor: pointer;\\r\\n  }\\r\\n  .month-selector { \\r\\n    position: absolute;\\r\\n    top: 75px; \\r\\n    left: 0; \\r\\n    right: 0; \\r\\n    bottom: 0; \\r\\n    background-color: #fff;\\r\\n    transition: all 300ms; \\r\\n    transform: scale(1.2); \\r\\n    opacity: 0; \\r\\n    visibility: hidden;\\r\\n    z-index: 1;\\r\\n    text-align: center;\\r\\n  }\\r\\n  .month-selector.open { \\r\\n    transform: scale(1); \\r\\n    visibility: visible;\\r\\n    opacity: 1;\\r\\n  }\\r\\n  .month-selector--month { \\r\\n    width: 31.333%; \\r\\n    margin: .5%; \\r\\n    height: 23%;\\r\\n    display: inline-block;\\r\\n    color: #4a4a4a;\\r\\n    border: 1px solid #efefef;\\r\\n    opacity: 0.2;\\r\\n  }\\r\\n  .month-selector--month.selectable { \\r\\n    opacity: 1; \\r\\n  }\\r\\n  .month-selector--month.selectable:hover { \\r\\n    cursor: pointer;\\r\\n    box-shadow: 0px 0px 3px rgba(0,0,0,0.15);\\r\\n  }\\r\\n  .month-selector--month.selected { \\r\\n    background: var(--highlight-color);\\r\\n    color: #fff;\\r\\n  }\\r\\n  .month-selector--month:before { \\r\\n    content: ' ';\\r\\n    display: inline-block;\\r\\n    height: 100%;\\r\\n    vertical-align: middle;\\r\\n  }\\r\\n  .month-selector--month span { \\r\\n    vertical-align: middle; \\r\\n    display: inline-block;\\r\\n  }\\r\\n\\r\\n  .control { \\r\\n    padding: 0 8px;\\r\\n    opacity: 0.2;\\r\\n    transform: translateY(3px);\\r\\n  }\\r\\n\\r\\n  .control.enabled { \\r\\n    opacity: 1; \\r\\n    cursor: pointer;\\r\\n  }\\r\\n\\r\\n  .arrow {\\r\\n    display: inline-block;\\r\\n    width: 18px;\\r\\n    height: 18px;\\r\\n    border-style: solid;\\r\\n    border-color: #a9a9a9;\\r\\n    border-width: 0;\\r\\n    border-bottom-width: 2px;\\r\\n    border-right-width: 2px;\\r\\n  }\\r\\n\\r\\n  .arrow.right {\\r\\n    transform: rotate(-45deg);\\r\\n    -webkit-transform: rotate(-45deg);\\r\\n  }\\r\\n\\r\\n  .arrow.left {\\r\\n    transform: rotate(135deg);\\r\\n    -webkit-transform: rotate(135deg);\\r\\n  }\\r\\n\\r\\n</style>\\r\\n\"],\"names\":[],\"mappings\":\"AA6EE,gBAAgB,eAAC,CAAC,AAChB,SAAS,CAAE,IAAI,CACf,OAAO,CAAE,IAAI,CAAC,IAAI,CAClB,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,aAAa,CAC9B,KAAK,CAAE,OAAO,CACd,WAAW,CAAE,IAAI,AACnB,CAAC,AACD,MAAM,eAAC,CAAC,AACN,MAAM,CAAE,OAAO,AACjB,CAAC,AACD,eAAe,eAAC,CAAC,AACf,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,IAAI,CACT,IAAI,CAAE,CAAC,CACP,KAAK,CAAE,CAAC,CACR,MAAM,CAAE,CAAC,CACT,gBAAgB,CAAE,IAAI,CACtB,UAAU,CAAE,GAAG,CAAC,KAAK,CACrB,SAAS,CAAE,MAAM,GAAG,CAAC,CACrB,OAAO,CAAE,CAAC,CACV,UAAU,CAAE,MAAM,CAClB,OAAO,CAAE,CAAC,CACV,UAAU,CAAE,MAAM,AACpB,CAAC,AACD,eAAe,KAAK,eAAC,CAAC,AACpB,SAAS,CAAE,MAAM,CAAC,CAAC,CACnB,UAAU,CAAE,OAAO,CACnB,OAAO,CAAE,CAAC,AACZ,CAAC,AACD,sBAAsB,eAAC,CAAC,AACtB,KAAK,CAAE,OAAO,CACd,MAAM,CAAE,GAAG,CACX,MAAM,CAAE,GAAG,CACX,OAAO,CAAE,YAAY,CACrB,KAAK,CAAE,OAAO,CACd,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,CACzB,OAAO,CAAE,GAAG,AACd,CAAC,AACD,sBAAsB,WAAW,eAAC,CAAC,AACjC,OAAO,CAAE,CAAC,AACZ,CAAC,AACD,sBAAsB,0BAAW,MAAM,AAAC,CAAC,AACvC,MAAM,CAAE,OAAO,CACf,UAAU,CAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,AAC1C,CAAC,AACD,sBAAsB,SAAS,eAAC,CAAC,AAC/B,UAAU,CAAE,IAAI,iBAAiB,CAAC,CAClC,KAAK,CAAE,IAAI,AACb,CAAC,AACD,qCAAsB,OAAO,AAAC,CAAC,AAC7B,OAAO,CAAE,GAAG,CACZ,OAAO,CAAE,YAAY,CACrB,MAAM,CAAE,IAAI,CACZ,cAAc,CAAE,MAAM,AACxB,CAAC,AACD,qCAAsB,CAAC,IAAI,eAAC,CAAC,AAC3B,cAAc,CAAE,MAAM,CACtB,OAAO,CAAE,YAAY,AACvB,CAAC,AAED,QAAQ,eAAC,CAAC,AACR,OAAO,CAAE,CAAC,CAAC,GAAG,CACd,OAAO,CAAE,GAAG,CACZ,SAAS,CAAE,WAAW,GAAG,CAAC,AAC5B,CAAC,AAED,QAAQ,QAAQ,eAAC,CAAC,AAChB,OAAO,CAAE,CAAC,CACV,MAAM,CAAE,OAAO,AACjB,CAAC,AAED,MAAM,eAAC,CAAC,AACN,OAAO,CAAE,YAAY,CACrB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,YAAY,CAAE,KAAK,CACnB,YAAY,CAAE,OAAO,CACrB,YAAY,CAAE,CAAC,CACf,mBAAmB,CAAE,GAAG,CACxB,kBAAkB,CAAE,GAAG,AACzB,CAAC,AAED,MAAM,MAAM,eAAC,CAAC,AACZ,SAAS,CAAE,OAAO,MAAM,CAAC,CACzB,iBAAiB,CAAE,OAAO,MAAM,CAAC,AACnC,CAAC,AAED,MAAM,KAAK,eAAC,CAAC,AACX,SAAS,CAAE,OAAO,MAAM,CAAC,CACzB,iBAAiB,CAAE,OAAO,MAAM,CAAC,AACnC,CAAC\"}"
};

const NavBar = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {

  let { month, year, start, end, canIncrementMonth, canDecrementMonth, monthsOfYear } = $$props;

  let monthSelectorOpen = false;
  let availableMonths;

	if ($$props.month === void 0 && $$bindings.month && month !== void 0) $$bindings.month(month);
	if ($$props.year === void 0 && $$bindings.year && year !== void 0) $$bindings.year(year);
	if ($$props.start === void 0 && $$bindings.start && start !== void 0) $$bindings.start(start);
	if ($$props.end === void 0 && $$bindings.end && end !== void 0) $$bindings.end(end);
	if ($$props.canIncrementMonth === void 0 && $$bindings.canIncrementMonth && canIncrementMonth !== void 0) $$bindings.canIncrementMonth(canIncrementMonth);
	if ($$props.canDecrementMonth === void 0 && $$bindings.canDecrementMonth && canDecrementMonth !== void 0) $$bindings.canDecrementMonth(canDecrementMonth);
	if ($$props.monthsOfYear === void 0 && $$bindings.monthsOfYear && monthsOfYear !== void 0) $$bindings.monthsOfYear(monthsOfYear);

	$$result.css.add(css$8);

	{
        let isOnLowerBoundary = start.getFullYear() === year;
        let isOnUpperBoundary = end.getFullYear() === year;
        availableMonths = monthsOfYear.map((m, i) => {
          return Object.assign({}, {
            name: m[0],
            abbrev: m[1]
          }, {
            selectable:
              (!isOnLowerBoundary && !isOnUpperBoundary)
              || (
                (!isOnLowerBoundary || i >= start.getMonth())
                && (!isOnUpperBoundary || i <= end.getMonth())
              )
          });
        });
      }

	return `<div class="title">
	  <div class="heading-section svelte-1uccyem">
	    <div class="${[`control svelte-1uccyem`, canDecrementMonth ? "enabled" : ""].join(' ').trim() }">
	      <i class="arrow left svelte-1uccyem"></i>
	    </div>
	    <div class="label svelte-1uccyem">
	      ${escape$1(monthsOfYear[month][0])} ${escape$1(year)}
	    </div> 
	    <div class="${[`control svelte-1uccyem`, canIncrementMonth ? "enabled" : ""].join(' ').trim() }">
	      <i class="arrow right svelte-1uccyem"></i>
	    </div>
	  </div>
	  <div class="${[`month-selector svelte-1uccyem`, monthSelectorOpen ? "open" : ""].join(' ').trim() }">
	    ${each(availableMonths, (monthDefinition, index) => `<div class="${[`month-selector--month svelte-1uccyem`, index === month ? "selected" : "", monthDefinition.selectable ? "selectable" : ""].join(' ').trim() }">
	        <span class="svelte-1uccyem">${escape$1(monthDefinition.abbrev)}</span>
	      </div>`)}
	  </div>
	</div>`;
});

/* node_modules/svelte-calendar/src/Components/Popover.svelte generated by Svelte v3.12.1 */

const css$9 = {
	code: ".sc-popover.svelte-1wmex1c{position:relative}.contents-wrapper.svelte-1wmex1c{transform:translate(-50%, -50%);position:absolute;top:50%;left:50%;transition:none;z-index:2;display:none}.contents.svelte-1wmex1c{background:#fff;box-shadow:0px 10px 26px rgba(0,0,0,0.4) ;opacity:.8;padding-top:0;display:none;animation:svelte-1wmex1c-grow 200ms forwards cubic-bezier(.92,.09,.18,1.05)}.contents-inner.svelte-1wmex1c{animation:svelte-1wmex1c-fadeIn 400ms forwards}.contents-wrapper.visible.svelte-1wmex1c{display:block}.contents-wrapper.visible.svelte-1wmex1c .contents.svelte-1wmex1c{opacity:1;transform:scale(1);display:block}.contents-wrapper.shrink.svelte-1wmex1c .contents.svelte-1wmex1c{animation:svelte-1wmex1c-shrink 150ms forwards cubic-bezier(.92,.09,.18,1.05)}@keyframes svelte-1wmex1c-grow{0%{transform:scale(.9,.1);opacity:0}30%{opacity:1}100%{transform:scale(1)}}@keyframes svelte-1wmex1c-shrink{0%{transform:scale(1);opacity:1}70%{opacity:1}100%{opacity:0;transform:scale(.9,.1)}}@keyframes svelte-1wmex1c-fadeIn{0%{opacity:0}50%{opacity:0}100%{opacity:1}}",
	map: "{\"version\":3,\"file\":\"Popover.svelte\",\"sources\":[\"Popover.svelte\"],\"sourcesContent\":[\"<script>\\n  import { onMount, createEventDispatcher, tick } from 'svelte';\\n\\n  const dispatch = createEventDispatcher();\\n\\n  let once = (el, evt, cb) => {\\n    function handler() {\\n      cb.apply(this, arguments);\\n      el.removeEventListener(evt, handler);\\n    }\\n    el.addEventListener(evt, handler);\\n  };\\n\\n  let popover;\\n  let w;\\n  let triggerContainer;\\n  let contentsAnimated;\\n  let contentsWrapper;\\n  let translateY = 0;\\n  let translateX = 0;\\n\\n  export let open = false;\\n  export let shrink;\\n  export let trigger;\\n  export const close = () => {\\n    shrink = true;\\n    once(contentsAnimated, 'animationend', () => {\\n      shrink = false;\\n      open = false;\\n      dispatch('closed');\\n    });\\n  };\\n\\n  function checkForFocusLoss(evt) {\\n    if (!open) return;\\n    let el = evt.target;\\n    // eslint-disable-next-line\\n    do {\\r\\n      if (el === popover) return;\\n    // eslint-disable-next-line\\n    } while (el = el.parentNode);\\r\\n    close();\\n  }\\n\\n  onMount(() => {\\n    document.addEventListener('click', checkForFocusLoss);\\n    if (!trigger) return;\\n    triggerContainer.appendChild(trigger.parentNode.removeChild(trigger));\\n\\n    // eslint-disable-next-line\\n    return () => {\\r\\n      document.removeEventListener('click', checkForFocusLoss);\\n    };\\n  });\\n\\n  const getDistanceToEdges = async () => {\\n    if (!open) { open = true; }\\n    await tick();\\n    let rect = contentsWrapper.getBoundingClientRect();\\n    return {\\n      top: rect.top + (-1 * translateY),\\n      bottom: window.innerHeight - rect.bottom + translateY,\\n      left: rect.left + (-1 * translateX),\\n      right: document.body.clientWidth - rect.right + translateX\\n    };\\n  };\\n\\n  const getTranslate = async () => {\\n    let dist = await getDistanceToEdges();\\n    let x; let\\n      y;\\n    if (w < 480) {\\n      y = dist.bottom;\\n    } else if (dist.top < 0) {\\n      y = Math.abs(dist.top);\\n    } else if (dist.bottom < 0) {\\n      y = dist.bottom;\\n    } else {\\n      y = 0;\\n    }\\n    if (dist.left < 0) {\\n      x = Math.abs(dist.left);\\n    } else if (dist.right < 0) {\\n      x = dist.right;\\n    } else {\\n      x = 0;\\n    }\\n    return { x, y };\\n  };\\n\\n  const doOpen = async () => {\\n    const { x, y } = await getTranslate();\\n\\n    translateX = x;\\n    translateY = y;\\n    open = true;\\n\\n    dispatch('opened');\\n  };\\n</script>\\r\\n\\r\\n<svelte:window bind:innerWidth={w} />\\r\\n<div class=\\\"sc-popover\\\" bind:this={popover}>\\r\\n  <div class=\\\"trigger\\\" on:click={doOpen} bind:this={triggerContainer}>\\r\\n    <slot name=\\\"trigger\\\">\\r\\n    </slot>\\r\\n  </div>\\r\\n  <div \\r\\n    class=\\\"contents-wrapper\\\" \\r\\n    class:visible={open}\\r\\n    class:shrink={shrink}\\r\\n    style=\\\"transform: translate(-50%,-50%) translate({translateX}px, {translateY}px)\\\" \\r\\n    bind:this={contentsWrapper}>\\r\\n    <div class=\\\"contents\\\" bind:this={contentsAnimated}>\\r\\n      <div class=\\\"contents-inner\\\">\\r\\n        <slot name=\\\"contents\\\"></slot>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n<style>\\r\\n  .sc-popover { \\r\\n    position: relative;\\r\\n  }\\r\\n\\r\\n  .contents-wrapper { \\r\\n    transform: translate(-50%, -50%); \\r\\n    position: absolute;\\r\\n    top: 50%; \\r\\n    left: 50%; \\r\\n    transition: none;\\r\\n    z-index: 2;\\r\\n    display: none;\\r\\n  }\\r\\n\\r\\n  .contents { \\r\\n    background: #fff;\\r\\n    box-shadow: 0px 10px 26px rgba(0,0,0,0.4) ;\\r\\n    opacity: .8; \\r\\n    padding-top: 0;\\r\\n    display: none;\\r\\n    animation: grow 200ms forwards cubic-bezier(.92,.09,.18,1.05);\\r\\n  }\\r\\n\\r\\n  .contents-inner { \\r\\n    animation: fadeIn 400ms forwards;\\r\\n  }\\r\\n\\r\\n  .contents-wrapper.visible { \\r\\n    display: block;\\r\\n  }\\r\\n\\r\\n  .contents-wrapper.visible .contents { \\r\\n    opacity: 1; \\r\\n    transform: scale(1);\\r\\n    display: block;\\r\\n  }\\r\\n\\r\\n  .contents-wrapper.shrink .contents { \\r\\n    animation: shrink 150ms forwards cubic-bezier(.92,.09,.18,1.05);\\r\\n  }\\r\\n\\r\\n  @keyframes grow { \\r\\n    0% { \\r\\n      transform: scale(.9,.1); \\r\\n      opacity: 0; \\r\\n    }\\r\\n    30% { \\r\\n      opacity: 1; \\r\\n    }\\r\\n    100% { \\r\\n      transform: scale(1);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  @keyframes shrink { \\r\\n    0% { \\r\\n      transform: scale(1); \\r\\n      opacity: 1; \\r\\n    }\\r\\n    70% { \\r\\n      opacity: 1; \\r\\n    }\\r\\n    100% { \\r\\n      opacity: 0; \\r\\n      transform: scale(.9,.1);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  @keyframes fadeIn { \\r\\n    0% { \\r\\n      opacity: 0; \\r\\n    }\\r\\n    50% { \\r\\n      opacity: 0;\\r\\n    }\\r\\n    100% { \\r\\n      opacity: 1; \\r\\n    }\\r\\n  }\\r\\n</style>\\r\\n\"],\"names\":[],\"mappings\":\"AA0HE,WAAW,eAAC,CAAC,AACX,QAAQ,CAAE,QAAQ,AACpB,CAAC,AAED,iBAAiB,eAAC,CAAC,AACjB,SAAS,CAAE,UAAU,IAAI,CAAC,CAAC,IAAI,CAAC,CAChC,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,GAAG,CACR,IAAI,CAAE,GAAG,CACT,UAAU,CAAE,IAAI,CAChB,OAAO,CAAE,CAAC,CACV,OAAO,CAAE,IAAI,AACf,CAAC,AAED,SAAS,eAAC,CAAC,AACT,UAAU,CAAE,IAAI,CAChB,UAAU,CAAE,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAC1C,OAAO,CAAE,EAAE,CACX,WAAW,CAAE,CAAC,CACd,OAAO,CAAE,IAAI,CACb,SAAS,CAAE,mBAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,aAAa,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,AAC/D,CAAC,AAED,eAAe,eAAC,CAAC,AACf,SAAS,CAAE,qBAAM,CAAC,KAAK,CAAC,QAAQ,AAClC,CAAC,AAED,iBAAiB,QAAQ,eAAC,CAAC,AACzB,OAAO,CAAE,KAAK,AAChB,CAAC,AAED,iBAAiB,uBAAQ,CAAC,SAAS,eAAC,CAAC,AACnC,OAAO,CAAE,CAAC,CACV,SAAS,CAAE,MAAM,CAAC,CAAC,CACnB,OAAO,CAAE,KAAK,AAChB,CAAC,AAED,iBAAiB,sBAAO,CAAC,SAAS,eAAC,CAAC,AAClC,SAAS,CAAE,qBAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,aAAa,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,AACjE,CAAC,AAED,WAAW,mBAAK,CAAC,AACf,EAAE,AAAC,CAAC,AACF,SAAS,CAAE,MAAM,EAAE,CAAC,EAAE,CAAC,CACvB,OAAO,CAAE,CAAC,AACZ,CAAC,AACD,GAAG,AAAC,CAAC,AACH,OAAO,CAAE,CAAC,AACZ,CAAC,AACD,IAAI,AAAC,CAAC,AACJ,SAAS,CAAE,MAAM,CAAC,CAAC,AACrB,CAAC,AACH,CAAC,AAED,WAAW,qBAAO,CAAC,AACjB,EAAE,AAAC,CAAC,AACF,SAAS,CAAE,MAAM,CAAC,CAAC,CACnB,OAAO,CAAE,CAAC,AACZ,CAAC,AACD,GAAG,AAAC,CAAC,AACH,OAAO,CAAE,CAAC,AACZ,CAAC,AACD,IAAI,AAAC,CAAC,AACJ,OAAO,CAAE,CAAC,CACV,SAAS,CAAE,MAAM,EAAE,CAAC,EAAE,CAAC,AACzB,CAAC,AACH,CAAC,AAED,WAAW,qBAAO,CAAC,AACjB,EAAE,AAAC,CAAC,AACF,OAAO,CAAE,CAAC,AACZ,CAAC,AACD,GAAG,AAAC,CAAC,AACH,OAAO,CAAE,CAAC,AACZ,CAAC,AACD,IAAI,AAAC,CAAC,AACJ,OAAO,CAAE,CAAC,AACZ,CAAC,AACH,CAAC\"}"
};

const Popover = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	const dispatch = createEventDispatcher();

  let once = (el, evt, cb) => {
    function handler() {
      cb.apply(this, arguments);
      el.removeEventListener(evt, handler);
    }
    el.addEventListener(evt, handler);
  };

  let popover;
  let triggerContainer;
  let contentsAnimated;
  let contentsWrapper;
  let translateY = 0;
  let translateX = 0;

  let { open = false, shrink, trigger } = $$props;
  const close = () => {
    shrink = true;
    once(contentsAnimated, 'animationend', () => {
      shrink = false;
      open = false;
      dispatch('closed');
    });
  };

  function checkForFocusLoss(evt) {
    if (!open) return;
    let el = evt.target;
    // eslint-disable-next-line
    do {
      if (el === popover) return;
    // eslint-disable-next-line
    } while (el = el.parentNode);
    close();
  }

  onMount(() => {
    document.addEventListener('click', checkForFocusLoss);
    if (!trigger) return;
    triggerContainer.appendChild(trigger.parentNode.removeChild(trigger));

    // eslint-disable-next-line
    return () => {
      document.removeEventListener('click', checkForFocusLoss);
    };
  });

	if ($$props.open === void 0 && $$bindings.open && open !== void 0) $$bindings.open(open);
	if ($$props.shrink === void 0 && $$bindings.shrink && shrink !== void 0) $$bindings.shrink(shrink);
	if ($$props.trigger === void 0 && $$bindings.trigger && trigger !== void 0) $$bindings.trigger(trigger);
	if ($$props.close === void 0 && $$bindings.close && close !== void 0) $$bindings.close(close);

	$$result.css.add(css$9);

	return `
	<div class="sc-popover svelte-1wmex1c"${add_attribute("this", popover, 1)}>
	  <div class="trigger"${add_attribute("this", triggerContainer, 1)}>
	    ${$$slots.trigger ? $$slots.trigger({}) : `
	    `}
	  </div>
	  <div class="${[`contents-wrapper svelte-1wmex1c`, open ? "visible" : "", shrink ? "shrink" : ""].join(' ').trim() }" style="transform: translate(-50%,-50%) translate(${escape$1(translateX)}px, ${escape$1(translateY)}px)"${add_attribute("this", contentsWrapper, 1)}>
	    <div class="contents svelte-1wmex1c"${add_attribute("this", contentsAnimated, 1)}>
	      <div class="contents-inner svelte-1wmex1c">
	        ${$$slots.contents ? $$slots.contents({}) : ``}
	      </div>
	    </div>
	  </div>
	</div>`;
});

/**
 * generic function to inject data into token-laden string
 * @param str {String} Required
 * @param name {String} Required
 * @param value {String|Integer} Required
 * @returns {String}
 *
 * @example
 * injectStringData("The following is a token: #{tokenName}", "tokenName", 123); 
 * @returns {String} "The following is a token: 123"
 *
 */
const injectStringData = (str,name,value) => str
  .replace(new RegExp('#{'+name+'}','g'), value);

/**
 * Generic function to enforce length of string. 
 * 
 * Pass a string or number to this function and specify the desired length.
 * This function will either pad the # with leading 0's (if str.length < length)
 * or remove data from the end (@fromBack==false) or beginning (@fromBack==true)
 * of the string when str.length > length.
 *
 * When length == str.length or typeof length == 'undefined', this function
 * returns the original @str parameter.
 * 
 * @param str {String} Required
 * @param length {Integer} Required
 * @param fromBack {Boolean} Optional
 * @returns {String}
 *
 */
const enforceLength = function(str,length,fromBack) {
  str = str.toString();
  if(typeof length == 'undefined') return str;
  if(str.length == length) return str;
  fromBack = (typeof fromBack == 'undefined') ? false : fromBack;
  if(str.length < length) {
    // pad the beginning of the string w/ enough 0's to reach desired length:
    while(length - str.length > 0) str = '0' + str;
  } else if(str.length > length) {
    if(fromBack) {
      // grab the desired #/chars from end of string: ex: '2015' -> '15'
      str = str.substring(str.length-length);
    } else {
      // grab the desired #/chars from beginning of string: ex: '2015' -> '20'
      str = str.substring(0,length);
    }
  }
  return str;
};

const daysOfWeek = [ 
  [ 'Sunday', 'Sun' ],
  [ 'Monday', 'Mon' ],
  [ 'Tuesday', 'Tue' ],
  [ 'Wednesday', 'Wed' ],
  [ 'Thursday', 'Thu' ],
  [ 'Friday', 'Fri' ],
  [ 'Saturday', 'Sat' ]
];

const monthsOfYear = [ 
  [ 'January', 'Jan' ],
  [ 'February', 'Feb' ],
  [ 'March', 'Mar' ],
  [ 'April', 'Apr' ],
  [ 'May', 'May' ],
  [ 'June', 'Jun' ],
  [ 'July', 'Jul' ],
  [ 'August', 'Aug' ],
  [ 'September', 'Sep' ],
  [ 'October', 'Oct' ],
  [ 'November', 'Nov' ],
  [ 'December', 'Dec' ]
];

let dictionary = { 
  daysOfWeek, 
  monthsOfYear
};

const extendDictionary = (conf) => 
  Object.keys(conf).forEach(key => {
    if(dictionary[key] && dictionary[key].length == conf[key].length) {
      dictionary[key] = conf[key];
    }
  });

var acceptedDateTokens = [
  { 
    // d: day of the month, 2 digits with leading zeros:
    key: 'd', 
    method: function(date) { return enforceLength(date.getDate(), 2); } 
  }, { 
    // D: textual representation of day, 3 letters: Sun thru Sat
    key: 'D', 
    method: function(date) { return dictionary.daysOfWeek[date.getDay()][1]; } 
  }, { 
    // j: day of month without leading 0's
    key: 'j', 
    method: function(date) { return date.getDate(); } 
  }, { 
    // l: full textual representation of day of week: Sunday thru Saturday
    key: 'l', 
    method: function(date) { return dictionary.daysOfWeek[date.getDay()][0]; } 
  }, { 
    // F: full text month: 'January' thru 'December'
    key: 'F', 
    method: function(date) { return dictionary.monthsOfYear[date.getMonth()][0]; } 
  }, { 
    // m: 2 digit numeric month: '01' - '12':
    key: 'm', 
    method: function(date) { return enforceLength(date.getMonth()+1,2); } 
  }, { 
    // M: a short textual representation of the month, 3 letters: 'Jan' - 'Dec'
    key: 'M', 
    method: function(date) { return dictionary.monthsOfYear[date.getMonth()][1]; } 
  }, { 
    // n: numeric represetation of month w/o leading 0's, '1' - '12':
    key: 'n', 
    method: function(date) { return date.getMonth() + 1; } 
  }, { 
    // Y: Full numeric year, 4 digits
    key: 'Y', 
    method: function(date) { return date.getFullYear(); } 
  }, { 
    // y: 2 digit numeric year:
    key: 'y', 
    method: function(date) { return enforceLength(date.getFullYear(),2,true); }
   }
];

var acceptedTimeTokens = [
  { 
    // a: lowercase ante meridiem and post meridiem 'am' or 'pm'
    key: 'a', 
    method: function(date) { return (date.getHours() > 11) ? 'pm' : 'am'; } 
  }, { 
    // A: uppercase ante merdiiem and post meridiem 'AM' or 'PM'
    key: 'A', 
    method: function(date) { return (date.getHours() > 11) ? 'PM' : 'AM'; } 
  }, { 
    // g: 12-hour format of an hour without leading zeros 1-12
    key: 'g', 
    method: function(date) { return date.getHours() % 12 || 12; } 
  }, { 
    // G: 24-hour format of an hour without leading zeros 0-23
    key: 'G', 
    method: function(date) { return date.getHours(); } 
  }, { 
    // h: 12-hour format of an hour with leading zeros 01-12
    key: 'h', 
    method: function(date) { return enforceLength(date.getHours()%12 || 12,2); } 
  }, { 
    // H: 24-hour format of an hour with leading zeros: 00-23
    key: 'H', 
    method: function(date) { return enforceLength(date.getHours(),2); } 
  }, { 
    // i: Minutes with leading zeros 00-59
    key: 'i', 
    method: function(date) { return enforceLength(date.getMinutes(),2); } 
  }, { 
    // s: Seconds with leading zeros 00-59
    key: 's', 
    method: function(date) { return enforceLength(date.getSeconds(),2); }
   }
];

/**
 * Internationalization object for timeUtils.internationalize().
 * @typedef internationalizeObj
 * @property {Array} [daysOfWeek=[ 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday' ]] daysOfWeek Weekday labels as strings, starting with Sunday.
 * @property {Array} [monthsOfYear=[ 'January','February','March','April','May','June','July','August','September','October','November','December' ]] monthsOfYear Month labels as strings, starting with January.
 */

/**
 * This function can be used to support additional languages by passing an object with 
 * `daysOfWeek` and `monthsOfYear` attributes.  Each attribute should be an array of
 * strings (ex: `daysOfWeek: ['monday', 'tuesday', 'wednesday'...]`)
 *
 * @param {internationalizeObj} conf
 */
const internationalize = (conf={}) => { 
  extendDictionary(conf);
};

/**
 * generic formatDate function which accepts dynamic templates
 * @param date {Date} Required
 * @param template {String} Optional
 * @returns {String}
 *
 * @example
 * formatDate(new Date(), '#{M}. #{j}, #{Y}')
 * @returns {Number} Returns a formatted date
 *
 */
const formatDate = (date,template='#{m}/#{d}/#{Y}') => {
  acceptedDateTokens.forEach(token => {
    if(template.indexOf(`#{${token.key}}`) == -1) return; 
    template = injectStringData(template,token.key,token.method(date));
  }); 
  acceptedTimeTokens.forEach(token => {
    if(template.indexOf(`#{${token.key}}`) == -1) return;
    template = injectStringData(template,token.key,token.method(date));
  });
  return template;
};

const keyCodes = {
  left: 37,
  up: 38,
  right: 39,
  down: 40,
  pgup: 33,
  pgdown: 34,
  enter: 13,
  escape: 27,
  tab: 9
};

const keyCodesArray = Object.keys(keyCodes).map(k => keyCodes[k]);

/* node_modules/svelte-calendar/src/Components/Datepicker.svelte generated by Svelte v3.12.1 */

const css$a = {
	code: ".datepicker.svelte-1lorc63{display:inline-block;margin:0 auto;text-align:center;overflow:visible}.calendar-button.svelte-1lorc63{padding:10px 20px;border:1px solid var(--button-border-color);display:block;text-align:center;width:300px;text-decoration:none;cursor:pointer;background:var(--button-background-color);color:var(--button-text-color);border-radius:7px;box-shadow:0px 0px 3px rgba(0, 0, 0, 0.1)}.svelte-1lorc63,.svelte-1lorc63:before,.svelte-1lorc63:after{box-sizing:inherit}.calendar.svelte-1lorc63{box-sizing:border-box;position:relative;overflow:hidden;user-select:none;width:100vw;padding:10px;padding-top:0}@media(min-width: 480px){.calendar.svelte-1lorc63{height:auto;width:340px;max-width:100%}}.legend.svelte-1lorc63{color:#4a4a4a;padding:10px 0;margin-bottom:5px}.legend.svelte-1lorc63 span.svelte-1lorc63{width:14.285714%;display:inline-block;text-align:center}",
	map: "{\"version\":3,\"file\":\"Datepicker.svelte\",\"sources\":[\"Datepicker.svelte\"],\"sourcesContent\":[\"<script>\\n  import Month from './Month.svelte';\\n  import NavBar from './NavBar.svelte';\\n  import Popover from './Popover.svelte';\\n  import { getMonths } from './lib/helpers';\\n  import { formatDate, internationalize } from 'timeUtils';\\n  import { keyCodes, keyCodesArray } from './lib/keyCodes';\\n  import { onMount, createEventDispatcher } from 'svelte';\\n\\n  const dispatch = createEventDispatcher();\\n  const today = new Date();\\n\\n  let popover;\\n\\n  export let format = '#{m}/#{d}/#{Y}';\\n  export let start = new Date(1987, 9, 29);\\n  export let end = new Date(2020, 9, 29);\\n  export let selected = today;\\n  export let dateChosen = false;\\n  export let trigger = null;\\n  export let selectableCallback = null;\\n  export let weekStart = 0;\\n  export let daysOfWeek = [\\n    ['Sunday', 'Sun'],\\n    ['Monday', 'Mon'],\\n    ['Tuesday', 'Tue'],\\n    ['Wednesday', 'Wed'],\\n    ['Thursday', 'Thu'],\\n    ['Friday', 'Fri'],\\n    ['Saturday', 'Sat']\\n  ];\\n  export let monthsOfYear = [\\n    ['January', 'Jan'],\\n    ['February', 'Feb'],\\n    ['March', 'Mar'],\\n    ['April', 'Apr'],\\n    ['May', 'May'],\\n    ['June', 'Jun'],\\n    ['July', 'Jul'],\\n    ['August', 'Aug'],\\n    ['September', 'Sep'],\\n    ['October', 'Oct'],\\n    ['November', 'Nov'],\\n    ['December', 'Dec']\\n  ];\\n\\n  export let style = '';\\n  \\n  // theming variables:\\n  export let buttonBackgroundColor = '#fff';\\n  export let buttonBorderColor = '#eee';\\n  export let buttonTextColor = '#333';\\n  export let highlightColor = '#f7901e';\\n  export let dayBackgroundColor = 'none';\\n  export let dayTextColor = '#4a4a4a';\\n  export let dayHighlightedBackgroundColor = '#efefef';\\n  export let dayHighlightedTextColor = '#4a4a4a';\\n\\n  internationalize({ daysOfWeek, monthsOfYear });\\n  let sortedDaysOfWeek = weekStart === 0 ? daysOfWeek : (() => {\\n    let dow = daysOfWeek.slice();\\n    dow.push(dow.shift());\\n    return dow;\\n  })();\\n\\n  let highlighted = today;\\n  let shouldShakeDate = false;\\n  let shakeHighlightTimeout;\\n  let month = today.getMonth();\\n  let year = today.getFullYear();\\n\\n  let isOpen = false;\\n  let isClosing = false;\\n\\n  today.setHours(0, 0, 0, 0);\\n\\n  function assignmentHandler(formatted) {\\n    if (!trigger) return;\\n    trigger.innerHTML = formatted;\\n  }\\n\\n  $: months = getMonths(start, end, selectableCallback, weekStart);\\n\\n  let monthIndex = 0;\\n  $: {\\n    monthIndex = 0;\\n    for (let i = 0; i < months.length; i += 1) {\\n      if (months[i].month === month && months[i].year === year) {\\n        monthIndex = i;\\n      }\\n    }\\n  }\\n  $: visibleMonth = months[monthIndex];\\n\\n  $: visibleMonthId = year + month / 100;\\n  $: lastVisibleDate = visibleMonth.weeks[visibleMonth.weeks.length - 1].days[6].date;\\n  $: firstVisibleDate = visibleMonth.weeks[0].days[0].date;\\n  $: canIncrementMonth = monthIndex < months.length - 1;\\n  $: canDecrementMonth = monthIndex > 0;\\n  $: wrapperStyle = `\\n    --button-background-color: ${buttonBackgroundColor};\\n    --button-border-color: ${buttonBorderColor};\\n    --button-text-color: ${buttonTextColor};\\n    --highlight-color: ${highlightColor};\\n    --day-background-color: ${dayBackgroundColor};\\n    --day-text-color: ${dayTextColor};\\n    --day-highlighted-background-color: ${dayHighlightedBackgroundColor};\\n    --day-highlighted-text-color: ${dayHighlightedTextColor};\\n    ${style}\\n  `;\\n\\n  export let formattedSelected;\\n  $: {\\n    formattedSelected = typeof format === 'function'\\n      ? format(selected)\\n      : formatDate(selected, format);\\n  }\\n\\n  onMount(() => {\\n    month = selected.getMonth();\\n    year = selected.getFullYear();\\n  });\\n\\n  function changeMonth(selectedMonth) {\\n    month = selectedMonth;\\n    highlighted = new Date(year, month, 1);\\n  }\\n\\n  function incrementMonth(direction, day = 1) {\\n    if (direction === 1 && !canIncrementMonth) return;\\n    if (direction === -1 && !canDecrementMonth) return;\\n    let current = new Date(year, month, 1);\\n    current.setMonth(current.getMonth() + direction);\\n    month = current.getMonth();\\n    year = current.getFullYear();\\n    highlighted = new Date(year, month, day);\\n  }\\n\\n  function getDefaultHighlighted() {\\n    return new Date(selected);\\n  }\\n\\n  const getDay = (m, d, y) => {\\n    let theMonth = months.find(aMonth => aMonth.month === m && aMonth.year === y);\\n    if (!theMonth) return null;\\n    // eslint-disable-next-line\\n    for (let i = 0; i < theMonth.weeks.length; ++i) {\\n      // eslint-disable-next-line\\n      for (let j = 0; j < theMonth.weeks[i].days.length; ++j) {\\n        let aDay = theMonth.weeks[i].days[j];\\n        if (aDay.month === m && aDay.day === d && aDay.year === y) return aDay;\\n      }\\n    }\\n    return null;\\n  };\\n\\n  function incrementDayHighlighted(amount) {\\n    let proposedDate = new Date(highlighted);\\n    proposedDate.setDate(highlighted.getDate() + amount);\\n    let correspondingDayObj = getDay(\\n      proposedDate.getMonth(),\\n      proposedDate.getDate(),\\n      proposedDate.getFullYear()\\n    );\\n    if (!correspondingDayObj || !correspondingDayObj.isInRange) return;\\n    highlighted = proposedDate;\\n    if (amount > 0 && highlighted > lastVisibleDate) {\\n      incrementMonth(1, highlighted.getDate());\\n    }\\n    if (amount < 0 && highlighted < firstVisibleDate) {\\n      incrementMonth(-1, highlighted.getDate());\\n    }\\n  }\\n\\n  function checkIfVisibleDateIsSelectable(date) {\\n    const proposedDay = getDay(date.getMonth(), date.getDate(), date.getFullYear());\\n    return proposedDay && proposedDay.selectable;\\n  }\\n\\n  function shakeDate(date) {\\n    clearTimeout(shakeHighlightTimeout);\\n    shouldShakeDate = date;\\n    shakeHighlightTimeout = setTimeout(() => {\\n      shouldShakeDate = false;\\n    }, 700);\\n  }\\n\\n  function assignValueToTrigger(formatted) {\\n    assignmentHandler(formatted);\\n  }\\n\\n  function registerSelection(chosen) {\\n    if (!checkIfVisibleDateIsSelectable(chosen)) return shakeDate(chosen);\\n    // eslint-disable-next-line\\n    close();\\n    selected = chosen;\\n    dateChosen = true;\\n    assignValueToTrigger(formattedSelected);\\n    return dispatch('dateSelected', { date: chosen });\\n  }\\n\\n  function handleKeyPress(evt) {\\n    if (keyCodesArray.indexOf(evt.keyCode) === -1) return;\\n    evt.preventDefault();\\n    switch (evt.keyCode) {\\n      case keyCodes.left:\\n        incrementDayHighlighted(-1);\\n        break;\\n      case keyCodes.up:\\n        incrementDayHighlighted(-7);\\n        break;\\n      case keyCodes.right:\\n        incrementDayHighlighted(1);\\n        break;\\n      case keyCodes.down:\\n        incrementDayHighlighted(7);\\n        break;\\n      case keyCodes.pgup:\\n        incrementMonth(-1);\\n        break;\\n      case keyCodes.pgdown:\\n        incrementMonth(1);\\n        break;\\n      case keyCodes.escape:\\n        // eslint-disable-next-line\\n        close();\\n        break;\\n      case keyCodes.enter:\\n        registerSelection(highlighted);\\n        break;\\n      default:\\n        break;\\n    }\\n  }\\n\\n  function registerClose() {\\n    document.removeEventListener('keydown', handleKeyPress);\\n    dispatch('close');\\n  }\\n\\n  function close() {\\n    popover.close();\\n    registerClose();\\n  }\\n\\n  function registerOpen() {\\n    highlighted = getDefaultHighlighted();\\n    month = selected.getMonth();\\n    year = selected.getFullYear();\\n    document.addEventListener('keydown', handleKeyPress);\\n    dispatch('open');\\n  }\\n\\n</script>\\n\\n<div \\n  class=\\\"datepicker\\\" \\n  class:open=\\\"{isOpen}\\\" \\n  class:closing=\\\"{isClosing}\\\"\\n  style={wrapperStyle}\\n>\\n  <Popover\\n    bind:this=\\\"{popover}\\\"\\n    bind:open=\\\"{isOpen}\\\"\\n    bind:shrink=\\\"{isClosing}\\\"\\n    {trigger}\\n    on:opened=\\\"{registerOpen}\\\"\\n    on:closed=\\\"{registerClose}\\\"\\n  >\\n    <div slot=\\\"trigger\\\">\\n      <slot>\\n        {#if !trigger}\\n        <button class=\\\"calendar-button\\\" type=\\\"button\\\">\\n          {formattedSelected}\\n        </button>\\n        {/if}\\n      </slot>\\n    </div>\\n    <div slot=\\\"contents\\\">\\n      <div class=\\\"calendar\\\">\\n        <NavBar \\n          {month}\\n          {year}\\n          {canIncrementMonth}\\n          {canDecrementMonth}\\n          {start}\\n          {end}\\n          {monthsOfYear}\\n          on:monthSelected={e => changeMonth(e.detail)}\\n          on:incrementMonth={e => incrementMonth(e.detail)} \\n        />\\n        <div class=\\\"legend\\\">\\n          {#each sortedDaysOfWeek as day}\\n          <span>{day[1]}</span>\\n          {/each}\\n        </div>\\n        <Month \\n          {visibleMonth}\\n          {selected}\\n          {highlighted}\\n          {shouldShakeDate}\\n          id={visibleMonthId}\\n          on:dateSelected={e => registerSelection(e.detail)} \\n        />\\n      </div>\\n    </div>\\n  </Popover>\\n</div>\\n\\n<style>\\n  .datepicker {\\n    display: inline-block;\\n    margin: 0 auto;\\n    text-align: center;\\n    overflow: visible;\\n  }\\n\\n  .calendar-button {\\n    padding: 10px 20px;\\n    border: 1px solid var(--button-border-color);\\n    display: block;\\n    text-align: center;\\n    width: 300px;\\n    text-decoration: none;\\n    cursor: pointer;\\n    background: var(--button-background-color);\\n    color: var(--button-text-color);\\n    border-radius: 7px;\\n    box-shadow: 0px 0px 3px rgba(0, 0, 0, 0.1);\\n  }\\n\\n  *,\\n  *:before,\\n  *:after {\\n    box-sizing: inherit;\\n  }\\n\\n  .calendar {\\n    box-sizing: border-box;\\n    position: relative;\\n    overflow: hidden;\\n    user-select: none;\\n    width: 100vw;\\n    padding: 10px;\\n    padding-top: 0;\\n  }\\n\\n  @media (min-width: 480px) {\\n    .calendar {\\n      height: auto;\\n      width: 340px;\\n      max-width: 100%;\\n    }\\n  }\\n\\n  .legend {\\n    color: #4a4a4a;\\n    padding: 10px 0;\\n    margin-bottom: 5px;\\n  }\\n\\n  .legend span {\\n    width: 14.285714%;\\n    display: inline-block;\\n    text-align: center;\\n  }\\n</style>\\n\"],\"names\":[],\"mappings\":\"AAsTE,WAAW,eAAC,CAAC,AACX,OAAO,CAAE,YAAY,CACrB,MAAM,CAAE,CAAC,CAAC,IAAI,CACd,UAAU,CAAE,MAAM,CAClB,QAAQ,CAAE,OAAO,AACnB,CAAC,AAED,gBAAgB,eAAC,CAAC,AAChB,OAAO,CAAE,IAAI,CAAC,IAAI,CAClB,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,qBAAqB,CAAC,CAC5C,OAAO,CAAE,KAAK,CACd,UAAU,CAAE,MAAM,CAClB,KAAK,CAAE,KAAK,CACZ,eAAe,CAAE,IAAI,CACrB,MAAM,CAAE,OAAO,CACf,UAAU,CAAE,IAAI,yBAAyB,CAAC,CAC1C,KAAK,CAAE,IAAI,mBAAmB,CAAC,CAC/B,aAAa,CAAE,GAAG,CAClB,UAAU,CAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,AAC5C,CAAC,AAED,eAAC,CACD,eAAC,OAAO,CACR,eAAC,MAAM,AAAC,CAAC,AACP,UAAU,CAAE,OAAO,AACrB,CAAC,AAED,SAAS,eAAC,CAAC,AACT,UAAU,CAAE,UAAU,CACtB,QAAQ,CAAE,QAAQ,CAClB,QAAQ,CAAE,MAAM,CAChB,WAAW,CAAE,IAAI,CACjB,KAAK,CAAE,KAAK,CACZ,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,CAAC,AAChB,CAAC,AAED,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AACzB,SAAS,eAAC,CAAC,AACT,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,KAAK,CACZ,SAAS,CAAE,IAAI,AACjB,CAAC,AACH,CAAC,AAED,OAAO,eAAC,CAAC,AACP,KAAK,CAAE,OAAO,CACd,OAAO,CAAE,IAAI,CAAC,CAAC,CACf,aAAa,CAAE,GAAG,AACpB,CAAC,AAED,sBAAO,CAAC,IAAI,eAAC,CAAC,AACZ,KAAK,CAAE,UAAU,CACjB,OAAO,CAAE,YAAY,CACrB,UAAU,CAAE,MAAM,AACpB,CAAC\"}"
};

const Datepicker = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
  const today = new Date();

  let popover;

  let { format = '#{m}/#{d}/#{Y}', start = new Date(1987, 9, 29), end = new Date(2020, 9, 29), selected = today, dateChosen = false, trigger = null, selectableCallback = null, weekStart = 0, daysOfWeek = [
    ['Sunday', 'Sun'],
    ['Monday', 'Mon'],
    ['Tuesday', 'Tue'],
    ['Wednesday', 'Wed'],
    ['Thursday', 'Thu'],
    ['Friday', 'Fri'],
    ['Saturday', 'Sat']
  ], monthsOfYear = [
    ['January', 'Jan'],
    ['February', 'Feb'],
    ['March', 'Mar'],
    ['April', 'Apr'],
    ['May', 'May'],
    ['June', 'Jun'],
    ['July', 'Jul'],
    ['August', 'Aug'],
    ['September', 'Sep'],
    ['October', 'Oct'],
    ['November', 'Nov'],
    ['December', 'Dec']
  ], style = '', buttonBackgroundColor = '#fff', buttonBorderColor = '#eee', buttonTextColor = '#333', highlightColor = '#f7901e', dayBackgroundColor = 'none', dayTextColor = '#4a4a4a', dayHighlightedBackgroundColor = '#efefef', dayHighlightedTextColor = '#4a4a4a' } = $$props;

  internationalize({ daysOfWeek, monthsOfYear });
  let sortedDaysOfWeek = weekStart === 0 ? daysOfWeek : (() => {
    let dow = daysOfWeek.slice();
    dow.push(dow.shift());
    return dow;
  })();

  let highlighted = today;
  let shouldShakeDate = false;
  let month = today.getMonth();
  let year = today.getFullYear();

  let isOpen = false;
  let isClosing = false;

  today.setHours(0, 0, 0, 0);

  let monthIndex = 0;

  let { formattedSelected } = $$props;

  onMount(() => {
    month = selected.getMonth();
    year = selected.getFullYear();
  });

	if ($$props.format === void 0 && $$bindings.format && format !== void 0) $$bindings.format(format);
	if ($$props.start === void 0 && $$bindings.start && start !== void 0) $$bindings.start(start);
	if ($$props.end === void 0 && $$bindings.end && end !== void 0) $$bindings.end(end);
	if ($$props.selected === void 0 && $$bindings.selected && selected !== void 0) $$bindings.selected(selected);
	if ($$props.dateChosen === void 0 && $$bindings.dateChosen && dateChosen !== void 0) $$bindings.dateChosen(dateChosen);
	if ($$props.trigger === void 0 && $$bindings.trigger && trigger !== void 0) $$bindings.trigger(trigger);
	if ($$props.selectableCallback === void 0 && $$bindings.selectableCallback && selectableCallback !== void 0) $$bindings.selectableCallback(selectableCallback);
	if ($$props.weekStart === void 0 && $$bindings.weekStart && weekStart !== void 0) $$bindings.weekStart(weekStart);
	if ($$props.daysOfWeek === void 0 && $$bindings.daysOfWeek && daysOfWeek !== void 0) $$bindings.daysOfWeek(daysOfWeek);
	if ($$props.monthsOfYear === void 0 && $$bindings.monthsOfYear && monthsOfYear !== void 0) $$bindings.monthsOfYear(monthsOfYear);
	if ($$props.style === void 0 && $$bindings.style && style !== void 0) $$bindings.style(style);
	if ($$props.buttonBackgroundColor === void 0 && $$bindings.buttonBackgroundColor && buttonBackgroundColor !== void 0) $$bindings.buttonBackgroundColor(buttonBackgroundColor);
	if ($$props.buttonBorderColor === void 0 && $$bindings.buttonBorderColor && buttonBorderColor !== void 0) $$bindings.buttonBorderColor(buttonBorderColor);
	if ($$props.buttonTextColor === void 0 && $$bindings.buttonTextColor && buttonTextColor !== void 0) $$bindings.buttonTextColor(buttonTextColor);
	if ($$props.highlightColor === void 0 && $$bindings.highlightColor && highlightColor !== void 0) $$bindings.highlightColor(highlightColor);
	if ($$props.dayBackgroundColor === void 0 && $$bindings.dayBackgroundColor && dayBackgroundColor !== void 0) $$bindings.dayBackgroundColor(dayBackgroundColor);
	if ($$props.dayTextColor === void 0 && $$bindings.dayTextColor && dayTextColor !== void 0) $$bindings.dayTextColor(dayTextColor);
	if ($$props.dayHighlightedBackgroundColor === void 0 && $$bindings.dayHighlightedBackgroundColor && dayHighlightedBackgroundColor !== void 0) $$bindings.dayHighlightedBackgroundColor(dayHighlightedBackgroundColor);
	if ($$props.dayHighlightedTextColor === void 0 && $$bindings.dayHighlightedTextColor && dayHighlightedTextColor !== void 0) $$bindings.dayHighlightedTextColor(dayHighlightedTextColor);
	if ($$props.formattedSelected === void 0 && $$bindings.formattedSelected && formattedSelected !== void 0) $$bindings.formattedSelected(formattedSelected);

	$$result.css.add(css$a);

	let $$settled;
	let $$rendered;

	do {
		$$settled = true;

		let months = getMonths(start, end, selectableCallback, weekStart);
		{
        monthIndex = 0;
        for (let i = 0; i < months.length; i += 1) {
          if (months[i].month === month && months[i].year === year) {
            monthIndex = i;
          }
        }
      }
		let visibleMonth = months[monthIndex];
		let visibleMonthId = year + month / 100;
		let lastVisibleDate = visibleMonth.weeks[visibleMonth.weeks.length - 1].days[6].date;
		let firstVisibleDate = visibleMonth.weeks[0].days[0].date;
		let canIncrementMonth = monthIndex < months.length - 1;
		let canDecrementMonth = monthIndex > 0;
		let wrapperStyle = `
        --button-background-color: ${buttonBackgroundColor};
    --button-border-color: ${buttonBorderColor};
    --button-text-color: ${buttonTextColor};
    --highlight-color: ${highlightColor};
    --day-background-color: ${dayBackgroundColor};
    --day-text-color: ${dayTextColor};
    --day-highlighted-background-color: ${dayHighlightedBackgroundColor};
    --day-highlighted-text-color: ${dayHighlightedTextColor};
    ${style}
      `;
		{
        formattedSelected = typeof format === 'function'
          ? format(selected)
          : formatDate(selected, format);
      }

		$$rendered = `<div class="${[`datepicker svelte-1lorc63`, isOpen ? "open" : "", isClosing ? "closing" : ""].join(' ').trim() }"${add_attribute("style", wrapperStyle, 0)}>
		  ${validate_component(Popover, 'Popover').$$render($$result, {
			trigger: trigger,
			this: popover,
			open: isOpen,
			shrink: isClosing
		}, {
			this: $$value => { popover = $$value; $$settled = false; },
			open: $$value => { isOpen = $$value; $$settled = false; },
			shrink: $$value => { isClosing = $$value; $$settled = false; }
		}, {
			default: () => `
		    `,
			trigger: () => `<div slot="trigger" class="svelte-1lorc63">
		      ${$$slots.default ? $$slots.default({}) : `
		        ${ !trigger ? `<button class="calendar-button svelte-1lorc63" type="button">
		          ${escape$1(formattedSelected)}
		        </button>` : `` }
		      `}
		    </div>
		    `,
			contents: () => `<div slot="contents" class="svelte-1lorc63">
		      <div class="calendar svelte-1lorc63">
		        ${validate_component(NavBar, 'NavBar').$$render($$result, {
			month: month,
			year: year,
			canIncrementMonth: canIncrementMonth,
			canDecrementMonth: canDecrementMonth,
			start: start,
			end: end,
			monthsOfYear: monthsOfYear
		}, {}, {})}
		        <div class="legend svelte-1lorc63">
		          ${each(sortedDaysOfWeek, (day) => `<span class="svelte-1lorc63">${escape$1(day[1])}</span>`)}
		        </div>
		        ${validate_component(Month, 'Month').$$render($$result, {
			visibleMonth: visibleMonth,
			selected: selected,
			highlighted: highlighted,
			shouldShakeDate: shouldShakeDate,
			id: visibleMonthId
		}, {}, {})}
		      </div>
		    </div>
		  `
		})}
		</div>`;
	} while (!$$settled);

	return $$rendered;
});

/* src/routes/migration/index.svelte generated by Svelte v3.12.1 */

const css$b = {
	code: ".contents-wrapper{z-index:50 !important}",
	map: "{\"version\":3,\"file\":\"index.svelte\",\"sources\":[\"index.svelte\"],\"sourcesContent\":[\"<svelte:head>\\n  <title> 트수gg - 시청자 이동{title_sufix}</title>\\n</svelte:head>\\n\\n\\n<div class=\\\"p-6 xl:absolute relative container m-auto\\\">\\n  <h1 class=\\\"md:text-3xl text-2xl inline-block\\\">시청자 이동</h1>\\n  <Tip >\\n    <span slot=\\\"tip\\\"> \\n    여러 방송 사이에서 시청자의 흐름을 살펴볼 수 있습니다.<br> \\n    날짜와 스트리머를 선택해보세요.<br>\\n    * 약 한시간 간격으로 업데이트 됩니다.\\n    </span>\\n  </Tip>\\n</div>\\n<div class=\\\"container m-auto flex flex-col items-stretch pb-8\\\">\\n  <table class=\\\"text-center mb-12 mt-6\\\">\\n    <thead>\\n      <tr>\\n        <th> 날짜 </th>\\n        <th> 스트리머1 </th>\\n        <th> 스트리머2 </th>\\n      </tr>\\n    </thead>\\n    <tbody>\\n    <tr>\\n      <td>\\n        <Datepicker \\n           end={new Date()} \\n           format={d=>d.toLocaleDateString()} \\n           selected={date} \\n           on:dateSelected={on_date_pick} \\n           >\\n           <button class=\\\"p-2 px-4 bg-white border w-full truncate\\\">\\n             {date.toLocaleDateString()}\\n           </button>\\n        </Datepicker>\\n      </td>\\n      <td>\\n        <StreamerAutoComplete \\n           bind:onselect={on_streamer_search1} \\n           placeholder=\\\"스트리머 선택1\\\" \\n           id=\\\"migration-streamer-search1\\\" \\n           inputid=\\\"migration-streamer-search1-input\\\"\\n           input_value={streamer1? streamer1.name: \\\"\\\"}\\n           input_class=\\\"bg-white text-sm w-full transition-all transition-100 pl-7 py-2 truncate border\\\" />\\n      </td>\\n      <td>\\n        <StreamerAutoComplete \\n           bind:onselect={on_streamer_search2}\\n           placeholder=\\\"스트리머 선택2\\\" \\n           id=\\\"migration-streamer-search2\\\" \\n           inputid=\\\"migration-streamer-search2-input\\\"\\n           input_value={streamer2? streamer2.name: \\\"\\\"}\\n           input_class=\\\"bg-white text-sm w-full transition-all transition-100 pl-7 py-2 truncate border\\\" />\\n     </td>\\n    </tr>\\n    </tbody>\\n  </table>\\n  <div class=\\\"flex flex-row w-full items-center z-20\\\">\\n    <div class=\\\"\\\">\\n      <a href=\\\"{streamer1? '/streamer/' + streamer1.id : ''}\\\"\\n        for=\\\"migration-streamer-search1-input\\\"\\n        class=\\\"w-24 flex flex-col items-center justify-center overflow-visible relative\\\">\\n        {#if streamer1}\\n          <img class=\\\"rounded-full h-24 w-24 border border-gray-600\\\" src={streamer1.profile_image_url} />\\n          <div class=\\\"pt-2 absolute\\\" style=\\\"top: 100%\\\"><span>{streamer1.name}</span></div>\\n        {:else}\\n          <div class=\\\"rounded-full h-24 w-24 bg-gray-100\\\" > </div>\\n          <div class=\\\"pt-2 text-transparent text-gray-400 absolute\\\" style=\\\"top: 100%\\\"><span>?</span></div>\\n        {/if}\\n      </a>\\n    </div>\\n    <MigrationTimeline \\n       streamer={streamer1} \\n       height=\\\"150\\\"\\n       {date} />\\n  </div>\\n  <div class=\\\"flex flex-row w-full\\\">\\n    <div class=\\\"w-24\\\"></div>\\n    <Migrations \\n         migrations={viewer_migrations}\\n         class=\\\"flex-1\\\"\\n         id1={streamer1 && streamer1.id}\\n         id2={streamer2 && streamer2.id} />\\n  </div>\\n  <div class=\\\"flex flex-row w-full items-center z-10\\\">\\n    <div>\\n      <a href=\\\"{streamer2? '/streamer/' + streamer2.id : ''}\\\"\\n        for=\\\"migration-streamer-search2-input\\\"\\n        class=\\\"w-24 flex flex-col items-center justify-center overflow-visible cursor-pointer relative\\\">\\n        {#if streamer2}\\n          <img class=\\\"rounded-full h-24 w-24 border border-gray-600\\\" src={streamer2.profile_image_url} />\\n          <div class=\\\"pt-2 absolute\\\" style=\\\"top: 100%\\\"><span>{streamer2.name}</span></div>\\n        {:else}\\n          <div class=\\\"rounded-full h-24 w-24 bg-gray-100\\\" > </div>\\n          <div class=\\\"pt-2 text-transparent text-gray-400 absolute\\\" style=\\\"top: 100%\\\"><span>?</span></div>\\n        {/if}\\n      </a>\\n    </div>\\n    <MigrationTimeline \\n       streamer={streamer2} \\n       height=\\\"150\\\"\\n       {date} />\\n  </div>\\n</div>\\n\\n\\n<script context=\\\"module\\\">\\n\\timport { API } from '../../api.js';\\n\\n  export async function preload(page, session) {\\n    if(page.query.id1 && page.query.id2 && page.query.date) {\\n      let [streamer1, streamer2] = await API.thin_streamers([page.query.id1, page.query.id2]);\\n      let time = new Date(page.query.date-0); time.setHours(0,0,0,0);\\n      let from = time,\\n          to = new Date(time.getTime() + 1000*60*60*24);\\n      let viewer_migrations = await API.viewer_migration_counts(page.query.id1, page.query.id2, from, to);\\n      let date = new Date(page.query.date-0);\\n      return { streamer1, streamer2, viewer_migrations, date };\\n    }\\n    else {\\n      let date = new Date(); date.setHours(0,0,0,0);\\n      return { date };\\n    }\\n  }\\n</script>\\n\\n<script>\\n  import StreamerAutoComplete from '../../components/StreamerAutoComplete.svelte';\\n\\timport MigrationTimeline from '../../components/MigrationTimeline.svelte';\\n\\timport Migrations from '../../components/Migrations.svelte';\\n\\timport Tip from '../../components/Tip.svelte';\\n  import Datepicker from \\\"svelte-calendar\\\";\\n\\n  export let streamer1;\\n  export let streamer2;\\n  export let viewer_migrations = [];\\n  export let date = new Date();\\n  let title_sufix = streamer1 && streamer2? `| ${streamer1.name} <-> ${streamer2.name}`: '';\\n\\n\\n\\n  function try_load(){\\n    if(streamer1 && streamer2 && date){\\n      window.location.search = `id1=${streamer1.id}&id2=${streamer2.id}&date=${date.getTime()}`;\\n    }\\n  }\\n\\n  function on_date_pick(e) {\\n    if(e.detail.date != date){\\n      date = e.detail.date;\\n      try_load();\\n    }\\n  }\\n  function on_streamer_search1(target) {\\n    if(streamer1 != target){\\n      streamer1 = target;\\n      try_load();\\n    }\\n  }\\n  function on_streamer_search2(target) {\\n    if(streamer2 != target){\\n      streamer2 = target;\\n      try_load();\\n    }\\n  }\\n</script>\\n\\n<style>\\n  :global(.contents-wrapper) {\\n    z-index: 50 !important;\\n  }\\n</style>\\n\"],\"names\":[],\"mappings\":\"AA0KU,iBAAiB,AAAE,CAAC,AAC1B,OAAO,CAAE,EAAE,CAAC,UAAU,AACxB,CAAC\"}"
};

async function preload(page, session) {
  if(page.query.id1 && page.query.id2 && page.query.date) {
    let [streamer1, streamer2] = await API.thin_streamers([page.query.id1, page.query.id2]);
    let time = new Date(page.query.date-0); time.setHours(0,0,0,0);
    let from = time,
        to = new Date(time.getTime() + 1000*60*60*24);
    let viewer_migrations = await API.viewer_migration_counts(page.query.id1, page.query.id2, from, to);
    let date = new Date(page.query.date-0);
    return { streamer1, streamer2, viewer_migrations, date };
  }
  else {
    let date = new Date(); date.setHours(0,0,0,0);
    return { date };
  }
}

const Index$1 = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	

  let { streamer1, streamer2, viewer_migrations = [], date = new Date() } = $$props;
  let title_sufix = streamer1 && streamer2? `| ${streamer1.name} <-> ${streamer2.name}`: '';



  function try_load(){
    if(streamer1 && streamer2 && date){
      window.location.search = `id1=${streamer1.id}&id2=${streamer2.id}&date=${date.getTime()}`;
    }
  }
  function on_streamer_search1(target) {
    if(streamer1 != target){
      streamer1 = target;
      try_load();
    }
  }
  function on_streamer_search2(target) {
    if(streamer2 != target){
      streamer2 = target;
      try_load();
    }
  }

	if ($$props.streamer1 === void 0 && $$bindings.streamer1 && streamer1 !== void 0) $$bindings.streamer1(streamer1);
	if ($$props.streamer2 === void 0 && $$bindings.streamer2 && streamer2 !== void 0) $$bindings.streamer2(streamer2);
	if ($$props.viewer_migrations === void 0 && $$bindings.viewer_migrations && viewer_migrations !== void 0) $$bindings.viewer_migrations(viewer_migrations);
	if ($$props.date === void 0 && $$bindings.date && date !== void 0) $$bindings.date(date);

	$$result.css.add(css$b);

	let $$settled;
	let $$rendered;

	do {
		$$settled = true;

		$$rendered = `${($$result.head += `<title> 트수gg - 시청자 이동${escape$1(title_sufix)}</title>`, "")}


		<div class="p-6 xl:absolute relative container m-auto">
		  <h1 class="md:text-3xl text-2xl inline-block">시청자 이동</h1>
		  ${validate_component(Tip, 'Tip').$$render($$result, {}, {}, {
			default: () => `
		    `,
			tip: () => `<span slot="tip"> 
		    여러 방송 사이에서 시청자의 흐름을 살펴볼 수 있습니다.<br> 
		    날짜와 스트리머를 선택해보세요.<br>
		    * 약 한시간 간격으로 업데이트 됩니다.
		    </span>
		  `
		})}
		</div>
		<div class="container m-auto flex flex-col items-stretch pb-8">
		  <table class="text-center mb-12 mt-6">
		    <thead>
		      <tr>
		        <th> 날짜 </th>
		        <th> 스트리머1 </th>
		        <th> 스트리머2 </th>
		      </tr>
		    </thead>
		    <tbody>
		    <tr>
		      <td>
		        ${validate_component(Datepicker, 'Datepicker').$$render($$result, {
			end: new Date(),
			format: d=>d.toLocaleDateString(),
			selected: date
		}, {}, {
			default: () => `
		           <button class="p-2 px-4 bg-white border w-full truncate">
		             ${escape$1(date.toLocaleDateString())}
		           </button>
		        `
		})}
		      </td>
		      <td>
		        ${validate_component(StreamerAutoComplete, 'StreamerAutoComplete').$$render($$result, {
			placeholder: "스트리머 선택1",
			id: "migration-streamer-search1",
			inputid: "migration-streamer-search1-input",
			input_value: streamer1? streamer1.name: "",
			input_class: "bg-white text-sm w-full transition-all transition-100 pl-7 py-2 truncate border",
			onselect: on_streamer_search1
		}, {
			onselect: $$value => { on_streamer_search1 = $$value; $$settled = false; }
		}, {})}
		      </td>
		      <td>
		        ${validate_component(StreamerAutoComplete, 'StreamerAutoComplete').$$render($$result, {
			placeholder: "스트리머 선택2",
			id: "migration-streamer-search2",
			inputid: "migration-streamer-search2-input",
			input_value: streamer2? streamer2.name: "",
			input_class: "bg-white text-sm w-full transition-all transition-100 pl-7 py-2 truncate border",
			onselect: on_streamer_search2
		}, {
			onselect: $$value => { on_streamer_search2 = $$value; $$settled = false; }
		}, {})}
		     </td>
		    </tr>
		    </tbody>
		  </table>
		  <div class="flex flex-row w-full items-center z-20">
		    <div class="">
		      <a${add_attribute("href", streamer1? '/streamer/' + streamer1.id : '', 0)} for="migration-streamer-search1-input" class="w-24 flex flex-col items-center justify-center overflow-visible relative">
		        ${ streamer1 ? `<img class="rounded-full h-24 w-24 border border-gray-600"${add_attribute("src", streamer1.profile_image_url, 0)}>
		          <div class="pt-2 absolute" style="top: 100%"><span>${escape$1(streamer1.name)}</span></div>` : `<div class="rounded-full h-24 w-24 bg-gray-100"> </div>
		          <div class="pt-2 text-transparent text-gray-400 absolute" style="top: 100%"><span>?</span></div>` }
		      </a>
		    </div>
		    ${validate_component(MigrationTimeline, 'MigrationTimeline').$$render($$result, {
			streamer: streamer1,
			height: "150",
			date: date
		}, {}, {})}
		  </div>
		  <div class="flex flex-row w-full">
		    <div class="w-24"></div>
		    ${validate_component(Migrations, 'Migrations').$$render($$result, {
			migrations: viewer_migrations,
			class: "flex-1",
			id1: streamer1 && streamer1.id,
			id2: streamer2 && streamer2.id
		}, {}, {})}
		  </div>
		  <div class="flex flex-row w-full items-center z-10">
		    <div>
		      <a${add_attribute("href", streamer2? '/streamer/' + streamer2.id : '', 0)} for="migration-streamer-search2-input" class="w-24 flex flex-col items-center justify-center overflow-visible cursor-pointer relative">
		        ${ streamer2 ? `<img class="rounded-full h-24 w-24 border border-gray-600"${add_attribute("src", streamer2.profile_image_url, 0)}>
		          <div class="pt-2 absolute" style="top: 100%"><span>${escape$1(streamer2.name)}</span></div>` : `<div class="rounded-full h-24 w-24 bg-gray-100"> </div>
		          <div class="pt-2 text-transparent text-gray-400 absolute" style="top: 100%"><span>?</span></div>` }
		      </a>
		    </div>
		    ${validate_component(MigrationTimeline, 'MigrationTimeline').$$render($$result, {
			streamer: streamer2,
			height: "150",
			date: date
		}, {}, {})}
		  </div>
		</div>`;
	} while (!$$settled);

	return $$rendered;
});

/**
 * Springy v2.7.1
 *
 * Copyright (c) 2010-2013 Dennis Hotson
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */
const Springy = (function () {

	var Springy = {};

	var Graph = Springy.Graph = function() {
		this.nodeSet = {};
		this.nodes = [];
		this.edges = [];
		this.adjacency = {};

		this.nextNodeId = 0;
		this.nextEdgeId = 0;
		this.eventListeners = [];
	};

	var Node = Springy.Node = function(id, data) {
		this.id = id;
		this.data = (data !== undefined) ? data : {};

	// Data fields used by layout algorithm in this file:
	// this.data.mass
	// Data used by default renderer in springyui.js
	// this.data.label
	};

	var Edge = Springy.Edge = function(id, source, target, data) {
		this.id = id;
		this.source = source;
		this.target = target;
		this.data = (data !== undefined) ? data : {};

	// Edge data field used by layout alorithm
	// this.data.length
	// this.data.type
	};

	Graph.prototype.addNode = function(node) {
		if (!(node.id in this.nodeSet)) {
			this.nodes.push(node);
		}

		this.nodeSet[node.id] = node;

		this.notify();
		return node;
	};

	Graph.prototype.addNodes = function() {
		// accepts variable number of arguments, where each argument
		// is a string that becomes both node identifier and label
		for (var i = 0; i < arguments.length; i++) {
			var name = arguments[i];
			var node = new Node(name, {label:name});
			this.addNode(node);
		}
	};

	Graph.prototype.addEdge = function(edge) {
		var exists = false;
		this.edges.forEach(function(e) {
			if (edge.id === e.id) { exists = true; }
		});

		if (!exists) {
			this.edges.push(edge);
		}

		if (!(edge.source.id in this.adjacency)) {
			this.adjacency[edge.source.id] = {};
		}
		if (!(edge.target.id in this.adjacency[edge.source.id])) {
			this.adjacency[edge.source.id][edge.target.id] = [];
		}

		exists = false;
		this.adjacency[edge.source.id][edge.target.id].forEach(function(e) {
				if (edge.id === e.id) { exists = true; }
		});

		if (!exists) {
			this.adjacency[edge.source.id][edge.target.id].push(edge);
		}

		this.notify();
		return edge;
	};

	Graph.prototype.addEdges = function() {
		// accepts variable number of arguments, where each argument
		// is a triple [nodeid1, nodeid2, attributes]
		for (var i = 0; i < arguments.length; i++) {
			var e = arguments[i];
			var node1 = this.nodeSet[e[0]];
			if (node1 == undefined) {
				throw new TypeError("invalid node name: " + e[0]);
			}
			var node2 = this.nodeSet[e[1]];
			if (node2 == undefined) {
				throw new TypeError("invalid node name: " + e[1]);
			}
			var attr = e[2];

			this.newEdge(node1, node2, attr);
		}
	};

	Graph.prototype.newNode = function(data) {
		var node = new Node(this.nextNodeId++, data);
		this.addNode(node);
		return node;
	};

	Graph.prototype.newEdge = function(source, target, data) {
		var edge = new Edge(this.nextEdgeId++, source, target, data);
		this.addEdge(edge);
		return edge;
	};


	// add nodes and edges from JSON object
	Graph.prototype.loadJSON = function(json) {
	/**
	Springy's simple JSON format for graphs.
	historically, Springy uses separate lists
	of nodes and edges:
		{
			"nodes": [
				"center",
				"left",
				"right",
				"up",
				"satellite"
			],
			"edges": [
				["center", "left"],
				["center", "right"],
				["center", "up"]
			]
		}
	**/
		// parse if a string is passed (EC5+ browsers)
		if (typeof json == 'string' || json instanceof String) {
			json = JSON.parse( json );
		}

		if ('nodes' in json || 'edges' in json) {
			this.addNodes.apply(this, json['nodes']);
			this.addEdges.apply(this, json['edges']);
		}
	};


	// find the edges from node1 to node2
	Graph.prototype.getEdges = function(node1, node2) {
		if (node1.id in this.adjacency
			&& node2.id in this.adjacency[node1.id]) {
			return this.adjacency[node1.id][node2.id];
		}

		return [];
	};

	// remove a node and it's associated edges from the graph
	Graph.prototype.removeNode = function(node) {
		if (node.id in this.nodeSet) {
			delete this.nodeSet[node.id];
		}

		for (var i = this.nodes.length - 1; i >= 0; i--) {
			if (this.nodes[i].id === node.id) {
				this.nodes.splice(i, 1);
			}
		}

		this.detachNode(node);
	};

	// removes edges associated with a given node
	Graph.prototype.detachNode = function(node) {
		var tmpEdges = this.edges.slice();
		tmpEdges.forEach(function(e) {
			if (e.source.id === node.id || e.target.id === node.id) {
				this.removeEdge(e);
			}
		}, this);

		this.notify();
	};

	// remove a node and it's associated edges from the graph
	Graph.prototype.removeEdge = function(edge) {
		for (var i = this.edges.length - 1; i >= 0; i--) {
			if (this.edges[i].id === edge.id) {
				this.edges.splice(i, 1);
			}
		}

		for (var x in this.adjacency) {
			for (var y in this.adjacency[x]) {
				var edges = this.adjacency[x][y];

				for (var j=edges.length - 1; j>=0; j--) {
					if (this.adjacency[x][y][j].id === edge.id) {
						this.adjacency[x][y].splice(j, 1);
					}
				}

				// Clean up empty edge arrays
				if (this.adjacency[x][y].length == 0) {
					delete this.adjacency[x][y];
				}
			}

			// Clean up empty objects
			if (isEmpty(this.adjacency[x])) {
				delete this.adjacency[x];
			}
		}

		this.notify();
	};

	/* Merge a list of nodes and edges into the current graph. eg.
	var o = {
		nodes: [
			{id: 123, data: {type: 'user', userid: 123, displayname: 'aaa'}},
			{id: 234, data: {type: 'user', userid: 234, displayname: 'bbb'}}
		],
		edges: [
			{from: 0, to: 1, type: 'submitted_design', directed: true, data: {weight: }}
		]
	}
	*/
	Graph.prototype.merge = function(data) {
		var nodes = [];
		data.nodes.forEach(function(n) {
			nodes.push(this.addNode(new Node(n.id, n.data)));
		}, this);

		data.edges.forEach(function(e) {
			var from = nodes[e.from];
			var to = nodes[e.to];

			var id = (e.directed)
				? (id = e.type + "-" + from.id + "-" + to.id)
				: (from.id < to.id) // normalise id for non-directed edges
					? e.type + "-" + from.id + "-" + to.id
					: e.type + "-" + to.id + "-" + from.id;

			var edge = this.addEdge(new Edge(id, from, to, e.data));
			edge.data.type = e.type;
		}, this);
	};

	Graph.prototype.filterNodes = function(fn) {
		var tmpNodes = this.nodes.slice();
		tmpNodes.forEach(function(n) {
			if (!fn(n)) {
				this.removeNode(n);
			}
		}, this);
	};

	Graph.prototype.filterEdges = function(fn) {
		var tmpEdges = this.edges.slice();
		tmpEdges.forEach(function(e) {
			if (!fn(e)) {
				this.removeEdge(e);
			}
		}, this);
	};


	Graph.prototype.addGraphListener = function(obj) {
		this.eventListeners.push(obj);
	};

	Graph.prototype.notify = function() {
		this.eventListeners.forEach(function(obj){
			obj.graphChanged();
		});
	};

	// -----------
	var Layout = Springy.Layout = {};
	Layout.ForceDirected = function(graph, stiffness, repulsion, damping, minEnergyThreshold, maxSpeed) {
		this.graph = graph;
		this.stiffness = stiffness; // spring stiffness constant
		this.repulsion = repulsion; // repulsion constant
		this.damping = damping; // velocity damping factor
		this.minEnergyThreshold = minEnergyThreshold || 0.01; //threshold used to determine render stop
		this.maxSpeed = maxSpeed || Infinity; // nodes aren't allowed to exceed this speed

		this.nodePoints = {}; // keep track of points associated with nodes
		this.edgeSprings = {}; // keep track of springs associated with edges
	};

	Layout.ForceDirected.prototype.point = function(node) {
		if (!(node.id in this.nodePoints)) {
			var mass = (node.data.mass !== undefined) ? node.data.mass : 1.0;
			this.nodePoints[node.id] = new Layout.ForceDirected.Point(Vector.random(), mass);
		}

		return this.nodePoints[node.id];
	};

	Layout.ForceDirected.prototype.spring = function(edge) {
		if (!(edge.id in this.edgeSprings)) {
			var length = (edge.data.length !== undefined) ? edge.data.length : 1.0;

			var existingSpring = false;

			var from = this.graph.getEdges(edge.source, edge.target);
			from.forEach(function(e) {
				if (existingSpring === false && e.id in this.edgeSprings) {
					existingSpring = this.edgeSprings[e.id];
				}
			}, this);

			if (existingSpring !== false) {
				return new Layout.ForceDirected.Spring(existingSpring.point1, existingSpring.point2, 0.0, 0.0);
			}

			var to = this.graph.getEdges(edge.target, edge.source);
			from.forEach(function(e){
				if (existingSpring === false && e.id in this.edgeSprings) {
					existingSpring = this.edgeSprings[e.id];
				}
			}, this);

			if (existingSpring !== false) {
				return new Layout.ForceDirected.Spring(existingSpring.point2, existingSpring.point1, 0.0, 0.0);
			}

			this.edgeSprings[edge.id] = new Layout.ForceDirected.Spring(
				this.point(edge.source), this.point(edge.target), length, this.stiffness
			);
		}

		return this.edgeSprings[edge.id];
	};

	// callback should accept two arguments: Node, Point
	Layout.ForceDirected.prototype.eachNode = function(callback) {
		var t = this;
		this.graph.nodes.forEach(function(n){
			callback.call(t, n, t.point(n));
		});
	};

	// callback should accept two arguments: Edge, Spring
	Layout.ForceDirected.prototype.eachEdge = function(callback) {
		var t = this;
		this.graph.edges.forEach(function(e){
			callback.call(t, e, t.spring(e));
		});
	};

	// callback should accept one argument: Spring
	Layout.ForceDirected.prototype.eachSpring = function(callback) {
		var t = this;
		this.graph.edges.forEach(function(e){
			callback.call(t, t.spring(e));
		});
	};


	// Physics stuff
	Layout.ForceDirected.prototype.applyCoulombsLaw = function() {
		this.eachNode(function(n1, point1) {
			this.eachNode(function(n2, point2) {
				if (point1 !== point2)
				{
					var d = point1.p.subtract(point2.p);
					var distance = d.magnitude() + 0.1; // avoid massive forces at small distances (and divide by zero)
					var direction = d.normalise();

					// apply force to each end point
					point1.applyForce(direction.multiply(this.repulsion).divide(distance * distance * 0.5));
					point2.applyForce(direction.multiply(this.repulsion).divide(distance * distance * -0.5));
				}
			});
		});
	};

	Layout.ForceDirected.prototype.applyHookesLaw = function() {
		this.eachSpring(function(spring){
			var d = spring.point2.p.subtract(spring.point1.p); // the direction of the spring
			var displacement = spring.length - d.magnitude();
			var direction = d.normalise();

			// apply force to each end point
			spring.point1.applyForce(direction.multiply(spring.k * displacement * -0.5));
			spring.point2.applyForce(direction.multiply(spring.k * displacement * 0.5));
		});
	};

	Layout.ForceDirected.prototype.attractToCentre = function() {
		this.eachNode(function(node, point) {
			var direction = point.p.multiply(-1.0);
			point.applyForce(direction.multiply(this.repulsion / 50.0));
		});
	};


	Layout.ForceDirected.prototype.updateVelocity = function(timestep) {
		this.eachNode(function(node, point) {
			// Is this, along with updatePosition below, the only places that your
			// integration code exist?
			point.v = point.v.add(point.a.multiply(timestep)).multiply(this.damping);
			if (point.v.magnitude() > this.maxSpeed) {
			    point.v = point.v.normalise().multiply(this.maxSpeed);
			}
			point.a = new Vector(0,0);
		});
	};

	Layout.ForceDirected.prototype.updatePosition = function(timestep) {
		this.eachNode(function(node, point) {
			// Same question as above; along with updateVelocity, is this all of
			// your integration code?
			point.p = point.p.add(point.v.multiply(timestep));
		});
	};

	// Calculate the total kinetic energy of the system
	Layout.ForceDirected.prototype.totalEnergy = function(timestep) {
		var energy = 0.0;
		this.eachNode(function(node, point) {
			var speed = point.v.magnitude();
			energy += 0.5 * point.m * speed * speed;
		});

		return energy;
	};

	var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; }; // stolen from coffeescript, thanks jashkenas! ;-)

	Springy.requestAnimationFrame = __bind((this && (this.requestAnimationFrame ||
		this.webkitRequestAnimationFrame ||
		this.mozRequestAnimationFrame ||
		this.oRequestAnimationFrame ||
		this.msRequestAnimationFrame)) ||
		(function(callback, element) {
			setTimeout(callback, 10);
		}), this);


	/**
	 * Start simulation if it's not running already.
	 * In case it's running then the call is ignored, and none of the callbacks passed is ever executed.
	 */
	Layout.ForceDirected.prototype.start = function(render, onRenderStop, onRenderStart) {
		var t = this;

		if (this._started) return;
		this._started = true;
		this._stop = false;

		if (onRenderStart !== undefined) { onRenderStart(); }

		Springy.requestAnimationFrame(function step() {
			t.tick(0.03);

			if (render !== undefined) {
				render();
			}

			// stop simulation when energy of the system goes below a threshold
			if (t._stop || t.totalEnergy() < t.minEnergyThreshold) {
				t._started = false;
				if (onRenderStop !== undefined) { onRenderStop(); }
			} else {
				Springy.requestAnimationFrame(step);
			}
		});
	};

	Layout.ForceDirected.prototype.stop = function() {
		this._stop = true;
	};

	Layout.ForceDirected.prototype.tick = function(timestep) {
		this.applyCoulombsLaw();
		this.applyHookesLaw();
		this.attractToCentre();
		this.updateVelocity(timestep);
		this.updatePosition(timestep);
	};

	// Find the nearest point to a particular position
	Layout.ForceDirected.prototype.nearest = function(pos) {
		var min = {node: null, point: null, distance: null};
		var t = this;
		this.graph.nodes.forEach(function(n){
			var point = t.point(n);
			var distance = point.p.subtract(pos).magnitude();

			if (min.distance === null || distance < min.distance) {
				min = {node: n, point: point, distance: distance};
			}
		});

		return min;
	};

	// returns [bottomleft, topright]
	Layout.ForceDirected.prototype.getBoundingBox = function() {
		var bottomleft = new Vector(-2,-2);
		var topright = new Vector(2,2);

		this.eachNode(function(n, point) {
			if (point.p.x < bottomleft.x) {
				bottomleft.x = point.p.x;
			}
			if (point.p.y < bottomleft.y) {
				bottomleft.y = point.p.y;
			}
			if (point.p.x > topright.x) {
				topright.x = point.p.x;
			}
			if (point.p.y > topright.y) {
				topright.y = point.p.y;
			}
		});

		var padding = topright.subtract(bottomleft).multiply(0.07); // ~5% padding

		return {bottomleft: bottomleft.subtract(padding), topright: topright.add(padding)};
	};


	// Vector
	var Vector = Springy.Vector = function(x, y) {
		this.x = x;
		this.y = y;
	};

	Vector.random = function() {
		return new Vector(10.0 * (Math.random() - 0.5), 10.0 * (Math.random() - 0.5));
	};

	Vector.prototype.add = function(v2) {
		return new Vector(this.x + v2.x, this.y + v2.y);
	};

	Vector.prototype.subtract = function(v2) {
		return new Vector(this.x - v2.x, this.y - v2.y);
	};

	Vector.prototype.multiply = function(n) {
		return new Vector(this.x * n, this.y * n);
	};

	Vector.prototype.divide = function(n) {
		return new Vector((this.x / n) || 0, (this.y / n) || 0); // Avoid divide by zero errors..
	};

	Vector.prototype.magnitude = function() {
		return Math.sqrt(this.x*this.x + this.y*this.y);
	};

	Vector.prototype.normal = function() {
		return new Vector(-this.y, this.x);
	};

	Vector.prototype.normalise = function() {
		return this.divide(this.magnitude());
	};

	// Point
	Layout.ForceDirected.Point = function(position, mass) {
		this.p = position; // position
		this.m = mass; // mass
		this.v = new Vector(0, 0); // velocity
		this.a = new Vector(0, 0); // acceleration
	};

	Layout.ForceDirected.Point.prototype.applyForce = function(force) {
		this.a = this.a.add(force.divide(this.m));
	};

	// Spring
	Layout.ForceDirected.Spring = function(point1, point2, length, k) {
		this.point1 = point1;
		this.point2 = point2;
		this.length = length; // spring length at rest
		this.k = k; // spring constant (See Hooke's law) .. how stiff the spring is
	};

	// Layout.ForceDirected.Spring.prototype.distanceToPoint = function(point)
	// {
	// 	// hardcore vector arithmetic.. ohh yeah!
	// 	// .. see http://stackoverflow.com/questions/849211/shortest-distance-between-a-point-and-a-line-segment/865080#865080
	// 	var n = this.point2.p.subtract(this.point1.p).normalise().normal();
	// 	var ac = point.p.subtract(this.point1.p);
	// 	return Math.abs(ac.x * n.x + ac.y * n.y);
	// };

	/**
	 * Renderer handles the layout rendering loop
	 * @param onRenderStop optional callback function that gets executed whenever rendering stops.
	 * @param onRenderStart optional callback function that gets executed whenever rendering starts.
	 * @param onRenderFrame optional callback function that gets executed after each frame is rendered.
	 */
	var Renderer = Springy.Renderer = function(layout, clear, drawEdge, drawNode, onRenderStop, onRenderStart, onRenderFrame) {
		this.layout = layout;
		this.clear = clear;
		this.drawEdge = drawEdge;
		this.drawNode = drawNode;
		this.onRenderStop = onRenderStop;
		this.onRenderStart = onRenderStart;
		this.onRenderFrame = onRenderFrame;

		this.layout.graph.addGraphListener(this);
	};

	Renderer.prototype.graphChanged = function(e) {
		this.start();
	};

	/**
	 * Starts the simulation of the layout in use.
	 *
	 * Note that in case the algorithm is still or already running then the layout that's in use
	 * might silently ignore the call, and your optional <code>done</code> callback is never executed.
	 * At least the built-in ForceDirected layout behaves in this way.
	 *
	 * @param done An optional callback function that gets executed when the springy algorithm stops,
	 * either because it ended or because stop() was called.
	 */
	Renderer.prototype.start = function(done) {
		var t = this;
		this.layout.start(function render() {
			t.clear();

			t.layout.eachEdge(function(edge, spring) {
				t.drawEdge(edge, spring.point1.p, spring.point2.p);
			});

			t.layout.eachNode(function(node, point) {
				t.drawNode(node, point.p);
			});
			
			if (t.onRenderFrame !== undefined) { t.onRenderFrame(); }
		}, this.onRenderStop, this.onRenderStart);
	};

	Renderer.prototype.stop = function() {
		this.layout.stop();
	};

	// Array.forEach implementation for IE support..
	//https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/forEach
	if ( !Array.prototype.forEach ) {
		Array.prototype.forEach = function( callback, thisArg ) {
			var T, k;
			if ( this == null ) {
				throw new TypeError( " this is null or not defined" );
			}
			var O = Object(this);
			var len = O.length >>> 0; // Hack to convert O.length to a UInt32
			if ( {}.toString.call(callback) != "[object Function]" ) {
				throw new TypeError( callback + " is not a function" );
			}
			if ( thisArg ) {
				T = thisArg;
			}
			k = 0;
			while( k < len ) {
				var kValue;
				if ( k in O ) {
					kValue = O[ k ];
					callback.call( T, kValue, k, O );
				}
				k++;
			}
		};
	}

	var isEmpty = function(obj) {
		for (var k in obj) {
			if (obj.hasOwnProperty(k)) {
				return false;
			}
		}
		return true;
	};

  return Springy;
})();

/* src/components/Network.svelte generated by Svelte v3.12.1 */

const css$c = {
	code: ".node.svelte-160k95n{position:absolute;display:inline-block;transform:translate(-50%, -50%);width:fit-content;top:50%;left:50%}",
	map: "{\"version\":3,\"file\":\"Network.svelte\",\"sources\":[\"Network.svelte\"],\"sourcesContent\":[\"<script>\\nimport { Springy } from \\\"./springy.js\\\"\\nimport { onMount } from \\\"svelte\\\";\\n\\nconst WIDTH = 512, HEIGHT = 512;\\n\\nexport let nodes = [];\\nexport let edges = [];\\nexport let onrendered  = ()=>{};\\n/*export let width = 500;\\nexport let height = 500;*/\\n\\nlet canvas;\\n\\nlet renderer;\\n\\n// node: {id, src, name}\\n// edge: {from, to, label}\\n\\nfunction project(p, width, height) {\\n\\treturn { x: (p.x + 5)/10 * width, y: (p.y + 5)/10 * height };\\n}\\n\\nlet last_nodes;\\nlet last_edges;\\n\\n$: if(canvas && (nodes != last_nodes || edges != last_edges)) {\\n  last_nodes = nodes;\\n  last_edges = edges;\\n\\tlet graph = new Springy.Graph();\\n\\tlet graph_nodes = {};\\n  let width = canvas.getBoundingClientRect().width,\\n      height = canvas.getBoundingClientRect().height;\\n\\tlet ctx = canvas.getContext(\\\"2d\\\");\\n\\tctx.setLineDash([7, 7]);\\n\\tctx.globalAlpha = 0.5;\\n\\tfor(let node of nodes)\\n\\t\\tgraph_nodes[node.id] = graph.newNode(node);\\n\\tfor(let edge of edges)\\n    graph.newEdge(graph_nodes[edge.from], graph_nodes[edge.to], edge);\\n\\tlet layout = new Springy.Layout.ForceDirected(graph, 400.0, 400.0, 0.6, 0.0001);\\n\\tif(renderer) renderer.stop();\\n\\trenderer = new Springy.Renderer(layout,\\n\\t\\tfunction clear() {\\n\\t\\t\\tctx.clearRect(0, 0, WIDTH, HEIGHT);\\n\\t\\t},\\n\\t\\tfunction drawEdge(edge, p1, p2) {\\n\\t\\t\\tctx.beginPath();\\n\\t\\t\\tp1 = project(p1, WIDTH, HEIGHT);\\n\\t\\t\\tp2 = project(p2, WIDTH, HEIGHT);\\n      ctx.lineWidth = (edge.data.strength) || 1.0;\\n      ctx.globalAlpha = (edge.data.strength) || 1.0;\\n\\t\\t\\tctx.moveTo(p1.x, p1.y);\\n\\t\\t\\tctx.lineTo(p2.x, p2.y);\\n\\t\\t\\tctx.stroke();\\n\\t\\t},\\n\\t\\tfunction drawNode(node, p) {\\n\\t\\t\\t//node = document.getElementById(node.data.id);\\n\\t\\t\\tnode = node.data.ref;\\n\\t\\t\\t/*if(node.data.image.complete) \\n\\t\\t\\t\\tctx.drawImage(node.data.image, p.x * width + node.image.width, p.y * height);*/\\n\\t\\t\\t// draw a node\\n\\t\\t\\tp = project(p, width, height);\\n\\t\\t\\tif(node){\\n        if(parseInt(node.style.left) != Math.floor(p.x))\\n          node.style.left = p.x*100/width + \\\"%\\\";\\n        if(parseInt(node.style.top) != Math.floor(p.y))\\n          node.style.top = p.y*100/height + \\\"%\\\";\\n\\t\\t\\t}\\n\\t\\t},\\n    function onRenderStop() {\\n      onrendered();\\n    }\\n\\t);\\n\\trenderer.start();\\n}\\n</script>\\n\\n<div class=\\\"relative {$$props.class}\\\">\\n<canvas bind:this={canvas} width={WIDTH} height={HEIGHT} class=\\\"w-full\\\"> </canvas>\\n{#each nodes as node}\\n\\t<div bind:this={node.ref} id=\\\"{node.id}\\\" class=\\\"node\\\">\\n\\t\\t<slot {node}></slot>\\n\\t</div>\\n{/each}\\n</div>\\n\\n\\n<style>\\n.node {\\n\\tposition: absolute; \\n\\tdisplay: inline-block;\\n\\ttransform: translate(-50%, -50%);\\n  width: fit-content;\\n  top: 50%;\\n  left: 50%;\\n}\\n</style>\\n\"],\"names\":[],\"mappings\":\"AAyFA,KAAK,eAAC,CAAC,AACN,QAAQ,CAAE,QAAQ,CAClB,OAAO,CAAE,YAAY,CACrB,SAAS,CAAE,UAAU,IAAI,CAAC,CAAC,IAAI,CAAC,CAC/B,KAAK,CAAE,WAAW,CAClB,GAAG,CAAE,GAAG,CACR,IAAI,CAAE,GAAG,AACX,CAAC\"}"
};

const WIDTH = 512, HEIGHT = 512;

const Network = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	

let { nodes = [], edges = [], onrendered  = ()=>{} } = $$props;
/*export let width = 500;
export let height = 500;*/

let canvas;

	if ($$props.nodes === void 0 && $$bindings.nodes && nodes !== void 0) $$bindings.nodes(nodes);
	if ($$props.edges === void 0 && $$bindings.edges && edges !== void 0) $$bindings.edges(edges);
	if ($$props.onrendered === void 0 && $$bindings.onrendered && onrendered !== void 0) $$bindings.onrendered(onrendered);

	$$result.css.add(css$c);

	return `<div class="relative ${escape$1($$props.class)} svelte-160k95n">
	<canvas${add_attribute("width", WIDTH, 0)}${add_attribute("height", HEIGHT, 0)} class="w-full"${add_attribute("this", canvas, 1)}> </canvas>
	${each(nodes, (node) => `<div${add_attribute("id", node.id, 0)} class="node svelte-160k95n"${add_attribute("this", node.ref, 1)}>
			${$$slots.default ? $$slots.default({ node: node }) : ``}
		</div>`)}
	</div>`;
});

/* src/components/Timeline2.svelte generated by Svelte v3.12.1 */

const css$d = {
	code: ".is_streaming_label.svelte-1mrw0kg{animation:svelte-1mrw0kg-blinker 1s linear infinite}@keyframes svelte-1mrw0kg-blinker{50%{opacity:0}}",
	map: "{\"version\":3,\"file\":\"Timeline2.svelte\",\"sources\":[\"Timeline2.svelte\"],\"sourcesContent\":[\"{#if header}\\n<div class=\\\"w-full flex flex-row\\\">\\n  <div class=\\\"w-1/4 bg-gray-500 text-center overflow-hidden flex flex-row justify-around items-center\\\">\\n    {#each [\\\"mb-2\\\", \\\"mb-1\\\", \\\"-mb-2\\\", \\\"-mb-8\\\"] as mb}\\n    <svg area-hidden=\\\"true\\\" role=\\\"img\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 {faMoon.icon[0]} {faMoon.icon[1]}\\\" class=\\\"{mb} w-4 h-4 overflow-visible inline-block text-yellow-400\\\">\\n      <path fill=\\\"currentColor\\\" d=\\\"{faMoon.icon[4]}\\\"/>\\n    </svg>\\n    {/each}\\n  </div>\\n  <div class=\\\"w-1/2 bg-white text-center overflow-hidden flex flex-row justify-around items-center\\\">\\n    {#each [\\\"-mb-8\\\", \\\"-mb-2\\\", \\\"mb-1\\\", \\\"mb-2\\\", \\\"mb-1\\\", \\\"-mb-2\\\", \\\"-mb-8\\\"] as mb}\\n    <svg area-hidden=\\\"true\\\" role=\\\"img\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 {faSun.icon[0]} {faSun.icon[1]}\\\" class=\\\"{mb} w-4 h-4 overflow-visible inline-block text-red-400\\\">\\n      <path fill=\\\"currentColor\\\" d=\\\"{faSun.icon[4]}\\\"/>\\n    </svg>\\n    {/each}\\n  </div>\\n  <div class=\\\"w-1/4 bg-gray-500 text-center overflow-hidden flex flex-row justify-around items-center\\\">\\n    {#each [\\\"mb-2\\\", \\\"mb-1\\\", \\\"-mb-2\\\", \\\"-mb-8\\\"].reverse() as mb}\\n    <svg area-hidden=\\\"true\\\" role=\\\"img\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 {faMoon.icon[0]} {faMoon.icon[1]}\\\" class=\\\"{mb} w-4 h-4 overflow-visible inline-block text-yellow-400\\\">\\n      <path fill=\\\"currentColor\\\" d=\\\"{faMoon.icon[4]}\\\"/>\\n    </svg>\\n    {/each}\\n  </div>\\n</div>\\n{/if}\\n<div class=\\\"w-full relative border-t\\\">\\n  <div class=\\\"w-full absolute bg-gray-500\\\" style=\\\"height: {height}px\\\"></div>\\n  <div class=\\\"w-3/4 absolute bg-white\\\" style=\\\"height: {height}px\\\"></div>\\n  <div class=\\\"w-1/2 absolute bg-white\\\" style=\\\"height: {height}px\\\"></div>\\n  <div class=\\\"w-1/4 absolute bg-gray-500\\\" style=\\\"height: {height}px\\\"></div>\\n  <div class=\\\"w-full\\\">\\n    <div class=\\\"w-full flex flex-row flex-wrap items-center relative\\\">\\n      <svg class=\\\"flex-grow border-gray-900\\\" width={width} height={height} bind:this={svg}>\\n\\t\\t\\t\\t<defs>\\n\\t\\t\\t\\t\\t{#each Object.values(games) as game}\\n\\t\\t\\t\\t\\t<pattern id=\\\"game-box-art-{game.id}\\\" width={game_box_art_width} height={game_box_art_height} patternUnits=\\\"userSpaceOnUse\\\">\\n            {#if game.box_art_url}\\n              <image xlink:href={game.box_art_url.replace(\\\"{width}\\\", game_box_art_width).replace(\\\"{height}\\\", game_box_art_height)} width={game_box_art_width} height={game_box_art_height} x=0 y=0 > </image>\\n            {/if}\\n\\t\\t\\t\\t\\t</pattern>\\n\\t\\t\\t\\t\\t{/each}\\n\\t\\t\\t\\t</defs>\\n        <g shape-rendering=\\\"crispEdges\\\">\\n          <line x1=\\\"{width*1/8}\\\" x2=\\\"{width*1/8}\\\" y1=\\\"0\\\" y2=\\\"100\\\" stroke-width=\\\"1.0\\\" stroke=\\\"#eee\\\"></line>\\n          <text x=\\\"0\\\" y=\\\"0\\\" fill=\\\"#eee\\\" font-size=\\\"10\\\" font-family=\\\"Arial\\\" transform=\\\"translate({width*1/8 + 3}, 3) rotate(90)\\\">\\n            3am\\n          </text>\\n          <!--<line x1=\\\"{width*2/8}\\\" x2=\\\"{width*2/8}\\\" y1=\\\"0\\\" y2=\\\"100\\\" stroke-width=\\\"1.0\\\" stroke=\\\"#eee\\\"></line>-->\\n          <text fill=\\\"#aaa\\\" font-size=\\\"10\\\" font-family=\\\"Arial\\\" transform=\\\"translate({width*2/8 + 3}, 3) rotate(90)\\\">\\n            6am\\n          </text>\\n          <line x1=\\\"{width*3/8}\\\" x2=\\\"{width*3/8}\\\" y1=\\\"0\\\" y2=\\\"100\\\" stroke-width=\\\"1.0\\\" stroke=\\\"#aaa\\\"></line>\\n          <text fill=\\\"#aaa\\\" font-size=\\\"10\\\" font-family=\\\"Arial\\\" transform=\\\"translate({width*3/8 + 3}, 3) rotate(90)\\\">\\n            9am\\n          </text>\\n          <line x1=\\\"{width*4/8}\\\" x2=\\\"{width*4/8}\\\" y1=\\\"0\\\" y2=\\\"100\\\" stroke-width=\\\"1.0\\\" stroke=\\\"#777\\\"></line>\\n          <text fill=\\\"#777\\\" font-size=\\\"10\\\" font-family=\\\"Arial\\\" transform=\\\"translate({width*4/8 + 3}, 3) rotate(90)\\\">\\n            정오\\n          </text>\\n          <line x1=\\\"{width*5/8}\\\" x2=\\\"{width*5/8}\\\" y1=\\\"0\\\" y2=\\\"100\\\" stroke-width=\\\"1.0\\\" stroke=\\\"#aaa\\\"></line>\\n          <text fill=\\\"#aaa\\\" font-size=\\\"10\\\" font-family=\\\"Arial\\\" transform=\\\"translate({width*5/8 + 3}, 3) rotate(90)\\\">\\n            3pm\\n          </text>\\n          <!--<line x1=\\\"{width*6/8}\\\" x2=\\\"{width*6/8}\\\" y1=\\\"0\\\" y2=\\\"100\\\" stroke-width=\\\"1.0\\\" stroke=\\\"#aaa\\\"></line>-->\\n          <text fill=\\\"#eee\\\" font-size=\\\"10\\\" font-family=\\\"Arial\\\" transform=\\\"translate({width*6/8 + 3}, 3) rotate(90)\\\">\\n            6pm\\n          </text>\\n          <line x1=\\\"{width*7/8}\\\" x2=\\\"{width*7/8}\\\" y1=\\\"0\\\" y2=\\\"100\\\" stroke-width=\\\"1.0\\\" stroke=\\\"#eee\\\"></line>\\n          <text fill=\\\"#eee\\\" font-size=\\\"10\\\" font-family=\\\"Arial\\\" transform=\\\"translate({width*7/8 + 3}, 3) rotate(90)\\\">\\n            9pm\\n          </text>\\n          {#if days_ago == 0 && now_x}\\n          <line x1=\\\"{now_x}\\\" x2={now_x} y1={0} y2={height} stroke=\\\"#FF4560\\\" stroke-width=0.5 \\n            stroke-dasharray=\\\"4 4\\\"\\n            />\\n          <text fill=\\\"#FF4560\\\" font-size=\\\"10\\\" font-family=\\\"Arial\\\" transform=\\\"translate({now_x + 3}, 3) rotate(90)\\\">\\n            현재\\n          </text>\\n          {/if}\\n        </g>\\n\\t\\t\\t\\t<g>\\n\\t\\t\\t\\t\\t{#each data_chunks as data}\\n            <!--<path fill=\\\"#CDA8C7\\\" stroke=\\\"#B498AE\\\" stroke-width=1.0 d=\\\"{data.path[0]}\\\" />-->\\n            <path fill=\\\"#CBD5E0\\\" stroke=\\\"#A0AEC0\\\" stroke-width=1.0 d=\\\"{data.path[0]}\\\" />\\n            {#if data[0] && data[0][5] && data[0][5].game && games[data[0][5].game.id] && data[0][5].game.box_art_url}\\n              <path \\n                style=\\\"fill:url(#game-box-art-{data[0][5].game.id})\\\"\\n                stroke=\\\"#A0AEC0\\\" stroke-width=1.0 d=\\\"{data.path[1]}\\\" />\\n            {:else}\\n              <path \\n                fill=\\\"#000000\\\" \\n                stroke=\\\"#B498AE\\\" stroke-width=1.0 d=\\\"{data.path[1]}\\\" />\\n            {/if}\\n            <path fill=\\\"none\\\" stroke=\\\"#FF4560\\\" stroke-width=3.0 d=\\\"{data.path[2]}\\\" stroke-linecap=\\\"round\\\" stroke-dasharray=\\\"1 6\\\" />\\n          {/each}\\n          {#if streamer.is_streaming && days_ago == 0 && last_data}\\n            <circle \\n              cx={xscale(last_data[0])} \\n              cy={height * ($max_y_axis - (last_data[1])) / $max_y_axis} \\n              r=4\\n              class=\\\"is_streaming_label\\\"\\n              fill=\\\"#FF4560\\\" />\\n            <text fill=\\\"#FF4560\\\" font-size=\\\"10\\\" font-family=\\\"Arial\\\" \\n              x={xscale(last_data[0]) + 6}\\n              y={height * ($max_y_axis - (last_data[1])) / $max_y_axis}\\n              class=\\\"is_streaming_label\\\">\\n              방송중\\n            </text>\\n          {/if}\\n\\t\\t\\t\\t</g>\\n        <g shape-rendering=\\\"crispEdges\\\">\\n          <line class:hidden={tooltip_data == null} x1={tooltip_x} x2={tooltip_x} y1={0} y2={height} stroke=\\\"#000000\\\" stroke-width=0.5 \\n            stroke-dasharray=\\\"4 1\\\"\\n            />\\n        </g>\\n\\t\\t\\t</svg>\\n      <div class=\\\"flex-none mr-2 absolute left-0 top-0 p-1 text-white pointer-events-none\\\"> {[\\\"오늘\\\", \\\"어제\\\", \\\"그제\\\", \\\"엊그제\\\"][days_ago] || days_ago + \\\"일전\\\"} </div>\\n    </div>\\n  </div>\\n\\t{#if tooltip_data} \\n    <div class=\\\"absolute bg-white opacity-75 z-50\\\" style=\\\"{tooltip_x < width*0.5? 'left:' + (tooltip_x+5) + 'px': 'right:' + ((width-tooltip_x)+5) + 'px'}; top: {tooltip_y + 5}px\\\"> \\n            <div class=\\\"flex flex-col font-sans custom-tooltip p-3 w-48 flex-unwrap\\\"> \\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"text-gray-600 text-xs font-semibold tracking-wide\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t{tooltip_data_time_format(tooltip_data)}\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n              <p class=\\\"break-all mt-1 text-gray italic tracking-tight\\\" style=\\\"font-size: 0.5rem\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t{tooltip_data[5].title}\\n              </p>\\n                <div class=\\\"mt-1 flex flex-row flex-wrap items-center text-gray-900\\\">\\n                  <svg area-hidden=\\\"true\\\" role=\\\"img\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 {faUser.icon[0]} {faUser.icon[1]}\\\" class=\\\"w-4 h-4 mr-2 overflow-visible inline-block\\\">\\n                    <path fill=\\\"currentColor\\\" d=\\\"{faUser.icon[4]}\\\"/>\\n                  </svg>\\n                  <b>{tooltip_data[1]}명</b>\\n                </div>\\n                <div class=\\\"flex flex-row flex-wrap items-center text-gray-600 text-xs\\\">\\n                  <svg area-hidden=\\\"true\\\" role=\\\"img\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 {faUserSecret.icon[0]} {faUserSecret.icon[1]}\\\" class=\\\"w-3 h-3 mr-2 overflow-visible inline-block\\\">\\n                    <path fill=\\\"currentColor\\\" d=\\\"{faUserSecret.icon[4]}\\\"/>\\n                  </svg>\\n                  <b>{tooltip_data[1] - tooltip_data[2]}명</b>\\n                </div>\\n                <div class=\\\"flex flex-row flex-wrap items-center text-yellow-700 text-xs\\\">\\n                  <svg area-hidden=\\\"true\\\" role=\\\"img\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 {faKey.icon[0]} {faKey.icon[1]}\\\" class=\\\"w-3 h-3 mr-2 overflow-visible inline-block\\\">\\n                    <path fill=\\\"currentColor\\\" d=\\\"{faKey.icon[4]}\\\"/>\\n                  </svg>\\n                  <b>{tooltip_data[2]}명</b>\\n                </div>\\n                <div class=\\\"mt-1 flex flex-row flex-wrap items-center\\\" style=\\\"color: #FF6F61\\\">\\n                  <svg area-hidden=\\\"true\\\" role=\\\"img\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 {faCommentDots.icon[0]} {faCommentDots.icon[1]}\\\" class=\\\"w-4 h-4 mr-2 overflow-visible inline-block\\\">\\n                    <path fill=\\\"currentColor\\\" d=\\\"{faCommentDots.icon[4]}\\\"/>\\n                  </svg>\\n                  <b>{tooltip_data[4].toFixed(1)}채팅/초</b>\\n                </div>\\n                <div class=\\\"mt-1 flex flex-row flex-wrap items-center text-purple-600\\\">\\n                  <svg area-hidden=\\\"true\\\" role=\\\"img\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 {faHistory.icon[0]} {faHistory.icon[1]}\\\" class=\\\"w-4 h-4 mr-2 overflow-visible inline-block\\\">\\n                    <path fill=\\\"currentColor\\\" d=\\\"{faHistory.icon[4]}\\\"/>\\n                  </svg>\\n                  <b>업타임 {Math.floor((tooltip_data[0] - tooltip_data[5].started_at) / 3600)}시간{Math.round((tooltip_data[0] - tooltip_data[5].started_at) % 3600 / 60)}분</b>\\n                </div>\\n              <p class=\\\"mt-2 text-xs px-1 border rounded-full text-white text-center\\\" style=\\\"background-color: {dark_random_color(tooltip_data[5].game && tooltip_data[5].game.id || 0)}\\\">\\n                {tooltip_data[5].game != null? tooltip_data[5].game.name : \\\"\\\"}\\n              </p>\\n          </div>\\n    </div>\\n\\t{/if}\\n</div>\\n\\n<script context=\\\"module\\\">\\n  import { writable } from 'svelte/store';\\n  let max_y_axis = writable(0);\\n  let max_y_axis_right = writable(0);\\n\\n\\tfunction tooltip_data_time_format(data) {\\n\\t\\tlet d = new Date(data[0]*1000),\\n\\t\\t\\t\\th = d.getHours(), m = d.getMinutes();\\n\\t\\treturn `${h<12? \\\"AM\\\": \\\"PM\\\"} ${(\\\"0\\\"+(h>12? h-12: h)).slice(-2)}:${(\\\"0\\\"+m).slice(-2)}`;\\n\\t}\\n</script>\\n\\n<script>\\nimport { onMount } from \\\"svelte\\\";\\nimport { faUser } from '@fortawesome/free-solid-svg-icons/faUser'\\nimport { faUserLock } from '@fortawesome/free-solid-svg-icons/faUserLock'\\nimport { faUserSecret } from '@fortawesome/free-solid-svg-icons/faUserSecret'\\nimport { faUserCheck } from '@fortawesome/free-solid-svg-icons/faUserCheck'\\nimport { faCommentDots } from '@fortawesome/free-solid-svg-icons/faCommentDots'\\nimport { faKey } from '@fortawesome/free-solid-svg-icons/faKey'\\nimport { faSun } from '@fortawesome/free-solid-svg-icons/faSun'\\nimport { faMoon } from '@fortawesome/free-solid-svg-icons/faMoon'\\nimport { faExternalLinkAlt } from '@fortawesome/free-solid-svg-icons/faExternalLinkAlt'\\nimport { faHistory } from '@fortawesome/free-solid-svg-icons/faHistory';\\nimport { dark_random_color, findLastIndex } from \\\"../util.js\\\";\\nimport { API } from '../api.js';\\n\\nexport let days_ago;\\nexport let streamer;\\nexport let header = false;\\n\\nlet tooltip_x=0, \\n\\t\\ttooltip_y=0, \\n\\t\\ttooltip_data=null;\\n\\n\\nif(days_ago === 0) {\\n  max_y_axis.set(0)\\n  max_y_axis_right.set(0)\\n}\\n\\nlet today = new Date(); today.setHours(0,0,0,0);\\nlet to = new Date(today.getTime() - 1000*60*60*24*(days_ago-1));\\nlet from = new Date(today.getTime() - 1000*60*60*24*days_ago);\\n\\nlet height = 100;\\nlet width = 500;\\n\\nlet games = {};\\nlet data_chunks = [];\\nlet last_data = null;\\n$: game_box_art_width = height*0.4;\\n$: game_box_art_height = height*0.5;\\n\\nlet svg;\\n\\nlet to_timestamp = to.getTime()/1000;\\nlet from_timestamp = from.getTime()/1000;\\nfunction xscale(x) {\\n  return width * (x - from_timestamp) / (24*60*60);\\n}\\nfunction ixscale(x) {\\n  return x / width * (24*60*60) + from_timestamp\\n}\\nfunction yscale(x) {\\n  return height * ($max_y_axis - x) / $max_y_axis;\\n}\\nfunction yscale_right(x) {\\n  return height * ($max_y_axis_right - x) / $max_y_axis_right + 3;\\n}\\nfunction update_path() {\\n  for(let data of data_chunks){\\n    data.path = [\\n      `M${xscale(data[0][0])},${height}` +\\n        data.map(d=>\\n          `L${xscale(d[0])},${yscale(d[1])}`\\n        ).join(\\\"\\\") + \\n        `L${xscale(data[data.length-1][0])},${height}` +\\n        `L${xscale(data[0][0])},${height}`,\\n      `M${xscale(data[0][0])},${height}` +\\n        data.map(d=>\\n          `L${xscale(d[0])},${yscale(d[2])}`\\n        ).join(\\\"\\\") + \\n        `L${xscale(data[data.length-1][0])},${height}` +\\n        `L${xscale(data[0][0])},${height}`, \\n      `M${xscale(data[0][0])},${yscale_right(data[0][4])}` +\\n        data.map(d=>\\n          `L${xscale(d[0])},${yscale_right(d[4])}`\\n        ).join(\\\"\\\"),\\n    ];\\n  }\\n  data_chunks = data_chunks;\\n}\\nlet last_max_y_axis = $max_y_axis;\\nlet last_max_y_axis_right = $max_y_axis_right;\\n$: if(data_chunks && ((last_max_y_axis != $max_y_axis) || (last_max_y_axis_right != $max_y_axis_right))) {\\n  last_max_y_axis = $max_y_axis;\\n  last_max_y_axis_right = $max_y_axis_right;\\n  update_path();\\n}\\n\\nlet now_x = null;\\n\\nonMount(async ()=> {\\n\\twidth = svg.getBoundingClientRect().width;\\n  now_x = xscale(new Date().getTime()/1000);\\n  let {stream_changes, stream_metadata_changes} = await API.timeline(streamer.id, from, to);\\n  last_data = stream_changes[stream_changes.length-1];\\n  max_y_axis.update(x => Math.max(x, ...stream_changes.map(d=>Math.max(d[2], d[1]))));\\n  max_y_axis_right.update(x => Math.max(x, ...stream_changes.map(d=>d[4])));\\n  let j=0;\\n  let metadatas = stream_changes.map(x => {\\n    while(stream_metadata_changes.length > j && x[0] >= stream_metadata_changes[j].time) ++j;\\n    if(x[1] === null) return null;\\n    else if(j>0) return stream_metadata_changes[j-1];\\n    else return null;\\n  });\\n  stream_changes = stream_changes.map((d, i)=>[...d, metadatas[i]]);\\n  let sm_n = 3, chatting_speed_sm = [stream_changes.slice(0, sm_n).reduce((a,b)=>a+b[4], 0)/sm_n];\\n  for(let i=sm_n, l=stream_changes.length, sm=chatting_speed_sm[0]; i<l; ++i){\\n    sm = sm + (stream_changes[i][4] - stream_changes[i-sm_n][4])/sm_n;\\n    chatting_speed_sm.push(sm);\\n  }\\n  for(let i=0, sm=0; i<Math.min(sm_n, stream_changes.length); ++i){\\n    sm = sm*i/(i+1) + stream_changes[i][4]/(i+1);\\n    stream_changes[i][4] = sm;\\n  }\\n  for(let i=0, l=chatting_speed_sm.length; i<l; ++i)\\n    stream_changes[Math.min(stream_changes.length-1, i + sm_n-1)][4] = chatting_speed_sm[i];\\n\\n\\tsvg.onmousemove = function(e){\\n\\t\\tlet x = e.clientX - svg.getBoundingClientRect().x, \\n\\t\\t\\t\\ty = e.clientY - svg.getBoundingClientRect().y;\\n    tooltip_x = x; \\n    tooltip_y = y;\\n    let target_date = ixscale(x);\\n    let right_index = stream_changes.findIndex(d => d[0] >= target_date),\\n        left_index = findLastIndex(stream_changes, d => d[0] <= target_date);\\n    let nearest_index; \\n    if(right_index >= 0 && left_index >= 0) \\n      nearest_index = Math.abs(stream_changes[left_index][0] - target_date) <= Math.abs(stream_changes[right_index][0] - target_date)?\\n        left_index: right_index;\\n    else if(right_index >= 0)\\n      nearest_index = right_index;\\n    else if(left_index >= 0)\\n      nearest_index = left_index;\\n    else {\\n      tooltip_data = null;\\n      return;\\n    }\\n\\n    if(Math.abs(stream_changes[nearest_index][0] - target_date) < 60*60){ // || right_index != 0 && metadatas[right_index].started_at == metadatas[right_index-1].started_at) {\\n      tooltip_data = stream_changes[nearest_index];\\n    }\\n    else \\n      tooltip_data = null;\\n  }\\n  svg.onmouseleave = function(e){\\n    tooltip_data = null;\\n  }\\n  data_chunks.push([]);\\n\\tfor(let i=0, l=stream_changes.length, j=0; i<l; ++i) {\\n   \\t  if(i>0 && metadatas[i] != metadatas[i-1] && \\n          ((metadatas[i] == null || metadatas[i-1] == null) || \\n            metadatas[i].started_at != metadatas[i-1].started_at || \\n            (metadatas[i].game && metadatas[i].game.id) != (metadatas[i-1].game && metadatas[i-1].game.id) ||\\n            metadatas[i].title != metadatas[i-1].title)){\\n        ++j;\\n        data_chunks.push([]);\\n        if(metadatas[i] && metadatas[i-1] && metadatas[i].started_at == metadatas[i-1].started_at){\\n          let mid = stream_changes[i].slice(0, 5).map((d, j) => Math.floor((d + stream_changes[i-1][j])*0.5));\\n          data_chunks[j-1].push([...mid, metadatas[i-1]])\\n          data_chunks[j].push([...mid, metadatas[i]])\\n        }\\n      }\\n      data_chunks[j].push(stream_changes[i])\\n  }\\n  update_path();\\n  data_chunks = data_chunks;\\n  for(let data of data_chunks){\\n  \\tif(data[0] == null || data[0][5] == null || data[0][5].game == null) continue;\\n\\t\\tgames[data[0][5].game.id] = data[0][5].game;\\n\\t}\\n});\\n</script>\\n\\n<style>\\n.is_streaming_label {\\n  animation: blinker 1s linear infinite;\\n}\\n@keyframes blinker {\\n  50% {\\n    opacity: 0;\\n  }\\n}\\n</style>\\n\"],\"names\":[],\"mappings\":\"AAiWA,mBAAmB,eAAC,CAAC,AACnB,SAAS,CAAE,sBAAO,CAAC,EAAE,CAAC,MAAM,CAAC,QAAQ,AACvC,CAAC,AACD,WAAW,sBAAQ,CAAC,AAClB,GAAG,AAAC,CAAC,AACH,OAAO,CAAE,CAAC,AACZ,CAAC,AACH,CAAC\"}"
};

let max_y_axis$1 = writable(0);
let max_y_axis_right$1 = writable(0);

	function tooltip_data_time_format$1(data) {
		let d = new Date(data[0]*1000),
				h = d.getHours(), m = d.getMinutes();
		return `${h<12? "AM": "PM"} ${("0"+(h>12? h-12: h)).slice(-2)}:${("0"+m).slice(-2)}`;
	}

let height = 100;

const Timeline2 = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	let $max_y_axis = get_store_value(max_y_axis$1), $max_y_axis_right = get_store_value(max_y_axis_right$1);

	

let { days_ago, streamer, header = false } = $$props;

let tooltip_x=0, 
		tooltip_y=0, 
		tooltip_data=null;


if(days_ago === 0) {
  max_y_axis$1.set(0);
  max_y_axis_right$1.set(0);
}

let today = new Date(); today.setHours(0,0,0,0);
let to = new Date(today.getTime() - 1000*60*60*24*(days_ago-1));
let from = new Date(today.getTime() - 1000*60*60*24*days_ago);
let width = 500;

let games = {};
let data_chunks = [];
let last_data = null;

let svg;

let to_timestamp = to.getTime()/1000;
let from_timestamp = from.getTime()/1000;
function xscale(x) {
  return width * (x - from_timestamp) / (24*60*60);
}
function ixscale(x) {
  return x / width * (24*60*60) + from_timestamp
}
function yscale(x) {
  return height * ($max_y_axis - x) / $max_y_axis;
}
function yscale_right(x) {
  return height * ($max_y_axis_right - x) / $max_y_axis_right + 3;
}
function update_path() {
  for(let data of data_chunks){
    data.path = [
      `M${xscale(data[0][0])},${height}` +
        data.map(d=>
          `L${xscale(d[0])},${yscale(d[1])}`
        ).join("") + 
        `L${xscale(data[data.length-1][0])},${height}` +
        `L${xscale(data[0][0])},${height}`,
      `M${xscale(data[0][0])},${height}` +
        data.map(d=>
          `L${xscale(d[0])},${yscale(d[2])}`
        ).join("") + 
        `L${xscale(data[data.length-1][0])},${height}` +
        `L${xscale(data[0][0])},${height}`, 
      `M${xscale(data[0][0])},${yscale_right(data[0][4])}` +
        data.map(d=>
          `L${xscale(d[0])},${yscale_right(d[4])}`
        ).join(""),
    ];
  }
  data_chunks = data_chunks;
}
let last_max_y_axis = $max_y_axis;
let last_max_y_axis_right = $max_y_axis_right;

let now_x = null;

onMount(async ()=> {
	width = svg.getBoundingClientRect().width;
  now_x = xscale(new Date().getTime()/1000);
  let {stream_changes, stream_metadata_changes} = await API.timeline(streamer.id, from, to);
  last_data = stream_changes[stream_changes.length-1];
  max_y_axis$1.update(x => Math.max(x, ...stream_changes.map(d=>Math.max(d[2], d[1]))));
  max_y_axis_right$1.update(x => Math.max(x, ...stream_changes.map(d=>d[4])));
  let j=0;
  let metadatas = stream_changes.map(x => {
    while(stream_metadata_changes.length > j && x[0] >= stream_metadata_changes[j].time) ++j;
    if(x[1] === null) return null;
    else if(j>0) return stream_metadata_changes[j-1];
    else return null;
  });
  stream_changes = stream_changes.map((d, i)=>[...d, metadatas[i]]);
  let sm_n = 3, chatting_speed_sm = [stream_changes.slice(0, sm_n).reduce((a,b)=>a+b[4], 0)/sm_n];
  for(let i=sm_n, l=stream_changes.length, sm=chatting_speed_sm[0]; i<l; ++i){
    sm = sm + (stream_changes[i][4] - stream_changes[i-sm_n][4])/sm_n;
    chatting_speed_sm.push(sm);
  }
  for(let i=0, sm=0; i<Math.min(sm_n, stream_changes.length); ++i){
    sm = sm*i/(i+1) + stream_changes[i][4]/(i+1);
    stream_changes[i][4] = sm;
  }
  for(let i=0, l=chatting_speed_sm.length; i<l; ++i)
    stream_changes[Math.min(stream_changes.length-1, i + sm_n-1)][4] = chatting_speed_sm[i];

	svg.onmousemove = function(e){
		let x = e.clientX - svg.getBoundingClientRect().x, 
				y = e.clientY - svg.getBoundingClientRect().y;
    tooltip_x = x; 
    tooltip_y = y;
    let target_date = ixscale(x);
    let right_index = stream_changes.findIndex(d => d[0] >= target_date),
        left_index = findLastIndex(stream_changes, d => d[0] <= target_date);
    let nearest_index; 
    if(right_index >= 0 && left_index >= 0) 
      nearest_index = Math.abs(stream_changes[left_index][0] - target_date) <= Math.abs(stream_changes[right_index][0] - target_date)?
        left_index: right_index;
    else if(right_index >= 0)
      nearest_index = right_index;
    else if(left_index >= 0)
      nearest_index = left_index;
    else {
      tooltip_data = null;
      return;
    }

    if(Math.abs(stream_changes[nearest_index][0] - target_date) < 60*60){ // || right_index != 0 && metadatas[right_index].started_at == metadatas[right_index-1].started_at) {
      tooltip_data = stream_changes[nearest_index];
    }
    else 
      tooltip_data = null;
  };
  svg.onmouseleave = function(e){
    tooltip_data = null;
  };
  data_chunks.push([]);
	for(let i=0, l=stream_changes.length, j=0; i<l; ++i) {
   	  if(i>0 && metadatas[i] != metadatas[i-1] && 
          ((metadatas[i] == null || metadatas[i-1] == null) || 
            metadatas[i].started_at != metadatas[i-1].started_at || 
            (metadatas[i].game && metadatas[i].game.id) != (metadatas[i-1].game && metadatas[i-1].game.id) ||
            metadatas[i].title != metadatas[i-1].title)){
        ++j;
        data_chunks.push([]);
        if(metadatas[i] && metadatas[i-1] && metadatas[i].started_at == metadatas[i-1].started_at){
          let mid = stream_changes[i].slice(0, 5).map((d, j) => Math.floor((d + stream_changes[i-1][j])*0.5));
          data_chunks[j-1].push([...mid, metadatas[i-1]]);
          data_chunks[j].push([...mid, metadatas[i]]);
        }
      }
      data_chunks[j].push(stream_changes[i]);
  }
  update_path();
  data_chunks = data_chunks;
  for(let data of data_chunks){
  	if(data[0] == null || data[0][5] == null || data[0][5].game == null) continue;
		games[data[0][5].game.id] = data[0][5].game;
	}
});

	if ($$props.days_ago === void 0 && $$bindings.days_ago && days_ago !== void 0) $$bindings.days_ago(days_ago);
	if ($$props.streamer === void 0 && $$bindings.streamer && streamer !== void 0) $$bindings.streamer(streamer);
	if ($$props.header === void 0 && $$bindings.header && header !== void 0) $$bindings.header(header);

	$$result.css.add(css$d);

	let game_box_art_width = height*0.4;
	let game_box_art_height = height*0.5;
	if(data_chunks && ((last_max_y_axis != $max_y_axis) || (last_max_y_axis_right != $max_y_axis_right))) {
      last_max_y_axis = $max_y_axis;
      last_max_y_axis_right = $max_y_axis_right;
      update_path();
    }

	return `${ header ? `<div class="w-full flex flex-row">
	  <div class="w-1/4 bg-gray-500 text-center overflow-hidden flex flex-row justify-around items-center">
	    ${each(["mb-2", "mb-1", "-mb-2", "-mb-8"], (mb) => `<svg area-hidden="true" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 ${escape$1(faMoon_2.icon[0])} ${escape$1(faMoon_2.icon[1])}" class="${escape$1(mb)} w-4 h-4 overflow-visible inline-block text-yellow-400 svelte-1mrw0kg">
	      <path fill="currentColor"${add_attribute("d", faMoon_2.icon[4], 0)}></path>
	    </svg>`)}
	  </div>
	  <div class="w-1/2 bg-white text-center overflow-hidden flex flex-row justify-around items-center">
	    ${each(["-mb-8", "-mb-2", "mb-1", "mb-2", "mb-1", "-mb-2", "-mb-8"], (mb) => `<svg area-hidden="true" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 ${escape$1(faSun_2.icon[0])} ${escape$1(faSun_2.icon[1])}" class="${escape$1(mb)} w-4 h-4 overflow-visible inline-block text-red-400 svelte-1mrw0kg">
	      <path fill="currentColor"${add_attribute("d", faSun_2.icon[4], 0)}></path>
	    </svg>`)}
	  </div>
	  <div class="w-1/4 bg-gray-500 text-center overflow-hidden flex flex-row justify-around items-center">
	    ${each(["mb-2", "mb-1", "-mb-2", "-mb-8"].reverse(), (mb) => `<svg area-hidden="true" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 ${escape$1(faMoon_2.icon[0])} ${escape$1(faMoon_2.icon[1])}" class="${escape$1(mb)} w-4 h-4 overflow-visible inline-block text-yellow-400 svelte-1mrw0kg">
	      <path fill="currentColor"${add_attribute("d", faMoon_2.icon[4], 0)}></path>
	    </svg>`)}
	  </div>
	</div>` : `` }
	<div class="w-full relative border-t">
	  <div class="w-full absolute bg-gray-500" style="height: ${escape$1(height)}px"></div>
	  <div class="w-3/4 absolute bg-white" style="height: ${escape$1(height)}px"></div>
	  <div class="w-1/2 absolute bg-white" style="height: ${escape$1(height)}px"></div>
	  <div class="w-1/4 absolute bg-gray-500" style="height: ${escape$1(height)}px"></div>
	  <div class="w-full">
	    <div class="w-full flex flex-row flex-wrap items-center relative">
	      <svg class="flex-grow border-gray-900"${add_attribute("width", width, 0)}${add_attribute("height", height, 0)}${add_attribute("this", svg, 1)}>
					<defs>
						${each(Object.values(games), (game) => `<pattern id="game-box-art-${escape$1(game.id)}"${add_attribute("width", game_box_art_width, 0)}${add_attribute("height", game_box_art_height, 0)} patternUnits="userSpaceOnUse">
	            ${ game.box_art_url ? `<image${add_attribute("xlink:href", game.box_art_url.replace("{width}", game_box_art_width).replace("{height}", game_box_art_height), 0)}${add_attribute("width", game_box_art_width, 0)}${add_attribute("height", game_box_art_height, 0)} x="0" y="0"> </image>` : `` }
						</pattern>`)}
					</defs>
	        <g shape-rendering="crispEdges">
	          <line${add_attribute("x1", width*1/8, 0)}${add_attribute("x2", width*1/8, 0)} y1="0" y2="100" stroke-width="1.0" stroke="#eee"></line>
	          <text x="0" y="0" fill="#eee" font-size="10" font-family="Arial" transform="translate(${escape$1(width*1/8 + 3)}, 3) rotate(90)">
	            3am
	          </text>
	          
	          <text fill="#aaa" font-size="10" font-family="Arial" transform="translate(${escape$1(width*2/8 + 3)}, 3) rotate(90)">
	            6am
	          </text>
	          <line${add_attribute("x1", width*3/8, 0)}${add_attribute("x2", width*3/8, 0)} y1="0" y2="100" stroke-width="1.0" stroke="#aaa"></line>
	          <text fill="#aaa" font-size="10" font-family="Arial" transform="translate(${escape$1(width*3/8 + 3)}, 3) rotate(90)">
	            9am
	          </text>
	          <line${add_attribute("x1", width*4/8, 0)}${add_attribute("x2", width*4/8, 0)} y1="0" y2="100" stroke-width="1.0" stroke="#777"></line>
	          <text fill="#777" font-size="10" font-family="Arial" transform="translate(${escape$1(width*4/8 + 3)}, 3) rotate(90)">
	            정오
	          </text>
	          <line${add_attribute("x1", width*5/8, 0)}${add_attribute("x2", width*5/8, 0)} y1="0" y2="100" stroke-width="1.0" stroke="#aaa"></line>
	          <text fill="#aaa" font-size="10" font-family="Arial" transform="translate(${escape$1(width*5/8 + 3)}, 3) rotate(90)">
	            3pm
	          </text>
	          
	          <text fill="#eee" font-size="10" font-family="Arial" transform="translate(${escape$1(width*6/8 + 3)}, 3) rotate(90)">
	            6pm
	          </text>
	          <line${add_attribute("x1", width*7/8, 0)}${add_attribute("x2", width*7/8, 0)} y1="0" y2="100" stroke-width="1.0" stroke="#eee"></line>
	          <text fill="#eee" font-size="10" font-family="Arial" transform="translate(${escape$1(width*7/8 + 3)}, 3) rotate(90)">
	            9pm
	          </text>
	          ${ days_ago == 0 && now_x ? `<line${add_attribute("x1", now_x, 0)}${add_attribute("x2", now_x, 0)}${add_attribute("y1", 0, 0)}${add_attribute("y2", height, 0)} stroke="#FF4560" stroke-width="0.5" stroke-dasharray="4 4"></line>
	          <text fill="#FF4560" font-size="10" font-family="Arial" transform="translate(${escape$1(now_x + 3)}, 3) rotate(90)">
	            현재
	          </text>` : `` }
	        </g>
					<g>
						${each(data_chunks, (data) => `
	            <path fill="#CBD5E0" stroke="#A0AEC0" stroke-width="1.0"${add_attribute("d", data.path[0], 0)}></path>
	            ${ data[0] && data[0][5] && data[0][5].game && games[data[0][5].game.id] && data[0][5].game.box_art_url ? `<path style="fill:url(#game-box-art-${escape$1(data[0][5].game.id)})" stroke="#A0AEC0" stroke-width="1.0"${add_attribute("d", data.path[1], 0)}></path>` : `<path fill="#000000" stroke="#B498AE" stroke-width="1.0"${add_attribute("d", data.path[1], 0)}></path>` }
	            <path fill="none" stroke="#FF4560" stroke-width="3.0"${add_attribute("d", data.path[2], 0)} stroke-linecap="round" stroke-dasharray="1 6"></path>`)}
	          ${ streamer.is_streaming && days_ago == 0 && last_data ? `<circle${add_attribute("cx", xscale(last_data[0]), 0)}${add_attribute("cy", height * ($max_y_axis - (last_data[1])) / $max_y_axis, 0)} r="4" class="is_streaming_label svelte-1mrw0kg" fill="#FF4560"></circle>
	            <text fill="#FF4560" font-size="10" font-family="Arial"${add_attribute("x", xscale(last_data[0]) + 6, 0)}${add_attribute("y", height * ($max_y_axis - (last_data[1])) / $max_y_axis, 0)} class="is_streaming_label svelte-1mrw0kg">
	              방송중
	            </text>` : `` }
					</g>
	        <g shape-rendering="crispEdges">
	          <line${add_attribute("x1", tooltip_x, 0)}${add_attribute("x2", tooltip_x, 0)}${add_attribute("y1", 0, 0)}${add_attribute("y2", height, 0)} stroke="#000000" stroke-width="0.5" stroke-dasharray="4 1"${add_classes([tooltip_data == null ? "hidden" : ""].join(' ').trim())}></line>
	        </g>
				</svg>
	      <div class="flex-none mr-2 absolute left-0 top-0 p-1 text-white pointer-events-none"> ${escape$1(["오늘", "어제", "그제", "엊그제"][days_ago] || days_ago + "일전")} </div>
	    </div>
	  </div>
		${ tooltip_data ? `<div class="absolute bg-white opacity-75 z-50" style="${escape$1(tooltip_x < width*0.5? 'left:' + (tooltip_x+5) + 'px': 'right:' + ((width-tooltip_x)+5) + 'px')}; top: ${escape$1(tooltip_y + 5)}px"> 
	            <div class="flex flex-col font-sans custom-tooltip p-3 w-48 flex-unwrap"> 
								<div class="text-gray-600 text-xs font-semibold tracking-wide">
									${escape$1(tooltip_data_time_format$1(tooltip_data))}
								</div>
	              <p class="break-all mt-1 text-gray italic tracking-tight" style="font-size: 0.5rem">
									${escape$1(tooltip_data[5].title)}
	              </p>
	                <div class="mt-1 flex flex-row flex-wrap items-center text-gray-900">
	                  <svg area-hidden="true" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 ${escape$1(faUser_2.icon[0])} ${escape$1(faUser_2.icon[1])}" class="w-4 h-4 mr-2 overflow-visible inline-block">
	                    <path fill="currentColor"${add_attribute("d", faUser_2.icon[4], 0)}></path>
	                  </svg>
	                  <b>${escape$1(tooltip_data[1])}명</b>
	                </div>
	                <div class="flex flex-row flex-wrap items-center text-gray-600 text-xs">
	                  <svg area-hidden="true" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 ${escape$1(faUserSecret_2.icon[0])} ${escape$1(faUserSecret_2.icon[1])}" class="w-3 h-3 mr-2 overflow-visible inline-block">
	                    <path fill="currentColor"${add_attribute("d", faUserSecret_2.icon[4], 0)}></path>
	                  </svg>
	                  <b>${escape$1(tooltip_data[1] - tooltip_data[2])}명</b>
	                </div>
	                <div class="flex flex-row flex-wrap items-center text-yellow-700 text-xs">
	                  <svg area-hidden="true" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 ${escape$1(faKey_2.icon[0])} ${escape$1(faKey_2.icon[1])}" class="w-3 h-3 mr-2 overflow-visible inline-block">
	                    <path fill="currentColor"${add_attribute("d", faKey_2.icon[4], 0)}></path>
	                  </svg>
	                  <b>${escape$1(tooltip_data[2])}명</b>
	                </div>
	                <div class="mt-1 flex flex-row flex-wrap items-center" style="color: #FF6F61">
	                  <svg area-hidden="true" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 ${escape$1(faCommentDots_2.icon[0])} ${escape$1(faCommentDots_2.icon[1])}" class="w-4 h-4 mr-2 overflow-visible inline-block">
	                    <path fill="currentColor"${add_attribute("d", faCommentDots_2.icon[4], 0)}></path>
	                  </svg>
	                  <b>${escape$1(tooltip_data[4].toFixed(1))}채팅/초</b>
	                </div>
	                <div class="mt-1 flex flex-row flex-wrap items-center text-purple-600">
	                  <svg area-hidden="true" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 ${escape$1(faHistory_2.icon[0])} ${escape$1(faHistory_2.icon[1])}" class="w-4 h-4 mr-2 overflow-visible inline-block">
	                    <path fill="currentColor"${add_attribute("d", faHistory_2.icon[4], 0)}></path>
	                  </svg>
	                  <b>업타임 ${escape$1(Math.floor((tooltip_data[0] - tooltip_data[5].started_at) / 3600))}시간${escape$1(Math.round((tooltip_data[0] - tooltip_data[5].started_at) % 3600 / 60))}분</b>
	                </div>
	              <p class="mt-2 text-xs px-1 border rounded-full text-white text-center" style="background-color: ${escape$1(dark_random_color(tooltip_data[5].game && tooltip_data[5].game.id || 0))}">
	                ${escape$1(tooltip_data[5].game != null? tooltip_data[5].game.name : "")}
	              </p>
	          </div>
	    </div>` : `` }
	</div>`;
});

/* src/components/StreamSpiral.svelte generated by Svelte v3.12.1 */

const StreamSpiral = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	
let { streamer, mean_streaming_time_ranges = [], mean_streaming_time_reliability = 0.0, streaming_time_ranges_variance = 0.0, total_streaming_time_ratio = 0.0, streaming_time_ranges_regularity = 0.0, streaming_start_time = 0.0, streaming_end_time = 0.0, streaming_start_time_std= 0.0, streaming_end_time_std= 0.0 } = $$props; 
const days_ago = 7*8;
let today = new Date(); today.setHours(0,0,0,0);
let to = new Date(today.getTime() + 1000*60*60*24);
let from = new Date(today.getTime() - 1000*60*60*24*(days_ago-1));

let canvas;
let ui_canvas;

	if ($$props.streamer === void 0 && $$bindings.streamer && streamer !== void 0) $$bindings.streamer(streamer);
	if ($$props.mean_streaming_time_ranges === void 0 && $$bindings.mean_streaming_time_ranges && mean_streaming_time_ranges !== void 0) $$bindings.mean_streaming_time_ranges(mean_streaming_time_ranges);
	if ($$props.mean_streaming_time_reliability === void 0 && $$bindings.mean_streaming_time_reliability && mean_streaming_time_reliability !== void 0) $$bindings.mean_streaming_time_reliability(mean_streaming_time_reliability);
	if ($$props.streaming_time_ranges_variance === void 0 && $$bindings.streaming_time_ranges_variance && streaming_time_ranges_variance !== void 0) $$bindings.streaming_time_ranges_variance(streaming_time_ranges_variance);
	if ($$props.total_streaming_time_ratio === void 0 && $$bindings.total_streaming_time_ratio && total_streaming_time_ratio !== void 0) $$bindings.total_streaming_time_ratio(total_streaming_time_ratio);
	if ($$props.streaming_time_ranges_regularity === void 0 && $$bindings.streaming_time_ranges_regularity && streaming_time_ranges_regularity !== void 0) $$bindings.streaming_time_ranges_regularity(streaming_time_ranges_regularity);
	if ($$props.streaming_start_time === void 0 && $$bindings.streaming_start_time && streaming_start_time !== void 0) $$bindings.streaming_start_time(streaming_start_time);
	if ($$props.streaming_end_time === void 0 && $$bindings.streaming_end_time && streaming_end_time !== void 0) $$bindings.streaming_end_time(streaming_end_time);
	if ($$props.streaming_start_time_std === void 0 && $$bindings.streaming_start_time_std && streaming_start_time_std !== void 0) $$bindings.streaming_start_time_std(streaming_start_time_std);
	if ($$props.streaming_end_time_std === void 0 && $$bindings.streaming_end_time_std && streaming_end_time_std !== void 0) $$bindings.streaming_end_time_std(streaming_end_time_std);

	return `<div class="${escape$1($$props.class)} relative">
	<canvas class="w-full"${add_attribute("this", canvas, 1)}>
	</canvas>
	<canvas class="absolute w-full h-full"${add_attribute("this", ui_canvas, 1)}>
	</canvas>
	</div>`;
});

var faArrowUp = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, '__esModule', { value: true });
var prefix = 'fas';
var iconName = 'arrow-up';
var width = 448;
var height = 512;
var ligatures = [];
var unicode = 'f062';
var svgPathData = 'M34.9 289.5l-22.2-22.2c-9.4-9.4-9.4-24.6 0-33.9L207 39c9.4-9.4 24.6-9.4 33.9 0l194.3 194.3c9.4 9.4 9.4 24.6 0 33.9L413 289.4c-9.5 9.5-25 9.3-34.3-.4L264 168.6V456c0 13.3-10.7 24-24 24h-32c-13.3 0-24-10.7-24-24V168.6L69.2 289.1c-9.3 9.8-24.8 10-34.3.4z';

exports.definition = {
  prefix: prefix,
  iconName: iconName,
  icon: [
    width,
    height,
    ligatures,
    unicode,
    svgPathData
  ]};

exports.faArrowUp = exports.definition;
exports.prefix = prefix;
exports.iconName = iconName;
exports.width = width;
exports.height = height;
exports.ligatures = ligatures;
exports.unicode = unicode;
exports.svgPathData = svgPathData;
});

unwrapExports(faArrowUp);
var faArrowUp_1 = faArrowUp.definition;
var faArrowUp_2 = faArrowUp.faArrowUp;
var faArrowUp_3 = faArrowUp.prefix;
var faArrowUp_4 = faArrowUp.iconName;
var faArrowUp_5 = faArrowUp.width;
var faArrowUp_6 = faArrowUp.height;
var faArrowUp_7 = faArrowUp.ligatures;
var faArrowUp_8 = faArrowUp.unicode;
var faArrowUp_9 = faArrowUp.svgPathData;

var faArrowDown = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, '__esModule', { value: true });
var prefix = 'fas';
var iconName = 'arrow-down';
var width = 448;
var height = 512;
var ligatures = [];
var unicode = 'f063';
var svgPathData = 'M413.1 222.5l22.2 22.2c9.4 9.4 9.4 24.6 0 33.9L241 473c-9.4 9.4-24.6 9.4-33.9 0L12.7 278.6c-9.4-9.4-9.4-24.6 0-33.9l22.2-22.2c9.5-9.5 25-9.3 34.3.4L184 343.4V56c0-13.3 10.7-24 24-24h32c13.3 0 24 10.7 24 24v287.4l114.8-120.5c9.3-9.8 24.8-10 34.3-.4z';

exports.definition = {
  prefix: prefix,
  iconName: iconName,
  icon: [
    width,
    height,
    ligatures,
    unicode,
    svgPathData
  ]};

exports.faArrowDown = exports.definition;
exports.prefix = prefix;
exports.iconName = iconName;
exports.width = width;
exports.height = height;
exports.ligatures = ligatures;
exports.unicode = unicode;
exports.svgPathData = svgPathData;
});

unwrapExports(faArrowDown);
var faArrowDown_1 = faArrowDown.definition;
var faArrowDown_2 = faArrowDown.faArrowDown;
var faArrowDown_3 = faArrowDown.prefix;
var faArrowDown_4 = faArrowDown.iconName;
var faArrowDown_5 = faArrowDown.width;
var faArrowDown_6 = faArrowDown.height;
var faArrowDown_7 = faArrowDown.ligatures;
var faArrowDown_8 = faArrowDown.unicode;
var faArrowDown_9 = faArrowDown.svgPathData;

/* src/components/Comments.svelte generated by Svelte v3.12.1 */

const Comments = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	
const toast = new Toast();

let { streamer_id } = $$props;

let comments;

let load_more_loading = false;

let profile_image_uri;

function refresh_comments(){
  API.comments(streamer_id).then(_comments => {
    comments = _comments;
  }).catch(e => {
  });
}

const base64abc = (() => {
	let abc = [],
		A = "A".charCodeAt(0),
		a = "a".charCodeAt(0),
		n = "0".charCodeAt(0);
	for (let i = 0; i < 26; ++i) {
		abc.push(String.fromCharCode(A + i));
	}
	for (let i = 0; i < 26; ++i) {
		abc.push(String.fromCharCode(a + i));
	}
	for (let i = 0; i < 10; ++i) {
		abc.push(String.fromCharCode(n + i));
	}
	abc.push("+");
	abc.push("/");
	return abc;
})();

function bytesToBase64(bytes) {
	let result = '', i, l = bytes.length;
	for (i = 2; i < l; i += 3) {
		result += base64abc[bytes[i - 2] >> 2];
		result += base64abc[((bytes[i - 2] & 0x03) << 4) | (bytes[i - 1] >> 4)];
		result += base64abc[((bytes[i - 1] & 0x0F) << 2) | (bytes[i] >> 6)];
		result += base64abc[bytes[i] & 0x3F];
	}
	if (i === l + 1) { // 1 octet missing
		result += base64abc[bytes[i - 2] >> 2];
		result += base64abc[(bytes[i - 2] & 0x03) << 4];
		result += "==";
	}
	if (i === l) { // 2 octets missing
		result += base64abc[bytes[i - 2] >> 2];
		result += base64abc[((bytes[i - 2] & 0x03) << 4) | (bytes[i - 1] >> 4)];
		result += base64abc[(bytes[i - 1] & 0x0F) << 2];
		result += "=";
	}
	return result;
}

function hash_to_image_uri(hash){
  return `https://avatars.dicebear.com/v2/identicon/${escape(bytesToBase64(hash))}.svg`;
}

refresh_comments();

API.fingerprint_hash().then(hash => {
  profile_image_uri = hash_to_image_uri(hash);
});

let last_streamer_id;

	if ($$props.streamer_id === void 0 && $$bindings.streamer_id && streamer_id !== void 0) $$bindings.streamer_id(streamer_id);

	if(last_streamer_id != streamer_id) {
      last_streamer_id = streamer_id;
      refresh_comments();
    }

	return `<div class="w-full h-full flex flex-col text-xs">
	  <div class="flex flex-row p-2 items-stretch">
	    
	    <div class="w-4">
	      ${ profile_image_uri ? `<img class="w-full h-full"${add_attribute("src", profile_image_uri, 0)}>` : `<div class="w-full h-full spinner"></div>` }
	    </div>
	    
	    <textarea class="flex-1 p-1 ml-4 border" rows="2">${ ""}</textarea>
	    <button class="border text-center p-2 text-white bg-primary-600"> 등록 </button>
	  </div>
	  <div class="flex-1">
	    ${ comments ? `${comments.length ? each(comments, (comment, i) => `<div class="${[`border-b flex flex-row p-2 items-stretch`, !comment.agreed && comment.upvote - comment.downvote <= -5 ? "opacity-50" : ""].join(' ').trim() }">
	          <div class="${[`text-gray-600 m-auto w-4 text-right`, Math.abs(comment.upvote - comment.downvote) >= 10 ? "text-xs" : "", Math.abs(comment.upvote - comment.downvote) < 10 ? "text-lg" : ""].join(' ').trim() }"> ${escape$1(comment.upvote - comment.downvote)} </div>
	          <div class="flex flex-col justify-center mr-2 ml-1 text-gray-600">
	            <button>${validate_component(FaIcon, 'FaIcon').$$render($$result, { class: "w-4 h-4", icon: faArrowUp_2 }, {}, {})}</button>
	            <button>${validate_component(FaIcon, 'FaIcon').$$render($$result, { class: "w-4 h-4", icon: faArrowDown_2 }, {}, {})}</button>
	          </div>
	          <div class="w-4"> 
	            <img class="w-full h-full"${add_attribute("src", hash_to_image_uri(comment.fingerprint_hash), 0)}> 
	          </div>
	          ${ comment.agreed || comment.upvote - comment.downvote > -5 ? `<div class="ml-4 flex-1 flex flex-row items-center"> ${escape$1(comment.contents)} </div>` : `<button class="flex-1 text-left pl-4">
	              ~ 펼치기 ~
	            </button>` }
	          
	        </div>`) : `<div class="w-full h-full flex justify-center items-center text-xl text-gray-600 pb-2 pt-2">
	          <div>
	            댓글이 없어요 ㅜㅜ
	          </div>
	        </div>`}
	      ${ load_more_loading ? `<div class="w-full border-t p-2 spinner"></div>` : `<button class="w-full border-t py-3 text-normal">더 보기</button>` }` : `<div class="w-full h-full spinner text-4xl"></div>` }
	  </div>
	</div>`;
});

/* src/components/KeywordCloud.svelte generated by Svelte v3.12.1 */

const KeywordCloud = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	
let { streamer_id } = $$props;
let canvas;
let WordCloud;
let width;
let height;

let last_streamer_id = null;
onMount(async ()=>{
  width = canvas.getBoundingClientRect().width,
  height = canvas.getBoundingClientRect().height;
  canvas.width = width;
  canvas.height = width;
  let { WordCloud:w } = await new Promise(function (resolve) { resolve(require('./wordcloud2-a84daf79.js')); });
  WordCloud = w;
});

	if ($$props.streamer_id === void 0 && $$bindings.streamer_id && streamer_id !== void 0) $$bindings.streamer_id(streamer_id);

	if(WordCloud && last_streamer_id != streamer_id) {
      last_streamer_id = streamer_id;
      API.keywords(streamer_id).then(keywords => {
        keywords = keywords.filter(x => x[0] != "ㅋㅋ" && x[0] != "ㄷㄷ");
        let max_fraction = Math.max(...keywords.map(x => x[1])),
            min_fraction = Math.min(...keywords.map(x => x[1]));
        //keywords = keywords.map(x => [x[0], (x[1] - min_fraction)/(max_fraction-min_fraction)*120 + 9]);
        keywords = keywords.map(x => [x[0], (x[1] - min_fraction)/(max_fraction-min_fraction)*9.2 + 0.8]);
        let area = keywords.reduce((res,b) => res + b[0].length*b[1], 0);
        WordCloud(canvas, {
          list: keywords,
          gridSize: Math.round(16 * width / 1024),
          weightFactor: width / 1024 * 32 * 380/area,
          fontFamily: '-apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Helvetica Neue, Arial, Noto Sans, sans-serif, Apple Color Emoji, Segoe UI Emoji, Segoe UI Symbol, Noto Color Emoji',
          fontWeight: "bold",
          color: 'random-dark',
          backgroundColor: 'transparent',
          rotateRatio: 0,
          rotationSteps: 1
          ,  ellipticity: 1,
          /*shape: function(theta) {
            var max = 195;
            var leng = [134,135,135,135,135,135,135,135,135,135,135,135,135,136,136,136,136,136,137,137,137,138,138,138,138,139,139,140,140,140,141,141,142,142,143,143,144,144,145,145,146,147,147,148,149,149,150,151,152,153,153,154,155,156,157,158,159,160,161,162,163,164,165,167,168,169,170,172,173,175,176,178,179,181,182,184,186,188,189,191,193,195,195,193,192,190,188,187,185,184,182,181,179,178,177,175,174,173,172,171,169,168,167,166,165,164,163,163,162,161,160,159,158,158,157,156,155,155,154,154,153,152,152,151,151,150,150,149,149,148,148,148,147,147,146,146,146,145,145,145,145,144,144,144,144,144,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,144,144,144,144,144,145,145,145,145,146,146,146,147,147,147,148,148,149,149,150,150,151,151,152,152,153,153,154,155,155,156,157,157,158,159,160,161,162,162,163,164,165,166,167,168,169,170,172,173,174,175,176,178,179,180,182,183,185,186,188,190,191,193,195,193,191,189,187,185,183,182,180,178,177,175,174,172,171,169,168,167,166,164,163,162,161,160,159,158,157,156,155,154,153,152,151,150,150,149,148,147,147,146,145,145,144,143,143,142,142,141,141,140,140,139,139,138,138,138,137,137,136,136,136,136,135,135,135,134,134,134,134,134,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,134,134,134,134,134,135,135,135,135,136,136,136,137,137,137,138,138,139,139,140,140,140,141,142,142,143,143,144,144,145,146,146,147,148,149,149,150,151,152,153,154,154,155,156,157,158,159,160,160,158,156,154,152,150,148,146,144,143,141,139,138,136,135,133,132,131,129,128,127,126,124,123,122,121,120,119,118,117,116,115,114,114,113,112,111,110,111,109,108,108,110,112,114,116,118,120,122,125,127,130,133,136,139,142,145,149,149,147,144,140,136,135,131,129,126,125,121,120,118,115,114,113,110,108,107,105,103,102,101,100,97,96,95,94,93,92,92,92,92,92,92,93,92,92,92,92,92,92,92,92,92,92,92,92,92,93,92,92,92,93,93,93,93,93,93,94,94,94,94,94,95,95,95,95,96,96,96,97,97,97,98,98,98,99,99,100,101,101,101,102,102,103,103,104,104,105,105,106,107,107,108,109,109,110,111,112,112,113,114,115,116,117,118,119,120,121,121,121,121,122,122,122,122,121,121,121,121,122,122,122,122,122,122,122,122,123,123,123,123,123,123,123,124,124,124,125,125,125,125,126,126,126,127,127,128,128,129,129,130,130,131,131,132,132,133,133,134,134,135,136,136,137,138,139,140,139,139,139,138,138,138,137,137,137,137,136,136,136,136,136,135,135,135,135,135,135,135,135,135,135,135,136];
    
            return leng[(theta / (2 * Math.PI)) * leng.length | 0] / max;
          }*/
        });
    
      });
    }

	return `<canvas class="w-full"${add_attribute("this", canvas, 1)}>
	</canvas>`;
});

/* src/components/SubscriberDistribution.svelte generated by Svelte v3.12.1 */

const SubscriberDistribution = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	
let { streamer_id } = $$props;
let container;

let last_streamer_id = null;
let distribution = [];
let max_ratio = 0;

onMount(()=>{
  let width = container.getBoundingClientRect().width,
    height = container.getBoundingClientRect().height;
  //container.style.minHeight = width + "px";
});

	if ($$props.streamer_id === void 0 && $$bindings.streamer_id && streamer_id !== void 0) $$bindings.streamer_id(streamer_id);

	if(last_streamer_id != streamer_id) {
      last_streamer_id = streamer_id;
      API.average_subscriber_distribution(streamer_id).then(_distribution => {
        let sum = _distribution.reduce((a,b) => a + b[1], 0);
        _distribution = _distribution.map(x => [x[0], x[1]/sum]);
        max_ratio = Math.max(..._distribution.map(x => x[1]));
        distribution = _distribution.reverse();
      });
    }

	return `<div class="w-full text-xs p-2 overflow-hidden flex flex-col items-start justify-end whitespace-no-wrap"${add_attribute("this", container, 1)}>
	  ${each(distribution, (d) => `<div class="flex flex-row w-full items-center">
	      <div class="w-16 text-center pr-2">${escape$1(d[0] >= 0? d[0] + "개월" : "비구독")}</div>
	      <div class="bg-primary-600 flex items-center h-full text-gray-600 pt-px" style="width: ${escape$1(d[1]/max_ratio*50)}%; min-width: 1px"> 
	        <span class="pl-2" style="margin-left: 100%;">
	        ${escape$1((d[1]*100).toFixed(1))}%
	        </span>
	      </div>
	    </div>`)}
	    <div class="flex flex-row pt-2 w-full font-bold">
	      <div class="w-16 text-center pr-2">구독월수</div>
	      <div class="flex-1 text-center">비율</div>
	    </div>
	</div>`;
});

/* src/components/StreamCalendarHeatmap.svelte generated by Svelte v3.12.1 */

const r = 205;

const g = 168;

const b = 199;

const StreamCalendarHeatmap = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	
let { streamer, month_offset = 0, is_head = true } = $$props;
let now = new Date(); 

let calendar_values = new Array(new Date(now.getFullYear(), now.getMonth()+month_offset+1, 0).getDate()).fill(0);
let last_streamer;
	if ($$props.streamer === void 0 && $$bindings.streamer && streamer !== void 0) $$bindings.streamer(streamer);
	if ($$props.month_offset === void 0 && $$bindings.month_offset && month_offset !== void 0) $$bindings.month_offset(month_offset);
	if ($$props.is_head === void 0 && $$bindings.is_head && is_head !== void 0) $$bindings.is_head(is_head);

	let to = new Date(now.getFullYear(), now.getMonth()+1 + month_offset, 1);
	let from = new Date(now.getFullYear(), now.getMonth() + month_offset, 1);
	let month = from.getMonth()+1;
	let start_day = from.getDay();
	if(last_streamer != streamer) {
      last_streamer = streamer;
      API.stream_ranges(streamer.id, from, to).then(stream_ranges => {
        stream_ranges = stream_ranges.filter(r => r[0] >= from.getTime()/1000 && r[0] < to.getTime()/1000);
        if(!stream_ranges)
          return null;
        let values = new Array(new Date(now.getFullYear(), now.getMonth()+month_offset+1, 0).getDate()).fill(0);
        for(let r of stream_ranges) {
          let date = new Date(r[0]*1000);
          values[date.getDate()-1] += (r[1] - r[0])/3600;
        }
        calendar_values = values;
      });
    }
	let max_val = Math.max(...calendar_values);

	return `<div class="${[`${escape$1($$props.class)} relative flex flex-row items-center`, is_head ? "pt-4" : ""].join(' ').trim() }">
	  <div class="text-center text-md w-16">
	    ${escape$1(month)}월
	  </div>
	  <div class="relative pr-2 flex-1">
	    <svg class="overflow-visible" viewBox="0,${escape$1(is_head? 0:1)},7,${escape$1(Math.floor((calendar_values.length + start_day)/7) + 1 + is_head - !is_head)}">
	      <g>
	        ${ is_head ? `${each(["일", "월", "화", "수", "목", "금", "토"], (day, i) => `<text${add_attribute("x", i+0.5, 0)} y="0.5" text-anchor="middle" alignment-baseline="middle"${add_attribute("day", day, 0)} style="fill: ${escape$1(i==0 || i==6? '#FF4560': '#444444')}; font-size: 0.5px">
	           ${escape$1(day)}
	          </text>`)}` : `` }
	        ${each(calendar_values, (v, i) => `<rect${add_attribute("x", (i+start_day)%7, 0)}${add_attribute("y", Math.floor((i+start_day)/7 + is_head), 0)}${add_attribute("width", 1, 0)}${add_attribute("height", 1, 0)} stroke="#444444" stroke-width="0.01" fill="rgb(${escape$1(r)}, ${escape$1(g)}, ${escape$1(b)}, ${escape$1(v? Math.min(v/(max_val*0.5), 1): 0)})"></rect>
	        <text${add_attribute("x", (i+start_day)%7 + 0.5, 0)}${add_attribute("y", Math.floor((i+start_day)/7 + is_head) + 0.5, 0)} text-anchor="middle" alignment-baseline="middle" style="opacity: 0.25; fill: ${escape$1((i+start_day)%7==0 || (i+start_day)%7==6? '#FF4560': '#444444')}; font-size: 0.5px; font-weight: bold; pointer-events:none;">
	          ${escape$1(i+1)}
	        </text>`)}
	        ${ !is_head ? `${each([0,1,2,3,4,5,6], (i) => `<line${add_attribute("x1", (i + start_day)%7, 0)}${add_attribute("y1", Math.floor((i+start_day)/7 + is_head), 0)}${add_attribute("x2", (i + start_day)%7+1, 0)}${add_attribute("y2", Math.floor((i+start_day)/7 + is_head), 0)} stroke-width="0.05" stroke="#222222"></line>`)}
	          ${ start_day ? `<line${add_attribute("x1", start_day%7, 0)}${add_attribute("y1", Math.floor((start_day)/7 + is_head), 0)}${add_attribute("x2", start_day%7, 0)}${add_attribute("y2", Math.floor((start_day)/7 + is_head + 1), 0)} stroke-width="0.05" stroke="#222222"></line>` : `` }` : `` }
	      </g>
	    </svg>
	    ${  `` }
	  </div>
	</div>`;
});

/* src/routes/streamer/[id].svelte generated by Svelte v3.12.1 */

async function preload$1(page, session) {
  const { id } = page.params;
  let streamer = await API.streamer.call(this, id);
  let similar_streamers = await API.similar_streamers.call(this, id);
  let similar_streamers_top10 = similar_streamers.slice(0, 10);
  return { streamer, similar_streamers, similar_streamers_top10 };
}

const Id = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	

  let { streamer, similar_streamers, similar_streamers_top10, mean_streaming_time_ranges = [], mean_streaming_time_reliability = 0.0, streaming_time_ranges_variance = 0.0, total_streaming_time_ratio = 0.0, streaming_start_time = 0.0, streaming_start_time_std = 0.0, streaming_end_time = 0.0, streaming_end_time_std = 0.0 } = $$props;

  let timelines = [];
  let last_streamer = streamer;

  function load_timeline() {
    if(timelines.length){
      for(let i=0; i<7; ++i)
        timelines.push(timelines[timelines.length-1]+1);
      timelines = timelines;
    }
    else
      timelines = [0,1,2,3,4,5,6];
  }
  load_timeline();


  let month_offsets = [-1, 0];

	if ($$props.streamer === void 0 && $$bindings.streamer && streamer !== void 0) $$bindings.streamer(streamer);
	if ($$props.similar_streamers === void 0 && $$bindings.similar_streamers && similar_streamers !== void 0) $$bindings.similar_streamers(similar_streamers);
	if ($$props.similar_streamers_top10 === void 0 && $$bindings.similar_streamers_top10 && similar_streamers_top10 !== void 0) $$bindings.similar_streamers_top10(similar_streamers_top10);
	if ($$props.mean_streaming_time_ranges === void 0 && $$bindings.mean_streaming_time_ranges && mean_streaming_time_ranges !== void 0) $$bindings.mean_streaming_time_ranges(mean_streaming_time_ranges);
	if ($$props.mean_streaming_time_reliability === void 0 && $$bindings.mean_streaming_time_reliability && mean_streaming_time_reliability !== void 0) $$bindings.mean_streaming_time_reliability(mean_streaming_time_reliability);
	if ($$props.streaming_time_ranges_variance === void 0 && $$bindings.streaming_time_ranges_variance && streaming_time_ranges_variance !== void 0) $$bindings.streaming_time_ranges_variance(streaming_time_ranges_variance);
	if ($$props.total_streaming_time_ratio === void 0 && $$bindings.total_streaming_time_ratio && total_streaming_time_ratio !== void 0) $$bindings.total_streaming_time_ratio(total_streaming_time_ratio);
	if ($$props.streaming_start_time === void 0 && $$bindings.streaming_start_time && streaming_start_time !== void 0) $$bindings.streaming_start_time(streaming_start_time);
	if ($$props.streaming_start_time_std === void 0 && $$bindings.streaming_start_time_std && streaming_start_time_std !== void 0) $$bindings.streaming_start_time_std(streaming_start_time_std);
	if ($$props.streaming_end_time === void 0 && $$bindings.streaming_end_time && streaming_end_time !== void 0) $$bindings.streaming_end_time(streaming_end_time);
	if ($$props.streaming_end_time_std === void 0 && $$bindings.streaming_end_time_std && streaming_end_time_std !== void 0) $$bindings.streaming_end_time_std(streaming_end_time_std);

	let $$settled;
	let $$rendered;

	do {
		$$settled = true;

		{
        if(last_streamer != streamer){
          timelines  = [];
          last_streamer = streamer;
          load_timeline();
        }
      }

		$$rendered = `${($$result.head += `<title> 트수gg - ${escape$1(streamer.name)} </title>`, "")}




		<div class="w-full md:h-48 h-40 bg-primary-600">
		</div>


		<div class="container m-auto flex flex-col md:items-start items-center px-4">
		  <img class="rounded-lg w-64 h-64 md:w-auto md:self-start self-center md:h-auto md:-mt-40 -mt-32 z-5 border-4 border-gray-200 bg-gray-200"${add_attribute("src", streamer.profile_image_url, 0)} alt="프로필 이미지">
		  <div class="mt-8">
		    <h1 class="text-4xl tracking-wider inline">${escape$1(streamer.name)}</h1>
		    ${validate_component(Badges, 'Badges').$$render($$result, { streamer: streamer, class: "ml-2" }, {}, { default: () => ` ` })}
		    ${validate_component(GameBadges, 'GameBadges').$$render($$result, {
			streamer: streamer,
			class: "flex flex-row pt-2 flex-wrap"
		}, {}, { default: () => ` ` })}
		  </div>
		  <div class="mt-12">
		    ${escape$1(streamer.description)}
		  </div>
		  <div class="mt-8 flex flex-row">
		    <a class="text-xs text-blue-500 flex flex-row items-center" href="https://www.twitch.tv/${escape$1(streamer.login)}">
		      <svg area-hidden="true" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 ${escape$1(faExternalLinkAlt_2.icon[0])} ${escape$1(faExternalLinkAlt_2.icon[1])}" class="w-3 h-3 mr-1 overflow-visible inline-block">
		        <path fill="currentColor"${add_attribute("d", faExternalLinkAlt_2.icon[4], 0)}></path>
		      </svg>
		      <span>트위치 채널</span>
		    </a>
		    <a class="text-xs text-blue-500 flex flex-row items-center ml-4" href="/map?interest_streamer_id=${escape$1(streamer.id)}">
		      <svg area-hidden="true" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 ${escape$1(faExternalLinkAlt_2.icon[0])} ${escape$1(faExternalLinkAlt_2.icon[1])}" class="w-3 h-3 mr-1 overflow-visible inline-block">
		        <path fill="currentColor"${add_attribute("d", faExternalLinkAlt_2.icon[4], 0)}></path>
		      </svg>
		      <span>지도에서 찾기</span>
		    </a>
		  </div>
		  <table class="mt-6 text-xs">
		    <tr>
		        <td class="w-1 bg-orange-400"> </td>
		        <td class="text-left p-1">평청자</td>
		        <td class="pl-6 text-orange-400">
		          <span class="font-bold text-base">${escape$1(streamer.average_viewer_count.toLocaleString('ko', {useGrouping:true}))}</span>
		          명
		        </td>
		    </tr>
		    <tr>
		        <td class="w-1 bg-purple-400"> </td>
		        <td class="text-left p-1">팔로워</td>
		        <td class="pl-6 text-purple-400">
		          <span class="font-bold text-base">${escape$1(streamer.follower_count.toLocaleString('ko', {useGrouping:true}))}</span>
		          명
		        </td>
		    </tr>
		    <tr>
		        <td class="w-1 bg-blue-400"> </td>
		        <td class="text-left p-1">방송량</td>
		        <td class="pl-6 text-blue-400">
		          주 
		          <span class="font-bold text-base">${escape$1((streamer.streaming_hours_per_week || 0).toFixed(1))}</span> 시간</td>
		    </tr>
		    <tr>
		        <td class="w-1 bg-green-400"> </td>
		        <td class="text-left p-1">방송시간대</td>
		        <td class="pl-6 text-green-400">
		          <span class="pr-2">
		            <span class="font-bold text-base">${escape$1(Math.floor(streaming_start_time/3600))}</span>시 
		            <span class="font-bold text-base">${escape$1(Math.floor(streaming_start_time%3600/60))}</span>분 
		            <span class="text-gray-600"> (±${escape$1((streaming_start_time_std/3600).toFixed(1))}시간) </span> 
		            ~
		            <span class="font-bold text-base">${escape$1(Math.floor(streaming_end_time/3600))}</span>시 
		            <span class="font-bold text-base">${escape$1(Math.floor(streaming_end_time%3600/60))}</span>분
		            <span class="text-gray-600"> (±${escape$1((streaming_end_time_std/3600).toFixed(1))}시간) </span> 
		          </span>
		        </td>
		    </tr>
		    <tr>
		        <td class="w-1 bg-teal-400"> </td>
		        <td class="text-left p-1">주방송시간</td>
		        <td class="pl-6 text-teal-400">
		          ${each(mean_streaming_time_ranges, (range) => `<span class="pr-2">
		              <span class="font-bold text-base">${escape$1(Math.floor(range[0]/3600))}</span>시 
		              <span class="font-bold text-base">${escape$1(Math.floor(range[0]%3600/60))}</span>분 ~ 
		              <span class="font-bold text-base">${escape$1(Math.floor(range[1]/3600))}</span>시 
		              <span class="font-bold text-base">${escape$1(Math.floor(range[1]%3600/60))}</span>분
		            </span>`)}
		          <span class="text-gray-600"> 
		            (${escape$1((mean_streaming_time_reliability * 100).toFixed(0))}% 확률)
		          </span> 
		        </td>
		    </tr>
		    
		  </table>
		</div>

		<div class="flex flex-col items-center m-auto container">
		  <div class="flex md:flex-row flex-col w-full items-stretch flex-wrap mt-8">
		    <div class="flex flex-col md:w-1/2 w-full md:pr-2">
		      ${validate_component(Panel, 'Panel').$$render($$result, { class: "w-full" }, {}, {
			default: () => `
		        `,
			title: () => `<h2 slot="title" class="inline-block md:font-base font-2xl"> 시청자 유사도</h2>
		        `,
			contents: () => `<div slot="contents" class="">
		          ${validate_component(Network, 'Network').$$render($$result, {
			streamer: streamer,
			nodes: [...similar_streamers_top10, streamer],
			edges: similar_streamers_top10.map(s => ({from: streamer.id, to: s.id, length: Math.max(0.1, 1-(s.similarity*s.similarity*10)), strength: s.similarity*s.similarity*100})),
			class: "w-full p-6",
			onrendered: ()=>{}
		}, {}, {
			default: ({ node: node }) => `
		            <a class="flex flex-col w-10 md:w-16 flex-wrap items-center" href="/streamer/${escape$1(node.id)}">
		              <img class="w-10 h-10 md:w-16 md:h-16 rounded-full bg-white border border-gray-600"${add_attribute("src", node.profile_image_url, 0)} art="프로필 사진">
		              <div class="flex flex-col flex-wrap items-center"> 
		                <span class="md:text-sm text-xs"> ${escape$1(node.name)} </span>
		                ${ node.similarity ? `<span class="text-xs text-gray-600 tracking-wider"> (${escape$1((node.similarity*100).toFixed(1))}%) </span>` : `` }
		              </div>
		            </a>
		          `
		})}
		          <div class="flex flex-row flex-wrap w-full">
		          ${each(similar_streamers.slice(10), (node) => `<a class="flex flex-col w-1/5 flex-wrap items-center my-2" href="/streamer/${escape$1(node.id)}">
		              <img class="w-10 h-10 md:w-16 md:h-16 rounded-full bg-white border border-gray-600"${add_attribute("src", node.profile_image_url, 0)} art="프로필 사진">
		              <div class="flex flex-col flex-wrap items-center"> 
		                <span class="md:text-sm text-xs"> ${escape$1(node.name)} </span>
		                ${ node.similarity ? `<span class="text-xs text-gray-600 tracking-wider"> (${escape$1((node.similarity*100).toFixed(1))}%) </span>` : `` }
		              </div>
		            </a>`)}
		          </div>
		          <button class="w-full py-3 border-t">
		            더 보기
		          </button>
		        </div>
		      `
		})}
		      <div class="flex md:flex-row flex-col">
		        <div class="flex flex-col w-full md:w-1/2">
		          ${validate_component(Panel, 'Panel').$$render($$result, { class: "w-full" }, {}, {
			default: () => `
		            `,
			title: () => `<h2 slot="title" class="inline-block md:font-base font-2xl"> 방송 달력</h2>
		            `,
			contents: () => `<div slot="contents" class="h-full">
		              ${each(month_offsets, (month_offset, i) => `<div class="pr-4">
		                ${validate_component(StreamCalendarHeatmap, 'StreamCalendarHeatmap').$$render($$result, {
			class: "w-full h-full",
			month_offset: month_offset,
			is_head: i==0,
			streamer: streamer
		}, {}, {})}
		              </div>`)}
		              <button class="w-full py-3 border-t mt-2"> 더 보기 </button>
		            </div>
		          `
		})}
		          ${validate_component(Panel, 'Panel').$$render($$result, { class: "w-full" }, {}, {
			default: () => `
		            `,
			title: () => `<h2 slot="title" class="inline-block md:font-base font-2xl"> 방송 주기 </h2>
		            `,
			contents: () => `<div slot="contents" class="h-full">
		              ${validate_component(StreamSpiral, 'StreamSpiral').$$render($$result, {
			class: "w-full h-full -mt-4",
			streamer: streamer,
			mean_streaming_time_ranges: mean_streaming_time_ranges,
			mean_streaming_time_reliability: mean_streaming_time_reliability,
			streaming_time_ranges_variance: streaming_time_ranges_variance,
			total_streaming_time_ratio: total_streaming_time_ratio,
			streaming_start_time: streaming_start_time,
			streaming_start_time_std: streaming_start_time_std,
			streaming_end_time: streaming_end_time,
			streaming_end_time_std: streaming_end_time_std
		}, {
			mean_streaming_time_ranges: $$value => { mean_streaming_time_ranges = $$value; $$settled = false; },
			mean_streaming_time_reliability: $$value => { mean_streaming_time_reliability = $$value; $$settled = false; },
			streaming_time_ranges_variance: $$value => { streaming_time_ranges_variance = $$value; $$settled = false; },
			total_streaming_time_ratio: $$value => { total_streaming_time_ratio = $$value; $$settled = false; },
			streaming_start_time: $$value => { streaming_start_time = $$value; $$settled = false; },
			streaming_start_time_std: $$value => { streaming_start_time_std = $$value; $$settled = false; },
			streaming_end_time: $$value => { streaming_end_time = $$value; $$settled = false; },
			streaming_end_time_std: $$value => { streaming_end_time_std = $$value; $$settled = false; }
		}, {})}
		            </div>
		          `
		})}
		        </div>
		        <div class="flex flex-col w-full md:w-1/2">
		          ${validate_component(Panel, 'Panel').$$render($$result, { class: "w-full" }, {}, {
			default: () => `
		            `,
			title: () => `<h2 slot="title" class="inline-block"> 구독자 비율 </h2>
		            `,
			contents: () => `<div slot="contents" class="w-full p-2 h-full">
		              ${validate_component(SubscriberDistribution, 'SubscriberDistribution').$$render($$result, { streamer_id: streamer.id }, {}, {})}
		            </div>
		          `
		})}
		          ${validate_component(Panel, 'Panel').$$render($$result, { class: "w-full" }, {}, {
			default: () => `
		            `,
			title: () => `<h2 slot="title" class="inline-block"> 구독자 채팅 비율 </h2>
		            `,
			contents: () => `<div slot="contents" class="md:w-full w-48 p-4 h-full m-auto">
		              <div class="rounded-full inline-block w-full" style="background: radial-gradient(white 60%, transparent 61%), conic-gradient(#CDA8C7 0% ${escape$1(streamer.average_subscriber_chat_ratio*100)}%, #e2e8f0 ${escape$1(streamer.average_subscriber_chat_ratio*100)}% 100%); padding-bottom: 100%;">
		                <div class="absolute text-3xl font-bold text-primary-600" style="left: 50%; top: 50%; transform: translate(-50%, -50%);"> 
		                  ${escape$1((streamer.average_subscriber_chat_ratio*100).toFixed(0))}%
		                </div>
		              </div>
		            </div>
		          `
		})}
		        </div>
		      </div>
		    </div>
		    <div class="flex flex-col w-full md:w-1/2 md:pl-2">
		      ${validate_component(Panel, 'Panel').$$render($$result, { class: "w-full" }, {}, {
			default: () => `
		        `,
			title: () => `<h2 slot="title" class="inline-block"> 최근 방송 채팅 키워드 </h2>
		        `,
			contents: () => `<div slot="contents" class="w-full p-2 h-full">
		          ${validate_component(KeywordCloud, 'KeywordCloud').$$render($$result, { streamer_id: streamer.id }, {}, {})}
		        </div>
		      `
		})}
		      ${validate_component(Panel, 'Panel').$$render($$result, { class: "w-full" }, {}, {
			default: () => `
		        `,
			title: () => `<h2 slot="title" class="inline-block"> 댓글 </h2>
		        `,
			contents: () => `<div slot="contents" class="w-full p-2">
		          ${validate_component(Comments, 'Comments').$$render($$result, { streamer_id: streamer.id }, {}, {})}
		        </div>
		      `
		})}
		    </div>
		  </div>

		  ${validate_component(Panel, 'Panel').$$render($$result, { class: "w-full" }, {}, {
			default: () => `
		    `,
			title: () => `<h2 slot="title" class="inline-block md:font-base font-2xl"> 방송 타임라인 </h2>
		    `,
			contents: () => `<div slot="contents" class="w-full">
		      ${timelines.length ? each(timelines, (days_ago) => `${validate_component(Timeline2, 'Timeline2').$$render($$result, {
			streamer: streamer,
			days_ago: days_ago,
			header: days_ago===0
		}, {}, {})}`) : `<div class="w-full h-64 spinner"></div>`}
		      <button class="w-full border-t p-2">더 보기</button>
		    </div>
		  `
		})}
		</div>`;
	} while (!$$settled);

	return $$rendered;
});

/* src/routes/terms.svelte generated by Svelte v3.12.1 */

const Terms = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	return `<div class="container m-auto p-2 pb-16">
	  <h1 class="md:text-3xl text-2xl mt-16">
	    개인정보 처리방침
	  </h1>
	  <p class="mt-4">
	  'TSU.GG'은(는) 개인정보보호법에 따라 이용자의 개인정보 보호 및 권익을 보호하고 개인정보와 관련한 이용자의 고충을 원활하게 처리할 수 있도록 다음과 같은 처리방침을 두고 있습니다. <br>
	    'TSU.GG'은(는) 개인정보처리방침을 개정하는 경우 웹사이트 공지사항(또는 개별공지)을 통하여 공지할 것입니다.<br>
	    본 방침은 [2020년 2월 11일]부터 시행됩니다.
	  </p>
	    <h2 class="text-xl mt-8">
	      개인정보 자동 수집 장치의 설치•운영 및 거부
	    </h2>
	    <p class="mt-4">
	    이용자 개개인에게 개인화되고 맞춤화된 서비스를 제공하기 위해서 회사는 이용자의 정보를 저장하고 수시로 불러오는 '쿠키(cookie)'를 사용합니다.<br>
	    쿠키는 웹사이트를 운영하는데 이용되는 서버가 사용자의 브라우저에게 보내는 조그마한 데이터 꾸러미로 이용자 컴퓨터의 하드디스크에 저장됩니다.
	    </p>
	    <ul class="list-decimal pl-4 mt-4">
	      <li>쿠키의 사용 목적<br>
	        회원과 비회원의 접속 빈도나 방문 시간 등의 분석, 이용자의 취향과 관심분야의 파악 및 자취 추적, 각종 이벤트 참여 정도 및 방문 회수 파악 등을 통한 타겟 마케팅 및 개인 맞춤 서비스 제공
	      </li>
	      <li>쿠키 설정 거부 방법<br>
	        이용자는 쿠키 설치에 대한 선택권을 가지고 있습니다. 따라서, 이용자는 웹브라우저에서 옵션을 설정함으로써 모든 쿠키를 허용하거나, 쿠키가 저장될 때마다 확인을 거치거나, 아니면 모든 쿠키의 저장을 거부할 수도 있습니다.
	      </li>
	      <li> 설정방법 예 (인터넷 익스플로러의 경우) <br>
	        웹 브라우저 상단의 도구 &gt; 인터넷 옵션 &gt; 개인정보 (단, 쿠키 설치를 거부하였을 경우 로그인이 필요한 일부 서비스의 이용이 어려울 수 있습니다.)
	      </li>
	      <li>  구글 애널리틱스를 이용한 웹로그 분석및 구글 에드센스를 이용한 광고 <br>
	        'TSU.GG'는 구글(Google)에서 제공하는 웹 분석 도구인 구글 애널리틱스와 광고 프로그램인 구글 에드센스를 이용하고 있으며, 이에 따라 구글 측에서 이용자 개인을 식별할 수 없도록 비식별화 처리된 정보를 수집합니다. <br> 
	        이용자는 구글 애널리틱스, 구글 에드센스 Opt-out Browser Add-on 을 이용하거나, 쿠키 설정 거부를 통해 비식별 개인정보 수집을 거부할 수 있습니다
	      </li>
	</ul></div>`;
});

/* src/components/Modal.svelte generated by Svelte v3.12.1 */

const css$e = {
	code: ".modal.svelte-9zy1a5{position:fixed;z-index:5000;top:0;height:100vh;width:100vw;justify-content:center;align-items:center;display:flex;opacity:0;background-color:#000000dd;visibility:hidden;transition:visibility 0s, opacity 0.25s ease-out}.modal.show{visibility:visible;opacity:1.0}.container.svelte-9zy1a5{width:max-content;max-width:100vw}",
	map: "{\"version\":3,\"file\":\"Modal.svelte\",\"sources\":[\"Modal.svelte\"],\"sourcesContent\":[\"<div class=\\\"modal\\\" bind:this={el} on:keydown={onkeydown} on:mousedown={onmousedown} on:touchstart={ontouchstart}>\\n  <div class=\\\"relative container\\\" bind:this={inner_el}>\\n    <button class=\\\"absolute right-0 top-0 bg-black text-white opacity-75 w-6\\\" on:click={onclick}>X</button>\\n    <slot></slot>\\n  </div>\\n</div>\\n\\n<style>\\n  .modal {\\n    position: fixed;\\n    z-index: 5000;\\n    top: 0;\\n    height: 100vh;\\n    width: 100vw;\\n    justify-content: center;\\n    align-items: center;\\n    display: flex;\\n    opacity: 0;\\n    background-color: #000000dd;\\n    visibility: hidden;\\n    transition: visibility 0s, opacity 0.25s ease-out;\\n  }\\n  :global(.modal.show) {\\n    visibility: visible;\\n    opacity: 1.0;\\n  }\\n  .container {\\n    width: max-content;\\n    max-width: 100vw;\\n  }\\n</style>\\n\\n<script context=\\\"module\\\">\\n  let elements = {},\\n      next_id = 0;\\n  export function show(id) {\\n    elements[id].classList.add(\\\"show\\\");\\n  }\\n  export function hide(id) {\\n    elements[id].classList.remove(\\\"show\\\");\\n  }\\n</script>\\n\\n<script>\\n\\timport { onMount, onDestroy } from 'svelte';\\n  let id = next_id++;\\n  let el, inner_el;\\n  function ontouchstart(e){\\n    e.pageX = e.touches[0].pageX;\\n    e.pageY = e.touches[0].pageY;\\n    return onmousedown(e);\\n  }\\n  function onmousedown(e){\\n    let x = e.pageX,\\n      y = e.pageY,\\n      r = inner_el.getBoundingClientRect();\\n    console.log(x, r.x, r.width)\\n    if(x < r.x || x > r.x + r.width || y < r.y || y > r.y+r.height)\\n      hide(id);\\n  }\\n  function onclick(e){\\n    hide(id);\\n  }\\n  function onkeydown(e){\\n    if(e.keyCode == 27){\\n      hide(id);\\n    }\\n  }\\n  onMount(async ()=>{\\n    elements[id] = el;\\n  });\\n  onDestroy(()=>{\\n    elements[id] = undefined;\\n  });\\n</script>\\n\"],\"names\":[],\"mappings\":\"AAQE,MAAM,cAAC,CAAC,AACN,QAAQ,CAAE,KAAK,CACf,OAAO,CAAE,IAAI,CACb,GAAG,CAAE,CAAC,CACN,MAAM,CAAE,KAAK,CACb,KAAK,CAAE,KAAK,CACZ,eAAe,CAAE,MAAM,CACvB,WAAW,CAAE,MAAM,CACnB,OAAO,CAAE,IAAI,CACb,OAAO,CAAE,CAAC,CACV,gBAAgB,CAAE,SAAS,CAC3B,UAAU,CAAE,MAAM,CAClB,UAAU,CAAE,UAAU,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,QAAQ,AACnD,CAAC,AACO,WAAW,AAAE,CAAC,AACpB,UAAU,CAAE,OAAO,CACnB,OAAO,CAAE,GAAG,AACd,CAAC,AACD,UAAU,cAAC,CAAC,AACV,KAAK,CAAE,WAAW,CAClB,SAAS,CAAE,KAAK,AAClB,CAAC\"}"
};

let elements = {},
    next_id$1 = 0;
function show(id) {
  elements[id].classList.add("show");
}

const Modal = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	let id = next_id$1++;
  let el, inner_el;
  onMount(async ()=>{
    elements[id] = el;
  });
  onDestroy(()=>{
    elements[id] = undefined;
  });

	$$result.css.add(css$e);

	return `<div class="modal svelte-9zy1a5"${add_attribute("this", el, 1)}>
	  <div class="relative container svelte-9zy1a5"${add_attribute("this", inner_el, 1)}>
	    <button class="absolute right-0 top-0 bg-black text-white opacity-75 w-6">X</button>
	    ${$$slots.default ? $$slots.default({}) : ``}
	  </div>
	</div>`;
});

var faMouse = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, '__esModule', { value: true });
var prefix = 'fas';
var iconName = 'mouse';
var width = 384;
var height = 512;
var ligatures = [];
var unicode = 'f8cc';
var svgPathData = 'M0 352a160 160 0 0 0 160 160h64a160 160 0 0 0 160-160V224H0zM176 0h-16A160 160 0 0 0 0 160v32h176zm48 0h-16v192h176v-32A160 160 0 0 0 224 0z';

exports.definition = {
  prefix: prefix,
  iconName: iconName,
  icon: [
    width,
    height,
    ligatures,
    unicode,
    svgPathData
  ]};

exports.faMouse = exports.definition;
exports.prefix = prefix;
exports.iconName = iconName;
exports.width = width;
exports.height = height;
exports.ligatures = ligatures;
exports.unicode = unicode;
exports.svgPathData = svgPathData;
});

unwrapExports(faMouse);
var faMouse_1 = faMouse.definition;
var faMouse_2 = faMouse.faMouse;
var faMouse_3 = faMouse.prefix;
var faMouse_4 = faMouse.iconName;
var faMouse_5 = faMouse.width;
var faMouse_6 = faMouse.height;
var faMouse_7 = faMouse.ligatures;
var faMouse_8 = faMouse.unicode;
var faMouse_9 = faMouse.svgPathData;

var faMobileAlt = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, '__esModule', { value: true });
var prefix = 'fas';
var iconName = 'mobile-alt';
var width = 320;
var height = 512;
var ligatures = [];
var unicode = 'f3cd';
var svgPathData = 'M272 0H48C21.5 0 0 21.5 0 48v416c0 26.5 21.5 48 48 48h224c26.5 0 48-21.5 48-48V48c0-26.5-21.5-48-48-48zM160 480c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32zm112-108c0 6.6-5.4 12-12 12H60c-6.6 0-12-5.4-12-12V60c0-6.6 5.4-12 12-12h200c6.6 0 12 5.4 12 12v312z';

exports.definition = {
  prefix: prefix,
  iconName: iconName,
  icon: [
    width,
    height,
    ligatures,
    unicode,
    svgPathData
  ]};

exports.faMobileAlt = exports.definition;
exports.prefix = prefix;
exports.iconName = iconName;
exports.width = width;
exports.height = height;
exports.ligatures = ligatures;
exports.unicode = unicode;
exports.svgPathData = svgPathData;
});

unwrapExports(faMobileAlt);
var faMobileAlt_1 = faMobileAlt.definition;
var faMobileAlt_2 = faMobileAlt.faMobileAlt;
var faMobileAlt_3 = faMobileAlt.prefix;
var faMobileAlt_4 = faMobileAlt.iconName;
var faMobileAlt_5 = faMobileAlt.width;
var faMobileAlt_6 = faMobileAlt.height;
var faMobileAlt_7 = faMobileAlt.ligatures;
var faMobileAlt_8 = faMobileAlt.unicode;
var faMobileAlt_9 = faMobileAlt.svgPathData;

/* src/routes/map/index.svelte generated by Svelte v3.12.1 */

const css$f = {
	code: ".canvas-container.svelte-jpbj{width:100%;height:calc(100vh - 2.85rem);overflow-y:hidden;background-color:#2D3343}.canvas.svelte-jpbj{}",
	map: "{\"version\":3,\"file\":\"index.svelte\",\"sources\":[\"index.svelte\"],\"sourcesContent\":[\"<svelte:head>\\n\\t<title>트수gg - 스트리머 지도</title>\\n</svelte:head>\\n\\n<Modal>\\n  <div class=\\\"p-6 flex flex-col bg-gray-200 text-gray-600\\\">\\n    <div class=\\\"pt-2\\\"> 조작법 </div>\\n    <div class=\\\"text-sm pl-2\\\">\\n      <div>\\n        <svg area-hidden=\\\"true\\\" role=\\\"img\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 {faMouse.icon[0]} {faMouse.icon[1]}\\\" class=\\\"w-3 h-3 mr-1 overflow-visible inline-block\\\">\\n          <path fill=\\\"currentColor\\\" d=\\\"{faMouse.icon[4]}\\\"/>\\n        </svg>\\n        휠/드래그/더블클릭\\n      </div>\\n      <div>\\n        <svg area-hidden=\\\"true\\\" role=\\\"img\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 {faMobileAlt.icon[0]} {faMobileAlt.icon[1]}\\\" class=\\\"w-3 h-3 mr-1 overflow-visible inline-block\\\">\\n          <path fill=\\\"currentColor\\\" d=\\\"{faMobileAlt.icon[4]}\\\"/>\\n        </svg>\\n        확대,드래그제스처/더블탭\\n      </div>\\n    </div>\\n    <div class=\\\"pt-2\\\"> 개요 </div>\\n    <div class=\\\"text-sm pl-2\\\">\\n      <div>\\n        - 타일 한 칸은 스트리머 한 명을 의미합니다.\\n      </div>\\n      <div>\\n        - 거리가 가까운 스트리머는 서로 비슷할 확률이 높습니다.\\n      </div>\\n      <div>\\n        - 유의미하게 비슷한 스트리머 집단은 국가로 구분지어 표시됩니다.\\n      </div>\\n      <div>\\n        - 국가의 이름은 국가 전체의 성격을 가장 잘 나타내는 스트리머의 이름으로 표시됩니다.\\n      </div>\\n      <div>\\n        - 국가에 포함되지 않은 스트리머는 분쟁지역이거나 도시국가입니다.\\n      </div>\\n      <div>\\n        - 지도의 형태와 스트리머들의 위치는 계산 결과에 따라 수시로 바뀔수있습니다.\\n      </div>\\n    </div>\\n    <div class=\\\"pt-2\\\"> 범례 </div>\\n    <div class=\\\"text-sm pl-2\\\">\\n      <div class=\\\"align-middle mb-1\\\">\\n        {#if sprites.town_night} \\n          <img src=\\\"{sprites.town_night.src}\\\" class=\\\"w-6 h-6 inline\\\"/>\\n        {/if}\\n        100따리\\n      </div>\\n      <div class=\\\"align-middle mb-1\\\">\\n        {#if sprites.castle_night} \\n          <img src=\\\"{sprites.castle_night.src}\\\" class=\\\"w-6 h-6 inline\\\"/>\\n        {/if}\\n        1000따리\\n      </div>\\n      <div class=\\\"align-middle mb-1\\\">\\n        {#if sprites.city_night} \\n          <img src=\\\"{sprites.city_night.src}\\\" class=\\\"w-6 h-6 inline\\\"/>\\n        {/if}\\n        10000따리\\n      </div>\\n      <div class=\\\"mb-1\\\">\\n        {#if sprites.town && sprites.castle && sprites.city} \\n          <img src=\\\"{sprites.town.src}\\\" class=\\\"w-6 h-6 inline\\\"/>\\n          <img src=\\\"{sprites.castle.src}\\\" class=\\\"w-6 h-6 inline\\\"/>\\n          <img src=\\\"{sprites.city.src}\\\" class=\\\"w-6 h-6 inline\\\"/>\\n        {/if}\\n        방송중\\n      </div>\\n      <div class=\\\"align-middle mb-1\\\">\\n        {#if sprites.fire} \\n          <img src=\\\"{sprites.fire.src}\\\" class=\\\"w-6 h-6 inline\\\"/>\\n        {/if}\\n        채팅창 불남\\n      </div>\\n    </div>\\n  </div>\\n  \\n</Modal>\\n\\n<div\\n    on:mousedown={canvas_mouse_down}\\n    on:mouseup={canvas_mouse_up}\\n    on:mousemove={canvas_mouse_move}\\n    on:mouseleave={canvas_mouse_out}\\n    on:wheel={canvas_scroll}\\n    on:touchstart={canvas_touch_start}\\n    on:touchmove={canvas_touch_move}\\n  >\\n<div class=\\\"fixed p-6 text-white md:block flex flex-row justify-between w-full md:w-auto\\\">\\n  <div>\\n    <h2 class=\\\"inline-block text-2xl md:text-3xl\\\">\\n      스트리머 지도\\n    </h2>\\n    <Tip click={tip_click}>\\n      <span slot=\\\"tip\\\"> 클릭하여 설명열기</span>\\n    </Tip>\\n  </div> \\n  <StreamerAutoComplete streamers={streamers} bind:selected={search} placeholder=\\\"지도에서 찾기\\\" input_class=\\\"bg-transparent border border-white text-sm md:w-40 w-32 p-2 md:mt-4 placeholder-white focus:bg-gray-600 transition-all transition-100\\\" icon=false id=\\\"streamer-map\\\"/>\\n</div>\\n<div class=\\\"overflow-x-auto canvas-container\\\">\\n  <canvas bind:this={canvas} class=\\\"w-full h-full canvas\\\"\\n  > </canvas>\\n</div>\\n</div>\\n<!--\\n<div class=\\\"w-full flex flex-row flex-wrap items-center\\\">\\n  <div class=\\\"p-2 flex flex-row flex-wrap items-center\\\">\\n    <div class=\\\"px-2\\\"><input type=checkbox bind:checked={clustering_show} id=\\\"border\\\" name=\\\"border\\\"> <label for=\\\"border\\\">국경</label></div>\\n    <div class=\\\"px-2\\\"><input type=checkbox bind:checked={potrait_show} id=\\\"potrait\\\" name=\\\"potrait\\\"> <label for=\\\"potrait\\\">초상화</label></div>\\n    <div class=\\\"px-2\\\"><input type=checkbox bind:checked={name_show} id=\\\"name\\\" name=\\\"name\\\"> <label for=\\\"name\\\">이름</label></div>\\n  </div>\\n</div>-->\\n\\n<style>\\n.canvas-container {\\n  width: 100%;\\n  height: calc(100vh - 2.85rem);\\n  overflow-y: hidden;\\n  background-color: #2D3343;\\n  /*box-shadow: 0px 0px 1rem #000;*/\\n}\\n.canvas {\\n  /*background: url(/waterpattern.jpg);\\n  background-repeat: no-repeat;\\n  background-size: 100% 100%;*/\\n}\\n</style>\\n\\n<script context=\\\"module\\\">\\n\\timport { API } from '../../api.js';\\n  export async function preload(page, session) {\\n    let streamers = await API.streamer_map.call(this);\\n    let interest_streamer = streamers.find(s => s.id == page.query.interest_streamer_id);\\n    return { streamers, interest_streamer };\\n  }\\n</script>\\n\\n<script>\\nimport { onMount, onDestroy } from \\\"svelte\\\";\\nimport StreamerAutoComplete from \\\"../../components/StreamerAutoComplete.svelte\\\";\\nimport Panel from \\\"../../components/Panel.svelte\\\";\\nimport Modal, { show, hide } from \\\"../../components/Modal.svelte\\\"; \\nimport { faMouse } from '@fortawesome/free-solid-svg-icons/faMouse'\\nimport { faMobileAlt } from '@fortawesome/free-solid-svg-icons/faMobileAlt'\\nimport Tip from '../../components/Tip.svelte';\\n\\nexport let streamers;\\nexport let interest_streamer;\\n\\nfunction tip_click() {\\n  show(0);\\n}\\n\\nconst COLORS = {\\n  sea: \\\"#2D3343\\\",\\n  land: \\\"#806A5C\\\",\\n  load: \\\"#3c3c33\\\",\\n  highlight: \\\"#d4af37\\\",\\n}\\n\\nlet canvas;\\n\\nlet search = interest_streamer;\\nlet clustering_show = true;\\nlet potrait_show = true;\\nlet name_show = true;\\n\\nlet n = Math.max(...streamers.map(s=>s.x), ...streamers.map(s=>s.y)) + 1;\\nlet camera = interest_streamer? \\n  [interest_streamer.x/n, interest_streamer.y/n, 1.5] : \\n  [0.5, 0.45, 0.85];\\nlet piece_size = [64, 64];\\n\\nlet last_pointer_x=null, last_pointer_y=null, clicking = false;\\nfunction canvas_mouse_down(e) {\\n  last_pointer_x = e.pageX - canvas.getBoundingClientRect().x;\\n  last_pointer_y = e.pageY - canvas.getBoundingClientRect().y;\\n  clicking = true;\\n  //return e.preventDefault() && false;\\n}\\nfunction canvas_mouse_up(e) {\\n  clicking = false;\\n  //return e.preventDefault() && false;\\n}\\nfunction canvas_mouse_out(e) {\\n  clicking = false;\\n}\\nfunction canvas_mouse_move(e) {\\n  let dx = (e.pageX - canvas.getBoundingClientRect().x) - last_pointer_x,\\n      dy = (e.pageY - canvas.getBoundingClientRect().y) - last_pointer_y;\\n  last_pointer_x += dx;\\n  last_pointer_y += dy;\\n  if(!clicking) return;\\n  camera[0] -= dx / (n * piece_size[0]*camera[2]);\\n  camera[1] -= dy / (n * piece_size[1]*camera[2]);\\n}\\nfunction canvas_scroll(e) {\\n  let delta = e.wheelDelta ? e.wheelDelta : e.detail ? - e.detail : 0;\\n  camera[2] += delta / canvas.width;\\n  return e.preventDefault() && false;\\n}\\nfunction get_distance(e) {\\n  var diffX = e.touches[0].clientX - e.touches[1].clientX;\\n  var diffY = e.touches[0].clientY - e.touches[1].clientY;\\n  return Math.sqrt(diffX * diffX + diffY * diffY); // Pythagorean theorem\\n}\\n\\nfunction canvas_touch_start(e) {\\n  let rect = canvas.getBoundingClientRect();\\n  if (e.touches.length > 1) { // if multiple touches (pinch zooming)\\n    finger_dist = get_distance(e); // Save current finger distance\\n  } // Else just moving around\\n  last_pointer_x = e.touches[0].clientX - rect.x; // Save finger position\\n  last_pointer_y = e.touches[0].clientY - rect.y; //\\n  if (\\\"activeElement\\\" in document)\\n    document.activeElement.blur();\\n};\\n\\nlet finger_dist=0;\\nfunction canvas_touch_move(e) {\\n  e.preventDefault(); // Stop the window from moving\\n  let rect = canvas.getBoundingClientRect();\\n  if (finger_dist && e.touches.length > 1) { // If pinch-zooming\\n    let new_finger_dist = get_distance(e); // Get current distance between fingers\\n    if(finger_dist) camera[2] = camera[2] * Math.abs(new_finger_dist / finger_dist); // Zoom is proportional to change\\n    finger_dist = new_finger_dist; // Save current distance for next time\\n  } else if(!finger_dist){ \\n    let dx = e.touches[0].clientX - last_pointer_x - rect.x,\\n        dy = e.touches[0].clientY - last_pointer_y - rect.y;\\n    last_pointer_x += dx;\\n    last_pointer_y += dy;\\n    camera[0] -= dx / (n * piece_size[0]*camera[2]);\\n    camera[1] -= dy / (n * piece_size[1]*camera[2]);\\n  }\\n  return e.preventDefault() && false;\\n};\\n\\n\\nlet sprites = { };\\n\\nlet frame;\\n\\nonMount(async ()=>{\\n  const { Patterns } = (await import(\\\"../../components/CanvasPatterns.js\\\"));\\n  sprites.city = new Image();\\n  sprites.city.src = \\\"/city_on.png\\\";\\n  sprites.castle = new Image();\\n  sprites.castle.src = \\\"/castle_on.png\\\";\\n  sprites.town = new Image();\\n  sprites.town.src = \\\"/town_on.png\\\";\\n  sprites.city_night = new Image();\\n  sprites.city_night.src = \\\"/city_off.png\\\";\\n  sprites.castle_night = new Image();\\n  sprites.castle_night.src = \\\"/castle_off.png\\\";\\n  sprites.town_night = new Image();\\n  sprites.town_night.src = \\\"/town_off.png\\\";\\n  sprites.fire = new Image();\\n  sprites.fire.src = \\\"/fire.png\\\";\\n  let ctx = canvas.getContext(\\\"2d\\\");\\n  canvas.width = canvas.getBoundingClientRect().width;\\n  canvas.height = canvas.getBoundingClientRect().height;\\n  //canvas.height = canvas.width;//canvas.getBoundingClientRect().height;\\n  piece_size = [Math.min(canvas.width, canvas.height) / n, Math.min(canvas.height, canvas.width) / n];\\n  let border_width = 6;\\n  let representor_of_cluster = [];\\n  let cluster_to_streamers = [];\\n  let streamer_matrix = Array(n).fill().map(()=>Array(n).fill(null));\\n  for(let s of streamers) {\\n    s.image = new Image();\\n    streamer_matrix[s.x][s.y] = s;\\n    if(s.cluster >= 0) {\\n      if(cluster_to_streamers[s.cluster] == null) \\n        cluster_to_streamers[s.cluster] = [];\\n      cluster_to_streamers[s.cluster].push(s);\\n    }\\n  }\\n  for(let i in cluster_to_streamers) {\\n    cluster_to_streamers[i].sort((a, b) => b.probability - a.probability);\\n    representor_of_cluster[i] = cluster_to_streamers[i][0];\\n    representor_of_cluster[i].representation_x = cluster_to_streamers[i].reduce((a, b) => a + b.x, 0) / cluster_to_streamers[i].length;\\n    representor_of_cluster[i].representation_y = cluster_to_streamers[i].reduce((a, b) => a + b.y, 0) / cluster_to_streamers[i].length;\\n  }\\n  for(let s of streamers) {\\n    if(s.cluster >= 0 && (s.x-1 < 0 || streamer_matrix[s.x-1][s.y] == null || streamer_matrix[s.x-1][s.y].cluster != s.cluster))\\n      s.left_edge = true;\\n    if(s.cluster >= 0 && (s.x+1 >= streamer_matrix.length || streamer_matrix[s.x+1][s.y] == null || streamer_matrix[s.x+1][s.y].cluster != s.cluster))\\n      s.right_edge = true;\\n    if(s.cluster >= 0 && (s.y-1 < 0 || streamer_matrix[s.x][s.y-1] == null || streamer_matrix[s.x][s.y-1].cluster != s.cluster))\\n      s.top_edge = true;\\n    if(s.cluster >= 0 && (s.y+1 >= streamer_matrix.length || streamer_matrix[s.x][s.y+1] == null || streamer_matrix[s.x][s.y+1].cluster != s.cluster))\\n      s.bottom_edge = true;\\n  }\\n  let frame_index = 0;\\n  ctx.textBaseline = \\\"top\\\";\\n  ctx.textAlign = \\\"center\\\";\\n  ctx.font = \\\"12px Arial\\\";\\n\\n  let pw, ph;\\n  let view;\\n\\n  canvas.ondblclick = function(e){\\n    let target = (streamer_matrix[Math.floor((e.pageX - canvas.getBoundingClientRect().x + view[0]) / pw)] || [])[Math.floor((e.pageY - canvas.getBoundingClientRect().y + view[1]) / ph)];\\n    if(target)\\n      location = `/streamer/${target.id}`;\\n    return e.preventDefault() && false;\\n  }\\n  let timer = null, last_target;\\n  let canvas_touch_end = function(e) {\\n    if (e.touches.length >= 1) return;\\n    finger_dist = 0;\\n    let target = (streamer_matrix[Math.floor((last_pointer_x + view[0]) / pw)] || [])[Math.floor((last_pointer_y + view[1]) / ph)];\\n    if(timer == null){\\n      last_target = target;\\n      timer = setTimeout(function () {\\n          timer = null;\\n          last_target = null;\\n      }, 300);\\n    }else {\\n      clearTimeout(timer);\\n      timer = null;\\n      if(target && target == last_target)\\n        location = `/streamer/${target.id}`;\\n      else {\\n        last_target = target;\\n        timer = setTimeout(function () {\\n            timer = null;\\n            last_target = null;\\n        }, 300);\\n      }\\n    }\\n  };\\n  let searched = [];\\n  canvas.addEventListener(\\\"touchend\\\", canvas_touch_end);\\n  canvas.addEventListener(\\\"touchcancel\\\", canvas_touch_end);\\n  (function loop() {\\n    frame = requestAnimationFrame(loop);\\n    if(search) {\\n      camera[0] = search.x/n;\\n      camera[1] = search.y/n;\\n      search.highlight = true;\\n      searched.push(search);\\n      search = null;\\n    }\\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\\n    pw = Math.ceil(piece_size[0]*camera[2]);\\n    ph = Math.ceil(piece_size[1]*camera[2]);\\n    view = [pw*n*camera[0] - canvas.width*0.5, ph*n*camera[1] - canvas.height*0.5, canvas.width, canvas.height];\\n    let view_x = Math.floor(view[0]/pw), \\n        view_y = Math.floor(view[1]/ph),\\n        view_x2 = Math.ceil((view[0]+view[2]) / pw),\\n        view_y2 = Math.ceil((view[1]+view[3]) / ph);\\n    border_width = pw/10;\\n    ctx.font = Math.max(Math.floor(pw/5), 12) + \\\"px Arial\\\";\\n    let hovered = (streamer_matrix[Math.floor((last_pointer_x + view[0]) / pw)] || [])[Math.floor((last_pointer_y + view[1]) / ph)];\\n    // Zoomed enough: present all streamers\\n    ctx.save();\\n    //ctx.fillStyle = COLORS.sea;\\n    //ctx.fillRect(0, 0, canvas.width, canvas.height);\\n    ctx.restore();\\n  \\n    for(let x=view_x; x<=view_x2; ++x){\\n      for(let y=view_y; y<=view_y2; ++y){\\n        let px = Math.floor(pw*x - view[0]), \\n            py = Math.floor(ph*y - view[1]);\\n        if(streamer_matrix[x] == null || streamer_matrix[x][y] == null) {\\n          ctx.save()\\n          //ctx.fillStyle = \\\"#718096\\\"\\n          //ctx.fillStyle = \\\"#414a4c\\\"\\n          //ctx.fillStyle = COLORS.sea;\\n          //ctx.fillRect(px, py, pw, ph);\\n          ctx.restore();\\n          continue;\\n        }\\n        let s = streamer_matrix[x][y];\\n        ctx.fillStyle = COLORS.land;\\n        ctx.fillRect(px, py, pw, ph);\\n        if(s.cluster >= 0) {\\n          ctx.save()\\n          ctx.globalAlpha = 0.5;\\n          ctx.fillStyle = Patterns[s.cluster];\\n          ctx.fillRect(px, py, pw, ph);\\n          ctx.restore()\\n        }\\n      }\\n    }\\n    if(pw >= 64 && ph >= 64) {\\n      for(let x=view_x; x<=view_x2; ++x){\\n        for(let y=view_y; y<=view_y2; ++y){\\n          let px = Math.floor(pw*x - view[0]), \\n              py = Math.floor(ph*y - view[1]);\\n          if(streamer_matrix[x] == null || streamer_matrix[x][y] == null){\\n            ctx.save()\\n            //ctx.fillStyle = \\\"#718096\\\"\\n            //ctx.fillStyle = COLORS.sea;\\n            //  ctx.fillRect(px, py, pw, ph);\\n            ctx.restore()\\n              continue;\\n          }\\n          let s = streamer_matrix[x][y];\\n          if(potrait_show){\\n            ctx.save();\\n            if(s.image.src && s.image.complete && s.image.naturalWidth > 0)\\n              ctx.drawImage(s.image, px, py, pw, ph);\\n            else {\\n              if(!s.image.src) \\n                s.image.src = s.profile_image_url;\\n              ctx.fillStyle = \\\"#CDA8C7\\\";\\n              ctx.fillText(\\\"로딩중\\\", px + pw*0.5, py); \\n            }\\n            ctx.restore()\\n          }\\n          if(s.highlight) {\\n            if(s == hovered)\\n              s.highlight = false;\\n            if(frame_index%10 > 5){\\n              ctx.save();\\n              ctx.globalAlpha = 0.5;\\n              ctx.fillStyle = COLORS.highlight;\\n              ctx.fillRect(px + border_width, py+border_width, pw - 2*border_width, ph - 2*border_width);\\n              ctx.globalAlpha = 1.0;\\n              ctx.restore()\\n            }\\n          }\\n          if(name_show || hovered == s){\\n            ctx.save();\\n            let fh = parseInt(ctx.font),\\n                fw = ctx.measureText(s.name).width,\\n                l = Math.ceil(fw/(pw - 2*border_width)),\\n                text_piece_length = Math.floor(s.name.length / l);\\n            ctx.globalAlpha = 0.7;\\n            ctx.fillStyle = \\\"#fff\\\";\\n            ctx.fillRect(px + border_width, py+ph - border_width - fh*l, pw - 2*border_width, fh*l);\\n            ctx.globalAlpha = 1.0;\\n            ctx.fillStyle = \\\"#000\\\";\\n            for(let i=0; i<l-1; ++i)\\n              ctx.fillText(s.name.substr(i*text_piece_length, text_piece_length), px + pw*0.5, py + ph - border_width - fh*l + i*fh);\\n            ctx.fillText(s.name.slice((l-1)*text_piece_length), px+pw*0.5, py + ph - border_width - fh);\\n            //ctx.fillText(s.name, px + pw*0.5, py + ph - border_width - fh);\\n            ctx.restore();\\n          }\\n          if(s.is_streaming){\\n            ctx.save();\\n            ctx.beginPath();\\n            ctx.globalAlpha = Math.abs(Math.sin(frame_index/20));\\n            ctx.arc(px + border_width + pw/15, py + border_width + ph/15, pw/15-1, 0, 2 * Math.PI, false);\\n            ctx.fillStyle = \\\"#FF4560\\\";\\n            ctx.fill();\\n            ctx.restore();\\n          }\\n        }\\n      }\\n    }\\n    else{\\n      if(pw > 32 && ph > 32){\\n        for(let s of representor_of_cluster) {\\n            let rx = pw*s.representation_x - view[0] + pw*0.5 + (camera[0] - 0.5)*pw,\\n                ry = ph*s.representation_y - view[1] + ph*0.5 + (camera[1] - 0.5)*ph;\\n            let px = pw*s.x - view[0], \\n                py = ph*s.y - view[1];\\n            ctx.save();\\n            ctx.globalAlpha = 1.0;\\n            ctx.textBaseline = \\\"middle\\\";\\n            ctx.textAlign = \\\"center\\\";\\n            ctx.fillStyle = \\\"white\\\";\\n            ctx.strokeStyle = \\\"black\\\";\\n            ctx.font = \\\"italic \\\" + Math.max(Math.floor(pw/1.5), 12) + \\\"px Arial\\\";\\n            let fw = ctx.measureText(s.name).width,\\n                fh = parseInt(ctx.font);\\n            ctx.fillText(s.name, rx, ry);\\n            ctx.restore();\\n        }\\n        for(let x=view_x; x<=view_x2; ++x){\\n          for(let y=view_y; y<=view_y2; ++y){\\n            let px = Math.floor(pw*x - view[0]), \\n                py = Math.floor(ph*y - view[1]);\\n            if(streamer_matrix[x] == null || streamer_matrix[x][y] == null)\\n              continue;\\n            let s = streamer_matrix[x][y];\\n            if(!(s == hovered || s.highlight)) {\\n              if(s.average_viewer_count >= 10000) {\\n                if(s.is_streaming){\\n                  if(sprites.city.complete)\\n                    ctx.drawImage(sprites.city, px, py, pw, ph);\\n                }\\n                else {\\n                  if(sprites.city_night.complete)\\n                    ctx.drawImage(sprites.city_night, px, py, pw, ph);\\n                }\\n              }\\n              else if(s.average_viewer_count >= 1000) {\\n                if(s.is_streaming){\\n                  if(sprites.castle.complete)\\n                    ctx.drawImage(sprites.castle, px+pw*0.2, py+ph*0.2, pw*0.6, ph*0.6);\\n                }\\n                else {\\n                  if(sprites.castle_night.complete)\\n                    ctx.drawImage(sprites.castle_night, px+pw*0.2, py+ph*0.2, pw*0.6, ph*0.6);\\n                }\\n              }\\n              else if(s.average_viewer_count >= 100) {\\n                if(s.is_streaming){\\n                  if(sprites.town.complete)\\n                    ctx.drawImage(sprites.town, px+pw*0.2, py+ph*0.2, pw*0.6, ph*0.6);\\n                }\\n                else {\\n                  if(sprites.town_night.complete)\\n                    ctx.drawImage(sprites.town_night, px+pw*0.2, py+ph*0.2, pw*0.6, ph*0.6);\\n                }\\n              }\\n              /*else {\\n                if(s.is_streaming) {\\n                  ctx.fillStyle = \\\"#fffe00\\\";\\n                  ctx.beginPath();\\n                  ctx.arc(px + pw*0.5, py + ph*0.5, pw*0.05, 0, Math.PI*2);\\n                  ctx.fill();\\n                }\\n              }*/\\n              if(s.is_streaming && s.chatting_speed >= 5){\\n                if(sprites.fire.complete){\\n                  ctx.globalAlpha = 0.5;\\n                  ctx.drawImage(sprites.fire, px + pw*0.2, py+ph*0.2, pw*0.6, ph*0.6);\\n                  ctx.globalAlpha = 1.0;\\n                }\\n              }\\n              if(!s.is_streaming){\\n                ctx.globalAlpha = 0.3;\\n                ctx.fillStyle = \\\"#000\\\";\\n                ctx.fillRect(px, py, pw, ph);\\n                ctx.globalAlpha = 1.0;\\n              }\\n            }\\n          }\\n        }\\n      }\\n      if(hovered) {\\n        ctx.save();\\n        let s = hovered;\\n        let px = pw*s.x - view[0], \\n          py = ph*s.y - view[1];\\n        if(s.image.src && s.image.complete && s.image.naturalWidth > 0)\\n          ctx.drawImage(s.image, px, py, pw, ph);\\n        else {\\n          if(!s.image.src) \\n            s.image.src = s.profile_image_url;\\n          ctx.fillStyle = \\\"#CDA8C7\\\";\\n          ctx.fillText(\\\"로딩중\\\", px + pw*0.5, py); \\n        }\\n        ctx.restore();\\n      }\\n      for(let i=0, l=searched.length; i<l; ++i) {\\n        ctx.save();\\n        let s = searched[i];\\n        let px = pw*s.x - view[0], \\n          py = ph*s.y - view[1];\\n        if(s.image.src && s.image.complete && s.image.naturalWidth > 0)\\n          ctx.drawImage(s.image, px, py, pw, ph);\\n        else {\\n          if(!s.image.src) \\n            s.image.src = s.profile_image_url;\\n          ctx.fillStyle = \\\"#CDA8C7\\\";\\n          ctx.fillText(\\\"로딩중\\\", px + pw*0.5, py); \\n        }\\n        ctx.restore();\\n        if(s == hovered){\\n          searched.splice(i, 1);\\n          i -= 1;\\n          l -= 1;\\n          s.highlight = false;\\n        }\\n        if(frame_index%10 > 5){\\n          ctx.save();\\n          ctx.globalAlpha = 0.5;\\n          ctx.fillStyle = \\\"#d4af37\\\";\\n          ctx.fillRect(px + border_width, py+border_width, pw - 2*border_width, ph - 2*border_width);\\n          ctx.globalAlpha = 1.0;\\n          ctx.restore()\\n        }\\n      }\\n    }\\n    for(let x=view_x; x<=view_x2; ++x){\\n      for(let y=view_y; y<=view_y2; ++y){\\n        let px = Math.floor(pw*x - view[0]), \\n            py = Math.floor(ph*y - view[1]);\\n        if(streamer_matrix[x] == null || streamer_matrix[x][y] == null)\\n          continue;\\n        let s = streamer_matrix[x][y];\\n        /*\\n        if(!s.is_streaming){\\n          ctx.save();\\n          ctx.globalAlpha = 0.2;\\n          ctx.fillStyle = \\\"#000\\\";\\n          ctx.fillRect(px, py, pw, ph);\\n          ctx.restore();\\n        } else{\\n          ctx.save();\\n          ctx.globalAlpha = 0.2;\\n          ctx.fillStyle = \\\"#fff\\\";\\n          ctx.fillRect(px, py, pw, ph);\\n          ctx.restore();\\n        }*/\\n        if(clustering_show) {\\n          ctx.save();\\n          if(hovered && hovered.cluster == s.cluster) \\n            ctx.globalAlpha = Math.abs(Math.sin(frame_index/20));\\n          ctx.fillStyle = Patterns[s.cluster];\\n          if(s.left_edge){\\n            let y=py, y2=py+ph;\\n            if(!s.bottom_edge)\\n              y2 += border_width;\\n            if(!s.top_edge)\\n              y -= border_width;\\n            ctx.fillRect(\\n                px,\\n                y,\\n                border_width, y2-y);\\n          }\\n          if(s.right_edge){\\n            let y=py, y2=py+ph;\\n            if(!s.bottom_edge)\\n              y2 += border_width;\\n            if(!s.top_edge)\\n              y -= border_width;\\n            ctx.fillRect(\\n                px + pw - border_width,\\n                y, \\n                border_width, y2-y);\\n          }\\n          if(s.top_edge){\\n            let x=px, x2=px + pw;\\n            if(!s.right_edge)\\n              x2 += border_width;\\n            if(!s.left_edge)\\n              x -= border_width;\\n            ctx.fillRect(\\n                x, \\n                py,\\n                x2-x, border_width);\\n          }\\n          if(s.bottom_edge){\\n            let x=px, x2=px+pw;\\n            if(!s.right_edge)\\n              x2 += border_width;\\n            if(!s.left_edge)\\n              x -= border_width;\\n            ctx.fillRect(\\n                x, \\n                py + ph - border_width,\\n                x2-x, border_width);\\n          }\\n          ctx.restore();\\n        }\\n      }\\n    }\\n    if(pw < 64 || ph < 64) {\\n      for(let x=view_x; x<=view_x2; ++x){\\n        for(let y=view_y; y<=view_y2; ++y){\\n          let px = Math.floor(pw*x - view[0]), \\n              py = Math.floor(ph*y - view[1]);\\n          if(streamer_matrix[x] == null || streamer_matrix[x][y] == null)\\n            continue;\\n          let s = streamer_matrix[x][y];\\n          if(hovered == s) {\\n            ctx.save();\\n            ctx.globalAlpha = 0.7;\\n            ctx.fillStyle = \\\"#fff\\\";\\n            let fh = parseInt(ctx.font),\\n                fw = ctx.measureText(s.name).width;\\n            ctx.fillRect(px + pw*0.5 - fw*0.5, py+ph, fw, fh);\\n            ctx.globalAlpha = 1.0;\\n            ctx.fillStyle = \\\"#000\\\";\\n            ctx.fillText(s.name, px+pw*0.5, py+ph);\\n            ctx.restore();\\n          }\\n        }\\n      }\\n      for(let s of representor_of_cluster) {\\n          let rx = pw*s.representation_x - view[0] + pw*0.5 + (camera[0] - 0.5)*pw,\\n              ry = ph*s.representation_y - view[1] + ph*0.5 + (camera[1] - 0.5)*ph;\\n          let px = pw*s.x - view[0], \\n              py = ph*s.y - view[1];\\n          ctx.save();\\n          ctx.globalAlpha = 0.7;\\n          ctx.textBaseline = \\\"middle\\\";\\n          ctx.textAlign = \\\"center\\\";\\n          ctx.fillStyle = \\\"white\\\";\\n          ctx.strokeStyle = \\\"black\\\";\\n          //ctx.font = \\\"italic 14px Arial\\\";\\n          //ctx.font = \\\"italic \\\" + Math.max(Math.floor(pw/2), 12) + \\\"px Arial\\\";\\n          ctx.font = \\\"italic \\\" + Math.max(Math.floor(pw/1.5), 12) + \\\"px Arial\\\";\\n          let fw = ctx.measureText(s.name).width,\\n              fh = parseInt(ctx.font);\\n          /*rx = rx - fw*0.5 < 0? fw*0.5: \\n               (rx + fw*0.5 >= canvas.width? canvas.width - fw*0.5 : rx),\\n          ry = ry - fh*0.5 < 0? fh*0.5: \\n               (ry + fh*0.5 >= canvas.height? canvas.height - fh*0.5 : ry);*/\\n          //ctx.lineWidth = 5;\\n          //ctx.strokeText(s.name, rx, ry);\\n          ctx.fillText(s.name, rx, ry);\\n          ctx.globalAlpha = 0.5;\\n          ctx.fillText(s.name, rx, ry);\\n          ctx.restore();\\n      }\\n    }\\n    frame_index += 1;\\n  }());\\n  return ()=>{\\n    cancelAnimationFrame(frame);\\n  }\\n});\\nonDestroy(()=>{\\n  if(frame) {\\n    cancelAnimationFrame(frame);\\n    frame = null;\\n  }\\n});\\n/*\\n        let fh = parseInt(ctx.font);\\n        ctx.globalAlpha = 0.7;\\n        ctx.fillStyle = \\\"#fff\\\";\\n        ctx.fillRect(px + border_width, py+ph - border_width - fh, pw - 2*border_width, fh);\\n        ctx.globalAlpha = 1.0;\\n        ctx.fillStyle = \\\"#000\\\";\\n        ctx.fillText(s.name, px + border_width*0.5, py + ph - border_width - fh);\\n      }\\n    }\\n  }());\\n  return ()=>{\\n    cancelAnimationFrame(frame);\\n  }\\n});\\n*/\\n</script>\\n\"],\"names\":[],\"mappings\":\"AAoHA,iBAAiB,YAAC,CAAC,AACjB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,KAAK,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,CAC7B,UAAU,CAAE,MAAM,CAClB,gBAAgB,CAAE,OAAO,AAE3B,CAAC,AACD,OAAO,YAAC,CAAC,AAIT,CAAC\"}"
};

async function preload$2(page, session) {
  let streamers = await API.streamer_map.call(this);
  let interest_streamer = streamers.find(s => s.id == page.query.interest_streamer_id);
  return { streamers, interest_streamer };
}

function tip_click() {
show(0);
}

const Index$2 = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	

let { streamers, interest_streamer } = $$props;

const COLORS = {
  sea: "#2D3343",
  land: "#806A5C",
  load: "#3c3c33",
  highlight: "#d4af37",
};

let canvas;

let search = interest_streamer;

let n = Math.max(...streamers.map(s=>s.x), ...streamers.map(s=>s.y)) + 1;
let camera = interest_streamer? 
  [interest_streamer.x/n, interest_streamer.y/n, 1.5] : 
  [0.5, 0.45, 0.85];
let piece_size = [64, 64];

let last_pointer_x=null, last_pointer_y=null;


let sprites = { };

let frame;

onMount(async ()=>{
  const { Patterns } = (await new Promise(function (resolve) { resolve(require('./CanvasPatterns-250f3f7e.js')); }));
  sprites.city = new Image();
  sprites.city.src = "/city_on.png";
  sprites.castle = new Image();
  sprites.castle.src = "/castle_on.png";
  sprites.town = new Image();
  sprites.town.src = "/town_on.png";
  sprites.city_night = new Image();
  sprites.city_night.src = "/city_off.png";
  sprites.castle_night = new Image();
  sprites.castle_night.src = "/castle_off.png";
  sprites.town_night = new Image();
  sprites.town_night.src = "/town_off.png";
  sprites.fire = new Image();
  sprites.fire.src = "/fire.png";
  let ctx = canvas.getContext("2d");
  canvas.width = canvas.getBoundingClientRect().width;
  canvas.height = canvas.getBoundingClientRect().height;
  //canvas.height = canvas.width;//canvas.getBoundingClientRect().height;
  piece_size = [Math.min(canvas.width, canvas.height) / n, Math.min(canvas.height, canvas.width) / n];
  let border_width = 6;
  let representor_of_cluster = [];
  let cluster_to_streamers = [];
  let streamer_matrix = Array(n).fill().map(()=>Array(n).fill(null));
  for(let s of streamers) {
    s.image = new Image();
    streamer_matrix[s.x][s.y] = s;
    if(s.cluster >= 0) {
      if(cluster_to_streamers[s.cluster] == null) 
        cluster_to_streamers[s.cluster] = [];
      cluster_to_streamers[s.cluster].push(s);
    }
  }
  for(let i in cluster_to_streamers) {
    cluster_to_streamers[i].sort((a, b) => b.probability - a.probability);
    representor_of_cluster[i] = cluster_to_streamers[i][0];
    representor_of_cluster[i].representation_x = cluster_to_streamers[i].reduce((a, b) => a + b.x, 0) / cluster_to_streamers[i].length;
    representor_of_cluster[i].representation_y = cluster_to_streamers[i].reduce((a, b) => a + b.y, 0) / cluster_to_streamers[i].length;
  }
  for(let s of streamers) {
    if(s.cluster >= 0 && (s.x-1 < 0 || streamer_matrix[s.x-1][s.y] == null || streamer_matrix[s.x-1][s.y].cluster != s.cluster))
      s.left_edge = true;
    if(s.cluster >= 0 && (s.x+1 >= streamer_matrix.length || streamer_matrix[s.x+1][s.y] == null || streamer_matrix[s.x+1][s.y].cluster != s.cluster))
      s.right_edge = true;
    if(s.cluster >= 0 && (s.y-1 < 0 || streamer_matrix[s.x][s.y-1] == null || streamer_matrix[s.x][s.y-1].cluster != s.cluster))
      s.top_edge = true;
    if(s.cluster >= 0 && (s.y+1 >= streamer_matrix.length || streamer_matrix[s.x][s.y+1] == null || streamer_matrix[s.x][s.y+1].cluster != s.cluster))
      s.bottom_edge = true;
  }
  let frame_index = 0;
  ctx.textBaseline = "top";
  ctx.textAlign = "center";
  ctx.font = "12px Arial";

  let pw, ph;
  let view;

  canvas.ondblclick = function(e){
    let target = (streamer_matrix[Math.floor((e.pageX - canvas.getBoundingClientRect().x + view[0]) / pw)] || [])[Math.floor((e.pageY - canvas.getBoundingClientRect().y + view[1]) / ph)];
    if(target)
      location = `/streamer/${target.id}`;
    return e.preventDefault() && false;
  };
  let timer = null, last_target;
  let canvas_touch_end = function(e) {
    if (e.touches.length >= 1) return;
    let target = (streamer_matrix[Math.floor((last_pointer_x + view[0]) / pw)] || [])[Math.floor((last_pointer_y + view[1]) / ph)];
    if(timer == null){
      last_target = target;
      timer = setTimeout(function () {
          timer = null;
          last_target = null;
      }, 300);
    }else {
      clearTimeout(timer);
      timer = null;
      if(target && target == last_target)
        location = `/streamer/${target.id}`;
      else {
        last_target = target;
        timer = setTimeout(function () {
            timer = null;
            last_target = null;
        }, 300);
      }
    }
  };
  let searched = [];
  canvas.addEventListener("touchend", canvas_touch_end);
  canvas.addEventListener("touchcancel", canvas_touch_end);
  (function loop() {
    frame = requestAnimationFrame(loop);
    if(search) {
      camera[0] = search.x/n;
      camera[1] = search.y/n;
      search.highlight = true;
      searched.push(search);
      search = null;
    }
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    pw = Math.ceil(piece_size[0]*camera[2]);
    ph = Math.ceil(piece_size[1]*camera[2]);
    view = [pw*n*camera[0] - canvas.width*0.5, ph*n*camera[1] - canvas.height*0.5, canvas.width, canvas.height];
    let view_x = Math.floor(view[0]/pw), 
        view_y = Math.floor(view[1]/ph),
        view_x2 = Math.ceil((view[0]+view[2]) / pw),
        view_y2 = Math.ceil((view[1]+view[3]) / ph);
    border_width = pw/10;
    ctx.font = Math.max(Math.floor(pw/5), 12) + "px Arial";
    let hovered = (streamer_matrix[Math.floor((last_pointer_x + view[0]) / pw)] || [])[Math.floor((last_pointer_y + view[1]) / ph)];
    // Zoomed enough: present all streamers
    ctx.save();
    //ctx.fillStyle = COLORS.sea;
    //ctx.fillRect(0, 0, canvas.width, canvas.height);
    ctx.restore();
  
    for(let x=view_x; x<=view_x2; ++x){
      for(let y=view_y; y<=view_y2; ++y){
        let px = Math.floor(pw*x - view[0]), 
            py = Math.floor(ph*y - view[1]);
        if(streamer_matrix[x] == null || streamer_matrix[x][y] == null) {
          ctx.save();
          //ctx.fillStyle = "#718096"
          //ctx.fillStyle = "#414a4c"
          //ctx.fillStyle = COLORS.sea;
          //ctx.fillRect(px, py, pw, ph);
          ctx.restore();
          continue;
        }
        let s = streamer_matrix[x][y];
        ctx.fillStyle = COLORS.land;
        ctx.fillRect(px, py, pw, ph);
        if(s.cluster >= 0) {
          ctx.save();
          ctx.globalAlpha = 0.5;
          ctx.fillStyle = Patterns[s.cluster];
          ctx.fillRect(px, py, pw, ph);
          ctx.restore();
        }
      }
    }
    if(pw >= 64 && ph >= 64) {
      for(let x=view_x; x<=view_x2; ++x){
        for(let y=view_y; y<=view_y2; ++y){
          let px = Math.floor(pw*x - view[0]), 
              py = Math.floor(ph*y - view[1]);
          if(streamer_matrix[x] == null || streamer_matrix[x][y] == null){
            ctx.save();
            //ctx.fillStyle = "#718096"
            //ctx.fillStyle = COLORS.sea;
            //  ctx.fillRect(px, py, pw, ph);
            ctx.restore();
              continue;
          }
          let s = streamer_matrix[x][y];
          {
            ctx.save();
            if(s.image.src && s.image.complete && s.image.naturalWidth > 0)
              ctx.drawImage(s.image, px, py, pw, ph);
            else {
              if(!s.image.src) 
                s.image.src = s.profile_image_url;
              ctx.fillStyle = "#CDA8C7";
              ctx.fillText("로딩중", px + pw*0.5, py); 
            }
            ctx.restore();
          }
          if(s.highlight) {
            if(s == hovered)
              s.highlight = false;
            if(frame_index%10 > 5){
              ctx.save();
              ctx.globalAlpha = 0.5;
              ctx.fillStyle = COLORS.highlight;
              ctx.fillRect(px + border_width, py+border_width, pw - 2*border_width, ph - 2*border_width);
              ctx.globalAlpha = 1.0;
              ctx.restore();
            }
          }
          {
            ctx.save();
            let fh = parseInt(ctx.font),
                fw = ctx.measureText(s.name).width,
                l = Math.ceil(fw/(pw - 2*border_width)),
                text_piece_length = Math.floor(s.name.length / l);
            ctx.globalAlpha = 0.7;
            ctx.fillStyle = "#fff";
            ctx.fillRect(px + border_width, py+ph - border_width - fh*l, pw - 2*border_width, fh*l);
            ctx.globalAlpha = 1.0;
            ctx.fillStyle = "#000";
            for(let i=0; i<l-1; ++i)
              ctx.fillText(s.name.substr(i*text_piece_length, text_piece_length), px + pw*0.5, py + ph - border_width - fh*l + i*fh);
            ctx.fillText(s.name.slice((l-1)*text_piece_length), px+pw*0.5, py + ph - border_width - fh);
            //ctx.fillText(s.name, px + pw*0.5, py + ph - border_width - fh);
            ctx.restore();
          }
          if(s.is_streaming){
            ctx.save();
            ctx.beginPath();
            ctx.globalAlpha = Math.abs(Math.sin(frame_index/20));
            ctx.arc(px + border_width + pw/15, py + border_width + ph/15, pw/15-1, 0, 2 * Math.PI, false);
            ctx.fillStyle = "#FF4560";
            ctx.fill();
            ctx.restore();
          }
        }
      }
    }
    else{
      if(pw > 32 && ph > 32){
        for(let s of representor_of_cluster) {
            let rx = pw*s.representation_x - view[0] + pw*0.5 + (camera[0] - 0.5)*pw,
                ry = ph*s.representation_y - view[1] + ph*0.5 + (camera[1] - 0.5)*ph;
            let px = pw*s.x - view[0], 
                py = ph*s.y - view[1];
            ctx.save();
            ctx.globalAlpha = 1.0;
            ctx.textBaseline = "middle";
            ctx.textAlign = "center";
            ctx.fillStyle = "white";
            ctx.strokeStyle = "black";
            ctx.font = "italic " + Math.max(Math.floor(pw/1.5), 12) + "px Arial";
            let fw = ctx.measureText(s.name).width,
                fh = parseInt(ctx.font);
            ctx.fillText(s.name, rx, ry);
            ctx.restore();
        }
        for(let x=view_x; x<=view_x2; ++x){
          for(let y=view_y; y<=view_y2; ++y){
            let px = Math.floor(pw*x - view[0]), 
                py = Math.floor(ph*y - view[1]);
            if(streamer_matrix[x] == null || streamer_matrix[x][y] == null)
              continue;
            let s = streamer_matrix[x][y];
            if(!(s == hovered || s.highlight)) {
              if(s.average_viewer_count >= 10000) {
                if(s.is_streaming){
                  if(sprites.city.complete)
                    ctx.drawImage(sprites.city, px, py, pw, ph);
                }
                else {
                  if(sprites.city_night.complete)
                    ctx.drawImage(sprites.city_night, px, py, pw, ph);
                }
              }
              else if(s.average_viewer_count >= 1000) {
                if(s.is_streaming){
                  if(sprites.castle.complete)
                    ctx.drawImage(sprites.castle, px+pw*0.2, py+ph*0.2, pw*0.6, ph*0.6);
                }
                else {
                  if(sprites.castle_night.complete)
                    ctx.drawImage(sprites.castle_night, px+pw*0.2, py+ph*0.2, pw*0.6, ph*0.6);
                }
              }
              else if(s.average_viewer_count >= 100) {
                if(s.is_streaming){
                  if(sprites.town.complete)
                    ctx.drawImage(sprites.town, px+pw*0.2, py+ph*0.2, pw*0.6, ph*0.6);
                }
                else {
                  if(sprites.town_night.complete)
                    ctx.drawImage(sprites.town_night, px+pw*0.2, py+ph*0.2, pw*0.6, ph*0.6);
                }
              }
              /*else {
                if(s.is_streaming) {
                  ctx.fillStyle = "#fffe00";
                  ctx.beginPath();
                  ctx.arc(px + pw*0.5, py + ph*0.5, pw*0.05, 0, Math.PI*2);
                  ctx.fill();
                }
              }*/
              if(s.is_streaming && s.chatting_speed >= 5){
                if(sprites.fire.complete){
                  ctx.globalAlpha = 0.5;
                  ctx.drawImage(sprites.fire, px + pw*0.2, py+ph*0.2, pw*0.6, ph*0.6);
                  ctx.globalAlpha = 1.0;
                }
              }
              if(!s.is_streaming){
                ctx.globalAlpha = 0.3;
                ctx.fillStyle = "#000";
                ctx.fillRect(px, py, pw, ph);
                ctx.globalAlpha = 1.0;
              }
            }
          }
        }
      }
      if(hovered) {
        ctx.save();
        let s = hovered;
        let px = pw*s.x - view[0], 
          py = ph*s.y - view[1];
        if(s.image.src && s.image.complete && s.image.naturalWidth > 0)
          ctx.drawImage(s.image, px, py, pw, ph);
        else {
          if(!s.image.src) 
            s.image.src = s.profile_image_url;
          ctx.fillStyle = "#CDA8C7";
          ctx.fillText("로딩중", px + pw*0.5, py); 
        }
        ctx.restore();
      }
      for(let i=0, l=searched.length; i<l; ++i) {
        ctx.save();
        let s = searched[i];
        let px = pw*s.x - view[0], 
          py = ph*s.y - view[1];
        if(s.image.src && s.image.complete && s.image.naturalWidth > 0)
          ctx.drawImage(s.image, px, py, pw, ph);
        else {
          if(!s.image.src) 
            s.image.src = s.profile_image_url;
          ctx.fillStyle = "#CDA8C7";
          ctx.fillText("로딩중", px + pw*0.5, py); 
        }
        ctx.restore();
        if(s == hovered){
          searched.splice(i, 1);
          i -= 1;
          l -= 1;
          s.highlight = false;
        }
        if(frame_index%10 > 5){
          ctx.save();
          ctx.globalAlpha = 0.5;
          ctx.fillStyle = "#d4af37";
          ctx.fillRect(px + border_width, py+border_width, pw - 2*border_width, ph - 2*border_width);
          ctx.globalAlpha = 1.0;
          ctx.restore();
        }
      }
    }
    for(let x=view_x; x<=view_x2; ++x){
      for(let y=view_y; y<=view_y2; ++y){
        let px = Math.floor(pw*x - view[0]), 
            py = Math.floor(ph*y - view[1]);
        if(streamer_matrix[x] == null || streamer_matrix[x][y] == null)
          continue;
        let s = streamer_matrix[x][y];
        /*
        if(!s.is_streaming){
          ctx.save();
          ctx.globalAlpha = 0.2;
          ctx.fillStyle = "#000";
          ctx.fillRect(px, py, pw, ph);
          ctx.restore();
        } else{
          ctx.save();
          ctx.globalAlpha = 0.2;
          ctx.fillStyle = "#fff";
          ctx.fillRect(px, py, pw, ph);
          ctx.restore();
        }*/
        {
          ctx.save();
          if(hovered && hovered.cluster == s.cluster) 
            ctx.globalAlpha = Math.abs(Math.sin(frame_index/20));
          ctx.fillStyle = Patterns[s.cluster];
          if(s.left_edge){
            let y=py, y2=py+ph;
            if(!s.bottom_edge)
              y2 += border_width;
            if(!s.top_edge)
              y -= border_width;
            ctx.fillRect(
                px,
                y,
                border_width, y2-y);
          }
          if(s.right_edge){
            let y=py, y2=py+ph;
            if(!s.bottom_edge)
              y2 += border_width;
            if(!s.top_edge)
              y -= border_width;
            ctx.fillRect(
                px + pw - border_width,
                y, 
                border_width, y2-y);
          }
          if(s.top_edge){
            let x=px, x2=px + pw;
            if(!s.right_edge)
              x2 += border_width;
            if(!s.left_edge)
              x -= border_width;
            ctx.fillRect(
                x, 
                py,
                x2-x, border_width);
          }
          if(s.bottom_edge){
            let x=px, x2=px+pw;
            if(!s.right_edge)
              x2 += border_width;
            if(!s.left_edge)
              x -= border_width;
            ctx.fillRect(
                x, 
                py + ph - border_width,
                x2-x, border_width);
          }
          ctx.restore();
        }
      }
    }
    if(pw < 64 || ph < 64) {
      for(let x=view_x; x<=view_x2; ++x){
        for(let y=view_y; y<=view_y2; ++y){
          let px = Math.floor(pw*x - view[0]), 
              py = Math.floor(ph*y - view[1]);
          if(streamer_matrix[x] == null || streamer_matrix[x][y] == null)
            continue;
          let s = streamer_matrix[x][y];
          if(hovered == s) {
            ctx.save();
            ctx.globalAlpha = 0.7;
            ctx.fillStyle = "#fff";
            let fh = parseInt(ctx.font),
                fw = ctx.measureText(s.name).width;
            ctx.fillRect(px + pw*0.5 - fw*0.5, py+ph, fw, fh);
            ctx.globalAlpha = 1.0;
            ctx.fillStyle = "#000";
            ctx.fillText(s.name, px+pw*0.5, py+ph);
            ctx.restore();
          }
        }
      }
      for(let s of representor_of_cluster) {
          let rx = pw*s.representation_x - view[0] + pw*0.5 + (camera[0] - 0.5)*pw,
              ry = ph*s.representation_y - view[1] + ph*0.5 + (camera[1] - 0.5)*ph;
          let px = pw*s.x - view[0], 
              py = ph*s.y - view[1];
          ctx.save();
          ctx.globalAlpha = 0.7;
          ctx.textBaseline = "middle";
          ctx.textAlign = "center";
          ctx.fillStyle = "white";
          ctx.strokeStyle = "black";
          //ctx.font = "italic 14px Arial";
          //ctx.font = "italic " + Math.max(Math.floor(pw/2), 12) + "px Arial";
          ctx.font = "italic " + Math.max(Math.floor(pw/1.5), 12) + "px Arial";
          let fw = ctx.measureText(s.name).width,
              fh = parseInt(ctx.font);
          /*rx = rx - fw*0.5 < 0? fw*0.5: 
               (rx + fw*0.5 >= canvas.width? canvas.width - fw*0.5 : rx),
          ry = ry - fh*0.5 < 0? fh*0.5: 
               (ry + fh*0.5 >= canvas.height? canvas.height - fh*0.5 : ry);*/
          //ctx.lineWidth = 5;
          //ctx.strokeText(s.name, rx, ry);
          ctx.fillText(s.name, rx, ry);
          ctx.globalAlpha = 0.5;
          ctx.fillText(s.name, rx, ry);
          ctx.restore();
      }
    }
    frame_index += 1;
  }());
  return ()=>{
    cancelAnimationFrame(frame);
  }
});
onDestroy(()=>{
  if(frame) {
    cancelAnimationFrame(frame);
    frame = null;
  }
});
/*
        let fh = parseInt(ctx.font);
        ctx.globalAlpha = 0.7;
        ctx.fillStyle = "#fff";
        ctx.fillRect(px + border_width, py+ph - border_width - fh, pw - 2*border_width, fh);
        ctx.globalAlpha = 1.0;
        ctx.fillStyle = "#000";
        ctx.fillText(s.name, px + border_width*0.5, py + ph - border_width - fh);
      }
    }
  }());
  return ()=>{
    cancelAnimationFrame(frame);
  }
});
*/

	if ($$props.streamers === void 0 && $$bindings.streamers && streamers !== void 0) $$bindings.streamers(streamers);
	if ($$props.interest_streamer === void 0 && $$bindings.interest_streamer && interest_streamer !== void 0) $$bindings.interest_streamer(interest_streamer);

	$$result.css.add(css$f);

	let $$settled;
	let $$rendered;

	do {
		$$settled = true;

		$$rendered = `${($$result.head += `<title>트수gg - 스트리머 지도</title>`, "")}

		${validate_component(Modal, 'Modal').$$render($$result, {}, {}, {
			default: () => `
		  <div class="p-6 flex flex-col bg-gray-200 text-gray-600">
		    <div class="pt-2"> 조작법 </div>
		    <div class="text-sm pl-2">
		      <div>
		        <svg area-hidden="true" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 ${escape$1(faMouse_2.icon[0])} ${escape$1(faMouse_2.icon[1])}" class="w-3 h-3 mr-1 overflow-visible inline-block">
		          <path fill="currentColor"${add_attribute("d", faMouse_2.icon[4], 0)}></path>
		        </svg>
		        휠/드래그/더블클릭
		      </div>
		      <div>
		        <svg area-hidden="true" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 ${escape$1(faMobileAlt_2.icon[0])} ${escape$1(faMobileAlt_2.icon[1])}" class="w-3 h-3 mr-1 overflow-visible inline-block">
		          <path fill="currentColor"${add_attribute("d", faMobileAlt_2.icon[4], 0)}></path>
		        </svg>
		        확대,드래그제스처/더블탭
		      </div>
		    </div>
		    <div class="pt-2"> 개요 </div>
		    <div class="text-sm pl-2">
		      <div>
		        - 타일 한 칸은 스트리머 한 명을 의미합니다.
		      </div>
		      <div>
		        - 거리가 가까운 스트리머는 서로 비슷할 확률이 높습니다.
		      </div>
		      <div>
		        - 유의미하게 비슷한 스트리머 집단은 국가로 구분지어 표시됩니다.
		      </div>
		      <div>
		        - 국가의 이름은 국가 전체의 성격을 가장 잘 나타내는 스트리머의 이름으로 표시됩니다.
		      </div>
		      <div>
		        - 국가에 포함되지 않은 스트리머는 분쟁지역이거나 도시국가입니다.
		      </div>
		      <div>
		        - 지도의 형태와 스트리머들의 위치는 계산 결과에 따라 수시로 바뀔수있습니다.
		      </div>
		    </div>
		    <div class="pt-2"> 범례 </div>
		    <div class="text-sm pl-2">
		      <div class="align-middle mb-1">
		        ${ sprites.town_night ? `<img${add_attribute("src", sprites.town_night.src, 0)} class="w-6 h-6 inline">` : `` }
		        100따리
		      </div>
		      <div class="align-middle mb-1">
		        ${ sprites.castle_night ? `<img${add_attribute("src", sprites.castle_night.src, 0)} class="w-6 h-6 inline">` : `` }
		        1000따리
		      </div>
		      <div class="align-middle mb-1">
		        ${ sprites.city_night ? `<img${add_attribute("src", sprites.city_night.src, 0)} class="w-6 h-6 inline">` : `` }
		        10000따리
		      </div>
		      <div class="mb-1">
		        ${ sprites.town && sprites.castle && sprites.city ? `<img${add_attribute("src", sprites.town.src, 0)} class="w-6 h-6 inline">
		          <img${add_attribute("src", sprites.castle.src, 0)} class="w-6 h-6 inline">
		          <img${add_attribute("src", sprites.city.src, 0)} class="w-6 h-6 inline">` : `` }
		        방송중
		      </div>
		      <div class="align-middle mb-1">
		        ${ sprites.fire ? `<img${add_attribute("src", sprites.fire.src, 0)} class="w-6 h-6 inline">` : `` }
		        채팅창 불남
		      </div>
		    </div>
		  </div>
		  
		`
		})}

		<div>
		<div class="fixed p-6 text-white md:block flex flex-row justify-between w-full md:w-auto">
		  <div>
		    <h2 class="inline-block text-2xl md:text-3xl">
		      스트리머 지도
		    </h2>
		    ${validate_component(Tip, 'Tip').$$render($$result, { click: tip_click }, {}, {
			default: () => `
		      `,
			tip: () => `<span slot="tip"> 클릭하여 설명열기</span>
		    `
		})}
		  </div> 
		  ${validate_component(StreamerAutoComplete, 'StreamerAutoComplete').$$render($$result, {
			streamers: streamers,
			placeholder: "지도에서 찾기",
			input_class: "bg-transparent border border-white text-sm md:w-40 w-32 p-2 md:mt-4 placeholder-white focus:bg-gray-600 transition-all transition-100",
			icon: "false",
			id: "streamer-map",
			selected: search
		}, {
			selected: $$value => { search = $$value; $$settled = false; }
		}, {})}
		</div>
		<div class="overflow-x-auto canvas-container svelte-jpbj">
		  <canvas class="w-full h-full canvas svelte-jpbj"${add_attribute("this", canvas, 1)}> </canvas>
		</div>
		</div>
		`;
	} while (!$$settled);

	return $$rendered;
});

var faMap = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, '__esModule', { value: true });
var prefix = 'fas';
var iconName = 'map';
var width = 576;
var height = 512;
var ligatures = [];
var unicode = 'f279';
var svgPathData = 'M0 117.66v346.32c0 11.32 11.43 19.06 21.94 14.86L160 416V32L20.12 87.95A32.006 32.006 0 0 0 0 117.66zM192 416l192 64V96L192 32v384zM554.06 33.16L416 96v384l139.88-55.95A31.996 31.996 0 0 0 576 394.34V48.02c0-11.32-11.43-19.06-21.94-14.86z';

exports.definition = {
  prefix: prefix,
  iconName: iconName,
  icon: [
    width,
    height,
    ligatures,
    unicode,
    svgPathData
  ]};

exports.faMap = exports.definition;
exports.prefix = prefix;
exports.iconName = iconName;
exports.width = width;
exports.height = height;
exports.ligatures = ligatures;
exports.unicode = unicode;
exports.svgPathData = svgPathData;
});

unwrapExports(faMap);
var faMap_1 = faMap.definition;
var faMap_2 = faMap.faMap;
var faMap_3 = faMap.prefix;
var faMap_4 = faMap.iconName;
var faMap_5 = faMap.width;
var faMap_6 = faMap.height;
var faMap_7 = faMap.ligatures;
var faMap_8 = faMap.unicode;
var faMap_9 = faMap.svgPathData;

/* src/components/Navigation.svelte generated by Svelte v3.12.1 */

const css$g = {
	code: ".current-link.svelte-1qklf6m{border-bottom-color:#CDA8C7;color:#CDA8C7}.title.svelte-1qklf6m{}.title-container.svelte-1qklf6m{margin-top:0;margin-bottom:0;margin-left:0.5rem;margin-right:0;text-shadow:3px 3px 0 #CDA8C7, -1px -1px 0 #CDA8C7, 1px -1px 0 #CDA8C7, -1px 1px 0 #CDA8C7, 1px 1px 0 #CDA8C7;color:white}.title-container.svelte-1qklf6m:hover{margin-top:-3px;margin-left:calc(0.5rem - 3px);margin-right:3px;margin-bottom:3px;text-shadow:6px 6px 1px #CDA8C7, -1px -1px 0 #CDA8C7, 1px -1px 0 #CDA8C7, -1px 1px 0 #CDA8C7, 1px 1px 0 #CDA8C7}.title.svelte-1qklf6m:hover{}",
	map: "{\"version\":3,\"file\":\"Navigation.svelte\",\"sources\":[\"Navigation.svelte\"],\"sourcesContent\":[\"<script>\\nimport StreamerAutoComplete from \\\"./StreamerAutoComplete.svelte\\\";\\nimport { faMap } from '@fortawesome/free-solid-svg-icons/faMap'\\nimport { faExchangeAlt } from '@fortawesome/free-solid-svg-icons/faExchangeAlt'\\nconst pages = [\\n    {segment: \\\"map\\\", name: \\\"지도\\\", icon: faMap},\\n    {segment: \\\"migration\\\", name: \\\"시청자 이동\\\", icon: faExchangeAlt},\\n    /*{segment: \\\"straw\\\", name: \\\"빨대\\\"},*/\\n  ];\\n\\nexport let segment;\\n\\nfunction on_streamer_search(target) {\\n  window.location.pathname = \\\"/streamer/\\\" + target.id;\\n}\\nconsole.log(\\\"segment\\\", segment);\\n</script>\\n\\n<nav class=\\\"bg-white w-full relative z-40 shadow\\\" role=\\\"navigation\\\">\\n  <div class=\\\"container flex flex-row flex-wrap justify-between items-center m-auto\\\">\\n    <div class=\\\"flex flex-row items-center flex-wrap md:justify-start justify-between w-full\\\">\\n      <div class=\\\"flex flex-row items-center\\\">\\n        <a href=\\\"/\\\" class=\\\"title-container transition-all transition-100 text-xl font-bold tracking-wider\\\">\\n          <span class=\\\"pl-2\\\">트수 gg </span>\\n        </a> \\n        <div class=\\\"flex overflow-hidden\\\">\\n          {#each pages as page}\\n            <a class=\\\"hidden md:inline-block py-3 ml-8 -mb-px no-underline border-3 text-lg border-transparent\\\" href=\\\"/{page.segment}\\\" \\n              class:current-link=\\\"{segment === page.segment}\\\">\\n              {page.name}</a> \\n            <a class=\\\"md:hidden inline-block py-3 ml-8 -mb-px no-underline border-3 text-gray-600 text-sm border-transparent\\\" href=\\\"/{page.segment}\\\"\\n              class:current-link=\\\"{segment === page.segment}\\\"> \\n              <svg area-hidden=\\\"true\\\" role=\\\"img\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 {page.icon.icon[0]} {page.icon.icon[1]}\\\" class=\\\"w-6 h-6 overflow-visible inline-block\\\">\\n                <path fill=\\\"currentColor\\\" d=\\\"{page.icon.icon[4]}\\\"/>\\n              </svg>\\n            </a> \\n          {/each}\\n        </div>\\n      </div>\\n      {#if segment != null}\\n        <div class=\\\"flex items-center -mb-px border-3 border-transparent {\\\"streamer\\\" === segment? 'border-b-primary-600 text-primary-600' : ''}\\\">\\n          <label \\n            class=\\\"py-3 ml-6 text-lg hidden md:inline\\\"\\n            for=\\\"streamer-search-input\\\"> \\n            스트리머 \\n          </label>\\n          <StreamerAutoComplete bind:onselect={on_streamer_search} placeholder=\\\"검색\\\" inputid=\\\"streamer-search-input\\\" class=\\\"ml-4\\\" id=\\\"navigation-streamer-search\\\"/>\\n        </div> \\n      {/if}\\n    </div>\\n  </div>\\n</nav>\\n\\n<style>\\n  .current-link {\\n    border-bottom-color: #CDA8C7;\\n    color: #CDA8C7;\\n  }\\n  .title {\\n  }\\n  .title-container {\\n    margin-top: 0;\\n    margin-bottom: 0;\\n    margin-left: 0.5rem;\\n    margin-right: 0;\\n    text-shadow: 3px 3px 0 #CDA8C7, -1px -1px 0 #CDA8C7, 1px -1px 0 #CDA8C7, -1px 1px 0 #CDA8C7, 1px 1px 0 #CDA8C7;\\n    color: white;\\n  }\\n  .title-container:hover {\\n    margin-top: -3px;\\n    margin-left: calc(0.5rem - 3px);\\n    margin-right: 3px;\\n    margin-bottom: 3px;\\n    text-shadow: 6px 6px 1px #CDA8C7, -1px -1px 0 #CDA8C7, 1px -1px 0 #CDA8C7, -1px 1px 0 #CDA8C7, 1px 1px 0 #CDA8C7;\\n  }\\n  .title:hover {\\n  }\\n</style>\\n\"],\"names\":[],\"mappings\":\"AAsDE,aAAa,eAAC,CAAC,AACb,mBAAmB,CAAE,OAAO,CAC5B,KAAK,CAAE,OAAO,AAChB,CAAC,AACD,MAAM,eAAC,CAAC,AACR,CAAC,AACD,gBAAgB,eAAC,CAAC,AAChB,UAAU,CAAE,CAAC,CACb,aAAa,CAAE,CAAC,CAChB,WAAW,CAAE,MAAM,CACnB,YAAY,CAAE,CAAC,CACf,WAAW,CAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO,CAC9G,KAAK,CAAE,KAAK,AACd,CAAC,AACD,+BAAgB,MAAM,AAAC,CAAC,AACtB,UAAU,CAAE,IAAI,CAChB,WAAW,CAAE,KAAK,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAC/B,YAAY,CAAE,GAAG,CACjB,aAAa,CAAE,GAAG,CAClB,WAAW,CAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO,AAClH,CAAC,AACD,qBAAM,MAAM,AAAC,CAAC,AACd,CAAC\"}"
};

const Navigation = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	
const pages = [
    {segment: "map", name: "지도", icon: faMap_2},
    {segment: "migration", name: "시청자 이동", icon: faExchangeAlt_2},
    /*{segment: "straw", name: "빨대"},*/
  ];

let { segment } = $$props;

function on_streamer_search(target) {
  window.location.pathname = "/streamer/" + target.id;
}
console.log("segment", segment);

	if ($$props.segment === void 0 && $$bindings.segment && segment !== void 0) $$bindings.segment(segment);

	$$result.css.add(css$g);

	let $$settled;
	let $$rendered;

	do {
		$$settled = true;

		$$rendered = `<nav class="bg-white w-full relative z-40 shadow" role="navigation">
		  <div class="container flex flex-row flex-wrap justify-between items-center m-auto">
		    <div class="flex flex-row items-center flex-wrap md:justify-start justify-between w-full">
		      <div class="flex flex-row items-center">
		        <a href="/" class="title-container transition-all transition-100 text-xl font-bold tracking-wider svelte-1qklf6m">
		          <span class="pl-2">트수 gg </span>
		        </a> 
		        <div class="flex overflow-hidden">
		          ${each(pages, (page) => `<a class="${[`hidden md:inline-block py-3 ml-8 -mb-px no-underline border-3 text-lg border-transparent svelte-1qklf6m`, segment === page.segment ? "current-link" : ""].join(' ').trim() }" href="/${escape$1(page.segment)}">
		              ${escape$1(page.name)}</a> 
		            <a class="${[`md:hidden inline-block py-3 ml-8 -mb-px no-underline border-3 text-gray-600 text-sm border-transparent svelte-1qklf6m`, segment === page.segment ? "current-link" : ""].join(' ').trim() }" href="/${escape$1(page.segment)}"> 
		              <svg area-hidden="true" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 ${escape$1(page.icon.icon[0])} ${escape$1(page.icon.icon[1])}" class="w-6 h-6 overflow-visible inline-block">
		                <path fill="currentColor"${add_attribute("d", page.icon.icon[4], 0)}></path>
		              </svg>
		            </a>`)}
		        </div>
		      </div>
		      ${ segment != null ? `<div class="flex items-center -mb-px border-3 border-transparent ${escape$1("streamer" === segment? 'border-b-primary-600 text-primary-600' : '')} svelte-1qklf6m">
		          <label class="py-3 ml-6 text-lg hidden md:inline" for="streamer-search-input"> 
		            스트리머 
		          </label>
		          ${validate_component(StreamerAutoComplete, 'StreamerAutoComplete').$$render($$result, {
			placeholder: "검색",
			inputid: "streamer-search-input",
			class: "ml-4",
			id: "navigation-streamer-search",
			onselect: on_streamer_search
		}, {
			onselect: $$value => { on_streamer_search = $$value; $$settled = false; }
		}, {})}
		        </div>` : `` }
		    </div>
		  </div>
		</nav>`;
	} while (!$$settled);

	return $$rendered;
});

/* src/routes/_layout.svelte generated by Svelte v3.12.1 */

const Layout = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	let { segment } = $$props;

	if ($$props.segment === void 0 && $$bindings.segment && segment !== void 0) $$bindings.segment(segment);

	return `<header>
	  ${validate_component(Navigation, 'Navigation').$$render($$result, { segment: segment }, {}, {})}
	</header>

	<main class="flex-grow">
	  ${$$slots.default ? $$slots.default({}) : ``}
	</main>

	<footer class="w-full bg-primary-600 text-xs text-white py-6 px-2">
	  <div class="container m-auto flex flex-col">
	    <div>
	      <a href="/terms"> 개인정보 처리방침 </a>
	      <span class="ml-2"> 연락처: eunchul.dev@gmail.com </span>
	    </div>
	    <span class="mt-2">
	      TSU.GG isn’t endorsed by official Twitch tv and doesn’t reflect the views or opinions of Twtich tv or anyone officially involved in producing or managing Twitch tv. 
	    </span>
	  </div>
	</footer>`;
});

/* src/routes/_error.svelte generated by Svelte v3.12.1 */

const css$h = {
	code: "h1.svelte-8od9u6,p.svelte-8od9u6{margin:0 auto}h1.svelte-8od9u6{font-size:2.8em;font-weight:700;margin:0 0 0.5em 0}p.svelte-8od9u6{margin:1em auto}@media(min-width: 480px){h1.svelte-8od9u6{font-size:4em}}",
	map: "{\"version\":3,\"file\":\"_error.svelte\",\"sources\":[\"_error.svelte\"],\"sourcesContent\":[\"<script>\\n\\texport let status;\\n\\texport let error;\\n\\n\\tconst dev = \\\"development\\\" === 'development';\\n</script>\\n\\n<style>\\n\\th1, p {\\n\\t\\tmargin: 0 auto;\\n\\t}\\n\\n\\th1 {\\n\\t\\tfont-size: 2.8em;\\n\\t\\tfont-weight: 700;\\n\\t\\tmargin: 0 0 0.5em 0;\\n\\t}\\n\\n\\tp {\\n\\t\\tmargin: 1em auto;\\n\\t}\\n\\n\\t@media (min-width: 480px) {\\n\\t\\th1 {\\n\\t\\t\\tfont-size: 4em;\\n\\t\\t}\\n\\t}\\n</style>\\n\\n<svelte:head>\\n\\t<title>{status}</title>\\n</svelte:head>\\n\\n<h1>{status}</h1>\\n\\n<p>{error.message}</p>\\n\\n{#if dev && error.stack}\\n\\t<pre>{error.stack}</pre>\\n{/if}\\n\"],\"names\":[],\"mappings\":\"AAQC,gBAAE,CAAE,CAAC,cAAC,CAAC,AACN,MAAM,CAAE,CAAC,CAAC,IAAI,AACf,CAAC,AAED,EAAE,cAAC,CAAC,AACH,SAAS,CAAE,KAAK,CAChB,WAAW,CAAE,GAAG,CAChB,MAAM,CAAE,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,AACpB,CAAC,AAED,CAAC,cAAC,CAAC,AACF,MAAM,CAAE,GAAG,CAAC,IAAI,AACjB,CAAC,AAED,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AAC1B,EAAE,cAAC,CAAC,AACH,SAAS,CAAE,GAAG,AACf,CAAC,AACF,CAAC\"}"
};

const Error$1 = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	let { status, error } = $$props;

	if ($$props.status === void 0 && $$bindings.status && status !== void 0) $$bindings.status(status);
	if ($$props.error === void 0 && $$bindings.error && error !== void 0) $$bindings.error(error);

	$$result.css.add(css$h);

	return `${($$result.head += `<title>${escape$1(status)}</title>`, "")}

	<h1 class="svelte-8od9u6">${escape$1(status)}</h1>

	<p class="svelte-8od9u6">${escape$1(error.message)}</p>

	${  error.stack ? `<pre>${escape$1(error.stack)}</pre>` : `` }`;
});

// This file is generated by Sapper — do not edit it!

const d = decodeURIComponent;

const manifest = {
	server_routes: [
		
	],

	pages: [
		{
			// index.svelte
			pattern: /^\/$/,
			parts: [
				{ name: "index", file: "index.svelte", component: Index }
			]
		},

		{
			// hidden-links.svelte
			pattern: /^\/hidden-links\/?$/,
			parts: [
				{ name: "hidden$45links", file: "hidden-links.svelte", component: Hidden_links }
			]
		},

		{
			// migration/index.svelte
			pattern: /^\/migration\/?$/,
			parts: [
				{ name: "migration", file: "migration/index.svelte", component: Index$1, preload: preload }
			]
		},

		{
			// streamer/[id].svelte
			pattern: /^\/streamer\/([^\/]+?)\/?$/,
			parts: [
				null,
				{ name: "streamer_$id", file: "streamer/[id].svelte", component: Id, preload: preload$1, params: match => ({ id: d(match[1]) }) }
			]
		},

		{
			// terms.svelte
			pattern: /^\/terms\/?$/,
			parts: [
				{ name: "terms", file: "terms.svelte", component: Terms }
			]
		},

		{
			// map/index.svelte
			pattern: /^\/map\/?$/,
			parts: [
				{ name: "map", file: "map/index.svelte", component: Index$2, preload: preload$2 }
			]
		}
	],

	root: Layout,
	root_preload: () => {},
	error: Error$1
};

const build_dir = "__sapper__/dev";

const src_dir = "src";

const CONTEXT_KEY = {};

/* src/node_modules/@sapper/internal/App.svelte generated by Svelte v3.12.1 */

const App = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	

	let { stores, error, status, segments, level0, level1 = null } = $$props;

	setContext(CONTEXT_KEY, stores);

	if ($$props.stores === void 0 && $$bindings.stores && stores !== void 0) $$bindings.stores(stores);
	if ($$props.error === void 0 && $$bindings.error && error !== void 0) $$bindings.error(error);
	if ($$props.status === void 0 && $$bindings.status && status !== void 0) $$bindings.status(status);
	if ($$props.segments === void 0 && $$bindings.segments && segments !== void 0) $$bindings.segments(segments);
	if ($$props.level0 === void 0 && $$bindings.level0 && level0 !== void 0) $$bindings.level0(level0);
	if ($$props.level1 === void 0 && $$bindings.level1 && level1 !== void 0) $$bindings.level1(level1);

	return `


	${validate_component(Layout, 'Layout').$$render($$result, Object.assign({ segment: segments[0] }, level0.props), {}, {
		default: () => `
		${ error ? `${validate_component(Error$1, 'Error').$$render($$result, { error: error, status: status }, {}, {})}` : `${validate_component(((level1.component) || missing_component), 'svelte:component').$$render($$result, Object.assign(level1.props), {}, {})}` }
	`
	})}`;
});

function get_server_route_handler(routes) {
	async function handle_route(route, req, res, next) {
		req.params = route.params(route.pattern.exec(req.path));

		const method = req.method.toLowerCase();
		// 'delete' cannot be exported from a module because it is a keyword,
		// so check for 'del' instead
		const method_export = method === 'delete' ? 'del' : method;
		const handle_method = route.handlers[method_export];
		if (handle_method) {
			if (process.env.SAPPER_EXPORT) {
				const { write, end, setHeader } = res;
				const chunks = [];
				const headers = {};

				// intercept data so that it can be exported
				res.write = function(chunk) {
					chunks.push(Buffer.from(chunk));
					write.apply(res, arguments);
				};

				res.setHeader = function(name, value) {
					headers[name.toLowerCase()] = value;
					setHeader.apply(res, arguments);
				};

				res.end = function(chunk) {
					if (chunk) chunks.push(Buffer.from(chunk));
					end.apply(res, arguments);

					process.send({
						__sapper__: true,
						event: 'file',
						url: req.url,
						method: req.method,
						status: res.statusCode,
						type: headers['content-type'],
						body: Buffer.concat(chunks).toString()
					});
				};
			}

			const handle_next = (err) => {
				if (err) {
					res.statusCode = 500;
					res.end(err.message);
				} else {
					process.nextTick(next);
				}
			};

			try {
				await handle_method(req, res, handle_next);
			} catch (err) {
				console.error(err);
				handle_next(err);
			}
		} else {
			// no matching handler for method
			process.nextTick(next);
		}
	}

	return function find_route(req, res, next) {
		for (const route of routes) {
			if (route.pattern.test(req.path)) {
				handle_route(route, req, res, next);
				return;
			}
		}

		next();
	};
}

/*!
 * cookie
 * Copyright(c) 2012-2014 Roman Shtylman
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */

/**
 * Module exports.
 * @public
 */

var parse_1 = parse;
var serialize_1 = serialize;

/**
 * Module variables.
 * @private
 */

var decode$1 = decodeURIComponent;
var encode$1 = encodeURIComponent;
var pairSplitRegExp = /; */;

/**
 * RegExp to match field-content in RFC 7230 sec 3.2
 *
 * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]
 * field-vchar   = VCHAR / obs-text
 * obs-text      = %x80-FF
 */

var fieldContentRegExp = /^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;

/**
 * Parse a cookie header.
 *
 * Parse the given cookie header string into an object
 * The object has the various cookies as keys(names) => values
 *
 * @param {string} str
 * @param {object} [options]
 * @return {object}
 * @public
 */

function parse(str, options) {
  if (typeof str !== 'string') {
    throw new TypeError('argument str must be a string');
  }

  var obj = {};
  var opt = options || {};
  var pairs = str.split(pairSplitRegExp);
  var dec = opt.decode || decode$1;

  for (var i = 0; i < pairs.length; i++) {
    var pair = pairs[i];
    var eq_idx = pair.indexOf('=');

    // skip things that don't look like key=value
    if (eq_idx < 0) {
      continue;
    }

    var key = pair.substr(0, eq_idx).trim();
    var val = pair.substr(++eq_idx, pair.length).trim();

    // quoted values
    if ('"' == val[0]) {
      val = val.slice(1, -1);
    }

    // only assign once
    if (undefined == obj[key]) {
      obj[key] = tryDecode(val, dec);
    }
  }

  return obj;
}

/**
 * Serialize data into a cookie header.
 *
 * Serialize the a name value pair into a cookie string suitable for
 * http headers. An optional options object specified cookie parameters.
 *
 * serialize('foo', 'bar', { httpOnly: true })
 *   => "foo=bar; httpOnly"
 *
 * @param {string} name
 * @param {string} val
 * @param {object} [options]
 * @return {string}
 * @public
 */

function serialize(name, val, options) {
  var opt = options || {};
  var enc = opt.encode || encode$1;

  if (typeof enc !== 'function') {
    throw new TypeError('option encode is invalid');
  }

  if (!fieldContentRegExp.test(name)) {
    throw new TypeError('argument name is invalid');
  }

  var value = enc(val);

  if (value && !fieldContentRegExp.test(value)) {
    throw new TypeError('argument val is invalid');
  }

  var str = name + '=' + value;

  if (null != opt.maxAge) {
    var maxAge = opt.maxAge - 0;
    if (isNaN(maxAge)) throw new Error('maxAge should be a Number');
    str += '; Max-Age=' + Math.floor(maxAge);
  }

  if (opt.domain) {
    if (!fieldContentRegExp.test(opt.domain)) {
      throw new TypeError('option domain is invalid');
    }

    str += '; Domain=' + opt.domain;
  }

  if (opt.path) {
    if (!fieldContentRegExp.test(opt.path)) {
      throw new TypeError('option path is invalid');
    }

    str += '; Path=' + opt.path;
  }

  if (opt.expires) {
    if (typeof opt.expires.toUTCString !== 'function') {
      throw new TypeError('option expires is invalid');
    }

    str += '; Expires=' + opt.expires.toUTCString();
  }

  if (opt.httpOnly) {
    str += '; HttpOnly';
  }

  if (opt.secure) {
    str += '; Secure';
  }

  if (opt.sameSite) {
    var sameSite = typeof opt.sameSite === 'string'
      ? opt.sameSite.toLowerCase() : opt.sameSite;

    switch (sameSite) {
      case true:
        str += '; SameSite=Strict';
        break;
      case 'lax':
        str += '; SameSite=Lax';
        break;
      case 'strict':
        str += '; SameSite=Strict';
        break;
      case 'none':
        str += '; SameSite=None';
        break;
      default:
        throw new TypeError('option sameSite is invalid');
    }
  }

  return str;
}

/**
 * Try decoding a string using a decoding function.
 *
 * @param {string} str
 * @param {function} decode
 * @private
 */

function tryDecode(str, decode) {
  try {
    return decode(str);
  } catch (e) {
    return str;
  }
}

var cookie = {
	parse: parse_1,
	serialize: serialize_1
};

var chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_$';
var unsafeChars = /[<>\b\f\n\r\t\0\u2028\u2029]/g;
var reserved = /^(?:do|if|in|for|int|let|new|try|var|byte|case|char|else|enum|goto|long|this|void|with|await|break|catch|class|const|final|float|short|super|throw|while|yield|delete|double|export|import|native|return|switch|throws|typeof|boolean|default|extends|finally|package|private|abstract|continue|debugger|function|volatile|interface|protected|transient|implements|instanceof|synchronized)$/;
var escaped$1 = {
    '<': '\\u003C',
    '>': '\\u003E',
    '/': '\\u002F',
    '\\': '\\\\',
    '\b': '\\b',
    '\f': '\\f',
    '\n': '\\n',
    '\r': '\\r',
    '\t': '\\t',
    '\0': '\\0',
    '\u2028': '\\u2028',
    '\u2029': '\\u2029'
};
var objectProtoOwnPropertyNames = Object.getOwnPropertyNames(Object.prototype).sort().join('\0');
function devalue(value) {
    var counts = new Map();
    function walk(thing) {
        if (typeof thing === 'function') {
            throw new Error("Cannot stringify a function");
        }
        if (counts.has(thing)) {
            counts.set(thing, counts.get(thing) + 1);
            return;
        }
        counts.set(thing, 1);
        if (!isPrimitive(thing)) {
            var type = getType(thing);
            switch (type) {
                case 'Number':
                case 'String':
                case 'Boolean':
                case 'Date':
                case 'RegExp':
                    return;
                case 'Array':
                    thing.forEach(walk);
                    break;
                case 'Set':
                case 'Map':
                    Array.from(thing).forEach(walk);
                    break;
                default:
                    var proto = Object.getPrototypeOf(thing);
                    if (proto !== Object.prototype &&
                        proto !== null &&
                        Object.getOwnPropertyNames(proto).sort().join('\0') !== objectProtoOwnPropertyNames) {
                        throw new Error("Cannot stringify arbitrary non-POJOs");
                    }
                    if (Object.getOwnPropertySymbols(thing).length > 0) {
                        throw new Error("Cannot stringify POJOs with symbolic keys");
                    }
                    Object.keys(thing).forEach(function (key) { return walk(thing[key]); });
            }
        }
    }
    walk(value);
    var names = new Map();
    Array.from(counts)
        .filter(function (entry) { return entry[1] > 1; })
        .sort(function (a, b) { return b[1] - a[1]; })
        .forEach(function (entry, i) {
        names.set(entry[0], getName(i));
    });
    function stringify(thing) {
        if (names.has(thing)) {
            return names.get(thing);
        }
        if (isPrimitive(thing)) {
            return stringifyPrimitive(thing);
        }
        var type = getType(thing);
        switch (type) {
            case 'Number':
            case 'String':
            case 'Boolean':
                return "Object(" + stringify(thing.valueOf()) + ")";
            case 'RegExp':
                return thing.toString();
            case 'Date':
                return "new Date(" + thing.getTime() + ")";
            case 'Array':
                var members = thing.map(function (v, i) { return i in thing ? stringify(v) : ''; });
                var tail = thing.length === 0 || (thing.length - 1 in thing) ? '' : ',';
                return "[" + members.join(',') + tail + "]";
            case 'Set':
            case 'Map':
                return "new " + type + "([" + Array.from(thing).map(stringify).join(',') + "])";
            default:
                var obj = "{" + Object.keys(thing).map(function (key) { return safeKey(key) + ":" + stringify(thing[key]); }).join(',') + "}";
                var proto = Object.getPrototypeOf(thing);
                if (proto === null) {
                    return Object.keys(thing).length > 0
                        ? "Object.assign(Object.create(null)," + obj + ")"
                        : "Object.create(null)";
                }
                return obj;
        }
    }
    var str = stringify(value);
    if (names.size) {
        var params_1 = [];
        var statements_1 = [];
        var values_1 = [];
        names.forEach(function (name, thing) {
            params_1.push(name);
            if (isPrimitive(thing)) {
                values_1.push(stringifyPrimitive(thing));
                return;
            }
            var type = getType(thing);
            switch (type) {
                case 'Number':
                case 'String':
                case 'Boolean':
                    values_1.push("Object(" + stringify(thing.valueOf()) + ")");
                    break;
                case 'RegExp':
                    values_1.push(thing.toString());
                    break;
                case 'Date':
                    values_1.push("new Date(" + thing.getTime() + ")");
                    break;
                case 'Array':
                    values_1.push("Array(" + thing.length + ")");
                    thing.forEach(function (v, i) {
                        statements_1.push(name + "[" + i + "]=" + stringify(v));
                    });
                    break;
                case 'Set':
                    values_1.push("new Set");
                    statements_1.push(name + "." + Array.from(thing).map(function (v) { return "add(" + stringify(v) + ")"; }).join('.'));
                    break;
                case 'Map':
                    values_1.push("new Map");
                    statements_1.push(name + "." + Array.from(thing).map(function (_a) {
                        var k = _a[0], v = _a[1];
                        return "set(" + stringify(k) + ", " + stringify(v) + ")";
                    }).join('.'));
                    break;
                default:
                    values_1.push(Object.getPrototypeOf(thing) === null ? 'Object.create(null)' : '{}');
                    Object.keys(thing).forEach(function (key) {
                        statements_1.push("" + name + safeProp(key) + "=" + stringify(thing[key]));
                    });
            }
        });
        statements_1.push("return " + str);
        return "(function(" + params_1.join(',') + "){" + statements_1.join(';') + "}(" + values_1.join(',') + "))";
    }
    else {
        return str;
    }
}
function getName(num) {
    var name = '';
    do {
        name = chars[num % chars.length] + name;
        num = ~~(num / chars.length) - 1;
    } while (num >= 0);
    return reserved.test(name) ? name + "_" : name;
}
function isPrimitive(thing) {
    return Object(thing) !== thing;
}
function stringifyPrimitive(thing) {
    if (typeof thing === 'string')
        return stringifyString(thing);
    if (thing === void 0)
        return 'void 0';
    if (thing === 0 && 1 / thing < 0)
        return '-0';
    var str = String(thing);
    if (typeof thing === 'number')
        return str.replace(/^(-)?0\./, '$1.');
    return str;
}
function getType(thing) {
    return Object.prototype.toString.call(thing).slice(8, -1);
}
function escapeUnsafeChar(c) {
    return escaped$1[c] || c;
}
function escapeUnsafeChars(str) {
    return str.replace(unsafeChars, escapeUnsafeChar);
}
function safeKey(key) {
    return /^[_$a-zA-Z][_$a-zA-Z0-9]*$/.test(key) ? key : escapeUnsafeChars(JSON.stringify(key));
}
function safeProp(key) {
    return /^[_$a-zA-Z][_$a-zA-Z0-9]*$/.test(key) ? "." + key : "[" + escapeUnsafeChars(JSON.stringify(key)) + "]";
}
function stringifyString(str) {
    var result = '"';
    for (var i = 0; i < str.length; i += 1) {
        var char = str.charAt(i);
        var code = char.charCodeAt(0);
        if (char === '"') {
            result += '\\"';
        }
        else if (char in escaped$1) {
            result += escaped$1[char];
        }
        else if (code >= 0xd800 && code <= 0xdfff) {
            var next = str.charCodeAt(i + 1);
            // If this is the beginning of a [high, low] surrogate pair,
            // add the next two characters, otherwise escape
            if (code <= 0xdbff && (next >= 0xdc00 && next <= 0xdfff)) {
                result += char + str[++i];
            }
            else {
                result += "\\u" + code.toString(16).toUpperCase();
            }
        }
        else {
            result += char;
        }
    }
    result += '"';
    return result;
}

// Based on https://github.com/tmpvar/jsdom/blob/aa85b2abf07766ff7bf5c1f6daafb3726f2f2db5/lib/jsdom/living/blob.js

// fix for "Readable" isn't a named export issue
const Readable = Stream.Readable;

const BUFFER = Symbol('buffer');
const TYPE = Symbol('type');

class Blob {
	constructor() {
		this[TYPE] = '';

		const blobParts = arguments[0];
		const options = arguments[1];

		const buffers = [];
		let size = 0;

		if (blobParts) {
			const a = blobParts;
			const length = Number(a.length);
			for (let i = 0; i < length; i++) {
				const element = a[i];
				let buffer;
				if (element instanceof Buffer) {
					buffer = element;
				} else if (ArrayBuffer.isView(element)) {
					buffer = Buffer.from(element.buffer, element.byteOffset, element.byteLength);
				} else if (element instanceof ArrayBuffer) {
					buffer = Buffer.from(element);
				} else if (element instanceof Blob) {
					buffer = element[BUFFER];
				} else {
					buffer = Buffer.from(typeof element === 'string' ? element : String(element));
				}
				size += buffer.length;
				buffers.push(buffer);
			}
		}

		this[BUFFER] = Buffer.concat(buffers);

		let type = options && options.type !== undefined && String(options.type).toLowerCase();
		if (type && !/[^\u0020-\u007E]/.test(type)) {
			this[TYPE] = type;
		}
	}
	get size() {
		return this[BUFFER].length;
	}
	get type() {
		return this[TYPE];
	}
	text() {
		return Promise.resolve(this[BUFFER].toString());
	}
	arrayBuffer() {
		const buf = this[BUFFER];
		const ab = buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
		return Promise.resolve(ab);
	}
	stream() {
		const readable = new Readable();
		readable._read = function () {};
		readable.push(this[BUFFER]);
		readable.push(null);
		return readable;
	}
	toString() {
		return '[object Blob]';
	}
	slice() {
		const size = this.size;

		const start = arguments[0];
		const end = arguments[1];
		let relativeStart, relativeEnd;
		if (start === undefined) {
			relativeStart = 0;
		} else if (start < 0) {
			relativeStart = Math.max(size + start, 0);
		} else {
			relativeStart = Math.min(start, size);
		}
		if (end === undefined) {
			relativeEnd = size;
		} else if (end < 0) {
			relativeEnd = Math.max(size + end, 0);
		} else {
			relativeEnd = Math.min(end, size);
		}
		const span = Math.max(relativeEnd - relativeStart, 0);

		const buffer = this[BUFFER];
		const slicedBuffer = buffer.slice(relativeStart, relativeStart + span);
		const blob = new Blob([], { type: arguments[2] });
		blob[BUFFER] = slicedBuffer;
		return blob;
	}
}

Object.defineProperties(Blob.prototype, {
	size: { enumerable: true },
	type: { enumerable: true },
	slice: { enumerable: true }
});

Object.defineProperty(Blob.prototype, Symbol.toStringTag, {
	value: 'Blob',
	writable: false,
	enumerable: false,
	configurable: true
});

/**
 * fetch-error.js
 *
 * FetchError interface for operational errors
 */

/**
 * Create FetchError instance
 *
 * @param   String      message      Error message for human
 * @param   String      type         Error type for machine
 * @param   String      systemError  For Node.js system error
 * @return  FetchError
 */
function FetchError(message, type, systemError) {
  Error.call(this, message);

  this.message = message;
  this.type = type;

  // when err.type is `system`, err.code contains system error code
  if (systemError) {
    this.code = this.errno = systemError.code;
  }

  // hide custom error implementation details from end-users
  Error.captureStackTrace(this, this.constructor);
}

FetchError.prototype = Object.create(Error.prototype);
FetchError.prototype.constructor = FetchError;
FetchError.prototype.name = 'FetchError';

let convert;
try {
	convert = require('encoding').convert;
} catch (e) {}

const INTERNALS = Symbol('Body internals');

// fix an issue where "PassThrough" isn't a named export for node <10
const PassThrough = Stream.PassThrough;

/**
 * Body mixin
 *
 * Ref: https://fetch.spec.whatwg.org/#body
 *
 * @param   Stream  body  Readable stream
 * @param   Object  opts  Response options
 * @return  Void
 */
function Body(body) {
	var _this = this;

	var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
	    _ref$size = _ref.size;

	let size = _ref$size === undefined ? 0 : _ref$size;
	var _ref$timeout = _ref.timeout;
	let timeout = _ref$timeout === undefined ? 0 : _ref$timeout;

	if (body == null) {
		// body is undefined or null
		body = null;
	} else if (isURLSearchParams(body)) {
		// body is a URLSearchParams
		body = Buffer.from(body.toString());
	} else if (isBlob(body)) ; else if (Buffer.isBuffer(body)) ; else if (Object.prototype.toString.call(body) === '[object ArrayBuffer]') {
		// body is ArrayBuffer
		body = Buffer.from(body);
	} else if (ArrayBuffer.isView(body)) {
		// body is ArrayBufferView
		body = Buffer.from(body.buffer, body.byteOffset, body.byteLength);
	} else if (body instanceof Stream) ; else {
		// none of the above
		// coerce to string then buffer
		body = Buffer.from(String(body));
	}
	this[INTERNALS] = {
		body,
		disturbed: false,
		error: null
	};
	this.size = size;
	this.timeout = timeout;

	if (body instanceof Stream) {
		body.on('error', function (err) {
			const error = err.name === 'AbortError' ? err : new FetchError(`Invalid response body while trying to fetch ${_this.url}: ${err.message}`, 'system', err);
			_this[INTERNALS].error = error;
		});
	}
}

Body.prototype = {
	get body() {
		return this[INTERNALS].body;
	},

	get bodyUsed() {
		return this[INTERNALS].disturbed;
	},

	/**
  * Decode response as ArrayBuffer
  *
  * @return  Promise
  */
	arrayBuffer() {
		return consumeBody.call(this).then(function (buf) {
			return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
		});
	},

	/**
  * Return raw response as Blob
  *
  * @return Promise
  */
	blob() {
		let ct = this.headers && this.headers.get('content-type') || '';
		return consumeBody.call(this).then(function (buf) {
			return Object.assign(
			// Prevent copying
			new Blob([], {
				type: ct.toLowerCase()
			}), {
				[BUFFER]: buf
			});
		});
	},

	/**
  * Decode response as json
  *
  * @return  Promise
  */
	json() {
		var _this2 = this;

		return consumeBody.call(this).then(function (buffer) {
			try {
				return JSON.parse(buffer.toString());
			} catch (err) {
				return Body.Promise.reject(new FetchError(`invalid json response body at ${_this2.url} reason: ${err.message}`, 'invalid-json'));
			}
		});
	},

	/**
  * Decode response as text
  *
  * @return  Promise
  */
	text() {
		return consumeBody.call(this).then(function (buffer) {
			return buffer.toString();
		});
	},

	/**
  * Decode response as buffer (non-spec api)
  *
  * @return  Promise
  */
	buffer() {
		return consumeBody.call(this);
	},

	/**
  * Decode response as text, while automatically detecting the encoding and
  * trying to decode to UTF-8 (non-spec api)
  *
  * @return  Promise
  */
	textConverted() {
		var _this3 = this;

		return consumeBody.call(this).then(function (buffer) {
			return convertBody(buffer, _this3.headers);
		});
	}
};

// In browsers, all properties are enumerable.
Object.defineProperties(Body.prototype, {
	body: { enumerable: true },
	bodyUsed: { enumerable: true },
	arrayBuffer: { enumerable: true },
	blob: { enumerable: true },
	json: { enumerable: true },
	text: { enumerable: true }
});

Body.mixIn = function (proto) {
	for (const name of Object.getOwnPropertyNames(Body.prototype)) {
		// istanbul ignore else: future proof
		if (!(name in proto)) {
			const desc = Object.getOwnPropertyDescriptor(Body.prototype, name);
			Object.defineProperty(proto, name, desc);
		}
	}
};

/**
 * Consume and convert an entire Body to a Buffer.
 *
 * Ref: https://fetch.spec.whatwg.org/#concept-body-consume-body
 *
 * @return  Promise
 */
function consumeBody() {
	var _this4 = this;

	if (this[INTERNALS].disturbed) {
		return Body.Promise.reject(new TypeError(`body used already for: ${this.url}`));
	}

	this[INTERNALS].disturbed = true;

	if (this[INTERNALS].error) {
		return Body.Promise.reject(this[INTERNALS].error);
	}

	let body = this.body;

	// body is null
	if (body === null) {
		return Body.Promise.resolve(Buffer.alloc(0));
	}

	// body is blob
	if (isBlob(body)) {
		body = body.stream();
	}

	// body is buffer
	if (Buffer.isBuffer(body)) {
		return Body.Promise.resolve(body);
	}

	// istanbul ignore if: should never happen
	if (!(body instanceof Stream)) {
		return Body.Promise.resolve(Buffer.alloc(0));
	}

	// body is stream
	// get ready to actually consume the body
	let accum = [];
	let accumBytes = 0;
	let abort = false;

	return new Body.Promise(function (resolve, reject) {
		let resTimeout;

		// allow timeout on slow response body
		if (_this4.timeout) {
			resTimeout = setTimeout(function () {
				abort = true;
				reject(new FetchError(`Response timeout while trying to fetch ${_this4.url} (over ${_this4.timeout}ms)`, 'body-timeout'));
			}, _this4.timeout);
		}

		// handle stream errors
		body.on('error', function (err) {
			if (err.name === 'AbortError') {
				// if the request was aborted, reject with this Error
				abort = true;
				reject(err);
			} else {
				// other errors, such as incorrect content-encoding
				reject(new FetchError(`Invalid response body while trying to fetch ${_this4.url}: ${err.message}`, 'system', err));
			}
		});

		body.on('data', function (chunk) {
			if (abort || chunk === null) {
				return;
			}

			if (_this4.size && accumBytes + chunk.length > _this4.size) {
				abort = true;
				reject(new FetchError(`content size at ${_this4.url} over limit: ${_this4.size}`, 'max-size'));
				return;
			}

			accumBytes += chunk.length;
			accum.push(chunk);
		});

		body.on('end', function () {
			if (abort) {
				return;
			}

			clearTimeout(resTimeout);

			try {
				resolve(Buffer.concat(accum, accumBytes));
			} catch (err) {
				// handle streams that have accumulated too much data (issue #414)
				reject(new FetchError(`Could not create Buffer from response body for ${_this4.url}: ${err.message}`, 'system', err));
			}
		});
	});
}

/**
 * Detect buffer encoding and convert to target encoding
 * ref: http://www.w3.org/TR/2011/WD-html5-20110113/parsing.html#determining-the-character-encoding
 *
 * @param   Buffer  buffer    Incoming buffer
 * @param   String  encoding  Target encoding
 * @return  String
 */
function convertBody(buffer, headers) {
	if (typeof convert !== 'function') {
		throw new Error('The package `encoding` must be installed to use the textConverted() function');
	}

	const ct = headers.get('content-type');
	let charset = 'utf-8';
	let res, str;

	// header
	if (ct) {
		res = /charset=([^;]*)/i.exec(ct);
	}

	// no charset in content type, peek at response body for at most 1024 bytes
	str = buffer.slice(0, 1024).toString();

	// html5
	if (!res && str) {
		res = /<meta.+?charset=(['"])(.+?)\1/i.exec(str);
	}

	// html4
	if (!res && str) {
		res = /<meta[\s]+?http-equiv=(['"])content-type\1[\s]+?content=(['"])(.+?)\2/i.exec(str);

		if (res) {
			res = /charset=(.*)/i.exec(res.pop());
		}
	}

	// xml
	if (!res && str) {
		res = /<\?xml.+?encoding=(['"])(.+?)\1/i.exec(str);
	}

	// found charset
	if (res) {
		charset = res.pop();

		// prevent decode issues when sites use incorrect encoding
		// ref: https://hsivonen.fi/encoding-menu/
		if (charset === 'gb2312' || charset === 'gbk') {
			charset = 'gb18030';
		}
	}

	// turn raw buffers into a single utf-8 buffer
	return convert(buffer, 'UTF-8', charset).toString();
}

/**
 * Detect a URLSearchParams object
 * ref: https://github.com/bitinn/node-fetch/issues/296#issuecomment-307598143
 *
 * @param   Object  obj     Object to detect by type or brand
 * @return  String
 */
function isURLSearchParams(obj) {
	// Duck-typing as a necessary condition.
	if (typeof obj !== 'object' || typeof obj.append !== 'function' || typeof obj.delete !== 'function' || typeof obj.get !== 'function' || typeof obj.getAll !== 'function' || typeof obj.has !== 'function' || typeof obj.set !== 'function') {
		return false;
	}

	// Brand-checking and more duck-typing as optional condition.
	return obj.constructor.name === 'URLSearchParams' || Object.prototype.toString.call(obj) === '[object URLSearchParams]' || typeof obj.sort === 'function';
}

/**
 * Check if `obj` is a W3C `Blob` object (which `File` inherits from)
 * @param  {*} obj
 * @return {boolean}
 */
function isBlob(obj) {
	return typeof obj === 'object' && typeof obj.arrayBuffer === 'function' && typeof obj.type === 'string' && typeof obj.stream === 'function' && typeof obj.constructor === 'function' && typeof obj.constructor.name === 'string' && /^(Blob|File)$/.test(obj.constructor.name) && /^(Blob|File)$/.test(obj[Symbol.toStringTag]);
}

/**
 * Clone body given Res/Req instance
 *
 * @param   Mixed  instance  Response or Request instance
 * @return  Mixed
 */
function clone(instance) {
	let p1, p2;
	let body = instance.body;

	// don't allow cloning a used body
	if (instance.bodyUsed) {
		throw new Error('cannot clone body after it is used');
	}

	// check that body is a stream and not form-data object
	// note: we can't clone the form-data object without having it as a dependency
	if (body instanceof Stream && typeof body.getBoundary !== 'function') {
		// tee instance body
		p1 = new PassThrough();
		p2 = new PassThrough();
		body.pipe(p1);
		body.pipe(p2);
		// set instance body to teed body and return the other teed body
		instance[INTERNALS].body = p1;
		body = p2;
	}

	return body;
}

/**
 * Performs the operation "extract a `Content-Type` value from |object|" as
 * specified in the specification:
 * https://fetch.spec.whatwg.org/#concept-bodyinit-extract
 *
 * This function assumes that instance.body is present.
 *
 * @param   Mixed  instance  Any options.body input
 */
function extractContentType(body) {
	if (body === null) {
		// body is null
		return null;
	} else if (typeof body === 'string') {
		// body is string
		return 'text/plain;charset=UTF-8';
	} else if (isURLSearchParams(body)) {
		// body is a URLSearchParams
		return 'application/x-www-form-urlencoded;charset=UTF-8';
	} else if (isBlob(body)) {
		// body is blob
		return body.type || null;
	} else if (Buffer.isBuffer(body)) {
		// body is buffer
		return null;
	} else if (Object.prototype.toString.call(body) === '[object ArrayBuffer]') {
		// body is ArrayBuffer
		return null;
	} else if (ArrayBuffer.isView(body)) {
		// body is ArrayBufferView
		return null;
	} else if (typeof body.getBoundary === 'function') {
		// detect form data input from form-data module
		return `multipart/form-data;boundary=${body.getBoundary()}`;
	} else if (body instanceof Stream) {
		// body is stream
		// can't really do much about this
		return null;
	} else {
		// Body constructor defaults other things to string
		return 'text/plain;charset=UTF-8';
	}
}

/**
 * The Fetch Standard treats this as if "total bytes" is a property on the body.
 * For us, we have to explicitly get it with a function.
 *
 * ref: https://fetch.spec.whatwg.org/#concept-body-total-bytes
 *
 * @param   Body    instance   Instance of Body
 * @return  Number?            Number of bytes, or null if not possible
 */
function getTotalBytes(instance) {
	const body = instance.body;


	if (body === null) {
		// body is null
		return 0;
	} else if (isBlob(body)) {
		return body.size;
	} else if (Buffer.isBuffer(body)) {
		// body is buffer
		return body.length;
	} else if (body && typeof body.getLengthSync === 'function') {
		// detect form data input from form-data module
		if (body._lengthRetrievers && body._lengthRetrievers.length == 0 || // 1.x
		body.hasKnownLength && body.hasKnownLength()) {
			// 2.x
			return body.getLengthSync();
		}
		return null;
	} else {
		// body is stream
		return null;
	}
}

/**
 * Write a Body to a Node.js WritableStream (e.g. http.Request) object.
 *
 * @param   Body    instance   Instance of Body
 * @return  Void
 */
function writeToStream(dest, instance) {
	const body = instance.body;


	if (body === null) {
		// body is null
		dest.end();
	} else if (isBlob(body)) {
		body.stream().pipe(dest);
	} else if (Buffer.isBuffer(body)) {
		// body is buffer
		dest.write(body);
		dest.end();
	} else {
		// body is stream
		body.pipe(dest);
	}
}

// expose Promise
Body.Promise = global.Promise;

/**
 * headers.js
 *
 * Headers class offers convenient helpers
 */

const invalidTokenRegex = /[^\^_`a-zA-Z\-0-9!#$%&'*+.|~]/;
const invalidHeaderCharRegex = /[^\t\x20-\x7e\x80-\xff]/;

function validateName(name) {
	name = `${name}`;
	if (invalidTokenRegex.test(name) || name === '') {
		throw new TypeError(`${name} is not a legal HTTP header name`);
	}
}

function validateValue(value) {
	value = `${value}`;
	if (invalidHeaderCharRegex.test(value)) {
		throw new TypeError(`${value} is not a legal HTTP header value`);
	}
}

/**
 * Find the key in the map object given a header name.
 *
 * Returns undefined if not found.
 *
 * @param   String  name  Header name
 * @return  String|Undefined
 */
function find(map, name) {
	name = name.toLowerCase();
	for (const key in map) {
		if (key.toLowerCase() === name) {
			return key;
		}
	}
	return undefined;
}

const MAP = Symbol('map');
class Headers {
	/**
  * Headers class
  *
  * @param   Object  headers  Response headers
  * @return  Void
  */
	constructor() {
		let init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;

		this[MAP] = Object.create(null);

		if (init instanceof Headers) {
			const rawHeaders = init.raw();
			const headerNames = Object.keys(rawHeaders);

			for (const headerName of headerNames) {
				for (const value of rawHeaders[headerName]) {
					this.append(headerName, value);
				}
			}

			return;
		}

		// We don't worry about converting prop to ByteString here as append()
		// will handle it.
		if (init == null) ; else if (typeof init === 'object') {
			const method = init[Symbol.iterator];
			if (method != null) {
				if (typeof method !== 'function') {
					throw new TypeError('Header pairs must be iterable');
				}

				// sequence<sequence<ByteString>>
				// Note: per spec we have to first exhaust the lists then process them
				const pairs = [];
				for (const pair of init) {
					if (typeof pair !== 'object' || typeof pair[Symbol.iterator] !== 'function') {
						throw new TypeError('Each header pair must be iterable');
					}
					pairs.push(Array.from(pair));
				}

				for (const pair of pairs) {
					if (pair.length !== 2) {
						throw new TypeError('Each header pair must be a name/value tuple');
					}
					this.append(pair[0], pair[1]);
				}
			} else {
				// record<ByteString, ByteString>
				for (const key of Object.keys(init)) {
					const value = init[key];
					this.append(key, value);
				}
			}
		} else {
			throw new TypeError('Provided initializer must be an object');
		}
	}

	/**
  * Return combined header value given name
  *
  * @param   String  name  Header name
  * @return  Mixed
  */
	get(name) {
		name = `${name}`;
		validateName(name);
		const key = find(this[MAP], name);
		if (key === undefined) {
			return null;
		}

		return this[MAP][key].join(', ');
	}

	/**
  * Iterate over all headers
  *
  * @param   Function  callback  Executed for each item with parameters (value, name, thisArg)
  * @param   Boolean   thisArg   `this` context for callback function
  * @return  Void
  */
	forEach(callback) {
		let thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

		let pairs = getHeaders(this);
		let i = 0;
		while (i < pairs.length) {
			var _pairs$i = pairs[i];
			const name = _pairs$i[0],
			      value = _pairs$i[1];

			callback.call(thisArg, value, name, this);
			pairs = getHeaders(this);
			i++;
		}
	}

	/**
  * Overwrite header values given name
  *
  * @param   String  name   Header name
  * @param   String  value  Header value
  * @return  Void
  */
	set(name, value) {
		name = `${name}`;
		value = `${value}`;
		validateName(name);
		validateValue(value);
		const key = find(this[MAP], name);
		this[MAP][key !== undefined ? key : name] = [value];
	}

	/**
  * Append a value onto existing header
  *
  * @param   String  name   Header name
  * @param   String  value  Header value
  * @return  Void
  */
	append(name, value) {
		name = `${name}`;
		value = `${value}`;
		validateName(name);
		validateValue(value);
		const key = find(this[MAP], name);
		if (key !== undefined) {
			this[MAP][key].push(value);
		} else {
			this[MAP][name] = [value];
		}
	}

	/**
  * Check for header name existence
  *
  * @param   String   name  Header name
  * @return  Boolean
  */
	has(name) {
		name = `${name}`;
		validateName(name);
		return find(this[MAP], name) !== undefined;
	}

	/**
  * Delete all header values given name
  *
  * @param   String  name  Header name
  * @return  Void
  */
	delete(name) {
		name = `${name}`;
		validateName(name);
		const key = find(this[MAP], name);
		if (key !== undefined) {
			delete this[MAP][key];
		}
	}

	/**
  * Return raw headers (non-spec api)
  *
  * @return  Object
  */
	raw() {
		return this[MAP];
	}

	/**
  * Get an iterator on keys.
  *
  * @return  Iterator
  */
	keys() {
		return createHeadersIterator(this, 'key');
	}

	/**
  * Get an iterator on values.
  *
  * @return  Iterator
  */
	values() {
		return createHeadersIterator(this, 'value');
	}

	/**
  * Get an iterator on entries.
  *
  * This is the default iterator of the Headers object.
  *
  * @return  Iterator
  */
	[Symbol.iterator]() {
		return createHeadersIterator(this, 'key+value');
	}
}
Headers.prototype.entries = Headers.prototype[Symbol.iterator];

Object.defineProperty(Headers.prototype, Symbol.toStringTag, {
	value: 'Headers',
	writable: false,
	enumerable: false,
	configurable: true
});

Object.defineProperties(Headers.prototype, {
	get: { enumerable: true },
	forEach: { enumerable: true },
	set: { enumerable: true },
	append: { enumerable: true },
	has: { enumerable: true },
	delete: { enumerable: true },
	keys: { enumerable: true },
	values: { enumerable: true },
	entries: { enumerable: true }
});

function getHeaders(headers) {
	let kind = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'key+value';

	const keys = Object.keys(headers[MAP]).sort();
	return keys.map(kind === 'key' ? function (k) {
		return k.toLowerCase();
	} : kind === 'value' ? function (k) {
		return headers[MAP][k].join(', ');
	} : function (k) {
		return [k.toLowerCase(), headers[MAP][k].join(', ')];
	});
}

const INTERNAL = Symbol('internal');

function createHeadersIterator(target, kind) {
	const iterator = Object.create(HeadersIteratorPrototype);
	iterator[INTERNAL] = {
		target,
		kind,
		index: 0
	};
	return iterator;
}

const HeadersIteratorPrototype = Object.setPrototypeOf({
	next() {
		// istanbul ignore if
		if (!this || Object.getPrototypeOf(this) !== HeadersIteratorPrototype) {
			throw new TypeError('Value of `this` is not a HeadersIterator');
		}

		var _INTERNAL = this[INTERNAL];
		const target = _INTERNAL.target,
		      kind = _INTERNAL.kind,
		      index = _INTERNAL.index;

		const values = getHeaders(target, kind);
		const len = values.length;
		if (index >= len) {
			return {
				value: undefined,
				done: true
			};
		}

		this[INTERNAL].index = index + 1;

		return {
			value: values[index],
			done: false
		};
	}
}, Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]())));

Object.defineProperty(HeadersIteratorPrototype, Symbol.toStringTag, {
	value: 'HeadersIterator',
	writable: false,
	enumerable: false,
	configurable: true
});

/**
 * Export the Headers object in a form that Node.js can consume.
 *
 * @param   Headers  headers
 * @return  Object
 */
function exportNodeCompatibleHeaders(headers) {
	const obj = Object.assign({ __proto__: null }, headers[MAP]);

	// http.request() only supports string as Host header. This hack makes
	// specifying custom Host header possible.
	const hostHeaderKey = find(headers[MAP], 'Host');
	if (hostHeaderKey !== undefined) {
		obj[hostHeaderKey] = obj[hostHeaderKey][0];
	}

	return obj;
}

/**
 * Create a Headers object from an object of headers, ignoring those that do
 * not conform to HTTP grammar productions.
 *
 * @param   Object  obj  Object of headers
 * @return  Headers
 */
function createHeadersLenient(obj) {
	const headers = new Headers();
	for (const name of Object.keys(obj)) {
		if (invalidTokenRegex.test(name)) {
			continue;
		}
		if (Array.isArray(obj[name])) {
			for (const val of obj[name]) {
				if (invalidHeaderCharRegex.test(val)) {
					continue;
				}
				if (headers[MAP][name] === undefined) {
					headers[MAP][name] = [val];
				} else {
					headers[MAP][name].push(val);
				}
			}
		} else if (!invalidHeaderCharRegex.test(obj[name])) {
			headers[MAP][name] = [obj[name]];
		}
	}
	return headers;
}

const INTERNALS$1 = Symbol('Response internals');

// fix an issue where "STATUS_CODES" aren't a named export for node <10
const STATUS_CODES = http.STATUS_CODES;

/**
 * Response class
 *
 * @param   Stream  body  Readable stream
 * @param   Object  opts  Response options
 * @return  Void
 */
class Response {
	constructor() {
		let body = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
		let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

		Body.call(this, body, opts);

		const status = opts.status || 200;
		const headers = new Headers(opts.headers);

		if (body != null && !headers.has('Content-Type')) {
			const contentType = extractContentType(body);
			if (contentType) {
				headers.append('Content-Type', contentType);
			}
		}

		this[INTERNALS$1] = {
			url: opts.url,
			status,
			statusText: opts.statusText || STATUS_CODES[status],
			headers,
			counter: opts.counter
		};
	}

	get url() {
		return this[INTERNALS$1].url || '';
	}

	get status() {
		return this[INTERNALS$1].status;
	}

	/**
  * Convenience property representing if the request ended normally
  */
	get ok() {
		return this[INTERNALS$1].status >= 200 && this[INTERNALS$1].status < 300;
	}

	get redirected() {
		return this[INTERNALS$1].counter > 0;
	}

	get statusText() {
		return this[INTERNALS$1].statusText;
	}

	get headers() {
		return this[INTERNALS$1].headers;
	}

	/**
  * Clone this response
  *
  * @return  Response
  */
	clone() {
		return new Response(clone(this), {
			url: this.url,
			status: this.status,
			statusText: this.statusText,
			headers: this.headers,
			ok: this.ok,
			redirected: this.redirected
		});
	}
}

Body.mixIn(Response.prototype);

Object.defineProperties(Response.prototype, {
	url: { enumerable: true },
	status: { enumerable: true },
	ok: { enumerable: true },
	redirected: { enumerable: true },
	statusText: { enumerable: true },
	headers: { enumerable: true },
	clone: { enumerable: true }
});

Object.defineProperty(Response.prototype, Symbol.toStringTag, {
	value: 'Response',
	writable: false,
	enumerable: false,
	configurable: true
});

const INTERNALS$2 = Symbol('Request internals');

// fix an issue where "format", "parse" aren't a named export for node <10
const parse_url = Url.parse;
const format_url = Url.format;

const streamDestructionSupported = 'destroy' in Stream.Readable.prototype;

/**
 * Check if a value is an instance of Request.
 *
 * @param   Mixed   input
 * @return  Boolean
 */
function isRequest(input) {
	return typeof input === 'object' && typeof input[INTERNALS$2] === 'object';
}

function isAbortSignal(signal) {
	const proto = signal && typeof signal === 'object' && Object.getPrototypeOf(signal);
	return !!(proto && proto.constructor.name === 'AbortSignal');
}

/**
 * Request class
 *
 * @param   Mixed   input  Url or Request instance
 * @param   Object  init   Custom options
 * @return  Void
 */
class Request {
	constructor(input) {
		let init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

		let parsedURL;

		// normalize input
		if (!isRequest(input)) {
			if (input && input.href) {
				// in order to support Node.js' Url objects; though WHATWG's URL objects
				// will fall into this branch also (since their `toString()` will return
				// `href` property anyway)
				parsedURL = parse_url(input.href);
			} else {
				// coerce input to a string before attempting to parse
				parsedURL = parse_url(`${input}`);
			}
			input = {};
		} else {
			parsedURL = parse_url(input.url);
		}

		let method = init.method || input.method || 'GET';
		method = method.toUpperCase();

		if ((init.body != null || isRequest(input) && input.body !== null) && (method === 'GET' || method === 'HEAD')) {
			throw new TypeError('Request with GET/HEAD method cannot have body');
		}

		let inputBody = init.body != null ? init.body : isRequest(input) && input.body !== null ? clone(input) : null;

		Body.call(this, inputBody, {
			timeout: init.timeout || input.timeout || 0,
			size: init.size || input.size || 0
		});

		const headers = new Headers(init.headers || input.headers || {});

		if (inputBody != null && !headers.has('Content-Type')) {
			const contentType = extractContentType(inputBody);
			if (contentType) {
				headers.append('Content-Type', contentType);
			}
		}

		let signal = isRequest(input) ? input.signal : null;
		if ('signal' in init) signal = init.signal;

		if (signal != null && !isAbortSignal(signal)) {
			throw new TypeError('Expected signal to be an instanceof AbortSignal');
		}

		this[INTERNALS$2] = {
			method,
			redirect: init.redirect || input.redirect || 'follow',
			headers,
			parsedURL,
			signal
		};

		// node-fetch-only options
		this.follow = init.follow !== undefined ? init.follow : input.follow !== undefined ? input.follow : 20;
		this.compress = init.compress !== undefined ? init.compress : input.compress !== undefined ? input.compress : true;
		this.counter = init.counter || input.counter || 0;
		this.agent = init.agent || input.agent;
	}

	get method() {
		return this[INTERNALS$2].method;
	}

	get url() {
		return format_url(this[INTERNALS$2].parsedURL);
	}

	get headers() {
		return this[INTERNALS$2].headers;
	}

	get redirect() {
		return this[INTERNALS$2].redirect;
	}

	get signal() {
		return this[INTERNALS$2].signal;
	}

	/**
  * Clone this request
  *
  * @return  Request
  */
	clone() {
		return new Request(this);
	}
}

Body.mixIn(Request.prototype);

Object.defineProperty(Request.prototype, Symbol.toStringTag, {
	value: 'Request',
	writable: false,
	enumerable: false,
	configurable: true
});

Object.defineProperties(Request.prototype, {
	method: { enumerable: true },
	url: { enumerable: true },
	headers: { enumerable: true },
	redirect: { enumerable: true },
	clone: { enumerable: true },
	signal: { enumerable: true }
});

/**
 * Convert a Request to Node.js http request options.
 *
 * @param   Request  A Request instance
 * @return  Object   The options object to be passed to http.request
 */
function getNodeRequestOptions(request) {
	const parsedURL = request[INTERNALS$2].parsedURL;
	const headers = new Headers(request[INTERNALS$2].headers);

	// fetch step 1.3
	if (!headers.has('Accept')) {
		headers.set('Accept', '*/*');
	}

	// Basic fetch
	if (!parsedURL.protocol || !parsedURL.hostname) {
		throw new TypeError('Only absolute URLs are supported');
	}

	if (!/^https?:$/.test(parsedURL.protocol)) {
		throw new TypeError('Only HTTP(S) protocols are supported');
	}

	if (request.signal && request.body instanceof Stream.Readable && !streamDestructionSupported) {
		throw new Error('Cancellation of streamed requests with AbortSignal is not supported in node < 8');
	}

	// HTTP-network-or-cache fetch steps 2.4-2.7
	let contentLengthValue = null;
	if (request.body == null && /^(POST|PUT)$/i.test(request.method)) {
		contentLengthValue = '0';
	}
	if (request.body != null) {
		const totalBytes = getTotalBytes(request);
		if (typeof totalBytes === 'number') {
			contentLengthValue = String(totalBytes);
		}
	}
	if (contentLengthValue) {
		headers.set('Content-Length', contentLengthValue);
	}

	// HTTP-network-or-cache fetch step 2.11
	if (!headers.has('User-Agent')) {
		headers.set('User-Agent', 'node-fetch/1.0 (+https://github.com/bitinn/node-fetch)');
	}

	// HTTP-network-or-cache fetch step 2.15
	if (request.compress && !headers.has('Accept-Encoding')) {
		headers.set('Accept-Encoding', 'gzip,deflate');
	}

	let agent = request.agent;
	if (typeof agent === 'function') {
		agent = agent(parsedURL);
	}

	if (!headers.has('Connection') && !agent) {
		headers.set('Connection', 'close');
	}

	// HTTP-network fetch step 4.2
	// chunked encoding is handled by Node.js

	return Object.assign({}, parsedURL, {
		method: request.method,
		headers: exportNodeCompatibleHeaders(headers),
		agent
	});
}

/**
 * abort-error.js
 *
 * AbortError interface for cancelled requests
 */

/**
 * Create AbortError instance
 *
 * @param   String      message      Error message for human
 * @return  AbortError
 */
function AbortError(message) {
  Error.call(this, message);

  this.type = 'aborted';
  this.message = message;

  // hide custom error implementation details from end-users
  Error.captureStackTrace(this, this.constructor);
}

AbortError.prototype = Object.create(Error.prototype);
AbortError.prototype.constructor = AbortError;
AbortError.prototype.name = 'AbortError';

// fix an issue where "PassThrough", "resolve" aren't a named export for node <10
const PassThrough$1 = Stream.PassThrough;
const resolve_url = Url.resolve;

/**
 * Fetch function
 *
 * @param   Mixed    url   Absolute url or Request instance
 * @param   Object   opts  Fetch options
 * @return  Promise
 */
function fetch(url, opts) {

	// allow custom promise
	if (!fetch.Promise) {
		throw new Error('native promise missing, set fetch.Promise to your favorite alternative');
	}

	Body.Promise = fetch.Promise;

	// wrap http.request into fetch
	return new fetch.Promise(function (resolve, reject) {
		// build request object
		const request = new Request(url, opts);
		const options = getNodeRequestOptions(request);

		const send = (options.protocol === 'https:' ? https__default : http).request;
		const signal = request.signal;

		let response = null;

		const abort = function abort() {
			let error = new AbortError('The user aborted a request.');
			reject(error);
			if (request.body && request.body instanceof Stream.Readable) {
				request.body.destroy(error);
			}
			if (!response || !response.body) return;
			response.body.emit('error', error);
		};

		if (signal && signal.aborted) {
			abort();
			return;
		}

		const abortAndFinalize = function abortAndFinalize() {
			abort();
			finalize();
		};

		// send request
		const req = send(options);
		let reqTimeout;

		if (signal) {
			signal.addEventListener('abort', abortAndFinalize);
		}

		function finalize() {
			req.abort();
			if (signal) signal.removeEventListener('abort', abortAndFinalize);
			clearTimeout(reqTimeout);
		}

		if (request.timeout) {
			req.once('socket', function (socket) {
				reqTimeout = setTimeout(function () {
					reject(new FetchError(`network timeout at: ${request.url}`, 'request-timeout'));
					finalize();
				}, request.timeout);
			});
		}

		req.on('error', function (err) {
			reject(new FetchError(`request to ${request.url} failed, reason: ${err.message}`, 'system', err));
			finalize();
		});

		req.on('response', function (res) {
			clearTimeout(reqTimeout);

			const headers = createHeadersLenient(res.headers);

			// HTTP fetch step 5
			if (fetch.isRedirect(res.statusCode)) {
				// HTTP fetch step 5.2
				const location = headers.get('Location');

				// HTTP fetch step 5.3
				const locationURL = location === null ? null : resolve_url(request.url, location);

				// HTTP fetch step 5.5
				switch (request.redirect) {
					case 'error':
						reject(new FetchError(`redirect mode is set to error: ${request.url}`, 'no-redirect'));
						finalize();
						return;
					case 'manual':
						// node-fetch-specific step: make manual redirect a bit easier to use by setting the Location header value to the resolved URL.
						if (locationURL !== null) {
							// handle corrupted header
							try {
								headers.set('Location', locationURL);
							} catch (err) {
								// istanbul ignore next: nodejs server prevent invalid response headers, we can't test this through normal request
								reject(err);
							}
						}
						break;
					case 'follow':
						// HTTP-redirect fetch step 2
						if (locationURL === null) {
							break;
						}

						// HTTP-redirect fetch step 5
						if (request.counter >= request.follow) {
							reject(new FetchError(`maximum redirect reached at: ${request.url}`, 'max-redirect'));
							finalize();
							return;
						}

						// HTTP-redirect fetch step 6 (counter increment)
						// Create a new Request object.
						const requestOpts = {
							headers: new Headers(request.headers),
							follow: request.follow,
							counter: request.counter + 1,
							agent: request.agent,
							compress: request.compress,
							method: request.method,
							body: request.body,
							signal: request.signal,
							timeout: request.timeout
						};

						// HTTP-redirect fetch step 9
						if (res.statusCode !== 303 && request.body && getTotalBytes(request) === null) {
							reject(new FetchError('Cannot follow redirect with body being a readable stream', 'unsupported-redirect'));
							finalize();
							return;
						}

						// HTTP-redirect fetch step 11
						if (res.statusCode === 303 || (res.statusCode === 301 || res.statusCode === 302) && request.method === 'POST') {
							requestOpts.method = 'GET';
							requestOpts.body = undefined;
							requestOpts.headers.delete('content-length');
						}

						// HTTP-redirect fetch step 15
						resolve(fetch(new Request(locationURL, requestOpts)));
						finalize();
						return;
				}
			}

			// prepare response
			res.once('end', function () {
				if (signal) signal.removeEventListener('abort', abortAndFinalize);
			});
			let body = res.pipe(new PassThrough$1());

			const response_options = {
				url: request.url,
				status: res.statusCode,
				statusText: res.statusMessage,
				headers: headers,
				size: request.size,
				timeout: request.timeout,
				counter: request.counter
			};

			// HTTP-network fetch step 12.1.1.3
			const codings = headers.get('Content-Encoding');

			// HTTP-network fetch step 12.1.1.4: handle content codings

			// in following scenarios we ignore compression support
			// 1. compression support is disabled
			// 2. HEAD request
			// 3. no Content-Encoding header
			// 4. no content response (204)
			// 5. content not modified response (304)
			if (!request.compress || request.method === 'HEAD' || codings === null || res.statusCode === 204 || res.statusCode === 304) {
				response = new Response(body, response_options);
				resolve(response);
				return;
			}

			// For Node v6+
			// Be less strict when decoding compressed responses, since sometimes
			// servers send slightly invalid responses that are still accepted
			// by common browsers.
			// Always using Z_SYNC_FLUSH is what cURL does.
			const zlibOptions = {
				flush: zlib.Z_SYNC_FLUSH,
				finishFlush: zlib.Z_SYNC_FLUSH
			};

			// for gzip
			if (codings == 'gzip' || codings == 'x-gzip') {
				body = body.pipe(zlib.createGunzip(zlibOptions));
				response = new Response(body, response_options);
				resolve(response);
				return;
			}

			// for deflate
			if (codings == 'deflate' || codings == 'x-deflate') {
				// handle the infamous raw deflate response from old servers
				// a hack for old IIS and Apache servers
				const raw = res.pipe(new PassThrough$1());
				raw.once('data', function (chunk) {
					// see http://stackoverflow.com/questions/37519828
					if ((chunk[0] & 0x0F) === 0x08) {
						body = body.pipe(zlib.createInflate());
					} else {
						body = body.pipe(zlib.createInflateRaw());
					}
					response = new Response(body, response_options);
					resolve(response);
				});
				return;
			}

			// for br
			if (codings == 'br' && typeof zlib.createBrotliDecompress === 'function') {
				body = body.pipe(zlib.createBrotliDecompress());
				response = new Response(body, response_options);
				resolve(response);
				return;
			}

			// otherwise, use response as-is
			response = new Response(body, response_options);
			resolve(response);
		});

		writeToStream(req, request);
	});
}
/**
 * Redirect code matching
 *
 * @param   Number   code  Status code
 * @return  Boolean
 */
fetch.isRedirect = function (code) {
	return code === 301 || code === 302 || code === 303 || code === 307 || code === 308;
};

// expose Promise
fetch.Promise = global.Promise;

function get_page_handler(
	manifest,
	session_getter
) {
	const get_build_info =  () => JSON.parse(fs__default.readFileSync(path.join(build_dir, 'build.json'), 'utf-8'))
		;

	const template =  () => read_template(src_dir)
		;

	const has_service_worker = fs__default.existsSync(path.join(build_dir, 'service-worker.js'));

	const { server_routes, pages } = manifest;
	const error_route = manifest.error;

	function bail(req, res, err) {
		console.error(err);

		const message =  escape_html(err.message) ;

		res.statusCode = 500;
		res.end(`<pre>${message}</pre>`);
	}

	function handle_error(req, res, statusCode, error) {
		handle_page({
			pattern: null,
			parts: [
				{ name: null, component: error_route }
			]
		}, req, res, statusCode, error || new Error('Unknown error in preload function'));
	}

	async function handle_page(page, req, res, status = 200, error = null) {
		const is_service_worker_index = req.path === '/service-worker-index.html';
		const build_info




 = get_build_info();

		res.setHeader('Content-Type', 'text/html');
		res.setHeader('Cache-Control',  'no-cache' );

		// preload main.js and current route
		// TODO detect other stuff we can preload? images, CSS, fonts?
		let preloaded_chunks = Array.isArray(build_info.assets.main) ? build_info.assets.main : [build_info.assets.main];
		if (!error && !is_service_worker_index) {
			page.parts.forEach(part => {
				if (!part) return;

				// using concat because it could be a string or an array. thanks webpack!
				preloaded_chunks = preloaded_chunks.concat(build_info.assets[part.name]);
			});
		}

		if (build_info.bundler === 'rollup') {
			// TODO add dependencies and CSS
			const link = preloaded_chunks
				.filter(file => file && !file.match(/\.map$/))
				.map(file => `<${req.baseUrl}/client/${file}>;rel="modulepreload"`)
				.join(', ');

			res.setHeader('Link', link);
		} else {
			const link = preloaded_chunks
				.filter(file => file && !file.match(/\.map$/))
				.map((file) => {
					const as = /\.css$/.test(file) ? 'style' : 'script';
					return `<${req.baseUrl}/client/${file}>;rel="preload";as="${as}"`;
				})
				.join(', ');

			res.setHeader('Link', link);
		}

		const session = session_getter(req, res);

		let redirect;
		let preload_error;

		const preload_context = {
			redirect: (statusCode, location) => {
				if (redirect && (redirect.statusCode !== statusCode || redirect.location !== location)) {
					throw new Error(`Conflicting redirects`);
				}
				location = location.replace(/^\//g, ''); // leading slash (only)
				redirect = { statusCode, location };
			},
			error: (statusCode, message) => {
				preload_error = { statusCode, message };
			},
			fetch: (url, opts) => {
				const parsed = new Url.URL(url, `http://127.0.0.1:${process.env.PORT}${req.baseUrl ? req.baseUrl + '/' :''}`);

				if (opts) {
					opts = Object.assign({}, opts);

					const include_cookies = (
						opts.credentials === 'include' ||
						opts.credentials === 'same-origin' && parsed.origin === `http://127.0.0.1:${process.env.PORT}`
					);

					if (include_cookies) {
						opts.headers = Object.assign({}, opts.headers);

						const cookies = Object.assign(
							{},
							cookie.parse(req.headers.cookie || ''),
							cookie.parse(opts.headers.cookie || '')
						);

						const set_cookie = res.getHeader('Set-Cookie');
						(Array.isArray(set_cookie) ? set_cookie : [set_cookie]).forEach(str => {
							const match = /([^=]+)=([^;]+)/.exec(str);
							if (match) cookies[match[1]] = match[2];
						});

						const str = Object.keys(cookies)
							.map(key => `${key}=${cookies[key]}`)
							.join('; ');

						opts.headers.cookie = str;
					}
				}

				return fetch(parsed.href, opts);
			}
		};

		let preloaded;
		let match;
		let params;

		try {
			const root_preloaded = manifest.root_preload
				? manifest.root_preload.call(preload_context, {
					host: req.headers.host,
					path: req.path,
					query: req.query,
					params: {}
				}, session)
				: {};

			match = error ? null : page.pattern.exec(req.path);


			let toPreload = [root_preloaded];
			if (!is_service_worker_index) {
				toPreload = toPreload.concat(page.parts.map(part => {
					if (!part) return null;

					// the deepest level is used below, to initialise the store
					params = part.params ? part.params(match) : {};

					return part.preload
						? part.preload.call(preload_context, {
							host: req.headers.host,
							path: req.path,
							query: req.query,
							params
						}, session)
						: {};
				}));
			}

			preloaded = await Promise.all(toPreload);
		} catch (err) {
			if (error) {
				return bail(req, res, err)
			}

			preload_error = { statusCode: 500, message: err };
			preloaded = []; // appease TypeScript
		}

		try {
			if (redirect) {
				const location = Url.resolve((req.baseUrl || '') + '/', redirect.location);

				res.statusCode = redirect.statusCode;
				res.setHeader('Location', location);
				res.end();

				return;
			}

			if (preload_error) {
				handle_error(req, res, preload_error.statusCode, preload_error.message);
				return;
			}

			const segments = req.path.split('/').filter(Boolean);

			// TODO make this less confusing
			const layout_segments = [segments[0]];
			let l = 1;

			page.parts.forEach((part, i) => {
				layout_segments[l] = segments[i + 1];
				if (!part) return null;
				l++;
			});

			const props = {
				stores: {
					page: {
						subscribe: writable({
							host: req.headers.host,
							path: req.path,
							query: req.query,
							params
						}).subscribe
					},
					preloading: {
						subscribe: writable(null).subscribe
					},
					session: writable(session)
				},
				segments: layout_segments,
				status: error ? status : 200,
				error: error ? error instanceof Error ? error : { message: error } : null,
				level0: {
					props: preloaded[0]
				},
				level1: {
					segment: segments[0],
					props: {}
				}
			};

			if (!is_service_worker_index) {
				let l = 1;
				for (let i = 0; i < page.parts.length; i += 1) {
					const part = page.parts[i];
					if (!part) continue;

					props[`level${l++}`] = {
						component: part.component,
						props: preloaded[i + 1] || {},
						segment: segments[i]
					};
				}
			}

			const { html, head, css } = App.render(props);

			const serialized = {
				preloaded: `[${preloaded.map(data => try_serialize(data)).join(',')}]`,
				session: session && try_serialize(session, err => {
					throw new Error(`Failed to serialize session data: ${err.message}`);
				}),
				error: error && try_serialize(props.error)
			};

			let script = `__SAPPER__={${[
				error && `error:${serialized.error},status:${status}`,
				`baseUrl:"${req.baseUrl}"`,
				serialized.preloaded && `preloaded:${serialized.preloaded}`,
				serialized.session && `session:${serialized.session}`
			].filter(Boolean).join(',')}};`;

			if (has_service_worker) {
				script += `if('serviceWorker' in navigator)navigator.serviceWorker.register('${req.baseUrl}/service-worker.js');`;
			}

			const file = [].concat(build_info.assets.main).filter(file => file && /\.js$/.test(file))[0];
			const main = `${req.baseUrl}/client/${file}`;

			if (build_info.bundler === 'rollup') {
				if (build_info.legacy_assets) {
					const legacy_main = `${req.baseUrl}/client/legacy/${build_info.legacy_assets.main}`;
					script += `(function(){try{eval("async function x(){}");var main="${main}"}catch(e){main="${legacy_main}"};var s=document.createElement("script");try{new Function("if(0)import('')")();s.src=main;s.type="module";s.crossOrigin="use-credentials";}catch(e){s.src="${req.baseUrl}/client/shimport@${build_info.shimport}.js";s.setAttribute("data-main",main);}document.head.appendChild(s);}());`;
				} else {
					script += `var s=document.createElement("script");try{new Function("if(0)import('')")();s.src="${main}";s.type="module";s.crossOrigin="use-credentials";}catch(e){s.src="${req.baseUrl}/client/shimport@${build_info.shimport}.js";s.setAttribute("data-main","${main}")}document.head.appendChild(s)`;
				}
			} else {
				script += `</script><script src="${main}">`;
			}

			let styles;

			// TODO make this consistent across apps
			// TODO embed build_info in placeholder.ts
			if (build_info.css && build_info.css.main) {
				const css_chunks = new Set();
				if (build_info.css.main) css_chunks.add(build_info.css.main);
				page.parts.forEach(part => {
					if (!part) return;
					const css_chunks_for_part = build_info.css.chunks[part.file];

					if (css_chunks_for_part) {
						css_chunks_for_part.forEach(file => {
							css_chunks.add(file);
						});
					}
				});

				styles = Array.from(css_chunks)
					.map(href => `<link rel="stylesheet" href="client/${href}">`)
					.join('');
			} else {
				styles = (css && css.code ? `<style>${css.code}</style>` : '');
			}

			// users can set a CSP nonce using res.locals.nonce
			const nonce_attr = (res.locals && res.locals.nonce) ? ` nonce="${res.locals.nonce}"` : '';

			const body = template()
				.replace('%sapper.base%', () => `<base href="${req.baseUrl}/">`)
				.replace('%sapper.scripts%', () => `<script${nonce_attr}>${script}</script>`)
				.replace('%sapper.html%', () => html)
				.replace('%sapper.head%', () => `<noscript id='sapper-head-start'></noscript>${head}<noscript id='sapper-head-end'></noscript>`)
				.replace('%sapper.styles%', () => styles);

			res.statusCode = status;
			res.end(body);
		} catch(err) {
			if (error) {
				bail(req, res, err);
			} else {
				handle_error(req, res, 500, err);
			}
		}
	}

	return function find_route(req, res, next) {
		if (req.path === '/service-worker-index.html') {
			const homePage = pages.find(page => page.pattern.test('/'));
			handle_page(homePage, req, res);
			return;
		}

		for (const page of pages) {
			if (page.pattern.test(req.path)) {
				handle_page(page, req, res);
				return;
			}
		}

		handle_error(req, res, 404, 'Not found');
	};
}

function read_template(dir = build_dir) {
	return fs__default.readFileSync(`${dir}/template.html`, 'utf-8');
}

function try_serialize(data, fail) {
	try {
		return devalue(data);
	} catch (err) {
		if (fail) fail(err);
		return null;
	}
}

function escape_html(html) {
	const chars = {
		'"' : 'quot',
		"'": '#39',
		'&': 'amp',
		'<' : 'lt',
		'>' : 'gt'
	};

	return html.replace(/["'&<>]/g, c => `&${chars[c]};`);
}

var mime_raw = "application/andrew-inset\t\t\tez\napplication/applixware\t\t\t\taw\napplication/atom+xml\t\t\t\tatom\napplication/atomcat+xml\t\t\t\tatomcat\napplication/atomsvc+xml\t\t\t\tatomsvc\napplication/ccxml+xml\t\t\t\tccxml\napplication/cdmi-capability\t\t\tcdmia\napplication/cdmi-container\t\t\tcdmic\napplication/cdmi-domain\t\t\t\tcdmid\napplication/cdmi-object\t\t\t\tcdmio\napplication/cdmi-queue\t\t\t\tcdmiq\napplication/cu-seeme\t\t\t\tcu\napplication/davmount+xml\t\t\tdavmount\napplication/docbook+xml\t\t\t\tdbk\napplication/dssc+der\t\t\t\tdssc\napplication/dssc+xml\t\t\t\txdssc\napplication/ecmascript\t\t\t\tecma\napplication/emma+xml\t\t\t\temma\napplication/epub+zip\t\t\t\tepub\napplication/exi\t\t\t\t\texi\napplication/font-tdpfr\t\t\t\tpfr\napplication/gml+xml\t\t\t\tgml\napplication/gpx+xml\t\t\t\tgpx\napplication/gxf\t\t\t\t\tgxf\napplication/hyperstudio\t\t\t\tstk\napplication/inkml+xml\t\t\t\tink inkml\napplication/ipfix\t\t\t\tipfix\napplication/java-archive\t\t\tjar\napplication/java-serialized-object\t\tser\napplication/java-vm\t\t\t\tclass\napplication/javascript\t\t\t\tjs\napplication/json\t\t\t\tjson map\napplication/jsonml+json\t\t\t\tjsonml\napplication/lost+xml\t\t\t\tlostxml\napplication/mac-binhex40\t\t\thqx\napplication/mac-compactpro\t\t\tcpt\napplication/mads+xml\t\t\t\tmads\napplication/marc\t\t\t\tmrc\napplication/marcxml+xml\t\t\t\tmrcx\napplication/mathematica\t\t\t\tma nb mb\napplication/mathml+xml\t\t\t\tmathml\napplication/mbox\t\t\t\tmbox\napplication/mediaservercontrol+xml\t\tmscml\napplication/metalink+xml\t\t\tmetalink\napplication/metalink4+xml\t\t\tmeta4\napplication/mets+xml\t\t\t\tmets\napplication/mods+xml\t\t\t\tmods\napplication/mp21\t\t\t\tm21 mp21\napplication/mp4\t\t\t\t\tmp4s\napplication/msword\t\t\t\tdoc dot\napplication/mxf\t\t\t\t\tmxf\napplication/octet-stream\tbin dms lrf mar so dist distz pkg bpk dump elc deploy\napplication/oda\t\t\t\t\toda\napplication/oebps-package+xml\t\t\topf\napplication/ogg\t\t\t\t\togx\napplication/omdoc+xml\t\t\t\tomdoc\napplication/onenote\t\t\t\tonetoc onetoc2 onetmp onepkg\napplication/oxps\t\t\t\toxps\napplication/patch-ops-error+xml\t\t\txer\napplication/pdf\t\t\t\t\tpdf\napplication/pgp-encrypted\t\t\tpgp\napplication/pgp-signature\t\t\tasc sig\napplication/pics-rules\t\t\t\tprf\napplication/pkcs10\t\t\t\tp10\napplication/pkcs7-mime\t\t\t\tp7m p7c\napplication/pkcs7-signature\t\t\tp7s\napplication/pkcs8\t\t\t\tp8\napplication/pkix-attr-cert\t\t\tac\napplication/pkix-cert\t\t\t\tcer\napplication/pkix-crl\t\t\t\tcrl\napplication/pkix-pkipath\t\t\tpkipath\napplication/pkixcmp\t\t\t\tpki\napplication/pls+xml\t\t\t\tpls\napplication/postscript\t\t\t\tai eps ps\napplication/prs.cww\t\t\t\tcww\napplication/pskc+xml\t\t\t\tpskcxml\napplication/rdf+xml\t\t\t\trdf\napplication/reginfo+xml\t\t\t\trif\napplication/relax-ng-compact-syntax\t\trnc\napplication/resource-lists+xml\t\t\trl\napplication/resource-lists-diff+xml\t\trld\napplication/rls-services+xml\t\t\trs\napplication/rpki-ghostbusters\t\t\tgbr\napplication/rpki-manifest\t\t\tmft\napplication/rpki-roa\t\t\t\troa\napplication/rsd+xml\t\t\t\trsd\napplication/rss+xml\t\t\t\trss\napplication/rtf\t\t\t\t\trtf\napplication/sbml+xml\t\t\t\tsbml\napplication/scvp-cv-request\t\t\tscq\napplication/scvp-cv-response\t\t\tscs\napplication/scvp-vp-request\t\t\tspq\napplication/scvp-vp-response\t\t\tspp\napplication/sdp\t\t\t\t\tsdp\napplication/set-payment-initiation\t\tsetpay\napplication/set-registration-initiation\t\tsetreg\napplication/shf+xml\t\t\t\tshf\napplication/smil+xml\t\t\t\tsmi smil\napplication/sparql-query\t\t\trq\napplication/sparql-results+xml\t\t\tsrx\napplication/srgs\t\t\t\tgram\napplication/srgs+xml\t\t\t\tgrxml\napplication/sru+xml\t\t\t\tsru\napplication/ssdl+xml\t\t\t\tssdl\napplication/ssml+xml\t\t\t\tssml\napplication/tei+xml\t\t\t\ttei teicorpus\napplication/thraud+xml\t\t\t\ttfi\napplication/timestamped-data\t\t\ttsd\napplication/vnd.3gpp.pic-bw-large\t\tplb\napplication/vnd.3gpp.pic-bw-small\t\tpsb\napplication/vnd.3gpp.pic-bw-var\t\t\tpvb\napplication/vnd.3gpp2.tcap\t\t\ttcap\napplication/vnd.3m.post-it-notes\t\tpwn\napplication/vnd.accpac.simply.aso\t\taso\napplication/vnd.accpac.simply.imp\t\timp\napplication/vnd.acucobol\t\t\tacu\napplication/vnd.acucorp\t\t\t\tatc acutc\napplication/vnd.adobe.air-application-installer-package+zip\tair\napplication/vnd.adobe.formscentral.fcdt\t\tfcdt\napplication/vnd.adobe.fxp\t\t\tfxp fxpl\napplication/vnd.adobe.xdp+xml\t\t\txdp\napplication/vnd.adobe.xfdf\t\t\txfdf\napplication/vnd.ahead.space\t\t\tahead\napplication/vnd.airzip.filesecure.azf\t\tazf\napplication/vnd.airzip.filesecure.azs\t\tazs\napplication/vnd.amazon.ebook\t\t\tazw\napplication/vnd.americandynamics.acc\t\tacc\napplication/vnd.amiga.ami\t\t\tami\napplication/vnd.android.package-archive\t\tapk\napplication/vnd.anser-web-certificate-issue-initiation\tcii\napplication/vnd.anser-web-funds-transfer-initiation\tfti\napplication/vnd.antix.game-component\t\tatx\napplication/vnd.apple.installer+xml\t\tmpkg\napplication/vnd.apple.mpegurl\t\t\tm3u8\napplication/vnd.aristanetworks.swi\t\tswi\napplication/vnd.astraea-software.iota\t\tiota\napplication/vnd.audiograph\t\t\taep\napplication/vnd.blueice.multipass\t\tmpm\napplication/vnd.bmi\t\t\t\tbmi\napplication/vnd.businessobjects\t\t\trep\napplication/vnd.chemdraw+xml\t\t\tcdxml\napplication/vnd.chipnuts.karaoke-mmd\t\tmmd\napplication/vnd.cinderella\t\t\tcdy\napplication/vnd.claymore\t\t\tcla\napplication/vnd.cloanto.rp9\t\t\trp9\napplication/vnd.clonk.c4group\t\t\tc4g c4d c4f c4p c4u\napplication/vnd.cluetrust.cartomobile-config\t\tc11amc\napplication/vnd.cluetrust.cartomobile-config-pkg\tc11amz\napplication/vnd.commonspace\t\t\tcsp\napplication/vnd.contact.cmsg\t\t\tcdbcmsg\napplication/vnd.cosmocaller\t\t\tcmc\napplication/vnd.crick.clicker\t\t\tclkx\napplication/vnd.crick.clicker.keyboard\t\tclkk\napplication/vnd.crick.clicker.palette\t\tclkp\napplication/vnd.crick.clicker.template\t\tclkt\napplication/vnd.crick.clicker.wordbank\t\tclkw\napplication/vnd.criticaltools.wbs+xml\t\twbs\napplication/vnd.ctc-posml\t\t\tpml\napplication/vnd.cups-ppd\t\t\tppd\napplication/vnd.curl.car\t\t\tcar\napplication/vnd.curl.pcurl\t\t\tpcurl\napplication/vnd.dart\t\t\t\tdart\napplication/vnd.data-vision.rdz\t\t\trdz\napplication/vnd.dece.data\t\t\tuvf uvvf uvd uvvd\napplication/vnd.dece.ttml+xml\t\t\tuvt uvvt\napplication/vnd.dece.unspecified\t\tuvx uvvx\napplication/vnd.dece.zip\t\t\tuvz uvvz\napplication/vnd.denovo.fcselayout-link\t\tfe_launch\napplication/vnd.dna\t\t\t\tdna\napplication/vnd.dolby.mlp\t\t\tmlp\napplication/vnd.dpgraph\t\t\t\tdpg\napplication/vnd.dreamfactory\t\t\tdfac\napplication/vnd.ds-keypoint\t\t\tkpxx\napplication/vnd.dvb.ait\t\t\t\tait\napplication/vnd.dvb.service\t\t\tsvc\napplication/vnd.dynageo\t\t\t\tgeo\napplication/vnd.ecowin.chart\t\t\tmag\napplication/vnd.enliven\t\t\t\tnml\napplication/vnd.epson.esf\t\t\tesf\napplication/vnd.epson.msf\t\t\tmsf\napplication/vnd.epson.quickanime\t\tqam\napplication/vnd.epson.salt\t\t\tslt\napplication/vnd.epson.ssf\t\t\tssf\napplication/vnd.eszigno3+xml\t\t\tes3 et3\napplication/vnd.ezpix-album\t\t\tez2\napplication/vnd.ezpix-package\t\t\tez3\napplication/vnd.fdf\t\t\t\tfdf\napplication/vnd.fdsn.mseed\t\t\tmseed\napplication/vnd.fdsn.seed\t\t\tseed dataless\napplication/vnd.flographit\t\t\tgph\napplication/vnd.fluxtime.clip\t\t\tftc\napplication/vnd.framemaker\t\t\tfm frame maker book\napplication/vnd.frogans.fnc\t\t\tfnc\napplication/vnd.frogans.ltf\t\t\tltf\napplication/vnd.fsc.weblaunch\t\t\tfsc\napplication/vnd.fujitsu.oasys\t\t\toas\napplication/vnd.fujitsu.oasys2\t\t\toa2\napplication/vnd.fujitsu.oasys3\t\t\toa3\napplication/vnd.fujitsu.oasysgp\t\t\tfg5\napplication/vnd.fujitsu.oasysprs\t\tbh2\napplication/vnd.fujixerox.ddd\t\t\tddd\napplication/vnd.fujixerox.docuworks\t\txdw\napplication/vnd.fujixerox.docuworks.binder\txbd\napplication/vnd.fuzzysheet\t\t\tfzs\napplication/vnd.genomatix.tuxedo\t\ttxd\napplication/vnd.geogebra.file\t\t\tggb\napplication/vnd.geogebra.tool\t\t\tggt\napplication/vnd.geometry-explorer\t\tgex gre\napplication/vnd.geonext\t\t\t\tgxt\napplication/vnd.geoplan\t\t\t\tg2w\napplication/vnd.geospace\t\t\tg3w\napplication/vnd.gmx\t\t\t\tgmx\napplication/vnd.google-earth.kml+xml\t\tkml\napplication/vnd.google-earth.kmz\t\tkmz\napplication/vnd.grafeq\t\t\t\tgqf gqs\napplication/vnd.groove-account\t\t\tgac\napplication/vnd.groove-help\t\t\tghf\napplication/vnd.groove-identity-message\t\tgim\napplication/vnd.groove-injector\t\t\tgrv\napplication/vnd.groove-tool-message\t\tgtm\napplication/vnd.groove-tool-template\t\ttpl\napplication/vnd.groove-vcard\t\t\tvcg\napplication/vnd.hal+xml\t\t\t\thal\napplication/vnd.handheld-entertainment+xml\tzmm\napplication/vnd.hbci\t\t\t\thbci\napplication/vnd.hhe.lesson-player\t\tles\napplication/vnd.hp-hpgl\t\t\t\thpgl\napplication/vnd.hp-hpid\t\t\t\thpid\napplication/vnd.hp-hps\t\t\t\thps\napplication/vnd.hp-jlyt\t\t\t\tjlt\napplication/vnd.hp-pcl\t\t\t\tpcl\napplication/vnd.hp-pclxl\t\t\tpclxl\napplication/vnd.hydrostatix.sof-data\t\tsfd-hdstx\napplication/vnd.ibm.minipay\t\t\tmpy\napplication/vnd.ibm.modcap\t\t\tafp listafp list3820\napplication/vnd.ibm.rights-management\t\tirm\napplication/vnd.ibm.secure-container\t\tsc\napplication/vnd.iccprofile\t\t\ticc icm\napplication/vnd.igloader\t\t\tigl\napplication/vnd.immervision-ivp\t\t\tivp\napplication/vnd.immervision-ivu\t\t\tivu\napplication/vnd.insors.igm\t\t\tigm\napplication/vnd.intercon.formnet\t\txpw xpx\napplication/vnd.intergeo\t\t\ti2g\napplication/vnd.intu.qbo\t\t\tqbo\napplication/vnd.intu.qfx\t\t\tqfx\napplication/vnd.ipunplugged.rcprofile\t\trcprofile\napplication/vnd.irepository.package+xml\t\tirp\napplication/vnd.is-xpr\t\t\t\txpr\napplication/vnd.isac.fcs\t\t\tfcs\napplication/vnd.jam\t\t\t\tjam\napplication/vnd.jcp.javame.midlet-rms\t\trms\napplication/vnd.jisp\t\t\t\tjisp\napplication/vnd.joost.joda-archive\t\tjoda\napplication/vnd.kahootz\t\t\t\tktz ktr\napplication/vnd.kde.karbon\t\t\tkarbon\napplication/vnd.kde.kchart\t\t\tchrt\napplication/vnd.kde.kformula\t\t\tkfo\napplication/vnd.kde.kivio\t\t\tflw\napplication/vnd.kde.kontour\t\t\tkon\napplication/vnd.kde.kpresenter\t\t\tkpr kpt\napplication/vnd.kde.kspread\t\t\tksp\napplication/vnd.kde.kword\t\t\tkwd kwt\napplication/vnd.kenameaapp\t\t\thtke\napplication/vnd.kidspiration\t\t\tkia\napplication/vnd.kinar\t\t\t\tkne knp\napplication/vnd.koan\t\t\t\tskp skd skt skm\napplication/vnd.kodak-descriptor\t\tsse\napplication/vnd.las.las+xml\t\t\tlasxml\napplication/vnd.llamagraphics.life-balance.desktop\tlbd\napplication/vnd.llamagraphics.life-balance.exchange+xml\tlbe\napplication/vnd.lotus-1-2-3\t\t\t123\napplication/vnd.lotus-approach\t\t\tapr\napplication/vnd.lotus-freelance\t\t\tpre\napplication/vnd.lotus-notes\t\t\tnsf\napplication/vnd.lotus-organizer\t\t\torg\napplication/vnd.lotus-screencam\t\t\tscm\napplication/vnd.lotus-wordpro\t\t\tlwp\napplication/vnd.macports.portpkg\t\tportpkg\napplication/vnd.mcd\t\t\t\tmcd\napplication/vnd.medcalcdata\t\t\tmc1\napplication/vnd.mediastation.cdkey\t\tcdkey\napplication/vnd.mfer\t\t\t\tmwf\napplication/vnd.mfmp\t\t\t\tmfm\napplication/vnd.micrografx.flo\t\t\tflo\napplication/vnd.micrografx.igx\t\t\tigx\napplication/vnd.mif\t\t\t\tmif\napplication/vnd.mobius.daf\t\t\tdaf\napplication/vnd.mobius.dis\t\t\tdis\napplication/vnd.mobius.mbk\t\t\tmbk\napplication/vnd.mobius.mqy\t\t\tmqy\napplication/vnd.mobius.msl\t\t\tmsl\napplication/vnd.mobius.plc\t\t\tplc\napplication/vnd.mobius.txf\t\t\ttxf\napplication/vnd.mophun.application\t\tmpn\napplication/vnd.mophun.certificate\t\tmpc\napplication/vnd.mozilla.xul+xml\t\t\txul\napplication/vnd.ms-artgalry\t\t\tcil\napplication/vnd.ms-cab-compressed\t\tcab\napplication/vnd.ms-excel\t\t\txls xlm xla xlc xlt xlw\napplication/vnd.ms-excel.addin.macroenabled.12\t\txlam\napplication/vnd.ms-excel.sheet.binary.macroenabled.12\txlsb\napplication/vnd.ms-excel.sheet.macroenabled.12\t\txlsm\napplication/vnd.ms-excel.template.macroenabled.12\txltm\napplication/vnd.ms-fontobject\t\t\teot\napplication/vnd.ms-htmlhelp\t\t\tchm\napplication/vnd.ms-ims\t\t\t\tims\napplication/vnd.ms-lrm\t\t\t\tlrm\napplication/vnd.ms-officetheme\t\t\tthmx\napplication/vnd.ms-pki.seccat\t\t\tcat\napplication/vnd.ms-pki.stl\t\t\tstl\napplication/vnd.ms-powerpoint\t\t\tppt pps pot\napplication/vnd.ms-powerpoint.addin.macroenabled.12\t\tppam\napplication/vnd.ms-powerpoint.presentation.macroenabled.12\tpptm\napplication/vnd.ms-powerpoint.slide.macroenabled.12\t\tsldm\napplication/vnd.ms-powerpoint.slideshow.macroenabled.12\t\tppsm\napplication/vnd.ms-powerpoint.template.macroenabled.12\t\tpotm\napplication/vnd.ms-project\t\t\tmpp mpt\napplication/vnd.ms-word.document.macroenabled.12\tdocm\napplication/vnd.ms-word.template.macroenabled.12\tdotm\napplication/vnd.ms-works\t\t\twps wks wcm wdb\napplication/vnd.ms-wpl\t\t\t\twpl\napplication/vnd.ms-xpsdocument\t\t\txps\napplication/vnd.mseq\t\t\t\tmseq\napplication/vnd.musician\t\t\tmus\napplication/vnd.muvee.style\t\t\tmsty\napplication/vnd.mynfc\t\t\t\ttaglet\napplication/vnd.neurolanguage.nlu\t\tnlu\napplication/vnd.nitf\t\t\t\tntf nitf\napplication/vnd.noblenet-directory\t\tnnd\napplication/vnd.noblenet-sealer\t\t\tnns\napplication/vnd.noblenet-web\t\t\tnnw\napplication/vnd.nokia.n-gage.data\t\tngdat\napplication/vnd.nokia.n-gage.symbian.install\tn-gage\napplication/vnd.nokia.radio-preset\t\trpst\napplication/vnd.nokia.radio-presets\t\trpss\napplication/vnd.novadigm.edm\t\t\tedm\napplication/vnd.novadigm.edx\t\t\tedx\napplication/vnd.novadigm.ext\t\t\text\napplication/vnd.oasis.opendocument.chart\t\todc\napplication/vnd.oasis.opendocument.chart-template\totc\napplication/vnd.oasis.opendocument.database\t\todb\napplication/vnd.oasis.opendocument.formula\t\todf\napplication/vnd.oasis.opendocument.formula-template\todft\napplication/vnd.oasis.opendocument.graphics\t\todg\napplication/vnd.oasis.opendocument.graphics-template\totg\napplication/vnd.oasis.opendocument.image\t\todi\napplication/vnd.oasis.opendocument.image-template\toti\napplication/vnd.oasis.opendocument.presentation\t\todp\napplication/vnd.oasis.opendocument.presentation-template\totp\napplication/vnd.oasis.opendocument.spreadsheet\t\tods\napplication/vnd.oasis.opendocument.spreadsheet-template\tots\napplication/vnd.oasis.opendocument.text\t\t\todt\napplication/vnd.oasis.opendocument.text-master\t\todm\napplication/vnd.oasis.opendocument.text-template\tott\napplication/vnd.oasis.opendocument.text-web\t\toth\napplication/vnd.olpc-sugar\t\t\txo\napplication/vnd.oma.dd2+xml\t\t\tdd2\napplication/vnd.openofficeorg.extension\t\toxt\napplication/vnd.openxmlformats-officedocument.presentationml.presentation\tpptx\napplication/vnd.openxmlformats-officedocument.presentationml.slide\tsldx\napplication/vnd.openxmlformats-officedocument.presentationml.slideshow\tppsx\napplication/vnd.openxmlformats-officedocument.presentationml.template\tpotx\napplication/vnd.openxmlformats-officedocument.spreadsheetml.sheet\txlsx\napplication/vnd.openxmlformats-officedocument.spreadsheetml.template\txltx\napplication/vnd.openxmlformats-officedocument.wordprocessingml.document\tdocx\napplication/vnd.openxmlformats-officedocument.wordprocessingml.template\tdotx\napplication/vnd.osgeo.mapguide.package\t\tmgp\napplication/vnd.osgi.dp\t\t\t\tdp\napplication/vnd.osgi.subsystem\t\t\tesa\napplication/vnd.palm\t\t\t\tpdb pqa oprc\napplication/vnd.pawaafile\t\t\tpaw\napplication/vnd.pg.format\t\t\tstr\napplication/vnd.pg.osasli\t\t\tei6\napplication/vnd.picsel\t\t\t\tefif\napplication/vnd.pmi.widget\t\t\twg\napplication/vnd.pocketlearn\t\t\tplf\napplication/vnd.powerbuilder6\t\t\tpbd\napplication/vnd.previewsystems.box\t\tbox\napplication/vnd.proteus.magazine\t\tmgz\napplication/vnd.publishare-delta-tree\t\tqps\napplication/vnd.pvi.ptid1\t\t\tptid\napplication/vnd.quark.quarkxpress\t\tqxd qxt qwd qwt qxl qxb\napplication/vnd.realvnc.bed\t\t\tbed\napplication/vnd.recordare.musicxml\t\tmxl\napplication/vnd.recordare.musicxml+xml\t\tmusicxml\napplication/vnd.rig.cryptonote\t\t\tcryptonote\napplication/vnd.rim.cod\t\t\t\tcod\napplication/vnd.rn-realmedia\t\t\trm\napplication/vnd.rn-realmedia-vbr\t\trmvb\napplication/vnd.route66.link66+xml\t\tlink66\napplication/vnd.sailingtracker.track\t\tst\napplication/vnd.seemail\t\t\t\tsee\napplication/vnd.sema\t\t\t\tsema\napplication/vnd.semd\t\t\t\tsemd\napplication/vnd.semf\t\t\t\tsemf\napplication/vnd.shana.informed.formdata\t\tifm\napplication/vnd.shana.informed.formtemplate\titp\napplication/vnd.shana.informed.interchange\tiif\napplication/vnd.shana.informed.package\t\tipk\napplication/vnd.simtech-mindmapper\t\ttwd twds\napplication/vnd.smaf\t\t\t\tmmf\napplication/vnd.smart.teacher\t\t\tteacher\napplication/vnd.solent.sdkm+xml\t\t\tsdkm sdkd\napplication/vnd.spotfire.dxp\t\t\tdxp\napplication/vnd.spotfire.sfs\t\t\tsfs\napplication/vnd.stardivision.calc\t\tsdc\napplication/vnd.stardivision.draw\t\tsda\napplication/vnd.stardivision.impress\t\tsdd\napplication/vnd.stardivision.math\t\tsmf\napplication/vnd.stardivision.writer\t\tsdw vor\napplication/vnd.stardivision.writer-global\tsgl\napplication/vnd.stepmania.package\t\tsmzip\napplication/vnd.stepmania.stepchart\t\tsm\napplication/vnd.sun.xml.calc\t\t\tsxc\napplication/vnd.sun.xml.calc.template\t\tstc\napplication/vnd.sun.xml.draw\t\t\tsxd\napplication/vnd.sun.xml.draw.template\t\tstd\napplication/vnd.sun.xml.impress\t\t\tsxi\napplication/vnd.sun.xml.impress.template\tsti\napplication/vnd.sun.xml.math\t\t\tsxm\napplication/vnd.sun.xml.writer\t\t\tsxw\napplication/vnd.sun.xml.writer.global\t\tsxg\napplication/vnd.sun.xml.writer.template\t\tstw\napplication/vnd.sus-calendar\t\t\tsus susp\napplication/vnd.svd\t\t\t\tsvd\napplication/vnd.symbian.install\t\t\tsis sisx\napplication/vnd.syncml+xml\t\t\txsm\napplication/vnd.syncml.dm+wbxml\t\t\tbdm\napplication/vnd.syncml.dm+xml\t\t\txdm\napplication/vnd.tao.intent-module-archive\ttao\napplication/vnd.tcpdump.pcap\t\t\tpcap cap dmp\napplication/vnd.tmobile-livetv\t\t\ttmo\napplication/vnd.trid.tpt\t\t\ttpt\napplication/vnd.triscape.mxs\t\t\tmxs\napplication/vnd.trueapp\t\t\t\ttra\napplication/vnd.ufdl\t\t\t\tufd ufdl\napplication/vnd.uiq.theme\t\t\tutz\napplication/vnd.umajin\t\t\t\tumj\napplication/vnd.unity\t\t\t\tunityweb\napplication/vnd.uoml+xml\t\t\tuoml\napplication/vnd.vcx\t\t\t\tvcx\napplication/vnd.visio\t\t\t\tvsd vst vss vsw\napplication/vnd.visionary\t\t\tvis\napplication/vnd.vsf\t\t\t\tvsf\napplication/vnd.wap.wbxml\t\t\twbxml\napplication/vnd.wap.wmlc\t\t\twmlc\napplication/vnd.wap.wmlscriptc\t\t\twmlsc\napplication/vnd.webturbo\t\t\twtb\napplication/vnd.wolfram.player\t\t\tnbp\napplication/vnd.wordperfect\t\t\twpd\napplication/vnd.wqd\t\t\t\twqd\napplication/vnd.wt.stf\t\t\t\tstf\napplication/vnd.xara\t\t\t\txar\napplication/vnd.xfdl\t\t\t\txfdl\napplication/vnd.yamaha.hv-dic\t\t\thvd\napplication/vnd.yamaha.hv-script\t\thvs\napplication/vnd.yamaha.hv-voice\t\t\thvp\napplication/vnd.yamaha.openscoreformat\t\t\tosf\napplication/vnd.yamaha.openscoreformat.osfpvg+xml\tosfpvg\napplication/vnd.yamaha.smaf-audio\t\tsaf\napplication/vnd.yamaha.smaf-phrase\t\tspf\napplication/vnd.yellowriver-custom-menu\t\tcmp\napplication/vnd.zul\t\t\t\tzir zirz\napplication/vnd.zzazz.deck+xml\t\t\tzaz\napplication/voicexml+xml\t\t\tvxml\napplication/wasm\t\t\t\twasm\napplication/widget\t\t\t\twgt\napplication/winhlp\t\t\t\thlp\napplication/wsdl+xml\t\t\t\twsdl\napplication/wspolicy+xml\t\t\twspolicy\napplication/x-7z-compressed\t\t\t7z\napplication/x-abiword\t\t\t\tabw\napplication/x-ace-compressed\t\t\tace\napplication/x-apple-diskimage\t\t\tdmg\napplication/x-authorware-bin\t\t\taab x32 u32 vox\napplication/x-authorware-map\t\t\taam\napplication/x-authorware-seg\t\t\taas\napplication/x-bcpio\t\t\t\tbcpio\napplication/x-bittorrent\t\t\ttorrent\napplication/x-blorb\t\t\t\tblb blorb\napplication/x-bzip\t\t\t\tbz\napplication/x-bzip2\t\t\t\tbz2 boz\napplication/x-cbr\t\t\t\tcbr cba cbt cbz cb7\napplication/x-cdlink\t\t\t\tvcd\napplication/x-cfs-compressed\t\t\tcfs\napplication/x-chat\t\t\t\tchat\napplication/x-chess-pgn\t\t\t\tpgn\napplication/x-conference\t\t\tnsc\napplication/x-cpio\t\t\t\tcpio\napplication/x-csh\t\t\t\tcsh\napplication/x-debian-package\t\t\tdeb udeb\napplication/x-dgc-compressed\t\t\tdgc\napplication/x-director\t\t\tdir dcr dxr cst cct cxt w3d fgd swa\napplication/x-doom\t\t\t\twad\napplication/x-dtbncx+xml\t\t\tncx\napplication/x-dtbook+xml\t\t\tdtb\napplication/x-dtbresource+xml\t\t\tres\napplication/x-dvi\t\t\t\tdvi\napplication/x-envoy\t\t\t\tevy\napplication/x-eva\t\t\t\teva\napplication/x-font-bdf\t\t\t\tbdf\napplication/x-font-ghostscript\t\t\tgsf\napplication/x-font-linux-psf\t\t\tpsf\napplication/x-font-pcf\t\t\t\tpcf\napplication/x-font-snf\t\t\t\tsnf\napplication/x-font-type1\t\t\tpfa pfb pfm afm\napplication/x-freearc\t\t\t\tarc\napplication/x-futuresplash\t\t\tspl\napplication/x-gca-compressed\t\t\tgca\napplication/x-glulx\t\t\t\tulx\napplication/x-gnumeric\t\t\t\tgnumeric\napplication/x-gramps-xml\t\t\tgramps\napplication/x-gtar\t\t\t\tgtar\napplication/x-hdf\t\t\t\thdf\napplication/x-install-instructions\t\tinstall\napplication/x-iso9660-image\t\t\tiso\napplication/x-java-jnlp-file\t\t\tjnlp\napplication/x-latex\t\t\t\tlatex\napplication/x-lzh-compressed\t\t\tlzh lha\napplication/x-mie\t\t\t\tmie\napplication/x-mobipocket-ebook\t\t\tprc mobi\napplication/x-ms-application\t\t\tapplication\napplication/x-ms-shortcut\t\t\tlnk\napplication/x-ms-wmd\t\t\t\twmd\napplication/x-ms-wmz\t\t\t\twmz\napplication/x-ms-xbap\t\t\t\txbap\napplication/x-msaccess\t\t\t\tmdb\napplication/x-msbinder\t\t\t\tobd\napplication/x-mscardfile\t\t\tcrd\napplication/x-msclip\t\t\t\tclp\napplication/x-msdownload\t\t\texe dll com bat msi\napplication/x-msmediaview\t\t\tmvb m13 m14\napplication/x-msmetafile\t\t\twmf wmz emf emz\napplication/x-msmoney\t\t\t\tmny\napplication/x-mspublisher\t\t\tpub\napplication/x-msschedule\t\t\tscd\napplication/x-msterminal\t\t\ttrm\napplication/x-mswrite\t\t\t\twri\napplication/x-netcdf\t\t\t\tnc cdf\napplication/x-nzb\t\t\t\tnzb\napplication/x-pkcs12\t\t\t\tp12 pfx\napplication/x-pkcs7-certificates\t\tp7b spc\napplication/x-pkcs7-certreqresp\t\t\tp7r\napplication/x-rar-compressed\t\t\trar\napplication/x-research-info-systems\t\tris\napplication/x-sh\t\t\t\tsh\napplication/x-shar\t\t\t\tshar\napplication/x-shockwave-flash\t\t\tswf\napplication/x-silverlight-app\t\t\txap\napplication/x-sql\t\t\t\tsql\napplication/x-stuffit\t\t\t\tsit\napplication/x-stuffitx\t\t\t\tsitx\napplication/x-subrip\t\t\t\tsrt\napplication/x-sv4cpio\t\t\t\tsv4cpio\napplication/x-sv4crc\t\t\t\tsv4crc\napplication/x-t3vm-image\t\t\tt3\napplication/x-tads\t\t\t\tgam\napplication/x-tar\t\t\t\ttar\napplication/x-tcl\t\t\t\ttcl\napplication/x-tex\t\t\t\ttex\napplication/x-tex-tfm\t\t\t\ttfm\napplication/x-texinfo\t\t\t\ttexinfo texi\napplication/x-tgif\t\t\t\tobj\napplication/x-ustar\t\t\t\tustar\napplication/x-wais-source\t\t\tsrc\napplication/x-x509-ca-cert\t\t\tder crt\napplication/x-xfig\t\t\t\tfig\napplication/x-xliff+xml\t\t\t\txlf\napplication/x-xpinstall\t\t\t\txpi\napplication/x-xz\t\t\t\txz\napplication/x-zmachine\t\t\t\tz1 z2 z3 z4 z5 z6 z7 z8\napplication/xaml+xml\t\t\t\txaml\napplication/xcap-diff+xml\t\t\txdf\napplication/xenc+xml\t\t\t\txenc\napplication/xhtml+xml\t\t\t\txhtml xht\napplication/xml\t\t\t\t\txml xsl\napplication/xml-dtd\t\t\t\tdtd\napplication/xop+xml\t\t\t\txop\napplication/xproc+xml\t\t\t\txpl\napplication/xslt+xml\t\t\t\txslt\napplication/xspf+xml\t\t\t\txspf\napplication/xv+xml\t\t\t\tmxml xhvml xvml xvm\napplication/yang\t\t\t\tyang\napplication/yin+xml\t\t\t\tyin\napplication/zip\t\t\t\t\tzip\naudio/adpcm\t\t\t\t\tadp\naudio/basic\t\t\t\t\tau snd\naudio/midi\t\t\t\t\tmid midi kar rmi\naudio/mp4\t\t\t\t\tm4a mp4a\naudio/mpeg\t\t\t\t\tmpga mp2 mp2a mp3 m2a m3a\naudio/ogg\t\t\t\t\toga ogg spx\naudio/s3m\t\t\t\t\ts3m\naudio/silk\t\t\t\t\tsil\naudio/vnd.dece.audio\t\t\t\tuva uvva\naudio/vnd.digital-winds\t\t\t\teol\naudio/vnd.dra\t\t\t\t\tdra\naudio/vnd.dts\t\t\t\t\tdts\naudio/vnd.dts.hd\t\t\t\tdtshd\naudio/vnd.lucent.voice\t\t\t\tlvp\naudio/vnd.ms-playready.media.pya\t\tpya\naudio/vnd.nuera.ecelp4800\t\t\tecelp4800\naudio/vnd.nuera.ecelp7470\t\t\tecelp7470\naudio/vnd.nuera.ecelp9600\t\t\tecelp9600\naudio/vnd.rip\t\t\t\t\trip\naudio/webm\t\t\t\t\tweba\naudio/x-aac\t\t\t\t\taac\naudio/x-aiff\t\t\t\t\taif aiff aifc\naudio/x-caf\t\t\t\t\tcaf\naudio/x-flac\t\t\t\t\tflac\naudio/x-matroska\t\t\t\tmka\naudio/x-mpegurl\t\t\t\t\tm3u\naudio/x-ms-wax\t\t\t\t\twax\naudio/x-ms-wma\t\t\t\t\twma\naudio/x-pn-realaudio\t\t\t\tram ra\naudio/x-pn-realaudio-plugin\t\t\trmp\naudio/x-wav\t\t\t\t\twav\naudio/xm\t\t\t\t\txm\nchemical/x-cdx\t\t\t\t\tcdx\nchemical/x-cif\t\t\t\t\tcif\nchemical/x-cmdf\t\t\t\t\tcmdf\nchemical/x-cml\t\t\t\t\tcml\nchemical/x-csml\t\t\t\t\tcsml\nchemical/x-xyz\t\t\t\t\txyz\nfont/collection\t\t\t\t\tttc\nfont/otf\t\t\t\t\totf\nfont/ttf\t\t\t\t\tttf\nfont/woff\t\t\t\t\twoff\nfont/woff2\t\t\t\t\twoff2\nimage/bmp\t\t\t\t\tbmp\nimage/cgm\t\t\t\t\tcgm\nimage/g3fax\t\t\t\t\tg3\nimage/gif\t\t\t\t\tgif\nimage/ief\t\t\t\t\tief\nimage/jpeg\t\t\t\t\tjpeg jpg jpe\nimage/ktx\t\t\t\t\tktx\nimage/png\t\t\t\t\tpng\nimage/prs.btif\t\t\t\t\tbtif\nimage/sgi\t\t\t\t\tsgi\nimage/svg+xml\t\t\t\t\tsvg svgz\nimage/tiff\t\t\t\t\ttiff tif\nimage/vnd.adobe.photoshop\t\t\tpsd\nimage/vnd.dece.graphic\t\t\t\tuvi uvvi uvg uvvg\nimage/vnd.djvu\t\t\t\t\tdjvu djv\nimage/vnd.dvb.subtitle\t\t\t\tsub\nimage/vnd.dwg\t\t\t\t\tdwg\nimage/vnd.dxf\t\t\t\t\tdxf\nimage/vnd.fastbidsheet\t\t\t\tfbs\nimage/vnd.fpx\t\t\t\t\tfpx\nimage/vnd.fst\t\t\t\t\tfst\nimage/vnd.fujixerox.edmics-mmr\t\t\tmmr\nimage/vnd.fujixerox.edmics-rlc\t\t\trlc\nimage/vnd.ms-modi\t\t\t\tmdi\nimage/vnd.ms-photo\t\t\t\twdp\nimage/vnd.net-fpx\t\t\t\tnpx\nimage/vnd.wap.wbmp\t\t\t\twbmp\nimage/vnd.xiff\t\t\t\t\txif\nimage/webp\t\t\t\t\twebp\nimage/x-3ds\t\t\t\t\t3ds\nimage/x-cmu-raster\t\t\t\tras\nimage/x-cmx\t\t\t\t\tcmx\nimage/x-freehand\t\t\t\tfh fhc fh4 fh5 fh7\nimage/x-icon\t\t\t\t\tico\nimage/x-mrsid-image\t\t\t\tsid\nimage/x-pcx\t\t\t\t\tpcx\nimage/x-pict\t\t\t\t\tpic pct\nimage/x-portable-anymap\t\t\t\tpnm\nimage/x-portable-bitmap\t\t\t\tpbm\nimage/x-portable-graymap\t\t\tpgm\nimage/x-portable-pixmap\t\t\t\tppm\nimage/x-rgb\t\t\t\t\trgb\nimage/x-tga\t\t\t\t\ttga\nimage/x-xbitmap\t\t\t\t\txbm\nimage/x-xpixmap\t\t\t\t\txpm\nimage/x-xwindowdump\t\t\t\txwd\nmessage/rfc822\t\t\t\t\teml mime\nmodel/iges\t\t\t\t\tigs iges\nmodel/mesh\t\t\t\t\tmsh mesh silo\nmodel/vnd.collada+xml\t\t\t\tdae\nmodel/vnd.dwf\t\t\t\t\tdwf\nmodel/vnd.gdl\t\t\t\t\tgdl\nmodel/vnd.gtw\t\t\t\t\tgtw\nmodel/vnd.mts\t\t\t\t\tmts\nmodel/vnd.vtu\t\t\t\t\tvtu\nmodel/vrml\t\t\t\t\twrl vrml\nmodel/x3d+binary\t\t\t\tx3db x3dbz\nmodel/x3d+vrml\t\t\t\t\tx3dv x3dvz\nmodel/x3d+xml\t\t\t\t\tx3d x3dz\ntext/cache-manifest\t\t\t\tappcache\ntext/calendar\t\t\t\t\tics ifb\ntext/css\t\t\t\t\tcss\ntext/csv\t\t\t\t\tcsv\ntext/html\t\t\t\t\thtml htm\ntext/n3\t\t\t\t\t\tn3\ntext/plain\t\t\t\t\ttxt text conf def list log in\ntext/prs.lines.tag\t\t\t\tdsc\ntext/richtext\t\t\t\t\trtx\ntext/sgml\t\t\t\t\tsgml sgm\ntext/tab-separated-values\t\t\ttsv\ntext/troff\t\t\t\t\tt tr roff man me ms\ntext/turtle\t\t\t\t\tttl\ntext/uri-list\t\t\t\t\turi uris urls\ntext/vcard\t\t\t\t\tvcard\ntext/vnd.curl\t\t\t\t\tcurl\ntext/vnd.curl.dcurl\t\t\t\tdcurl\ntext/vnd.curl.mcurl\t\t\t\tmcurl\ntext/vnd.curl.scurl\t\t\t\tscurl\ntext/vnd.dvb.subtitle\t\t\t\tsub\ntext/vnd.fly\t\t\t\t\tfly\ntext/vnd.fmi.flexstor\t\t\t\tflx\ntext/vnd.graphviz\t\t\t\tgv\ntext/vnd.in3d.3dml\t\t\t\t3dml\ntext/vnd.in3d.spot\t\t\t\tspot\ntext/vnd.sun.j2me.app-descriptor\t\tjad\ntext/vnd.wap.wml\t\t\t\twml\ntext/vnd.wap.wmlscript\t\t\t\twmls\ntext/x-asm\t\t\t\t\ts asm\ntext/x-c\t\t\t\t\tc cc cxx cpp h hh dic\ntext/x-fortran\t\t\t\t\tf for f77 f90\ntext/x-java-source\t\t\t\tjava\ntext/x-nfo\t\t\t\t\tnfo\ntext/x-opml\t\t\t\t\topml\ntext/x-pascal\t\t\t\t\tp pas\ntext/x-setext\t\t\t\t\tetx\ntext/x-sfv\t\t\t\t\tsfv\ntext/x-uuencode\t\t\t\t\tuu\ntext/x-vcalendar\t\t\t\tvcs\ntext/x-vcard\t\t\t\t\tvcf\nvideo/3gpp\t\t\t\t\t3gp\nvideo/3gpp2\t\t\t\t\t3g2\nvideo/h261\t\t\t\t\th261\nvideo/h263\t\t\t\t\th263\nvideo/h264\t\t\t\t\th264\nvideo/jpeg\t\t\t\t\tjpgv\nvideo/jpm\t\t\t\t\tjpm jpgm\nvideo/mj2\t\t\t\t\tmj2 mjp2\nvideo/mp4\t\t\t\t\tmp4 mp4v mpg4\nvideo/mpeg\t\t\t\t\tmpeg mpg mpe m1v m2v\nvideo/ogg\t\t\t\t\togv\nvideo/quicktime\t\t\t\t\tqt mov\nvideo/vnd.dece.hd\t\t\t\tuvh uvvh\nvideo/vnd.dece.mobile\t\t\t\tuvm uvvm\nvideo/vnd.dece.pd\t\t\t\tuvp uvvp\nvideo/vnd.dece.sd\t\t\t\tuvs uvvs\nvideo/vnd.dece.video\t\t\t\tuvv uvvv\nvideo/vnd.dvb.file\t\t\t\tdvb\nvideo/vnd.fvt\t\t\t\t\tfvt\nvideo/vnd.mpegurl\t\t\t\tmxu m4u\nvideo/vnd.ms-playready.media.pyv\t\tpyv\nvideo/vnd.uvvu.mp4\t\t\t\tuvu uvvu\nvideo/vnd.vivo\t\t\t\t\tviv\nvideo/webm\t\t\t\t\twebm\nvideo/x-f4v\t\t\t\t\tf4v\nvideo/x-fli\t\t\t\t\tfli\nvideo/x-flv\t\t\t\t\tflv\nvideo/x-m4v\t\t\t\t\tm4v\nvideo/x-matroska\t\t\t\tmkv mk3d mks\nvideo/x-mng\t\t\t\t\tmng\nvideo/x-ms-asf\t\t\t\t\tasf asx\nvideo/x-ms-vob\t\t\t\t\tvob\nvideo/x-ms-wm\t\t\t\t\twm\nvideo/x-ms-wmv\t\t\t\t\twmv\nvideo/x-ms-wmx\t\t\t\t\twmx\nvideo/x-ms-wvx\t\t\t\t\twvx\nvideo/x-msvideo\t\t\t\t\tavi\nvideo/x-sgi-movie\t\t\t\tmovie\nvideo/x-smv\t\t\t\t\tsmv\nx-conference/x-cooltalk\t\t\t\tice\n";

const map = new Map();

mime_raw.split('\n').forEach((row) => {
	const match = /(.+?)\t+(.+)/.exec(row);
	if (!match) return;

	const type = match[1];
	const extensions = match[2].split(' ');

	extensions.forEach(ext => {
		map.set(ext, type);
	});
});

function lookup(file) {
	const match = /\.([^\.]+)$/.exec(file);
	return match && map.get(match[1]);
}

function middleware(opts


 = {}) {
	const { session, ignore } = opts;

	let emitted_basepath = false;

	return compose_handlers(ignore, [
		(req, res, next) => {
			if (req.baseUrl === undefined) {
				let { originalUrl } = req;
				if (req.url === '/' && originalUrl[originalUrl.length - 1] !== '/') {
					originalUrl += '/';
				}

				req.baseUrl = originalUrl
					? originalUrl.slice(0, -req.url.length)
					: '';
			}

			if (!emitted_basepath && process.send) {
				process.send({
					__sapper__: true,
					event: 'basepath',
					basepath: req.baseUrl
				});

				emitted_basepath = true;
			}

			if (req.path === undefined) {
				req.path = req.url.replace(/\?.*/, '');
			}

			next();
		},

		fs__default.existsSync(path.join(build_dir, 'service-worker.js')) && serve({
			pathname: '/service-worker.js',
			cache_control: 'no-cache, no-store, must-revalidate'
		}),

		fs__default.existsSync(path.join(build_dir, 'service-worker.js.map')) && serve({
			pathname: '/service-worker.js.map',
			cache_control: 'no-cache, no-store, must-revalidate'
		}),

		serve({
			prefix: '/client/',
			cache_control:  'no-cache' 
		}),

		get_server_route_handler(manifest.server_routes),

		get_page_handler(manifest, session || noop$1)
	].filter(Boolean));
}

function compose_handlers(ignore, handlers) {
	const total = handlers.length;

	function nth_handler(n, req, res, next) {
		if (n >= total) {
			return next();
		}

		handlers[n](req, res, () => nth_handler(n+1, req, res, next));
	}

	return !ignore
		? (req, res, next) => nth_handler(0, req, res, next)
		: (req, res, next) => {
			if (should_ignore(req.path, ignore)) {
				next();
			} else {
				nth_handler(0, req, res, next);
			}
		};
}

function should_ignore(uri, val) {
	if (Array.isArray(val)) return val.some(x => should_ignore(uri, x));
	if (val instanceof RegExp) return val.test(uri);
	if (typeof val === 'function') return val(uri);
	return uri.startsWith(val.charCodeAt(0) === 47 ? val : `/${val}`);
}

function serve({ prefix, pathname, cache_control }



) {
	const filter = pathname
		? (req) => req.path === pathname
		: (req) => req.path.startsWith(prefix);

	const read =  (file) => fs__default.readFileSync(path.resolve(build_dir, file))
		;

	return (req, res, next) => {
		if (filter(req)) {
			const type = lookup(req.path);

			try {
				const file = decodeURIComponent(req.path.slice(1));
				const data = read(file);

				res.setHeader('Content-Type', type);
				res.setHeader('Cache-Control', cache_control);
				res.end(data);
			} catch (err) {
				res.statusCode = 404;
				res.end('not found');
			}
		} else {
			next();
		}
	};
}

function noop$1(){}

const { PORT, NODE_ENV } = process.env;
const dev = NODE_ENV === 'development';

const options = {
  key: fs.readFileSync("../cert/certs/tsu.gg/privkey.pem"),
  cert: fs.readFileSync("../cert/certs/tsu.gg/fullchain.pem"),
};

function redirect_http_to_https(req, res, next) {
  res.redirect = "https://tsu.gg";
  res.writeHead(302, {
      Location: res.redirect,
      'Content-Type': 'text/plain',
      'Content-Length': 0,
  });
  res.end();
}

if(dev){
  polka() 
    .use(
      compression({ threshold: 0 }),
      sirv('static', { dev }),
      sirv('dehydrated', { dev: true, dotfiles: true}),
      middleware()
    )
    .listen(8080, err => {
      if (err) console.log('error', err);
    });
}
else{
  const { handler } = polka() // You can also use Express
    .use(
      compression({ threshold: 0 }),
      sirv('static', { dev }),
      middleware()
    );
  https.createServer(options, handler)
    .listen(443, err => {
      if (err) console.log('error', err);
    });
  polka() 
    .use(
      sirv('dehydrated', { dev: true, dotfiles: true}),
      redirect_http_to_https,
    )
    .listen(80, err => {
      if (err) console.log('error', err);
    });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3ZlbHRlL2ludGVybmFsL2luZGV4Lm1qcyIsIi4uLy4uLy4uL3NyYy9jYm9yLmpzIiwiLi4vLi4vLi4vc3JjL2FwaS5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9AZm9ydGF3ZXNvbWUvZnJlZS1zb2xpZC1zdmctaWNvbnMvZmFRdWVzdGlvbi5qcyIsIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1RpcC5zdmVsdGUiLCIuLi8uLi8uLi9zcmMvY29tcG9uZW50cy9QYW5lbC5zdmVsdGUiLCIuLi8uLi8uLi9zcmMvdXRpbC5qcyIsIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0JhZGdlcy5zdmVsdGUiLCIuLi8uLi8uLi9zcmMvY29tcG9uZW50cy9HYW1lQmFkZ2VzLnN2ZWx0ZSIsIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0ZhSWNvbi5zdmVsdGUiLCIuLi8uLi8uLi9zcmMvY29tcG9uZW50cy9TdHJlYW1lckF1dG9Db21wbGV0ZS5zdmVsdGUiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhQ29tbWVudC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9AZm9ydGF3ZXNvbWUvZnJlZS1zb2xpZC1zdmctaWNvbnMvZmFLZXkuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhVXNlci5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9AZm9ydGF3ZXNvbWUvZnJlZS1zb2xpZC1zdmctaWNvbnMvZmFVc2VyQ2xvY2suanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhVXNlckxvY2suanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhSG91cmdsYXNzSGFsZi5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9AZm9ydGF3ZXNvbWUvZnJlZS1zb2xpZC1zdmctaWNvbnMvZmFIaXN0b3J5LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYURvbGxhclNpZ24uanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhU3Rhci5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9AZm9ydGF3ZXNvbWUvZnJlZS1zb2xpZC1zdmctaWNvbnMvZmFFeGNoYW5nZUFsdC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9AZm9ydGF3ZXNvbWUvZnJlZS1zb2xpZC1zdmctaWNvbnMvZmFDYXJldFVwLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYUNhcmV0RG93bi5qcyIsIi4uLy4uLy4uL3NyYy9yb3V0ZXMvaW5kZXguc3ZlbHRlIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N2ZWx0ZS9zdG9yZS9pbmRleC5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhVXNlclNlY3JldC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9AZm9ydGF3ZXNvbWUvZnJlZS1zb2xpZC1zdmctaWNvbnMvZmFDb21tZW50RG90cy5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9AZm9ydGF3ZXNvbWUvZnJlZS1zb2xpZC1zdmctaWNvbnMvZmFTdW4uanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhTW9vbi5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9AZm9ydGF3ZXNvbWUvZnJlZS1zb2xpZC1zdmctaWNvbnMvZmFFeHRlcm5hbExpbmtBbHQuanMiLCIuLi8uLi8uLi9zcmMvY29tcG9uZW50cy9NaWdyYXRpb25UaW1lbGluZS5zdmVsdGUiLCIuLi8uLi8uLi9zcmMvY29tcG9uZW50cy9NaWdyYXRpb25zLnN2ZWx0ZSIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdmVsdGUtY2FsZW5kYXIvc3JjL0NvbXBvbmVudHMvbGliL2hlbHBlcnMuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3ZlbHRlLWNhbGVuZGFyL3NyYy9Db21wb25lbnRzL1dlZWsuc3ZlbHRlIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N2ZWx0ZS1jYWxlbmRhci9zcmMvQ29tcG9uZW50cy9Nb250aC5zdmVsdGUiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3ZlbHRlLWNhbGVuZGFyL3NyYy9Db21wb25lbnRzL05hdkJhci5zdmVsdGUiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3ZlbHRlLWNhbGVuZGFyL3NyYy9Db21wb25lbnRzL1BvcG92ZXIuc3ZlbHRlIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3RpbWVVdGlscy9kaXN0L3RpbWVVdGlscy5lc20uanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3ZlbHRlLWNhbGVuZGFyL3NyYy9Db21wb25lbnRzL2xpYi9rZXlDb2Rlcy5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdmVsdGUtY2FsZW5kYXIvc3JjL0NvbXBvbmVudHMvRGF0ZXBpY2tlci5zdmVsdGUiLCIuLi8uLi8uLi9zcmMvcm91dGVzL21pZ3JhdGlvbi9pbmRleC5zdmVsdGUiLCIuLi8uLi8uLi9zcmMvY29tcG9uZW50cy9zcHJpbmd5LmpzIiwiLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvTmV0d29yay5zdmVsdGUiLCIuLi8uLi8uLi9zcmMvY29tcG9uZW50cy9UaW1lbGluZTIuc3ZlbHRlIiwiLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvU3RyZWFtU3BpcmFsLnN2ZWx0ZSIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9AZm9ydGF3ZXNvbWUvZnJlZS1zb2xpZC1zdmctaWNvbnMvZmFBcnJvd1VwLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYUFycm93RG93bi5qcyIsIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbW1lbnRzLnN2ZWx0ZSIsIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0tleXdvcmRDbG91ZC5zdmVsdGUiLCIuLi8uLi8uLi9zcmMvY29tcG9uZW50cy9TdWJzY3JpYmVyRGlzdHJpYnV0aW9uLnN2ZWx0ZSIsIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1N0cmVhbUNhbGVuZGFySGVhdG1hcC5zdmVsdGUiLCIuLi8uLi8uLi9zcmMvcm91dGVzL3N0cmVhbWVyL1tpZF0uc3ZlbHRlIiwiLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvTW9kYWwuc3ZlbHRlIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYU1vdXNlLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYU1vYmlsZUFsdC5qcyIsIi4uLy4uLy4uL3NyYy9yb3V0ZXMvbWFwL2luZGV4LnN2ZWx0ZSIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9AZm9ydGF3ZXNvbWUvZnJlZS1zb2xpZC1zdmctaWNvbnMvZmFNYXAuanMiLCIuLi8uLi8uLi9zcmMvY29tcG9uZW50cy9OYXZpZ2F0aW9uLnN2ZWx0ZSIsIi4uLy4uLy4uL3NyYy9yb3V0ZXMvX2xheW91dC5zdmVsdGUiLCIuLi8uLi8uLi9zcmMvcm91dGVzL19lcnJvci5zdmVsdGUiLCIuLi8uLi8uLi9zcmMvbm9kZV9tb2R1bGVzL0BzYXBwZXIvaW50ZXJuYWwvbWFuaWZlc3Qtc2VydmVyLm1qcyIsIi4uLy4uLy4uL3NyYy9ub2RlX21vZHVsZXMvQHNhcHBlci9pbnRlcm5hbC9zaGFyZWQubWpzIiwiLi4vLi4vLi4vc3JjL25vZGVfbW9kdWxlcy9Ac2FwcGVyL2ludGVybmFsL0FwcC5zdmVsdGUiLCIuLi8uLi8uLi9zcmMvbm9kZV9tb2R1bGVzL0BzYXBwZXIvc2VydmVyLm1qcyIsIi4uLy4uLy4uL3NyYy9zZXJ2ZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gbm9vcCgpIHsgfVxuY29uc3QgaWRlbnRpdHkgPSB4ID0+IHg7XG5mdW5jdGlvbiBhc3NpZ24odGFyLCBzcmMpIHtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgZm9yIChjb25zdCBrIGluIHNyYylcbiAgICAgICAgdGFyW2tdID0gc3JjW2tdO1xuICAgIHJldHVybiB0YXI7XG59XG5mdW5jdGlvbiBpc19wcm9taXNlKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHZhbHVlLnRoZW4gPT09ICdmdW5jdGlvbic7XG59XG5mdW5jdGlvbiBhZGRfbG9jYXRpb24oZWxlbWVudCwgZmlsZSwgbGluZSwgY29sdW1uLCBjaGFyKSB7XG4gICAgZWxlbWVudC5fX3N2ZWx0ZV9tZXRhID0ge1xuICAgICAgICBsb2M6IHsgZmlsZSwgbGluZSwgY29sdW1uLCBjaGFyIH1cbiAgICB9O1xufVxuZnVuY3Rpb24gcnVuKGZuKSB7XG4gICAgcmV0dXJuIGZuKCk7XG59XG5mdW5jdGlvbiBibGFua19vYmplY3QoKSB7XG4gICAgcmV0dXJuIE9iamVjdC5jcmVhdGUobnVsbCk7XG59XG5mdW5jdGlvbiBydW5fYWxsKGZucykge1xuICAgIGZucy5mb3JFYWNoKHJ1bik7XG59XG5mdW5jdGlvbiBpc19mdW5jdGlvbih0aGluZykge1xuICAgIHJldHVybiB0eXBlb2YgdGhpbmcgPT09ICdmdW5jdGlvbic7XG59XG5mdW5jdGlvbiBzYWZlX25vdF9lcXVhbChhLCBiKSB7XG4gICAgcmV0dXJuIGEgIT0gYSA/IGIgPT0gYiA6IGEgIT09IGIgfHwgKChhICYmIHR5cGVvZiBhID09PSAnb2JqZWN0JykgfHwgdHlwZW9mIGEgPT09ICdmdW5jdGlvbicpO1xufVxuZnVuY3Rpb24gbm90X2VxdWFsKGEsIGIpIHtcbiAgICByZXR1cm4gYSAhPSBhID8gYiA9PSBiIDogYSAhPT0gYjtcbn1cbmZ1bmN0aW9uIHZhbGlkYXRlX3N0b3JlKHN0b3JlLCBuYW1lKSB7XG4gICAgaWYgKCFzdG9yZSB8fCB0eXBlb2Ygc3RvcmUuc3Vic2NyaWJlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgJyR7bmFtZX0nIGlzIG5vdCBhIHN0b3JlIHdpdGggYSAnc3Vic2NyaWJlJyBtZXRob2RgKTtcbiAgICB9XG59XG5mdW5jdGlvbiBzdWJzY3JpYmUoc3RvcmUsIGNhbGxiYWNrKSB7XG4gICAgY29uc3QgdW5zdWIgPSBzdG9yZS5zdWJzY3JpYmUoY2FsbGJhY2spO1xuICAgIHJldHVybiB1bnN1Yi51bnN1YnNjcmliZSA/ICgpID0+IHVuc3ViLnVuc3Vic2NyaWJlKCkgOiB1bnN1Yjtcbn1cbmZ1bmN0aW9uIGdldF9zdG9yZV92YWx1ZShzdG9yZSkge1xuICAgIGxldCB2YWx1ZTtcbiAgICBzdWJzY3JpYmUoc3RvcmUsIF8gPT4gdmFsdWUgPSBfKSgpO1xuICAgIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIGNvbXBvbmVudF9zdWJzY3JpYmUoY29tcG9uZW50LCBzdG9yZSwgY2FsbGJhY2spIHtcbiAgICBjb21wb25lbnQuJCQub25fZGVzdHJveS5wdXNoKHN1YnNjcmliZShzdG9yZSwgY2FsbGJhY2spKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9zbG90KGRlZmluaXRpb24sIGN0eCwgZm4pIHtcbiAgICBpZiAoZGVmaW5pdGlvbikge1xuICAgICAgICBjb25zdCBzbG90X2N0eCA9IGdldF9zbG90X2NvbnRleHQoZGVmaW5pdGlvbiwgY3R4LCBmbik7XG4gICAgICAgIHJldHVybiBkZWZpbml0aW9uWzBdKHNsb3RfY3R4KTtcbiAgICB9XG59XG5mdW5jdGlvbiBnZXRfc2xvdF9jb250ZXh0KGRlZmluaXRpb24sIGN0eCwgZm4pIHtcbiAgICByZXR1cm4gZGVmaW5pdGlvblsxXVxuICAgICAgICA/IGFzc2lnbih7fSwgYXNzaWduKGN0eC4kJHNjb3BlLmN0eCwgZGVmaW5pdGlvblsxXShmbiA/IGZuKGN0eCkgOiB7fSkpKVxuICAgICAgICA6IGN0eC4kJHNjb3BlLmN0eDtcbn1cbmZ1bmN0aW9uIGdldF9zbG90X2NoYW5nZXMoZGVmaW5pdGlvbiwgY3R4LCBjaGFuZ2VkLCBmbikge1xuICAgIHJldHVybiBkZWZpbml0aW9uWzFdXG4gICAgICAgID8gYXNzaWduKHt9LCBhc3NpZ24oY3R4LiQkc2NvcGUuY2hhbmdlZCB8fCB7fSwgZGVmaW5pdGlvblsxXShmbiA/IGZuKGNoYW5nZWQpIDoge30pKSlcbiAgICAgICAgOiBjdHguJCRzY29wZS5jaGFuZ2VkIHx8IHt9O1xufVxuZnVuY3Rpb24gZXhjbHVkZV9pbnRlcm5hbF9wcm9wcyhwcm9wcykge1xuICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuICAgIGZvciAoY29uc3QgayBpbiBwcm9wcylcbiAgICAgICAgaWYgKGtbMF0gIT09ICckJylcbiAgICAgICAgICAgIHJlc3VsdFtrXSA9IHByb3BzW2tdO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBvbmNlKGZuKSB7XG4gICAgbGV0IHJhbiA9IGZhbHNlO1xuICAgIHJldHVybiBmdW5jdGlvbiAoLi4uYXJncykge1xuICAgICAgICBpZiAocmFuKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICByYW4gPSB0cnVlO1xuICAgICAgICBmbi5jYWxsKHRoaXMsIC4uLmFyZ3MpO1xuICAgIH07XG59XG5mdW5jdGlvbiBudWxsX3RvX2VtcHR5KHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID09IG51bGwgPyAnJyA6IHZhbHVlO1xufVxuZnVuY3Rpb24gc2V0X3N0b3JlX3ZhbHVlKHN0b3JlLCByZXQsIHZhbHVlID0gcmV0KSB7XG4gICAgc3RvcmUuc2V0KHZhbHVlKTtcbiAgICByZXR1cm4gcmV0O1xufVxuXG5jb25zdCBpc19jbGllbnQgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJztcbmxldCBub3cgPSBpc19jbGllbnRcbiAgICA/ICgpID0+IHdpbmRvdy5wZXJmb3JtYW5jZS5ub3coKVxuICAgIDogKCkgPT4gRGF0ZS5ub3coKTtcbmxldCByYWYgPSBpc19jbGllbnQgPyBjYiA9PiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoY2IpIDogbm9vcDtcbi8vIHVzZWQgaW50ZXJuYWxseSBmb3IgdGVzdGluZ1xuZnVuY3Rpb24gc2V0X25vdyhmbikge1xuICAgIG5vdyA9IGZuO1xufVxuZnVuY3Rpb24gc2V0X3JhZihmbikge1xuICAgIHJhZiA9IGZuO1xufVxuXG5jb25zdCB0YXNrcyA9IG5ldyBTZXQoKTtcbmxldCBydW5uaW5nID0gZmFsc2U7XG5mdW5jdGlvbiBydW5fdGFza3MoKSB7XG4gICAgdGFza3MuZm9yRWFjaCh0YXNrID0+IHtcbiAgICAgICAgaWYgKCF0YXNrWzBdKG5vdygpKSkge1xuICAgICAgICAgICAgdGFza3MuZGVsZXRlKHRhc2spO1xuICAgICAgICAgICAgdGFza1sxXSgpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcnVubmluZyA9IHRhc2tzLnNpemUgPiAwO1xuICAgIGlmIChydW5uaW5nKVxuICAgICAgICByYWYocnVuX3Rhc2tzKTtcbn1cbmZ1bmN0aW9uIGNsZWFyX2xvb3BzKCkge1xuICAgIC8vIGZvciB0ZXN0aW5nLi4uXG4gICAgdGFza3MuZm9yRWFjaCh0YXNrID0+IHRhc2tzLmRlbGV0ZSh0YXNrKSk7XG4gICAgcnVubmluZyA9IGZhbHNlO1xufVxuZnVuY3Rpb24gbG9vcChmbikge1xuICAgIGxldCB0YXNrO1xuICAgIGlmICghcnVubmluZykge1xuICAgICAgICBydW5uaW5nID0gdHJ1ZTtcbiAgICAgICAgcmFmKHJ1bl90YXNrcyk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHByb21pc2U6IG5ldyBQcm9taXNlKGZ1bGZpbCA9PiB7XG4gICAgICAgICAgICB0YXNrcy5hZGQodGFzayA9IFtmbiwgZnVsZmlsXSk7XG4gICAgICAgIH0pLFxuICAgICAgICBhYm9ydCgpIHtcbiAgICAgICAgICAgIHRhc2tzLmRlbGV0ZSh0YXNrKTtcbiAgICAgICAgfVxuICAgIH07XG59XG5cbmZ1bmN0aW9uIGFwcGVuZCh0YXJnZXQsIG5vZGUpIHtcbiAgICB0YXJnZXQuYXBwZW5kQ2hpbGQobm9kZSk7XG59XG5mdW5jdGlvbiBpbnNlcnQodGFyZ2V0LCBub2RlLCBhbmNob3IpIHtcbiAgICB0YXJnZXQuaW5zZXJ0QmVmb3JlKG5vZGUsIGFuY2hvciB8fCBudWxsKTtcbn1cbmZ1bmN0aW9uIGRldGFjaChub2RlKSB7XG4gICAgbm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG5vZGUpO1xufVxuZnVuY3Rpb24gZGVzdHJveV9lYWNoKGl0ZXJhdGlvbnMsIGRldGFjaGluZykge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaXRlcmF0aW9ucy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBpZiAoaXRlcmF0aW9uc1tpXSlcbiAgICAgICAgICAgIGl0ZXJhdGlvbnNbaV0uZChkZXRhY2hpbmcpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGVsZW1lbnQobmFtZSkge1xuICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KG5hbWUpO1xufVxuZnVuY3Rpb24gZWxlbWVudF9pcyhuYW1lLCBpcykge1xuICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KG5hbWUsIHsgaXMgfSk7XG59XG5mdW5jdGlvbiBvYmplY3Rfd2l0aG91dF9wcm9wZXJ0aWVzKG9iaiwgZXhjbHVkZSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tb2JqZWN0LWxpdGVyYWwtdHlwZS1hc3NlcnRpb25cbiAgICBjb25zdCB0YXJnZXQgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGsgaW4gb2JqKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrKVxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgJiYgZXhjbHVkZS5pbmRleE9mKGspID09PSAtMSkge1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgdGFyZ2V0W2tdID0gb2JqW2tdO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQ7XG59XG5mdW5jdGlvbiBzdmdfZWxlbWVudChuYW1lKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCBuYW1lKTtcbn1cbmZ1bmN0aW9uIHRleHQoZGF0YSkge1xuICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShkYXRhKTtcbn1cbmZ1bmN0aW9uIHNwYWNlKCkge1xuICAgIHJldHVybiB0ZXh0KCcgJyk7XG59XG5mdW5jdGlvbiBlbXB0eSgpIHtcbiAgICByZXR1cm4gdGV4dCgnJyk7XG59XG5mdW5jdGlvbiBsaXN0ZW4obm9kZSwgZXZlbnQsIGhhbmRsZXIsIG9wdGlvbnMpIHtcbiAgICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZXIsIG9wdGlvbnMpO1xuICAgIHJldHVybiAoKSA9PiBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZXIsIG9wdGlvbnMpO1xufVxuZnVuY3Rpb24gcHJldmVudF9kZWZhdWx0KGZuKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHJldHVybiBmbi5jYWxsKHRoaXMsIGV2ZW50KTtcbiAgICB9O1xufVxuZnVuY3Rpb24gc3RvcF9wcm9wYWdhdGlvbihmbikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgcmV0dXJuIGZuLmNhbGwodGhpcywgZXZlbnQpO1xuICAgIH07XG59XG5mdW5jdGlvbiBzZWxmKGZuKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGlmIChldmVudC50YXJnZXQgPT09IHRoaXMpXG4gICAgICAgICAgICBmbi5jYWxsKHRoaXMsIGV2ZW50KTtcbiAgICB9O1xufVxuZnVuY3Rpb24gYXR0cihub2RlLCBhdHRyaWJ1dGUsIHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09IG51bGwpXG4gICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKGF0dHJpYnV0ZSk7XG4gICAgZWxzZVxuICAgICAgICBub2RlLnNldEF0dHJpYnV0ZShhdHRyaWJ1dGUsIHZhbHVlKTtcbn1cbmZ1bmN0aW9uIHNldF9hdHRyaWJ1dGVzKG5vZGUsIGF0dHJpYnV0ZXMpIHtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBhdHRyaWJ1dGVzKSB7XG4gICAgICAgIGlmIChrZXkgPT09ICdzdHlsZScpIHtcbiAgICAgICAgICAgIG5vZGUuc3R5bGUuY3NzVGV4dCA9IGF0dHJpYnV0ZXNba2V5XTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChrZXkgaW4gbm9kZSkge1xuICAgICAgICAgICAgbm9kZVtrZXldID0gYXR0cmlidXRlc1trZXldO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgYXR0cihub2RlLCBrZXksIGF0dHJpYnV0ZXNba2V5XSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBzZXRfc3ZnX2F0dHJpYnV0ZXMobm9kZSwgYXR0cmlidXRlcykge1xuICAgIGZvciAoY29uc3Qga2V5IGluIGF0dHJpYnV0ZXMpIHtcbiAgICAgICAgYXR0cihub2RlLCBrZXksIGF0dHJpYnV0ZXNba2V5XSk7XG4gICAgfVxufVxuZnVuY3Rpb24gc2V0X2N1c3RvbV9lbGVtZW50X2RhdGEobm9kZSwgcHJvcCwgdmFsdWUpIHtcbiAgICBpZiAocHJvcCBpbiBub2RlKSB7XG4gICAgICAgIG5vZGVbcHJvcF0gPSB2YWx1ZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGF0dHIobm9kZSwgcHJvcCwgdmFsdWUpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHhsaW5rX2F0dHIobm9kZSwgYXR0cmlidXRlLCB2YWx1ZSkge1xuICAgIG5vZGUuc2V0QXR0cmlidXRlTlMoJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsnLCBhdHRyaWJ1dGUsIHZhbHVlKTtcbn1cbmZ1bmN0aW9uIGdldF9iaW5kaW5nX2dyb3VwX3ZhbHVlKGdyb3VwKSB7XG4gICAgY29uc3QgdmFsdWUgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGdyb3VwLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGlmIChncm91cFtpXS5jaGVja2VkKVxuICAgICAgICAgICAgdmFsdWUucHVzaChncm91cFtpXS5fX3ZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gdG9fbnVtYmVyKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSAnJyA/IHVuZGVmaW5lZCA6ICt2YWx1ZTtcbn1cbmZ1bmN0aW9uIHRpbWVfcmFuZ2VzX3RvX2FycmF5KHJhbmdlcykge1xuICAgIGNvbnN0IGFycmF5ID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCByYW5nZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgYXJyYXkucHVzaCh7IHN0YXJ0OiByYW5nZXMuc3RhcnQoaSksIGVuZDogcmFuZ2VzLmVuZChpKSB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xufVxuZnVuY3Rpb24gY2hpbGRyZW4oZWxlbWVudCkge1xuICAgIHJldHVybiBBcnJheS5mcm9tKGVsZW1lbnQuY2hpbGROb2Rlcyk7XG59XG5mdW5jdGlvbiBjbGFpbV9lbGVtZW50KG5vZGVzLCBuYW1lLCBhdHRyaWJ1dGVzLCBzdmcpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5vZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGNvbnN0IG5vZGUgPSBub2Rlc1tpXTtcbiAgICAgICAgaWYgKG5vZGUubm9kZU5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgbm9kZS5hdHRyaWJ1dGVzLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXR0cmlidXRlID0gbm9kZS5hdHRyaWJ1dGVzW2pdO1xuICAgICAgICAgICAgICAgIGlmICghYXR0cmlidXRlc1thdHRyaWJ1dGUubmFtZV0pXG4gICAgICAgICAgICAgICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKGF0dHJpYnV0ZS5uYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBub2Rlcy5zcGxpY2UoaSwgMSlbMF07IC8vIFRPRE8gc3RyaXAgdW53YW50ZWQgYXR0cmlidXRlc1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzdmcgPyBzdmdfZWxlbWVudChuYW1lKSA6IGVsZW1lbnQobmFtZSk7XG59XG5mdW5jdGlvbiBjbGFpbV90ZXh0KG5vZGVzLCBkYXRhKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBjb25zdCBub2RlID0gbm9kZXNbaV07XG4gICAgICAgIGlmIChub2RlLm5vZGVUeXBlID09PSAzKSB7XG4gICAgICAgICAgICBub2RlLmRhdGEgPSAnJyArIGRhdGE7XG4gICAgICAgICAgICByZXR1cm4gbm9kZXMuc3BsaWNlKGksIDEpWzBdO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0ZXh0KGRhdGEpO1xufVxuZnVuY3Rpb24gY2xhaW1fc3BhY2Uobm9kZXMpIHtcbiAgICByZXR1cm4gY2xhaW1fdGV4dChub2RlcywgJyAnKTtcbn1cbmZ1bmN0aW9uIHNldF9kYXRhKHRleHQsIGRhdGEpIHtcbiAgICBkYXRhID0gJycgKyBkYXRhO1xuICAgIGlmICh0ZXh0LmRhdGEgIT09IGRhdGEpXG4gICAgICAgIHRleHQuZGF0YSA9IGRhdGE7XG59XG5mdW5jdGlvbiBzZXRfaW5wdXRfdmFsdWUoaW5wdXQsIHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlICE9IG51bGwgfHwgaW5wdXQudmFsdWUpIHtcbiAgICAgICAgaW5wdXQudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG59XG5mdW5jdGlvbiBzZXRfaW5wdXRfdHlwZShpbnB1dCwgdHlwZSkge1xuICAgIHRyeSB7XG4gICAgICAgIGlucHV0LnR5cGUgPSB0eXBlO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICAvLyBkbyBub3RoaW5nXG4gICAgfVxufVxuZnVuY3Rpb24gc2V0X3N0eWxlKG5vZGUsIGtleSwgdmFsdWUsIGltcG9ydGFudCkge1xuICAgIG5vZGUuc3R5bGUuc2V0UHJvcGVydHkoa2V5LCB2YWx1ZSwgaW1wb3J0YW50ID8gJ2ltcG9ydGFudCcgOiAnJyk7XG59XG5mdW5jdGlvbiBzZWxlY3Rfb3B0aW9uKHNlbGVjdCwgdmFsdWUpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlbGVjdC5vcHRpb25zLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbiA9IHNlbGVjdC5vcHRpb25zW2ldO1xuICAgICAgICBpZiAob3B0aW9uLl9fdmFsdWUgPT09IHZhbHVlKSB7XG4gICAgICAgICAgICBvcHRpb24uc2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gc2VsZWN0X29wdGlvbnMoc2VsZWN0LCB2YWx1ZSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2VsZWN0Lm9wdGlvbnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9uID0gc2VsZWN0Lm9wdGlvbnNbaV07XG4gICAgICAgIG9wdGlvbi5zZWxlY3RlZCA9IH52YWx1ZS5pbmRleE9mKG9wdGlvbi5fX3ZhbHVlKTtcbiAgICB9XG59XG5mdW5jdGlvbiBzZWxlY3RfdmFsdWUoc2VsZWN0KSB7XG4gICAgY29uc3Qgc2VsZWN0ZWRfb3B0aW9uID0gc2VsZWN0LnF1ZXJ5U2VsZWN0b3IoJzpjaGVja2VkJykgfHwgc2VsZWN0Lm9wdGlvbnNbMF07XG4gICAgcmV0dXJuIHNlbGVjdGVkX29wdGlvbiAmJiBzZWxlY3RlZF9vcHRpb24uX192YWx1ZTtcbn1cbmZ1bmN0aW9uIHNlbGVjdF9tdWx0aXBsZV92YWx1ZShzZWxlY3QpIHtcbiAgICByZXR1cm4gW10ubWFwLmNhbGwoc2VsZWN0LnF1ZXJ5U2VsZWN0b3JBbGwoJzpjaGVja2VkJyksIG9wdGlvbiA9PiBvcHRpb24uX192YWx1ZSk7XG59XG5mdW5jdGlvbiBhZGRfcmVzaXplX2xpc3RlbmVyKGVsZW1lbnQsIGZuKSB7XG4gICAgaWYgKGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCkucG9zaXRpb24gPT09ICdzdGF0aWMnKSB7XG4gICAgICAgIGVsZW1lbnQuc3R5bGUucG9zaXRpb24gPSAncmVsYXRpdmUnO1xuICAgIH1cbiAgICBjb25zdCBvYmplY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvYmplY3QnKTtcbiAgICBvYmplY3Quc2V0QXR0cmlidXRlKCdzdHlsZScsICdkaXNwbGF5OiBibG9jazsgcG9zaXRpb246IGFic29sdXRlOyB0b3A6IDA7IGxlZnQ6IDA7IGhlaWdodDogMTAwJTsgd2lkdGg6IDEwMCU7IG92ZXJmbG93OiBoaWRkZW47IHBvaW50ZXItZXZlbnRzOiBub25lOyB6LWluZGV4OiAtMTsnKTtcbiAgICBvYmplY3QudHlwZSA9ICd0ZXh0L2h0bWwnO1xuICAgIG9iamVjdC50YWJJbmRleCA9IC0xO1xuICAgIGxldCB3aW47XG4gICAgb2JqZWN0Lm9ubG9hZCA9ICgpID0+IHtcbiAgICAgICAgd2luID0gb2JqZWN0LmNvbnRlbnREb2N1bWVudC5kZWZhdWx0VmlldztcbiAgICAgICAgd2luLmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGZuKTtcbiAgICB9O1xuICAgIGlmICgvVHJpZGVudC8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSkge1xuICAgICAgICBlbGVtZW50LmFwcGVuZENoaWxkKG9iamVjdCk7XG4gICAgICAgIG9iamVjdC5kYXRhID0gJ2Fib3V0OmJsYW5rJztcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIG9iamVjdC5kYXRhID0gJ2Fib3V0OmJsYW5rJztcbiAgICAgICAgZWxlbWVudC5hcHBlbmRDaGlsZChvYmplY3QpO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBjYW5jZWw6ICgpID0+IHtcbiAgICAgICAgICAgIHdpbiAmJiB3aW4ucmVtb3ZlRXZlbnRMaXN0ZW5lciAmJiB3aW4ucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgZm4pO1xuICAgICAgICAgICAgZWxlbWVudC5yZW1vdmVDaGlsZChvYmplY3QpO1xuICAgICAgICB9XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHRvZ2dsZV9jbGFzcyhlbGVtZW50LCBuYW1lLCB0b2dnbGUpIHtcbiAgICBlbGVtZW50LmNsYXNzTGlzdFt0b2dnbGUgPyAnYWRkJyA6ICdyZW1vdmUnXShuYW1lKTtcbn1cbmZ1bmN0aW9uIGN1c3RvbV9ldmVudCh0eXBlLCBkZXRhaWwpIHtcbiAgICBjb25zdCBlID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0N1c3RvbUV2ZW50Jyk7XG4gICAgZS5pbml0Q3VzdG9tRXZlbnQodHlwZSwgZmFsc2UsIGZhbHNlLCBkZXRhaWwpO1xuICAgIHJldHVybiBlO1xufVxuY2xhc3MgSHRtbFRhZyB7XG4gICAgY29uc3RydWN0b3IoaHRtbCwgYW5jaG9yID0gbnVsbCkge1xuICAgICAgICB0aGlzLmUgPSBlbGVtZW50KCdkaXYnKTtcbiAgICAgICAgdGhpcy5hID0gYW5jaG9yO1xuICAgICAgICB0aGlzLnUoaHRtbCk7XG4gICAgfVxuICAgIG0odGFyZ2V0LCBhbmNob3IgPSBudWxsKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5uLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICBpbnNlcnQodGFyZ2V0LCB0aGlzLm5baV0sIGFuY2hvcik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50ID0gdGFyZ2V0O1xuICAgIH1cbiAgICB1KGh0bWwpIHtcbiAgICAgICAgdGhpcy5lLmlubmVySFRNTCA9IGh0bWw7XG4gICAgICAgIHRoaXMubiA9IEFycmF5LmZyb20odGhpcy5lLmNoaWxkTm9kZXMpO1xuICAgIH1cbiAgICBwKGh0bWwpIHtcbiAgICAgICAgdGhpcy5kKCk7XG4gICAgICAgIHRoaXMudShodG1sKTtcbiAgICAgICAgdGhpcy5tKHRoaXMudCwgdGhpcy5hKTtcbiAgICB9XG4gICAgZCgpIHtcbiAgICAgICAgdGhpcy5uLmZvckVhY2goZGV0YWNoKTtcbiAgICB9XG59XG5cbmxldCBzdHlsZXNoZWV0O1xubGV0IGFjdGl2ZSA9IDA7XG5sZXQgY3VycmVudF9ydWxlcyA9IHt9O1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL2Rhcmtza3lhcHAvc3RyaW5nLWhhc2gvYmxvYi9tYXN0ZXIvaW5kZXguanNcbmZ1bmN0aW9uIGhhc2goc3RyKSB7XG4gICAgbGV0IGhhc2ggPSA1MzgxO1xuICAgIGxldCBpID0gc3RyLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKVxuICAgICAgICBoYXNoID0gKChoYXNoIDw8IDUpIC0gaGFzaCkgXiBzdHIuY2hhckNvZGVBdChpKTtcbiAgICByZXR1cm4gaGFzaCA+Pj4gMDtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9ydWxlKG5vZGUsIGEsIGIsIGR1cmF0aW9uLCBkZWxheSwgZWFzZSwgZm4sIHVpZCA9IDApIHtcbiAgICBjb25zdCBzdGVwID0gMTYuNjY2IC8gZHVyYXRpb247XG4gICAgbGV0IGtleWZyYW1lcyA9ICd7XFxuJztcbiAgICBmb3IgKGxldCBwID0gMDsgcCA8PSAxOyBwICs9IHN0ZXApIHtcbiAgICAgICAgY29uc3QgdCA9IGEgKyAoYiAtIGEpICogZWFzZShwKTtcbiAgICAgICAga2V5ZnJhbWVzICs9IHAgKiAxMDAgKyBgJXske2ZuKHQsIDEgLSB0KX19XFxuYDtcbiAgICB9XG4gICAgY29uc3QgcnVsZSA9IGtleWZyYW1lcyArIGAxMDAlIHske2ZuKGIsIDEgLSBiKX19XFxufWA7XG4gICAgY29uc3QgbmFtZSA9IGBfX3N2ZWx0ZV8ke2hhc2gocnVsZSl9XyR7dWlkfWA7XG4gICAgaWYgKCFjdXJyZW50X3J1bGVzW25hbWVdKSB7XG4gICAgICAgIGlmICghc3R5bGVzaGVldCkge1xuICAgICAgICAgICAgY29uc3Qgc3R5bGUgPSBlbGVtZW50KCdzdHlsZScpO1xuICAgICAgICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gICAgICAgICAgICBzdHlsZXNoZWV0ID0gc3R5bGUuc2hlZXQ7XG4gICAgICAgIH1cbiAgICAgICAgY3VycmVudF9ydWxlc1tuYW1lXSA9IHRydWU7XG4gICAgICAgIHN0eWxlc2hlZXQuaW5zZXJ0UnVsZShgQGtleWZyYW1lcyAke25hbWV9ICR7cnVsZX1gLCBzdHlsZXNoZWV0LmNzc1J1bGVzLmxlbmd0aCk7XG4gICAgfVxuICAgIGNvbnN0IGFuaW1hdGlvbiA9IG5vZGUuc3R5bGUuYW5pbWF0aW9uIHx8ICcnO1xuICAgIG5vZGUuc3R5bGUuYW5pbWF0aW9uID0gYCR7YW5pbWF0aW9uID8gYCR7YW5pbWF0aW9ufSwgYCA6IGBgfSR7bmFtZX0gJHtkdXJhdGlvbn1tcyBsaW5lYXIgJHtkZWxheX1tcyAxIGJvdGhgO1xuICAgIGFjdGl2ZSArPSAxO1xuICAgIHJldHVybiBuYW1lO1xufVxuZnVuY3Rpb24gZGVsZXRlX3J1bGUobm9kZSwgbmFtZSkge1xuICAgIG5vZGUuc3R5bGUuYW5pbWF0aW9uID0gKG5vZGUuc3R5bGUuYW5pbWF0aW9uIHx8ICcnKVxuICAgICAgICAuc3BsaXQoJywgJylcbiAgICAgICAgLmZpbHRlcihuYW1lXG4gICAgICAgID8gYW5pbSA9PiBhbmltLmluZGV4T2YobmFtZSkgPCAwIC8vIHJlbW92ZSBzcGVjaWZpYyBhbmltYXRpb25cbiAgICAgICAgOiBhbmltID0+IGFuaW0uaW5kZXhPZignX19zdmVsdGUnKSA9PT0gLTEgLy8gcmVtb3ZlIGFsbCBTdmVsdGUgYW5pbWF0aW9uc1xuICAgIClcbiAgICAgICAgLmpvaW4oJywgJyk7XG4gICAgaWYgKG5hbWUgJiYgIS0tYWN0aXZlKVxuICAgICAgICBjbGVhcl9ydWxlcygpO1xufVxuZnVuY3Rpb24gY2xlYXJfcnVsZXMoKSB7XG4gICAgcmFmKCgpID0+IHtcbiAgICAgICAgaWYgKGFjdGl2ZSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgbGV0IGkgPSBzdHlsZXNoZWV0LmNzc1J1bGVzLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKGktLSlcbiAgICAgICAgICAgIHN0eWxlc2hlZXQuZGVsZXRlUnVsZShpKTtcbiAgICAgICAgY3VycmVudF9ydWxlcyA9IHt9O1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVfYW5pbWF0aW9uKG5vZGUsIGZyb20sIGZuLCBwYXJhbXMpIHtcbiAgICBpZiAoIWZyb20pXG4gICAgICAgIHJldHVybiBub29wO1xuICAgIGNvbnN0IHRvID0gbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBpZiAoZnJvbS5sZWZ0ID09PSB0by5sZWZ0ICYmIGZyb20ucmlnaHQgPT09IHRvLnJpZ2h0ICYmIGZyb20udG9wID09PSB0by50b3AgJiYgZnJvbS5ib3R0b20gPT09IHRvLmJvdHRvbSlcbiAgICAgICAgcmV0dXJuIG5vb3A7XG4gICAgY29uc3QgeyBkZWxheSA9IDAsIGR1cmF0aW9uID0gMzAwLCBlYXNpbmcgPSBpZGVudGl0eSwgXG4gICAgLy8gQHRzLWlnbm9yZSB0b2RvOiBzaG91bGQgdGhpcyBiZSBzZXBhcmF0ZWQgZnJvbSBkZXN0cnVjdHVyaW5nPyBPciBzdGFydC9lbmQgYWRkZWQgdG8gcHVibGljIGFwaSBhbmQgZG9jdW1lbnRhdGlvbj9cbiAgICBzdGFydDogc3RhcnRfdGltZSA9IG5vdygpICsgZGVsYXksIFxuICAgIC8vIEB0cy1pZ25vcmUgdG9kbzpcbiAgICBlbmQgPSBzdGFydF90aW1lICsgZHVyYXRpb24sIHRpY2sgPSBub29wLCBjc3MgfSA9IGZuKG5vZGUsIHsgZnJvbSwgdG8gfSwgcGFyYW1zKTtcbiAgICBsZXQgcnVubmluZyA9IHRydWU7XG4gICAgbGV0IHN0YXJ0ZWQgPSBmYWxzZTtcbiAgICBsZXQgbmFtZTtcbiAgICBmdW5jdGlvbiBzdGFydCgpIHtcbiAgICAgICAgaWYgKGNzcykge1xuICAgICAgICAgICAgbmFtZSA9IGNyZWF0ZV9ydWxlKG5vZGUsIDAsIDEsIGR1cmF0aW9uLCBkZWxheSwgZWFzaW5nLCBjc3MpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZGVsYXkpIHtcbiAgICAgICAgICAgIHN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgICAgIGlmIChjc3MpXG4gICAgICAgICAgICBkZWxldGVfcnVsZShub2RlLCBuYW1lKTtcbiAgICAgICAgcnVubmluZyA9IGZhbHNlO1xuICAgIH1cbiAgICBsb29wKG5vdyA9PiB7XG4gICAgICAgIGlmICghc3RhcnRlZCAmJiBub3cgPj0gc3RhcnRfdGltZSkge1xuICAgICAgICAgICAgc3RhcnRlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0YXJ0ZWQgJiYgbm93ID49IGVuZCkge1xuICAgICAgICAgICAgdGljaygxLCAwKTtcbiAgICAgICAgICAgIHN0b3AoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXJ1bm5pbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhcnRlZCkge1xuICAgICAgICAgICAgY29uc3QgcCA9IG5vdyAtIHN0YXJ0X3RpbWU7XG4gICAgICAgICAgICBjb25zdCB0ID0gMCArIDEgKiBlYXNpbmcocCAvIGR1cmF0aW9uKTtcbiAgICAgICAgICAgIHRpY2sodCwgMSAtIHQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pO1xuICAgIHN0YXJ0KCk7XG4gICAgdGljaygwLCAxKTtcbiAgICByZXR1cm4gc3RvcDtcbn1cbmZ1bmN0aW9uIGZpeF9wb3NpdGlvbihub2RlKSB7XG4gICAgY29uc3Qgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKG5vZGUpO1xuICAgIGlmIChzdHlsZS5wb3NpdGlvbiAhPT0gJ2Fic29sdXRlJyAmJiBzdHlsZS5wb3NpdGlvbiAhPT0gJ2ZpeGVkJykge1xuICAgICAgICBjb25zdCB7IHdpZHRoLCBoZWlnaHQgfSA9IHN0eWxlO1xuICAgICAgICBjb25zdCBhID0gbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgbm9kZS5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gICAgICAgIG5vZGUuc3R5bGUud2lkdGggPSB3aWR0aDtcbiAgICAgICAgbm9kZS5zdHlsZS5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgICAgIGFkZF90cmFuc2Zvcm0obm9kZSwgYSk7XG4gICAgfVxufVxuZnVuY3Rpb24gYWRkX3RyYW5zZm9ybShub2RlLCBhKSB7XG4gICAgY29uc3QgYiA9IG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgaWYgKGEubGVmdCAhPT0gYi5sZWZ0IHx8IGEudG9wICE9PSBiLnRvcCkge1xuICAgICAgICBjb25zdCBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUobm9kZSk7XG4gICAgICAgIGNvbnN0IHRyYW5zZm9ybSA9IHN0eWxlLnRyYW5zZm9ybSA9PT0gJ25vbmUnID8gJycgOiBzdHlsZS50cmFuc2Zvcm07XG4gICAgICAgIG5vZGUuc3R5bGUudHJhbnNmb3JtID0gYCR7dHJhbnNmb3JtfSB0cmFuc2xhdGUoJHthLmxlZnQgLSBiLmxlZnR9cHgsICR7YS50b3AgLSBiLnRvcH1weClgO1xuICAgIH1cbn1cblxubGV0IGN1cnJlbnRfY29tcG9uZW50O1xuZnVuY3Rpb24gc2V0X2N1cnJlbnRfY29tcG9uZW50KGNvbXBvbmVudCkge1xuICAgIGN1cnJlbnRfY29tcG9uZW50ID0gY29tcG9uZW50O1xufVxuZnVuY3Rpb24gZ2V0X2N1cnJlbnRfY29tcG9uZW50KCkge1xuICAgIGlmICghY3VycmVudF9jb21wb25lbnQpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgRnVuY3Rpb24gY2FsbGVkIG91dHNpZGUgY29tcG9uZW50IGluaXRpYWxpemF0aW9uYCk7XG4gICAgcmV0dXJuIGN1cnJlbnRfY29tcG9uZW50O1xufVxuZnVuY3Rpb24gYmVmb3JlVXBkYXRlKGZuKSB7XG4gICAgZ2V0X2N1cnJlbnRfY29tcG9uZW50KCkuJCQuYmVmb3JlX3VwZGF0ZS5wdXNoKGZuKTtcbn1cbmZ1bmN0aW9uIG9uTW91bnQoZm4pIHtcbiAgICBnZXRfY3VycmVudF9jb21wb25lbnQoKS4kJC5vbl9tb3VudC5wdXNoKGZuKTtcbn1cbmZ1bmN0aW9uIGFmdGVyVXBkYXRlKGZuKSB7XG4gICAgZ2V0X2N1cnJlbnRfY29tcG9uZW50KCkuJCQuYWZ0ZXJfdXBkYXRlLnB1c2goZm4pO1xufVxuZnVuY3Rpb24gb25EZXN0cm95KGZuKSB7XG4gICAgZ2V0X2N1cnJlbnRfY29tcG9uZW50KCkuJCQub25fZGVzdHJveS5wdXNoKGZuKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUV2ZW50RGlzcGF0Y2hlcigpIHtcbiAgICBjb25zdCBjb21wb25lbnQgPSBjdXJyZW50X2NvbXBvbmVudDtcbiAgICByZXR1cm4gKHR5cGUsIGRldGFpbCkgPT4ge1xuICAgICAgICBjb25zdCBjYWxsYmFja3MgPSBjb21wb25lbnQuJCQuY2FsbGJhY2tzW3R5cGVdO1xuICAgICAgICBpZiAoY2FsbGJhY2tzKSB7XG4gICAgICAgICAgICAvLyBUT0RPIGFyZSB0aGVyZSBzaXR1YXRpb25zIHdoZXJlIGV2ZW50cyBjb3VsZCBiZSBkaXNwYXRjaGVkXG4gICAgICAgICAgICAvLyBpbiBhIHNlcnZlciAobm9uLURPTSkgZW52aXJvbm1lbnQ/XG4gICAgICAgICAgICBjb25zdCBldmVudCA9IGN1c3RvbV9ldmVudCh0eXBlLCBkZXRhaWwpO1xuICAgICAgICAgICAgY2FsbGJhY2tzLnNsaWNlKCkuZm9yRWFjaChmbiA9PiB7XG4gICAgICAgICAgICAgICAgZm4uY2FsbChjb21wb25lbnQsIGV2ZW50KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHNldENvbnRleHQoa2V5LCBjb250ZXh0KSB7XG4gICAgZ2V0X2N1cnJlbnRfY29tcG9uZW50KCkuJCQuY29udGV4dC5zZXQoa2V5LCBjb250ZXh0KTtcbn1cbmZ1bmN0aW9uIGdldENvbnRleHQoa2V5KSB7XG4gICAgcmV0dXJuIGdldF9jdXJyZW50X2NvbXBvbmVudCgpLiQkLmNvbnRleHQuZ2V0KGtleSk7XG59XG4vLyBUT0RPIGZpZ3VyZSBvdXQgaWYgd2Ugc3RpbGwgd2FudCB0byBzdXBwb3J0XG4vLyBzaG9ydGhhbmQgZXZlbnRzLCBvciBpZiB3ZSB3YW50IHRvIGltcGxlbWVudFxuLy8gYSByZWFsIGJ1YmJsaW5nIG1lY2hhbmlzbVxuZnVuY3Rpb24gYnViYmxlKGNvbXBvbmVudCwgZXZlbnQpIHtcbiAgICBjb25zdCBjYWxsYmFja3MgPSBjb21wb25lbnQuJCQuY2FsbGJhY2tzW2V2ZW50LnR5cGVdO1xuICAgIGlmIChjYWxsYmFja3MpIHtcbiAgICAgICAgY2FsbGJhY2tzLnNsaWNlKCkuZm9yRWFjaChmbiA9PiBmbihldmVudCkpO1xuICAgIH1cbn1cblxuY29uc3QgZGlydHlfY29tcG9uZW50cyA9IFtdO1xuY29uc3QgaW50cm9zID0geyBlbmFibGVkOiBmYWxzZSB9O1xuY29uc3QgYmluZGluZ19jYWxsYmFja3MgPSBbXTtcbmNvbnN0IHJlbmRlcl9jYWxsYmFja3MgPSBbXTtcbmNvbnN0IGZsdXNoX2NhbGxiYWNrcyA9IFtdO1xuY29uc3QgcmVzb2x2ZWRfcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSgpO1xubGV0IHVwZGF0ZV9zY2hlZHVsZWQgPSBmYWxzZTtcbmZ1bmN0aW9uIHNjaGVkdWxlX3VwZGF0ZSgpIHtcbiAgICBpZiAoIXVwZGF0ZV9zY2hlZHVsZWQpIHtcbiAgICAgICAgdXBkYXRlX3NjaGVkdWxlZCA9IHRydWU7XG4gICAgICAgIHJlc29sdmVkX3Byb21pc2UudGhlbihmbHVzaCk7XG4gICAgfVxufVxuZnVuY3Rpb24gdGljaygpIHtcbiAgICBzY2hlZHVsZV91cGRhdGUoKTtcbiAgICByZXR1cm4gcmVzb2x2ZWRfcHJvbWlzZTtcbn1cbmZ1bmN0aW9uIGFkZF9yZW5kZXJfY2FsbGJhY2soZm4pIHtcbiAgICByZW5kZXJfY2FsbGJhY2tzLnB1c2goZm4pO1xufVxuZnVuY3Rpb24gYWRkX2ZsdXNoX2NhbGxiYWNrKGZuKSB7XG4gICAgZmx1c2hfY2FsbGJhY2tzLnB1c2goZm4pO1xufVxuZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgY29uc3Qgc2Vlbl9jYWxsYmFja3MgPSBuZXcgU2V0KCk7XG4gICAgZG8ge1xuICAgICAgICAvLyBmaXJzdCwgY2FsbCBiZWZvcmVVcGRhdGUgZnVuY3Rpb25zXG4gICAgICAgIC8vIGFuZCB1cGRhdGUgY29tcG9uZW50c1xuICAgICAgICB3aGlsZSAoZGlydHlfY29tcG9uZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbXBvbmVudCA9IGRpcnR5X2NvbXBvbmVudHMuc2hpZnQoKTtcbiAgICAgICAgICAgIHNldF9jdXJyZW50X2NvbXBvbmVudChjb21wb25lbnQpO1xuICAgICAgICAgICAgdXBkYXRlKGNvbXBvbmVudC4kJCk7XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKGJpbmRpbmdfY2FsbGJhY2tzLmxlbmd0aClcbiAgICAgICAgICAgIGJpbmRpbmdfY2FsbGJhY2tzLnBvcCgpKCk7XG4gICAgICAgIC8vIHRoZW4sIG9uY2UgY29tcG9uZW50cyBhcmUgdXBkYXRlZCwgY2FsbFxuICAgICAgICAvLyBhZnRlclVwZGF0ZSBmdW5jdGlvbnMuIFRoaXMgbWF5IGNhdXNlXG4gICAgICAgIC8vIHN1YnNlcXVlbnQgdXBkYXRlcy4uLlxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlbmRlcl9jYWxsYmFja3MubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGNvbnN0IGNhbGxiYWNrID0gcmVuZGVyX2NhbGxiYWNrc1tpXTtcbiAgICAgICAgICAgIGlmICghc2Vlbl9jYWxsYmFja3MuaGFzKGNhbGxiYWNrKSkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgLy8gLi4uc28gZ3VhcmQgYWdhaW5zdCBpbmZpbml0ZSBsb29wc1xuICAgICAgICAgICAgICAgIHNlZW5fY2FsbGJhY2tzLmFkZChjYWxsYmFjayk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmVuZGVyX2NhbGxiYWNrcy5sZW5ndGggPSAwO1xuICAgIH0gd2hpbGUgKGRpcnR5X2NvbXBvbmVudHMubGVuZ3RoKTtcbiAgICB3aGlsZSAoZmx1c2hfY2FsbGJhY2tzLmxlbmd0aCkge1xuICAgICAgICBmbHVzaF9jYWxsYmFja3MucG9wKCkoKTtcbiAgICB9XG4gICAgdXBkYXRlX3NjaGVkdWxlZCA9IGZhbHNlO1xufVxuZnVuY3Rpb24gdXBkYXRlKCQkKSB7XG4gICAgaWYgKCQkLmZyYWdtZW50KSB7XG4gICAgICAgICQkLnVwZGF0ZSgkJC5kaXJ0eSk7XG4gICAgICAgIHJ1bl9hbGwoJCQuYmVmb3JlX3VwZGF0ZSk7XG4gICAgICAgICQkLmZyYWdtZW50LnAoJCQuZGlydHksICQkLmN0eCk7XG4gICAgICAgICQkLmRpcnR5ID0gbnVsbDtcbiAgICAgICAgJCQuYWZ0ZXJfdXBkYXRlLmZvckVhY2goYWRkX3JlbmRlcl9jYWxsYmFjayk7XG4gICAgfVxufVxuXG5sZXQgcHJvbWlzZTtcbmZ1bmN0aW9uIHdhaXQoKSB7XG4gICAgaWYgKCFwcm9taXNlKSB7XG4gICAgICAgIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgICAgcHJvbWlzZS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIHByb21pc2UgPSBudWxsO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHByb21pc2U7XG59XG5mdW5jdGlvbiBkaXNwYXRjaChub2RlLCBkaXJlY3Rpb24sIGtpbmQpIHtcbiAgICBub2RlLmRpc3BhdGNoRXZlbnQoY3VzdG9tX2V2ZW50KGAke2RpcmVjdGlvbiA/ICdpbnRybycgOiAnb3V0cm8nfSR7a2luZH1gKSk7XG59XG5jb25zdCBvdXRyb2luZyA9IG5ldyBTZXQoKTtcbmxldCBvdXRyb3M7XG5mdW5jdGlvbiBncm91cF9vdXRyb3MoKSB7XG4gICAgb3V0cm9zID0ge1xuICAgICAgICByOiAwLFxuICAgICAgICBjOiBbXSxcbiAgICAgICAgcDogb3V0cm9zIC8vIHBhcmVudCBncm91cFxuICAgIH07XG59XG5mdW5jdGlvbiBjaGVja19vdXRyb3MoKSB7XG4gICAgaWYgKCFvdXRyb3Mucikge1xuICAgICAgICBydW5fYWxsKG91dHJvcy5jKTtcbiAgICB9XG4gICAgb3V0cm9zID0gb3V0cm9zLnA7XG59XG5mdW5jdGlvbiB0cmFuc2l0aW9uX2luKGJsb2NrLCBsb2NhbCkge1xuICAgIGlmIChibG9jayAmJiBibG9jay5pKSB7XG4gICAgICAgIG91dHJvaW5nLmRlbGV0ZShibG9jayk7XG4gICAgICAgIGJsb2NrLmkobG9jYWwpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHRyYW5zaXRpb25fb3V0KGJsb2NrLCBsb2NhbCwgZGV0YWNoLCBjYWxsYmFjaykge1xuICAgIGlmIChibG9jayAmJiBibG9jay5vKSB7XG4gICAgICAgIGlmIChvdXRyb2luZy5oYXMoYmxvY2spKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBvdXRyb2luZy5hZGQoYmxvY2spO1xuICAgICAgICBvdXRyb3MuYy5wdXNoKCgpID0+IHtcbiAgICAgICAgICAgIG91dHJvaW5nLmRlbGV0ZShibG9jayk7XG4gICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBpZiAoZGV0YWNoKVxuICAgICAgICAgICAgICAgICAgICBibG9jay5kKDEpO1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBibG9jay5vKGxvY2FsKTtcbiAgICB9XG59XG5jb25zdCBudWxsX3RyYW5zaXRpb24gPSB7IGR1cmF0aW9uOiAwIH07XG5mdW5jdGlvbiBjcmVhdGVfaW5fdHJhbnNpdGlvbihub2RlLCBmbiwgcGFyYW1zKSB7XG4gICAgbGV0IGNvbmZpZyA9IGZuKG5vZGUsIHBhcmFtcyk7XG4gICAgbGV0IHJ1bm5pbmcgPSBmYWxzZTtcbiAgICBsZXQgYW5pbWF0aW9uX25hbWU7XG4gICAgbGV0IHRhc2s7XG4gICAgbGV0IHVpZCA9IDA7XG4gICAgZnVuY3Rpb24gY2xlYW51cCgpIHtcbiAgICAgICAgaWYgKGFuaW1hdGlvbl9uYW1lKVxuICAgICAgICAgICAgZGVsZXRlX3J1bGUobm9kZSwgYW5pbWF0aW9uX25hbWUpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnbygpIHtcbiAgICAgICAgY29uc3QgeyBkZWxheSA9IDAsIGR1cmF0aW9uID0gMzAwLCBlYXNpbmcgPSBpZGVudGl0eSwgdGljayA9IG5vb3AsIGNzcyB9ID0gY29uZmlnIHx8IG51bGxfdHJhbnNpdGlvbjtcbiAgICAgICAgaWYgKGNzcylcbiAgICAgICAgICAgIGFuaW1hdGlvbl9uYW1lID0gY3JlYXRlX3J1bGUobm9kZSwgMCwgMSwgZHVyYXRpb24sIGRlbGF5LCBlYXNpbmcsIGNzcywgdWlkKyspO1xuICAgICAgICB0aWNrKDAsIDEpO1xuICAgICAgICBjb25zdCBzdGFydF90aW1lID0gbm93KCkgKyBkZWxheTtcbiAgICAgICAgY29uc3QgZW5kX3RpbWUgPSBzdGFydF90aW1lICsgZHVyYXRpb247XG4gICAgICAgIGlmICh0YXNrKVxuICAgICAgICAgICAgdGFzay5hYm9ydCgpO1xuICAgICAgICBydW5uaW5nID0gdHJ1ZTtcbiAgICAgICAgYWRkX3JlbmRlcl9jYWxsYmFjaygoKSA9PiBkaXNwYXRjaChub2RlLCB0cnVlLCAnc3RhcnQnKSk7XG4gICAgICAgIHRhc2sgPSBsb29wKG5vdyA9PiB7XG4gICAgICAgICAgICBpZiAocnVubmluZykge1xuICAgICAgICAgICAgICAgIGlmIChub3cgPj0gZW5kX3RpbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGljaygxLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2gobm9kZSwgdHJ1ZSwgJ2VuZCcpO1xuICAgICAgICAgICAgICAgICAgICBjbGVhbnVwKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBydW5uaW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChub3cgPj0gc3RhcnRfdGltZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0ID0gZWFzaW5nKChub3cgLSBzdGFydF90aW1lKSAvIGR1cmF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgdGljayh0LCAxIC0gdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJ1bm5pbmc7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBsZXQgc3RhcnRlZCA9IGZhbHNlO1xuICAgIHJldHVybiB7XG4gICAgICAgIHN0YXJ0KCkge1xuICAgICAgICAgICAgaWYgKHN0YXJ0ZWQpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgZGVsZXRlX3J1bGUobm9kZSk7XG4gICAgICAgICAgICBpZiAoaXNfZnVuY3Rpb24oY29uZmlnKSkge1xuICAgICAgICAgICAgICAgIGNvbmZpZyA9IGNvbmZpZygpO1xuICAgICAgICAgICAgICAgIHdhaXQoKS50aGVuKGdvKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGdvKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGludmFsaWRhdGUoKSB7XG4gICAgICAgICAgICBzdGFydGVkID0gZmFsc2U7XG4gICAgICAgIH0sXG4gICAgICAgIGVuZCgpIHtcbiAgICAgICAgICAgIGlmIChydW5uaW5nKSB7XG4gICAgICAgICAgICAgICAgY2xlYW51cCgpO1xuICAgICAgICAgICAgICAgIHJ1bm5pbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG59XG5mdW5jdGlvbiBjcmVhdGVfb3V0X3RyYW5zaXRpb24obm9kZSwgZm4sIHBhcmFtcykge1xuICAgIGxldCBjb25maWcgPSBmbihub2RlLCBwYXJhbXMpO1xuICAgIGxldCBydW5uaW5nID0gdHJ1ZTtcbiAgICBsZXQgYW5pbWF0aW9uX25hbWU7XG4gICAgY29uc3QgZ3JvdXAgPSBvdXRyb3M7XG4gICAgZ3JvdXAuciArPSAxO1xuICAgIGZ1bmN0aW9uIGdvKCkge1xuICAgICAgICBjb25zdCB7IGRlbGF5ID0gMCwgZHVyYXRpb24gPSAzMDAsIGVhc2luZyA9IGlkZW50aXR5LCB0aWNrID0gbm9vcCwgY3NzIH0gPSBjb25maWcgfHwgbnVsbF90cmFuc2l0aW9uO1xuICAgICAgICBpZiAoY3NzKVxuICAgICAgICAgICAgYW5pbWF0aW9uX25hbWUgPSBjcmVhdGVfcnVsZShub2RlLCAxLCAwLCBkdXJhdGlvbiwgZGVsYXksIGVhc2luZywgY3NzKTtcbiAgICAgICAgY29uc3Qgc3RhcnRfdGltZSA9IG5vdygpICsgZGVsYXk7XG4gICAgICAgIGNvbnN0IGVuZF90aW1lID0gc3RhcnRfdGltZSArIGR1cmF0aW9uO1xuICAgICAgICBhZGRfcmVuZGVyX2NhbGxiYWNrKCgpID0+IGRpc3BhdGNoKG5vZGUsIGZhbHNlLCAnc3RhcnQnKSk7XG4gICAgICAgIGxvb3Aobm93ID0+IHtcbiAgICAgICAgICAgIGlmIChydW5uaW5nKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5vdyA+PSBlbmRfdGltZSkge1xuICAgICAgICAgICAgICAgICAgICB0aWNrKDAsIDEpO1xuICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChub2RlLCBmYWxzZSwgJ2VuZCcpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIS0tZ3JvdXAucikge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhpcyB3aWxsIHJlc3VsdCBpbiBgZW5kKClgIGJlaW5nIGNhbGxlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNvIHdlIGRvbid0IG5lZWQgdG8gY2xlYW4gdXAgaGVyZVxuICAgICAgICAgICAgICAgICAgICAgICAgcnVuX2FsbChncm91cC5jKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChub3cgPj0gc3RhcnRfdGltZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0ID0gZWFzaW5nKChub3cgLSBzdGFydF90aW1lKSAvIGR1cmF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgdGljaygxIC0gdCwgdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJ1bm5pbmc7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoaXNfZnVuY3Rpb24oY29uZmlnKSkge1xuICAgICAgICB3YWl0KCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICBjb25maWcgPSBjb25maWcoKTtcbiAgICAgICAgICAgIGdvKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZ28oKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZW5kKHJlc2V0KSB7XG4gICAgICAgICAgICBpZiAocmVzZXQgJiYgY29uZmlnLnRpY2spIHtcbiAgICAgICAgICAgICAgICBjb25maWcudGljaygxLCAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChydW5uaW5nKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFuaW1hdGlvbl9uYW1lKVxuICAgICAgICAgICAgICAgICAgICBkZWxldGVfcnVsZShub2RlLCBhbmltYXRpb25fbmFtZSk7XG4gICAgICAgICAgICAgICAgcnVubmluZyA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9iaWRpcmVjdGlvbmFsX3RyYW5zaXRpb24obm9kZSwgZm4sIHBhcmFtcywgaW50cm8pIHtcbiAgICBsZXQgY29uZmlnID0gZm4obm9kZSwgcGFyYW1zKTtcbiAgICBsZXQgdCA9IGludHJvID8gMCA6IDE7XG4gICAgbGV0IHJ1bm5pbmdfcHJvZ3JhbSA9IG51bGw7XG4gICAgbGV0IHBlbmRpbmdfcHJvZ3JhbSA9IG51bGw7XG4gICAgbGV0IGFuaW1hdGlvbl9uYW1lID0gbnVsbDtcbiAgICBmdW5jdGlvbiBjbGVhcl9hbmltYXRpb24oKSB7XG4gICAgICAgIGlmIChhbmltYXRpb25fbmFtZSlcbiAgICAgICAgICAgIGRlbGV0ZV9ydWxlKG5vZGUsIGFuaW1hdGlvbl9uYW1lKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gaW5pdChwcm9ncmFtLCBkdXJhdGlvbikge1xuICAgICAgICBjb25zdCBkID0gcHJvZ3JhbS5iIC0gdDtcbiAgICAgICAgZHVyYXRpb24gKj0gTWF0aC5hYnMoZCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBhOiB0LFxuICAgICAgICAgICAgYjogcHJvZ3JhbS5iLFxuICAgICAgICAgICAgZCxcbiAgICAgICAgICAgIGR1cmF0aW9uLFxuICAgICAgICAgICAgc3RhcnQ6IHByb2dyYW0uc3RhcnQsXG4gICAgICAgICAgICBlbmQ6IHByb2dyYW0uc3RhcnQgKyBkdXJhdGlvbixcbiAgICAgICAgICAgIGdyb3VwOiBwcm9ncmFtLmdyb3VwXG4gICAgICAgIH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdvKGIpIHtcbiAgICAgICAgY29uc3QgeyBkZWxheSA9IDAsIGR1cmF0aW9uID0gMzAwLCBlYXNpbmcgPSBpZGVudGl0eSwgdGljayA9IG5vb3AsIGNzcyB9ID0gY29uZmlnIHx8IG51bGxfdHJhbnNpdGlvbjtcbiAgICAgICAgY29uc3QgcHJvZ3JhbSA9IHtcbiAgICAgICAgICAgIHN0YXJ0OiBub3coKSArIGRlbGF5LFxuICAgICAgICAgICAgYlxuICAgICAgICB9O1xuICAgICAgICBpZiAoIWIpIHtcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmUgdG9kbzogaW1wcm92ZSB0eXBpbmdzXG4gICAgICAgICAgICBwcm9ncmFtLmdyb3VwID0gb3V0cm9zO1xuICAgICAgICAgICAgb3V0cm9zLnIgKz0gMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocnVubmluZ19wcm9ncmFtKSB7XG4gICAgICAgICAgICBwZW5kaW5nX3Byb2dyYW0gPSBwcm9ncmFtO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gaWYgdGhpcyBpcyBhbiBpbnRybywgYW5kIHRoZXJlJ3MgYSBkZWxheSwgd2UgbmVlZCB0byBkb1xuICAgICAgICAgICAgLy8gYW4gaW5pdGlhbCB0aWNrIGFuZC9vciBhcHBseSBDU1MgYW5pbWF0aW9uIGltbWVkaWF0ZWx5XG4gICAgICAgICAgICBpZiAoY3NzKSB7XG4gICAgICAgICAgICAgICAgY2xlYXJfYW5pbWF0aW9uKCk7XG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uX25hbWUgPSBjcmVhdGVfcnVsZShub2RlLCB0LCBiLCBkdXJhdGlvbiwgZGVsYXksIGVhc2luZywgY3NzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChiKVxuICAgICAgICAgICAgICAgIHRpY2soMCwgMSk7XG4gICAgICAgICAgICBydW5uaW5nX3Byb2dyYW0gPSBpbml0KHByb2dyYW0sIGR1cmF0aW9uKTtcbiAgICAgICAgICAgIGFkZF9yZW5kZXJfY2FsbGJhY2soKCkgPT4gZGlzcGF0Y2gobm9kZSwgYiwgJ3N0YXJ0JykpO1xuICAgICAgICAgICAgbG9vcChub3cgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChwZW5kaW5nX3Byb2dyYW0gJiYgbm93ID4gcGVuZGluZ19wcm9ncmFtLnN0YXJ0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJ1bm5pbmdfcHJvZ3JhbSA9IGluaXQocGVuZGluZ19wcm9ncmFtLCBkdXJhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIHBlbmRpbmdfcHJvZ3JhbSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKG5vZGUsIHJ1bm5pbmdfcHJvZ3JhbS5iLCAnc3RhcnQnKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNzcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJfYW5pbWF0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRpb25fbmFtZSA9IGNyZWF0ZV9ydWxlKG5vZGUsIHQsIHJ1bm5pbmdfcHJvZ3JhbS5iLCBydW5uaW5nX3Byb2dyYW0uZHVyYXRpb24sIDAsIGVhc2luZywgY29uZmlnLmNzcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHJ1bm5pbmdfcHJvZ3JhbSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAobm93ID49IHJ1bm5pbmdfcHJvZ3JhbS5lbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpY2sodCA9IHJ1bm5pbmdfcHJvZ3JhbS5iLCAxIC0gdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChub2RlLCBydW5uaW5nX3Byb2dyYW0uYiwgJ2VuZCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFwZW5kaW5nX3Byb2dyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB3ZSdyZSBkb25lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJ1bm5pbmdfcHJvZ3JhbS5iKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGludHJvIOKAlCB3ZSBjYW4gdGlkeSB1cCBpbW1lZGlhdGVseVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhcl9hbmltYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG91dHJvIOKAlCBuZWVkcyB0byBiZSBjb29yZGluYXRlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIS0tcnVubmluZ19wcm9ncmFtLmdyb3VwLnIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBydW5fYWxsKHJ1bm5pbmdfcHJvZ3JhbS5ncm91cC5jKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBydW5uaW5nX3Byb2dyYW0gPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKG5vdyA+PSBydW5uaW5nX3Byb2dyYW0uc3RhcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHAgPSBub3cgLSBydW5uaW5nX3Byb2dyYW0uc3RhcnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ID0gcnVubmluZ19wcm9ncmFtLmEgKyBydW5uaW5nX3Byb2dyYW0uZCAqIGVhc2luZyhwIC8gcnVubmluZ19wcm9ncmFtLmR1cmF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpY2sodCwgMSAtIHQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiAhIShydW5uaW5nX3Byb2dyYW0gfHwgcGVuZGluZ19wcm9ncmFtKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHJ1bihiKSB7XG4gICAgICAgICAgICBpZiAoaXNfZnVuY3Rpb24oY29uZmlnKSkge1xuICAgICAgICAgICAgICAgIHdhaXQoKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgICAgICBjb25maWcgPSBjb25maWcoKTtcbiAgICAgICAgICAgICAgICAgICAgZ28oYik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBnbyhiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZW5kKCkge1xuICAgICAgICAgICAgY2xlYXJfYW5pbWF0aW9uKCk7XG4gICAgICAgICAgICBydW5uaW5nX3Byb2dyYW0gPSBwZW5kaW5nX3Byb2dyYW0gPSBudWxsO1xuICAgICAgICB9XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlX3Byb21pc2UocHJvbWlzZSwgaW5mbykge1xuICAgIGNvbnN0IHRva2VuID0gaW5mby50b2tlbiA9IHt9O1xuICAgIGZ1bmN0aW9uIHVwZGF0ZSh0eXBlLCBpbmRleCwga2V5LCB2YWx1ZSkge1xuICAgICAgICBpZiAoaW5mby50b2tlbiAhPT0gdG9rZW4pXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGluZm8ucmVzb2x2ZWQgPSBrZXkgJiYgeyBba2V5XTogdmFsdWUgfTtcbiAgICAgICAgY29uc3QgY2hpbGRfY3R4ID0gYXNzaWduKGFzc2lnbih7fSwgaW5mby5jdHgpLCBpbmZvLnJlc29sdmVkKTtcbiAgICAgICAgY29uc3QgYmxvY2sgPSB0eXBlICYmIChpbmZvLmN1cnJlbnQgPSB0eXBlKShjaGlsZF9jdHgpO1xuICAgICAgICBpZiAoaW5mby5ibG9jaykge1xuICAgICAgICAgICAgaWYgKGluZm8uYmxvY2tzKSB7XG4gICAgICAgICAgICAgICAgaW5mby5ibG9ja3MuZm9yRWFjaCgoYmxvY2ssIGkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkgIT09IGluZGV4ICYmIGJsb2NrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBncm91cF9vdXRyb3MoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb25fb3V0KGJsb2NrLCAxLCAxLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5mby5ibG9ja3NbaV0gPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGVja19vdXRyb3MoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaW5mby5ibG9jay5kKDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYmxvY2suYygpO1xuICAgICAgICAgICAgdHJhbnNpdGlvbl9pbihibG9jaywgMSk7XG4gICAgICAgICAgICBibG9jay5tKGluZm8ubW91bnQoKSwgaW5mby5hbmNob3IpO1xuICAgICAgICAgICAgZmx1c2goKTtcbiAgICAgICAgfVxuICAgICAgICBpbmZvLmJsb2NrID0gYmxvY2s7XG4gICAgICAgIGlmIChpbmZvLmJsb2NrcylcbiAgICAgICAgICAgIGluZm8uYmxvY2tzW2luZGV4XSA9IGJsb2NrO1xuICAgIH1cbiAgICBpZiAoaXNfcHJvbWlzZShwcm9taXNlKSkge1xuICAgICAgICBjb25zdCBjdXJyZW50X2NvbXBvbmVudCA9IGdldF9jdXJyZW50X2NvbXBvbmVudCgpO1xuICAgICAgICBwcm9taXNlLnRoZW4odmFsdWUgPT4ge1xuICAgICAgICAgICAgc2V0X2N1cnJlbnRfY29tcG9uZW50KGN1cnJlbnRfY29tcG9uZW50KTtcbiAgICAgICAgICAgIHVwZGF0ZShpbmZvLnRoZW4sIDEsIGluZm8udmFsdWUsIHZhbHVlKTtcbiAgICAgICAgICAgIHNldF9jdXJyZW50X2NvbXBvbmVudChudWxsKTtcbiAgICAgICAgfSwgZXJyb3IgPT4ge1xuICAgICAgICAgICAgc2V0X2N1cnJlbnRfY29tcG9uZW50KGN1cnJlbnRfY29tcG9uZW50KTtcbiAgICAgICAgICAgIHVwZGF0ZShpbmZvLmNhdGNoLCAyLCBpbmZvLmVycm9yLCBlcnJvcik7XG4gICAgICAgICAgICBzZXRfY3VycmVudF9jb21wb25lbnQobnVsbCk7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBpZiB3ZSBwcmV2aW91c2x5IGhhZCBhIHRoZW4vY2F0Y2ggYmxvY2ssIGRlc3Ryb3kgaXRcbiAgICAgICAgaWYgKGluZm8uY3VycmVudCAhPT0gaW5mby5wZW5kaW5nKSB7XG4gICAgICAgICAgICB1cGRhdGUoaW5mby5wZW5kaW5nLCAwKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpZiAoaW5mby5jdXJyZW50ICE9PSBpbmZvLnRoZW4pIHtcbiAgICAgICAgICAgIHVwZGF0ZShpbmZvLnRoZW4sIDEsIGluZm8udmFsdWUsIHByb21pc2UpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaW5mby5yZXNvbHZlZCA9IHsgW2luZm8udmFsdWVdOiBwcm9taXNlIH07XG4gICAgfVxufVxuXG5jb25zdCBnbG9iYWxzID0gKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogZ2xvYmFsKTtcblxuZnVuY3Rpb24gZGVzdHJveV9ibG9jayhibG9jaywgbG9va3VwKSB7XG4gICAgYmxvY2suZCgxKTtcbiAgICBsb29rdXAuZGVsZXRlKGJsb2NrLmtleSk7XG59XG5mdW5jdGlvbiBvdXRyb19hbmRfZGVzdHJveV9ibG9jayhibG9jaywgbG9va3VwKSB7XG4gICAgdHJhbnNpdGlvbl9vdXQoYmxvY2ssIDEsIDEsICgpID0+IHtcbiAgICAgICAgbG9va3VwLmRlbGV0ZShibG9jay5rZXkpO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gZml4X2FuZF9kZXN0cm95X2Jsb2NrKGJsb2NrLCBsb29rdXApIHtcbiAgICBibG9jay5mKCk7XG4gICAgZGVzdHJveV9ibG9jayhibG9jaywgbG9va3VwKTtcbn1cbmZ1bmN0aW9uIGZpeF9hbmRfb3V0cm9fYW5kX2Rlc3Ryb3lfYmxvY2soYmxvY2ssIGxvb2t1cCkge1xuICAgIGJsb2NrLmYoKTtcbiAgICBvdXRyb19hbmRfZGVzdHJveV9ibG9jayhibG9jaywgbG9va3VwKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZV9rZXllZF9lYWNoKG9sZF9ibG9ja3MsIGNoYW5nZWQsIGdldF9rZXksIGR5bmFtaWMsIGN0eCwgbGlzdCwgbG9va3VwLCBub2RlLCBkZXN0cm95LCBjcmVhdGVfZWFjaF9ibG9jaywgbmV4dCwgZ2V0X2NvbnRleHQpIHtcbiAgICBsZXQgbyA9IG9sZF9ibG9ja3MubGVuZ3RoO1xuICAgIGxldCBuID0gbGlzdC5sZW5ndGg7XG4gICAgbGV0IGkgPSBvO1xuICAgIGNvbnN0IG9sZF9pbmRleGVzID0ge307XG4gICAgd2hpbGUgKGktLSlcbiAgICAgICAgb2xkX2luZGV4ZXNbb2xkX2Jsb2Nrc1tpXS5rZXldID0gaTtcbiAgICBjb25zdCBuZXdfYmxvY2tzID0gW107XG4gICAgY29uc3QgbmV3X2xvb2t1cCA9IG5ldyBNYXAoKTtcbiAgICBjb25zdCBkZWx0YXMgPSBuZXcgTWFwKCk7XG4gICAgaSA9IG47XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgICBjb25zdCBjaGlsZF9jdHggPSBnZXRfY29udGV4dChjdHgsIGxpc3QsIGkpO1xuICAgICAgICBjb25zdCBrZXkgPSBnZXRfa2V5KGNoaWxkX2N0eCk7XG4gICAgICAgIGxldCBibG9jayA9IGxvb2t1cC5nZXQoa2V5KTtcbiAgICAgICAgaWYgKCFibG9jaykge1xuICAgICAgICAgICAgYmxvY2sgPSBjcmVhdGVfZWFjaF9ibG9jayhrZXksIGNoaWxkX2N0eCk7XG4gICAgICAgICAgICBibG9jay5jKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZHluYW1pYykge1xuICAgICAgICAgICAgYmxvY2sucChjaGFuZ2VkLCBjaGlsZF9jdHgpO1xuICAgICAgICB9XG4gICAgICAgIG5ld19sb29rdXAuc2V0KGtleSwgbmV3X2Jsb2Nrc1tpXSA9IGJsb2NrKTtcbiAgICAgICAgaWYgKGtleSBpbiBvbGRfaW5kZXhlcylcbiAgICAgICAgICAgIGRlbHRhcy5zZXQoa2V5LCBNYXRoLmFicyhpIC0gb2xkX2luZGV4ZXNba2V5XSkpO1xuICAgIH1cbiAgICBjb25zdCB3aWxsX21vdmUgPSBuZXcgU2V0KCk7XG4gICAgY29uc3QgZGlkX21vdmUgPSBuZXcgU2V0KCk7XG4gICAgZnVuY3Rpb24gaW5zZXJ0KGJsb2NrKSB7XG4gICAgICAgIHRyYW5zaXRpb25faW4oYmxvY2ssIDEpO1xuICAgICAgICBibG9jay5tKG5vZGUsIG5leHQpO1xuICAgICAgICBsb29rdXAuc2V0KGJsb2NrLmtleSwgYmxvY2spO1xuICAgICAgICBuZXh0ID0gYmxvY2suZmlyc3Q7XG4gICAgICAgIG4tLTtcbiAgICB9XG4gICAgd2hpbGUgKG8gJiYgbikge1xuICAgICAgICBjb25zdCBuZXdfYmxvY2sgPSBuZXdfYmxvY2tzW24gLSAxXTtcbiAgICAgICAgY29uc3Qgb2xkX2Jsb2NrID0gb2xkX2Jsb2Nrc1tvIC0gMV07XG4gICAgICAgIGNvbnN0IG5ld19rZXkgPSBuZXdfYmxvY2sua2V5O1xuICAgICAgICBjb25zdCBvbGRfa2V5ID0gb2xkX2Jsb2NrLmtleTtcbiAgICAgICAgaWYgKG5ld19ibG9jayA9PT0gb2xkX2Jsb2NrKSB7XG4gICAgICAgICAgICAvLyBkbyBub3RoaW5nXG4gICAgICAgICAgICBuZXh0ID0gbmV3X2Jsb2NrLmZpcnN0O1xuICAgICAgICAgICAgby0tO1xuICAgICAgICAgICAgbi0tO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFuZXdfbG9va3VwLmhhcyhvbGRfa2V5KSkge1xuICAgICAgICAgICAgLy8gcmVtb3ZlIG9sZCBibG9ja1xuICAgICAgICAgICAgZGVzdHJveShvbGRfYmxvY2ssIGxvb2t1cCk7XG4gICAgICAgICAgICBvLS07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIWxvb2t1cC5oYXMobmV3X2tleSkgfHwgd2lsbF9tb3ZlLmhhcyhuZXdfa2V5KSkge1xuICAgICAgICAgICAgaW5zZXJ0KG5ld19ibG9jayk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZGlkX21vdmUuaGFzKG9sZF9rZXkpKSB7XG4gICAgICAgICAgICBvLS07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZGVsdGFzLmdldChuZXdfa2V5KSA+IGRlbHRhcy5nZXQob2xkX2tleSkpIHtcbiAgICAgICAgICAgIGRpZF9tb3ZlLmFkZChuZXdfa2V5KTtcbiAgICAgICAgICAgIGluc2VydChuZXdfYmxvY2spO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgd2lsbF9tb3ZlLmFkZChvbGRfa2V5KTtcbiAgICAgICAgICAgIG8tLTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB3aGlsZSAoby0tKSB7XG4gICAgICAgIGNvbnN0IG9sZF9ibG9jayA9IG9sZF9ibG9ja3Nbb107XG4gICAgICAgIGlmICghbmV3X2xvb2t1cC5oYXMob2xkX2Jsb2NrLmtleSkpXG4gICAgICAgICAgICBkZXN0cm95KG9sZF9ibG9jaywgbG9va3VwKTtcbiAgICB9XG4gICAgd2hpbGUgKG4pXG4gICAgICAgIGluc2VydChuZXdfYmxvY2tzW24gLSAxXSk7XG4gICAgcmV0dXJuIG5ld19ibG9ja3M7XG59XG5mdW5jdGlvbiBtZWFzdXJlKGJsb2Nrcykge1xuICAgIGNvbnN0IHJlY3RzID0ge307XG4gICAgbGV0IGkgPSBibG9ja3MubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pXG4gICAgICAgIHJlY3RzW2Jsb2Nrc1tpXS5rZXldID0gYmxvY2tzW2ldLm5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgcmV0dXJuIHJlY3RzO1xufVxuXG5mdW5jdGlvbiBnZXRfc3ByZWFkX3VwZGF0ZShsZXZlbHMsIHVwZGF0ZXMpIHtcbiAgICBjb25zdCB1cGRhdGUgPSB7fTtcbiAgICBjb25zdCB0b19udWxsX291dCA9IHt9O1xuICAgIGNvbnN0IGFjY291bnRlZF9mb3IgPSB7ICQkc2NvcGU6IDEgfTtcbiAgICBsZXQgaSA9IGxldmVscy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgICBjb25zdCBvID0gbGV2ZWxzW2ldO1xuICAgICAgICBjb25zdCBuID0gdXBkYXRlc1tpXTtcbiAgICAgICAgaWYgKG4pIHtcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIG8pIHtcbiAgICAgICAgICAgICAgICBpZiAoIShrZXkgaW4gbikpXG4gICAgICAgICAgICAgICAgICAgIHRvX251bGxfb3V0W2tleV0gPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gbikge1xuICAgICAgICAgICAgICAgIGlmICghYWNjb3VudGVkX2ZvcltrZXldKSB7XG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZVtrZXldID0gbltrZXldO1xuICAgICAgICAgICAgICAgICAgICBhY2NvdW50ZWRfZm9yW2tleV0gPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldmVsc1tpXSA9IG47XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBvKSB7XG4gICAgICAgICAgICAgICAgYWNjb3VudGVkX2ZvcltrZXldID0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGNvbnN0IGtleSBpbiB0b19udWxsX291dCkge1xuICAgICAgICBpZiAoIShrZXkgaW4gdXBkYXRlKSlcbiAgICAgICAgICAgIHVwZGF0ZVtrZXldID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICByZXR1cm4gdXBkYXRlO1xufVxuZnVuY3Rpb24gZ2V0X3NwcmVhZF9vYmplY3Qoc3ByZWFkX3Byb3BzKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBzcHJlYWRfcHJvcHMgPT09ICdvYmplY3QnICYmIHNwcmVhZF9wcm9wcyAhPT0gbnVsbCA/IHNwcmVhZF9wcm9wcyA6IHt9O1xufVxuXG5jb25zdCBpbnZhbGlkX2F0dHJpYnV0ZV9uYW1lX2NoYXJhY3RlciA9IC9bXFxzJ1wiPi89XFx1e0ZERDB9LVxcdXtGREVGfVxcdXtGRkZFfVxcdXtGRkZGfVxcdXsxRkZGRX1cXHV7MUZGRkZ9XFx1ezJGRkZFfVxcdXsyRkZGRn1cXHV7M0ZGRkV9XFx1ezNGRkZGfVxcdXs0RkZGRX1cXHV7NEZGRkZ9XFx1ezVGRkZFfVxcdXs1RkZGRn1cXHV7NkZGRkV9XFx1ezZGRkZGfVxcdXs3RkZGRX1cXHV7N0ZGRkZ9XFx1ezhGRkZFfVxcdXs4RkZGRn1cXHV7OUZGRkV9XFx1ezlGRkZGfVxcdXtBRkZGRX1cXHV7QUZGRkZ9XFx1e0JGRkZFfVxcdXtCRkZGRn1cXHV7Q0ZGRkV9XFx1e0NGRkZGfVxcdXtERkZGRX1cXHV7REZGRkZ9XFx1e0VGRkZFfVxcdXtFRkZGRn1cXHV7RkZGRkV9XFx1e0ZGRkZGfVxcdXsxMEZGRkV9XFx1ezEwRkZGRn1dL3U7XG4vLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNhdHRyaWJ1dGVzLTJcbi8vIGh0dHBzOi8vaW5mcmEuc3BlYy53aGF0d2cub3JnLyNub25jaGFyYWN0ZXJcbmZ1bmN0aW9uIHNwcmVhZChhcmdzKSB7XG4gICAgY29uc3QgYXR0cmlidXRlcyA9IE9iamVjdC5hc3NpZ24oe30sIC4uLmFyZ3MpO1xuICAgIGxldCBzdHIgPSAnJztcbiAgICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKG5hbWUgPT4ge1xuICAgICAgICBpZiAoaW52YWxpZF9hdHRyaWJ1dGVfbmFtZV9jaGFyYWN0ZXIudGVzdChuYW1lKSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBhdHRyaWJ1dGVzW25hbWVdO1xuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgaWYgKHZhbHVlID09PSB0cnVlKVxuICAgICAgICAgICAgc3RyICs9IFwiIFwiICsgbmFtZTtcbiAgICAgICAgY29uc3QgZXNjYXBlZCA9IFN0cmluZyh2YWx1ZSlcbiAgICAgICAgICAgIC5yZXBsYWNlKC9cIi9nLCAnJiMzNDsnKVxuICAgICAgICAgICAgLnJlcGxhY2UoLycvZywgJyYjMzk7Jyk7XG4gICAgICAgIHN0ciArPSBcIiBcIiArIG5hbWUgKyBcIj1cIiArIEpTT04uc3RyaW5naWZ5KGVzY2FwZWQpO1xuICAgIH0pO1xuICAgIHJldHVybiBzdHI7XG59XG5jb25zdCBlc2NhcGVkID0ge1xuICAgICdcIic6ICcmcXVvdDsnLFxuICAgIFwiJ1wiOiAnJiMzOTsnLFxuICAgICcmJzogJyZhbXA7JyxcbiAgICAnPCc6ICcmbHQ7JyxcbiAgICAnPic6ICcmZ3Q7J1xufTtcbmZ1bmN0aW9uIGVzY2FwZShodG1sKSB7XG4gICAgcmV0dXJuIFN0cmluZyhodG1sKS5yZXBsYWNlKC9bXCInJjw+XS9nLCBtYXRjaCA9PiBlc2NhcGVkW21hdGNoXSk7XG59XG5mdW5jdGlvbiBlYWNoKGl0ZW1zLCBmbikge1xuICAgIGxldCBzdHIgPSAnJztcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHN0ciArPSBmbihpdGVtc1tpXSwgaSk7XG4gICAgfVxuICAgIHJldHVybiBzdHI7XG59XG5jb25zdCBtaXNzaW5nX2NvbXBvbmVudCA9IHtcbiAgICAkJHJlbmRlcjogKCkgPT4gJydcbn07XG5mdW5jdGlvbiB2YWxpZGF0ZV9jb21wb25lbnQoY29tcG9uZW50LCBuYW1lKSB7XG4gICAgaWYgKCFjb21wb25lbnQgfHwgIWNvbXBvbmVudC4kJHJlbmRlcikge1xuICAgICAgICBpZiAobmFtZSA9PT0gJ3N2ZWx0ZTpjb21wb25lbnQnKVxuICAgICAgICAgICAgbmFtZSArPSAnIHRoaXM9ey4uLn0nO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYDwke25hbWV9PiBpcyBub3QgYSB2YWxpZCBTU1IgY29tcG9uZW50LiBZb3UgbWF5IG5lZWQgdG8gcmV2aWV3IHlvdXIgYnVpbGQgY29uZmlnIHRvIGVuc3VyZSB0aGF0IGRlcGVuZGVuY2llcyBhcmUgY29tcGlsZWQsIHJhdGhlciB0aGFuIGltcG9ydGVkIGFzIHByZS1jb21waWxlZCBtb2R1bGVzYCk7XG4gICAgfVxuICAgIHJldHVybiBjb21wb25lbnQ7XG59XG5mdW5jdGlvbiBkZWJ1ZyhmaWxlLCBsaW5lLCBjb2x1bW4sIHZhbHVlcykge1xuICAgIGNvbnNvbGUubG9nKGB7QGRlYnVnfSAke2ZpbGUgPyBmaWxlICsgJyAnIDogJyd9KCR7bGluZX06JHtjb2x1bW59KWApOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcbiAgICBjb25zb2xlLmxvZyh2YWx1ZXMpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcbiAgICByZXR1cm4gJyc7XG59XG5sZXQgb25fZGVzdHJveTtcbmZ1bmN0aW9uIGNyZWF0ZV9zc3JfY29tcG9uZW50KGZuKSB7XG4gICAgZnVuY3Rpb24gJCRyZW5kZXIocmVzdWx0LCBwcm9wcywgYmluZGluZ3MsIHNsb3RzKSB7XG4gICAgICAgIGNvbnN0IHBhcmVudF9jb21wb25lbnQgPSBjdXJyZW50X2NvbXBvbmVudDtcbiAgICAgICAgY29uc3QgJCQgPSB7XG4gICAgICAgICAgICBvbl9kZXN0cm95LFxuICAgICAgICAgICAgY29udGV4dDogbmV3IE1hcChwYXJlbnRfY29tcG9uZW50ID8gcGFyZW50X2NvbXBvbmVudC4kJC5jb250ZXh0IDogW10pLFxuICAgICAgICAgICAgLy8gdGhlc2Ugd2lsbCBiZSBpbW1lZGlhdGVseSBkaXNjYXJkZWRcbiAgICAgICAgICAgIG9uX21vdW50OiBbXSxcbiAgICAgICAgICAgIGJlZm9yZV91cGRhdGU6IFtdLFxuICAgICAgICAgICAgYWZ0ZXJfdXBkYXRlOiBbXSxcbiAgICAgICAgICAgIGNhbGxiYWNrczogYmxhbmtfb2JqZWN0KClcbiAgICAgICAgfTtcbiAgICAgICAgc2V0X2N1cnJlbnRfY29tcG9uZW50KHsgJCQgfSk7XG4gICAgICAgIGNvbnN0IGh0bWwgPSBmbihyZXN1bHQsIHByb3BzLCBiaW5kaW5ncywgc2xvdHMpO1xuICAgICAgICBzZXRfY3VycmVudF9jb21wb25lbnQocGFyZW50X2NvbXBvbmVudCk7XG4gICAgICAgIHJldHVybiBodG1sO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICByZW5kZXI6IChwcm9wcyA9IHt9LCBvcHRpb25zID0ge30pID0+IHtcbiAgICAgICAgICAgIG9uX2Rlc3Ryb3kgPSBbXTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHsgaGVhZDogJycsIGNzczogbmV3IFNldCgpIH07XG4gICAgICAgICAgICBjb25zdCBodG1sID0gJCRyZW5kZXIocmVzdWx0LCBwcm9wcywge30sIG9wdGlvbnMpO1xuICAgICAgICAgICAgcnVuX2FsbChvbl9kZXN0cm95KTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgaHRtbCxcbiAgICAgICAgICAgICAgICBjc3M6IHtcbiAgICAgICAgICAgICAgICAgICAgY29kZTogQXJyYXkuZnJvbShyZXN1bHQuY3NzKS5tYXAoY3NzID0+IGNzcy5jb2RlKS5qb2luKCdcXG4nKSxcbiAgICAgICAgICAgICAgICAgICAgbWFwOiBudWxsIC8vIFRPRE9cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGhlYWQ6IHJlc3VsdC5oZWFkXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICAkJHJlbmRlclxuICAgIH07XG59XG5mdW5jdGlvbiBhZGRfYXR0cmlidXRlKG5hbWUsIHZhbHVlLCBib29sZWFuKSB7XG4gICAgaWYgKHZhbHVlID09IG51bGwgfHwgKGJvb2xlYW4gJiYgIXZhbHVlKSlcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIHJldHVybiBgICR7bmFtZX0ke3ZhbHVlID09PSB0cnVlID8gJycgOiBgPSR7dHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyA/IEpTT04uc3RyaW5naWZ5KGVzY2FwZSh2YWx1ZSkpIDogYFwiJHt2YWx1ZX1cImB9YH1gO1xufVxuZnVuY3Rpb24gYWRkX2NsYXNzZXMoY2xhc3Nlcykge1xuICAgIHJldHVybiBjbGFzc2VzID8gYCBjbGFzcz1cIiR7Y2xhc3Nlc31cImAgOiBgYDtcbn1cblxuZnVuY3Rpb24gYmluZChjb21wb25lbnQsIG5hbWUsIGNhbGxiYWNrKSB7XG4gICAgaWYgKGNvbXBvbmVudC4kJC5wcm9wcy5pbmRleE9mKG5hbWUpID09PSAtMSlcbiAgICAgICAgcmV0dXJuO1xuICAgIGNvbXBvbmVudC4kJC5ib3VuZFtuYW1lXSA9IGNhbGxiYWNrO1xuICAgIGNhbGxiYWNrKGNvbXBvbmVudC4kJC5jdHhbbmFtZV0pO1xufVxuZnVuY3Rpb24gbW91bnRfY29tcG9uZW50KGNvbXBvbmVudCwgdGFyZ2V0LCBhbmNob3IpIHtcbiAgICBjb25zdCB7IGZyYWdtZW50LCBvbl9tb3VudCwgb25fZGVzdHJveSwgYWZ0ZXJfdXBkYXRlIH0gPSBjb21wb25lbnQuJCQ7XG4gICAgZnJhZ21lbnQubSh0YXJnZXQsIGFuY2hvcik7XG4gICAgLy8gb25Nb3VudCBoYXBwZW5zIGJlZm9yZSB0aGUgaW5pdGlhbCBhZnRlclVwZGF0ZVxuICAgIGFkZF9yZW5kZXJfY2FsbGJhY2soKCkgPT4ge1xuICAgICAgICBjb25zdCBuZXdfb25fZGVzdHJveSA9IG9uX21vdW50Lm1hcChydW4pLmZpbHRlcihpc19mdW5jdGlvbik7XG4gICAgICAgIGlmIChvbl9kZXN0cm95KSB7XG4gICAgICAgICAgICBvbl9kZXN0cm95LnB1c2goLi4ubmV3X29uX2Rlc3Ryb3kpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gRWRnZSBjYXNlIC0gY29tcG9uZW50IHdhcyBkZXN0cm95ZWQgaW1tZWRpYXRlbHksXG4gICAgICAgICAgICAvLyBtb3N0IGxpa2VseSBhcyBhIHJlc3VsdCBvZiBhIGJpbmRpbmcgaW5pdGlhbGlzaW5nXG4gICAgICAgICAgICBydW5fYWxsKG5ld19vbl9kZXN0cm95KTtcbiAgICAgICAgfVxuICAgICAgICBjb21wb25lbnQuJCQub25fbW91bnQgPSBbXTtcbiAgICB9KTtcbiAgICBhZnRlcl91cGRhdGUuZm9yRWFjaChhZGRfcmVuZGVyX2NhbGxiYWNrKTtcbn1cbmZ1bmN0aW9uIGRlc3Ryb3lfY29tcG9uZW50KGNvbXBvbmVudCwgZGV0YWNoaW5nKSB7XG4gICAgaWYgKGNvbXBvbmVudC4kJC5mcmFnbWVudCkge1xuICAgICAgICBydW5fYWxsKGNvbXBvbmVudC4kJC5vbl9kZXN0cm95KTtcbiAgICAgICAgY29tcG9uZW50LiQkLmZyYWdtZW50LmQoZGV0YWNoaW5nKTtcbiAgICAgICAgLy8gVE9ETyBudWxsIG91dCBvdGhlciByZWZzLCBpbmNsdWRpbmcgY29tcG9uZW50LiQkIChidXQgbmVlZCB0b1xuICAgICAgICAvLyBwcmVzZXJ2ZSBmaW5hbCBzdGF0ZT8pXG4gICAgICAgIGNvbXBvbmVudC4kJC5vbl9kZXN0cm95ID0gY29tcG9uZW50LiQkLmZyYWdtZW50ID0gbnVsbDtcbiAgICAgICAgY29tcG9uZW50LiQkLmN0eCA9IHt9O1xuICAgIH1cbn1cbmZ1bmN0aW9uIG1ha2VfZGlydHkoY29tcG9uZW50LCBrZXkpIHtcbiAgICBpZiAoIWNvbXBvbmVudC4kJC5kaXJ0eSkge1xuICAgICAgICBkaXJ0eV9jb21wb25lbnRzLnB1c2goY29tcG9uZW50KTtcbiAgICAgICAgc2NoZWR1bGVfdXBkYXRlKCk7XG4gICAgICAgIGNvbXBvbmVudC4kJC5kaXJ0eSA9IGJsYW5rX29iamVjdCgpO1xuICAgIH1cbiAgICBjb21wb25lbnQuJCQuZGlydHlba2V5XSA9IHRydWU7XG59XG5mdW5jdGlvbiBpbml0KGNvbXBvbmVudCwgb3B0aW9ucywgaW5zdGFuY2UsIGNyZWF0ZV9mcmFnbWVudCwgbm90X2VxdWFsLCBwcm9wX25hbWVzKSB7XG4gICAgY29uc3QgcGFyZW50X2NvbXBvbmVudCA9IGN1cnJlbnRfY29tcG9uZW50O1xuICAgIHNldF9jdXJyZW50X2NvbXBvbmVudChjb21wb25lbnQpO1xuICAgIGNvbnN0IHByb3BzID0gb3B0aW9ucy5wcm9wcyB8fCB7fTtcbiAgICBjb25zdCAkJCA9IGNvbXBvbmVudC4kJCA9IHtcbiAgICAgICAgZnJhZ21lbnQ6IG51bGwsXG4gICAgICAgIGN0eDogbnVsbCxcbiAgICAgICAgLy8gc3RhdGVcbiAgICAgICAgcHJvcHM6IHByb3BfbmFtZXMsXG4gICAgICAgIHVwZGF0ZTogbm9vcCxcbiAgICAgICAgbm90X2VxdWFsLFxuICAgICAgICBib3VuZDogYmxhbmtfb2JqZWN0KCksXG4gICAgICAgIC8vIGxpZmVjeWNsZVxuICAgICAgICBvbl9tb3VudDogW10sXG4gICAgICAgIG9uX2Rlc3Ryb3k6IFtdLFxuICAgICAgICBiZWZvcmVfdXBkYXRlOiBbXSxcbiAgICAgICAgYWZ0ZXJfdXBkYXRlOiBbXSxcbiAgICAgICAgY29udGV4dDogbmV3IE1hcChwYXJlbnRfY29tcG9uZW50ID8gcGFyZW50X2NvbXBvbmVudC4kJC5jb250ZXh0IDogW10pLFxuICAgICAgICAvLyBldmVyeXRoaW5nIGVsc2VcbiAgICAgICAgY2FsbGJhY2tzOiBibGFua19vYmplY3QoKSxcbiAgICAgICAgZGlydHk6IG51bGxcbiAgICB9O1xuICAgIGxldCByZWFkeSA9IGZhbHNlO1xuICAgICQkLmN0eCA9IGluc3RhbmNlXG4gICAgICAgID8gaW5zdGFuY2UoY29tcG9uZW50LCBwcm9wcywgKGtleSwgcmV0LCB2YWx1ZSA9IHJldCkgPT4ge1xuICAgICAgICAgICAgaWYgKCQkLmN0eCAmJiBub3RfZXF1YWwoJCQuY3R4W2tleV0sICQkLmN0eFtrZXldID0gdmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgaWYgKCQkLmJvdW5kW2tleV0pXG4gICAgICAgICAgICAgICAgICAgICQkLmJvdW5kW2tleV0odmFsdWUpO1xuICAgICAgICAgICAgICAgIGlmIChyZWFkeSlcbiAgICAgICAgICAgICAgICAgICAgbWFrZV9kaXJ0eShjb21wb25lbnQsIGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICB9KVxuICAgICAgICA6IHByb3BzO1xuICAgICQkLnVwZGF0ZSgpO1xuICAgIHJlYWR5ID0gdHJ1ZTtcbiAgICBydW5fYWxsKCQkLmJlZm9yZV91cGRhdGUpO1xuICAgICQkLmZyYWdtZW50ID0gY3JlYXRlX2ZyYWdtZW50KCQkLmN0eCk7XG4gICAgaWYgKG9wdGlvbnMudGFyZ2V0KSB7XG4gICAgICAgIGlmIChvcHRpb25zLmh5ZHJhdGUpIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uXG4gICAgICAgICAgICAkJC5mcmFnbWVudC5sKGNoaWxkcmVuKG9wdGlvbnMudGFyZ2V0KSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvblxuICAgICAgICAgICAgJCQuZnJhZ21lbnQuYygpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLmludHJvKVxuICAgICAgICAgICAgdHJhbnNpdGlvbl9pbihjb21wb25lbnQuJCQuZnJhZ21lbnQpO1xuICAgICAgICBtb3VudF9jb21wb25lbnQoY29tcG9uZW50LCBvcHRpb25zLnRhcmdldCwgb3B0aW9ucy5hbmNob3IpO1xuICAgICAgICBmbHVzaCgpO1xuICAgIH1cbiAgICBzZXRfY3VycmVudF9jb21wb25lbnQocGFyZW50X2NvbXBvbmVudCk7XG59XG5sZXQgU3ZlbHRlRWxlbWVudDtcbmlmICh0eXBlb2YgSFRNTEVsZW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgU3ZlbHRlRWxlbWVudCA9IGNsYXNzIGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICAgICAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgICAgIHN1cGVyKCk7XG4gICAgICAgICAgICB0aGlzLmF0dGFjaFNoYWRvdyh7IG1vZGU6ICdvcGVuJyB9KTtcbiAgICAgICAgfVxuICAgICAgICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmUgdG9kbzogaW1wcm92ZSB0eXBpbmdzXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiB0aGlzLiQkLnNsb3R0ZWQpIHtcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlIHRvZG86IGltcHJvdmUgdHlwaW5nc1xuICAgICAgICAgICAgICAgIHRoaXMuYXBwZW5kQ2hpbGQodGhpcy4kJC5zbG90dGVkW2tleV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhhdHRyLCBfb2xkVmFsdWUsIG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzW2F0dHJdID0gbmV3VmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgJGRlc3Ryb3koKSB7XG4gICAgICAgICAgICBkZXN0cm95X2NvbXBvbmVudCh0aGlzLCAxKTtcbiAgICAgICAgICAgIHRoaXMuJGRlc3Ryb3kgPSBub29wO1xuICAgICAgICB9XG4gICAgICAgICRvbih0eXBlLCBjYWxsYmFjaykge1xuICAgICAgICAgICAgLy8gVE9ETyBzaG91bGQgdGhpcyBkZWxlZ2F0ZSB0byBhZGRFdmVudExpc3RlbmVyP1xuICAgICAgICAgICAgY29uc3QgY2FsbGJhY2tzID0gKHRoaXMuJCQuY2FsbGJhY2tzW3R5cGVdIHx8ICh0aGlzLiQkLmNhbGxiYWNrc1t0eXBlXSA9IFtdKSk7XG4gICAgICAgICAgICBjYWxsYmFja3MucHVzaChjYWxsYmFjayk7XG4gICAgICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gY2FsbGJhY2tzLmluZGV4T2YoY2FsbGJhY2spO1xuICAgICAgICAgICAgICAgIGlmIChpbmRleCAhPT0gLTEpXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICAkc2V0KCkge1xuICAgICAgICAgICAgLy8gb3ZlcnJpZGRlbiBieSBpbnN0YW5jZSwgaWYgaXQgaGFzIHByb3BzXG4gICAgICAgIH1cbiAgICB9O1xufVxuY2xhc3MgU3ZlbHRlQ29tcG9uZW50IHtcbiAgICAkZGVzdHJveSgpIHtcbiAgICAgICAgZGVzdHJveV9jb21wb25lbnQodGhpcywgMSk7XG4gICAgICAgIHRoaXMuJGRlc3Ryb3kgPSBub29wO1xuICAgIH1cbiAgICAkb24odHlwZSwgY2FsbGJhY2spIHtcbiAgICAgICAgY29uc3QgY2FsbGJhY2tzID0gKHRoaXMuJCQuY2FsbGJhY2tzW3R5cGVdIHx8ICh0aGlzLiQkLmNhbGxiYWNrc1t0eXBlXSA9IFtdKSk7XG4gICAgICAgIGNhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gY2FsbGJhY2tzLmluZGV4T2YoY2FsbGJhY2spO1xuICAgICAgICAgICAgaWYgKGluZGV4ICE9PSAtMSlcbiAgICAgICAgICAgICAgICBjYWxsYmFja3Muc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgJHNldCgpIHtcbiAgICAgICAgLy8gb3ZlcnJpZGRlbiBieSBpbnN0YW5jZSwgaWYgaXQgaGFzIHByb3BzXG4gICAgfVxufVxuXG5mdW5jdGlvbiBkaXNwYXRjaF9kZXYodHlwZSwgZGV0YWlsKSB7XG4gICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChjdXN0b21fZXZlbnQodHlwZSwgZGV0YWlsKSk7XG59XG5mdW5jdGlvbiBhcHBlbmRfZGV2KHRhcmdldCwgbm9kZSkge1xuICAgIGRpc3BhdGNoX2RldihcIlN2ZWx0ZURPTUluc2VydFwiLCB7IHRhcmdldCwgbm9kZSB9KTtcbiAgICBhcHBlbmQodGFyZ2V0LCBub2RlKTtcbn1cbmZ1bmN0aW9uIGluc2VydF9kZXYodGFyZ2V0LCBub2RlLCBhbmNob3IpIHtcbiAgICBkaXNwYXRjaF9kZXYoXCJTdmVsdGVET01JbnNlcnRcIiwgeyB0YXJnZXQsIG5vZGUsIGFuY2hvciB9KTtcbiAgICBpbnNlcnQodGFyZ2V0LCBub2RlLCBhbmNob3IpO1xufVxuZnVuY3Rpb24gZGV0YWNoX2Rldihub2RlKSB7XG4gICAgZGlzcGF0Y2hfZGV2KFwiU3ZlbHRlRE9NUmVtb3ZlXCIsIHsgbm9kZSB9KTtcbiAgICBkZXRhY2gobm9kZSk7XG59XG5mdW5jdGlvbiBkZXRhY2hfYmV0d2Vlbl9kZXYoYmVmb3JlLCBhZnRlcikge1xuICAgIHdoaWxlIChiZWZvcmUubmV4dFNpYmxpbmcgJiYgYmVmb3JlLm5leHRTaWJsaW5nICE9PSBhZnRlcikge1xuICAgICAgICBkZXRhY2hfZGV2KGJlZm9yZS5uZXh0U2libGluZyk7XG4gICAgfVxufVxuZnVuY3Rpb24gZGV0YWNoX2JlZm9yZV9kZXYoYWZ0ZXIpIHtcbiAgICB3aGlsZSAoYWZ0ZXIucHJldmlvdXNTaWJsaW5nKSB7XG4gICAgICAgIGRldGFjaF9kZXYoYWZ0ZXIucHJldmlvdXNTaWJsaW5nKTtcbiAgICB9XG59XG5mdW5jdGlvbiBkZXRhY2hfYWZ0ZXJfZGV2KGJlZm9yZSkge1xuICAgIHdoaWxlIChiZWZvcmUubmV4dFNpYmxpbmcpIHtcbiAgICAgICAgZGV0YWNoX2RldihiZWZvcmUubmV4dFNpYmxpbmcpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGxpc3Rlbl9kZXYobm9kZSwgZXZlbnQsIGhhbmRsZXIsIG9wdGlvbnMsIGhhc19wcmV2ZW50X2RlZmF1bHQsIGhhc19zdG9wX3Byb3BhZ2F0aW9uKSB7XG4gICAgY29uc3QgbW9kaWZpZXJzID0gb3B0aW9ucyA9PT0gdHJ1ZSA/IFtcImNhcHR1cmVcIl0gOiBvcHRpb25zID8gQXJyYXkuZnJvbShPYmplY3Qua2V5cyhvcHRpb25zKSkgOiBbXTtcbiAgICBpZiAoaGFzX3ByZXZlbnRfZGVmYXVsdClcbiAgICAgICAgbW9kaWZpZXJzLnB1c2goJ3ByZXZlbnREZWZhdWx0Jyk7XG4gICAgaWYgKGhhc19zdG9wX3Byb3BhZ2F0aW9uKVxuICAgICAgICBtb2RpZmllcnMucHVzaCgnc3RvcFByb3BhZ2F0aW9uJyk7XG4gICAgZGlzcGF0Y2hfZGV2KFwiU3ZlbHRlRE9NQWRkRXZlbnRMaXN0ZW5lclwiLCB7IG5vZGUsIGV2ZW50LCBoYW5kbGVyLCBtb2RpZmllcnMgfSk7XG4gICAgY29uc3QgZGlzcG9zZSA9IGxpc3Rlbihub2RlLCBldmVudCwgaGFuZGxlciwgb3B0aW9ucyk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgZGlzcGF0Y2hfZGV2KFwiU3ZlbHRlRE9NUmVtb3ZlRXZlbnRMaXN0ZW5lclwiLCB7IG5vZGUsIGV2ZW50LCBoYW5kbGVyLCBtb2RpZmllcnMgfSk7XG4gICAgICAgIGRpc3Bvc2UoKTtcbiAgICB9O1xufVxuZnVuY3Rpb24gYXR0cl9kZXYobm9kZSwgYXR0cmlidXRlLCB2YWx1ZSkge1xuICAgIGF0dHIobm9kZSwgYXR0cmlidXRlLCB2YWx1ZSk7XG4gICAgaWYgKHZhbHVlID09IG51bGwpXG4gICAgICAgIGRpc3BhdGNoX2RldihcIlN2ZWx0ZURPTVJlbW92ZUF0dHJpYnV0ZVwiLCB7IG5vZGUsIGF0dHJpYnV0ZSB9KTtcbiAgICBlbHNlXG4gICAgICAgIGRpc3BhdGNoX2RldihcIlN2ZWx0ZURPTVNldEF0dHJpYnV0ZVwiLCB7IG5vZGUsIGF0dHJpYnV0ZSwgdmFsdWUgfSk7XG59XG5mdW5jdGlvbiBwcm9wX2Rldihub2RlLCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgICBub2RlW3Byb3BlcnR5XSA9IHZhbHVlO1xuICAgIGRpc3BhdGNoX2RldihcIlN2ZWx0ZURPTVNldFByb3BlcnR5XCIsIHsgbm9kZSwgcHJvcGVydHksIHZhbHVlIH0pO1xufVxuZnVuY3Rpb24gZGF0YXNldF9kZXYobm9kZSwgcHJvcGVydHksIHZhbHVlKSB7XG4gICAgbm9kZS5kYXRhc2V0W3Byb3BlcnR5XSA9IHZhbHVlO1xuICAgIGRpc3BhdGNoX2RldihcIlN2ZWx0ZURPTVNldERhdGFzZXRcIiwgeyBub2RlLCBwcm9wZXJ0eSwgdmFsdWUgfSk7XG59XG5mdW5jdGlvbiBzZXRfZGF0YV9kZXYodGV4dCwgZGF0YSkge1xuICAgIGRhdGEgPSAnJyArIGRhdGE7XG4gICAgaWYgKHRleHQuZGF0YSA9PT0gZGF0YSlcbiAgICAgICAgcmV0dXJuO1xuICAgIGRpc3BhdGNoX2RldihcIlN2ZWx0ZURPTVNldERhdGFcIiwgeyBub2RlOiB0ZXh0LCBkYXRhIH0pO1xuICAgIHRleHQuZGF0YSA9IGRhdGE7XG59XG5jbGFzcyBTdmVsdGVDb21wb25lbnREZXYgZXh0ZW5kcyBTdmVsdGVDb21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKCFvcHRpb25zIHx8ICghb3B0aW9ucy50YXJnZXQgJiYgIW9wdGlvbnMuJCRpbmxpbmUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCd0YXJnZXQnIGlzIGEgcmVxdWlyZWQgb3B0aW9uYCk7XG4gICAgICAgIH1cbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG4gICAgJGRlc3Ryb3koKSB7XG4gICAgICAgIHN1cGVyLiRkZXN0cm95KCk7XG4gICAgICAgIHRoaXMuJGRlc3Ryb3kgPSAoKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYENvbXBvbmVudCB3YXMgYWxyZWFkeSBkZXN0cm95ZWRgKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgICAgIH07XG4gICAgfVxufVxuXG5leHBvcnQgeyBIdG1sVGFnLCBTdmVsdGVDb21wb25lbnQsIFN2ZWx0ZUNvbXBvbmVudERldiwgU3ZlbHRlRWxlbWVudCwgYWRkX2F0dHJpYnV0ZSwgYWRkX2NsYXNzZXMsIGFkZF9mbHVzaF9jYWxsYmFjaywgYWRkX2xvY2F0aW9uLCBhZGRfcmVuZGVyX2NhbGxiYWNrLCBhZGRfcmVzaXplX2xpc3RlbmVyLCBhZGRfdHJhbnNmb3JtLCBhZnRlclVwZGF0ZSwgYXBwZW5kLCBhcHBlbmRfZGV2LCBhc3NpZ24sIGF0dHIsIGF0dHJfZGV2LCBiZWZvcmVVcGRhdGUsIGJpbmQsIGJpbmRpbmdfY2FsbGJhY2tzLCBibGFua19vYmplY3QsIGJ1YmJsZSwgY2hlY2tfb3V0cm9zLCBjaGlsZHJlbiwgY2xhaW1fZWxlbWVudCwgY2xhaW1fc3BhY2UsIGNsYWltX3RleHQsIGNsZWFyX2xvb3BzLCBjb21wb25lbnRfc3Vic2NyaWJlLCBjcmVhdGVFdmVudERpc3BhdGNoZXIsIGNyZWF0ZV9hbmltYXRpb24sIGNyZWF0ZV9iaWRpcmVjdGlvbmFsX3RyYW5zaXRpb24sIGNyZWF0ZV9pbl90cmFuc2l0aW9uLCBjcmVhdGVfb3V0X3RyYW5zaXRpb24sIGNyZWF0ZV9zbG90LCBjcmVhdGVfc3NyX2NvbXBvbmVudCwgY3VycmVudF9jb21wb25lbnQsIGN1c3RvbV9ldmVudCwgZGF0YXNldF9kZXYsIGRlYnVnLCBkZXN0cm95X2Jsb2NrLCBkZXN0cm95X2NvbXBvbmVudCwgZGVzdHJveV9lYWNoLCBkZXRhY2gsIGRldGFjaF9hZnRlcl9kZXYsIGRldGFjaF9iZWZvcmVfZGV2LCBkZXRhY2hfYmV0d2Vlbl9kZXYsIGRldGFjaF9kZXYsIGRpcnR5X2NvbXBvbmVudHMsIGRpc3BhdGNoX2RldiwgZWFjaCwgZWxlbWVudCwgZWxlbWVudF9pcywgZW1wdHksIGVzY2FwZSwgZXNjYXBlZCwgZXhjbHVkZV9pbnRlcm5hbF9wcm9wcywgZml4X2FuZF9kZXN0cm95X2Jsb2NrLCBmaXhfYW5kX291dHJvX2FuZF9kZXN0cm95X2Jsb2NrLCBmaXhfcG9zaXRpb24sIGZsdXNoLCBnZXRDb250ZXh0LCBnZXRfYmluZGluZ19ncm91cF92YWx1ZSwgZ2V0X2N1cnJlbnRfY29tcG9uZW50LCBnZXRfc2xvdF9jaGFuZ2VzLCBnZXRfc2xvdF9jb250ZXh0LCBnZXRfc3ByZWFkX29iamVjdCwgZ2V0X3NwcmVhZF91cGRhdGUsIGdldF9zdG9yZV92YWx1ZSwgZ2xvYmFscywgZ3JvdXBfb3V0cm9zLCBoYW5kbGVfcHJvbWlzZSwgaWRlbnRpdHksIGluaXQsIGluc2VydCwgaW5zZXJ0X2RldiwgaW50cm9zLCBpbnZhbGlkX2F0dHJpYnV0ZV9uYW1lX2NoYXJhY3RlciwgaXNfY2xpZW50LCBpc19mdW5jdGlvbiwgaXNfcHJvbWlzZSwgbGlzdGVuLCBsaXN0ZW5fZGV2LCBsb29wLCBtZWFzdXJlLCBtaXNzaW5nX2NvbXBvbmVudCwgbW91bnRfY29tcG9uZW50LCBub29wLCBub3RfZXF1YWwsIG5vdywgbnVsbF90b19lbXB0eSwgb2JqZWN0X3dpdGhvdXRfcHJvcGVydGllcywgb25EZXN0cm95LCBvbk1vdW50LCBvbmNlLCBvdXRyb19hbmRfZGVzdHJveV9ibG9jaywgcHJldmVudF9kZWZhdWx0LCBwcm9wX2RldiwgcmFmLCBydW4sIHJ1bl9hbGwsIHNhZmVfbm90X2VxdWFsLCBzY2hlZHVsZV91cGRhdGUsIHNlbGVjdF9tdWx0aXBsZV92YWx1ZSwgc2VsZWN0X29wdGlvbiwgc2VsZWN0X29wdGlvbnMsIHNlbGVjdF92YWx1ZSwgc2VsZiwgc2V0Q29udGV4dCwgc2V0X2F0dHJpYnV0ZXMsIHNldF9jdXJyZW50X2NvbXBvbmVudCwgc2V0X2N1c3RvbV9lbGVtZW50X2RhdGEsIHNldF9kYXRhLCBzZXRfZGF0YV9kZXYsIHNldF9pbnB1dF90eXBlLCBzZXRfaW5wdXRfdmFsdWUsIHNldF9ub3csIHNldF9yYWYsIHNldF9zdG9yZV92YWx1ZSwgc2V0X3N0eWxlLCBzZXRfc3ZnX2F0dHJpYnV0ZXMsIHNwYWNlLCBzcHJlYWQsIHN0b3BfcHJvcGFnYXRpb24sIHN1YnNjcmliZSwgc3ZnX2VsZW1lbnQsIHRleHQsIHRpY2ssIHRpbWVfcmFuZ2VzX3RvX2FycmF5LCB0b19udW1iZXIsIHRvZ2dsZV9jbGFzcywgdHJhbnNpdGlvbl9pbiwgdHJhbnNpdGlvbl9vdXQsIHVwZGF0ZV9rZXllZF9lYWNoLCB2YWxpZGF0ZV9jb21wb25lbnQsIHZhbGlkYXRlX3N0b3JlLCB4bGlua19hdHRyIH07XG4iLCIvKlxuICogVGhlIE1JVCBMaWNlbnNlIChNSVQpXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LTIwMTYgUGF0cmljayBHYW5zdGVyZXIgPHBhcm9nYUBwYXJvZ2EuY29tPlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbiAqIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuICogU09GVFdBUkUuXG4gKi9cblxudmFyIFBPV18yXzI0ID0gNS45NjA0NjQ0Nzc1MzkwNjNlLTgsXG4gICAgUE9XXzJfMzIgPSA0Mjk0OTY3Mjk2LFxuICAgIFBPV18yXzUzID0gOTAwNzE5OTI1NDc0MDk5MjtcblxuZnVuY3Rpb24gZW5jb2RlKHZhbHVlKSB7XG4gIHZhciBkYXRhID0gbmV3IEFycmF5QnVmZmVyKDI1Nik7XG4gIHZhciBkYXRhVmlldyA9IG5ldyBEYXRhVmlldyhkYXRhKTtcbiAgdmFyIGxhc3RMZW5ndGg7XG4gIHZhciBvZmZzZXQgPSAwO1xuXG4gIGZ1bmN0aW9uIHByZXBhcmVXcml0ZShsZW5ndGgpIHtcbiAgICB2YXIgbmV3Qnl0ZUxlbmd0aCA9IGRhdGEuYnl0ZUxlbmd0aDtcbiAgICB2YXIgcmVxdWlyZWRMZW5ndGggPSBvZmZzZXQgKyBsZW5ndGg7XG4gICAgd2hpbGUgKG5ld0J5dGVMZW5ndGggPCByZXF1aXJlZExlbmd0aClcbiAgICAgIG5ld0J5dGVMZW5ndGggPDw9IDE7XG4gICAgaWYgKG5ld0J5dGVMZW5ndGggIT09IGRhdGEuYnl0ZUxlbmd0aCkge1xuICAgICAgdmFyIG9sZERhdGFWaWV3ID0gZGF0YVZpZXc7XG4gICAgICBkYXRhID0gbmV3IEFycmF5QnVmZmVyKG5ld0J5dGVMZW5ndGgpO1xuICAgICAgZGF0YVZpZXcgPSBuZXcgRGF0YVZpZXcoZGF0YSk7XG4gICAgICB2YXIgdWludDMyY291bnQgPSAob2Zmc2V0ICsgMykgPj4gMjtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdWludDMyY291bnQ7ICsraSlcbiAgICAgICAgZGF0YVZpZXcuc2V0VWludDMyKGkgPDwgMiwgb2xkRGF0YVZpZXcuZ2V0VWludDMyKGkgPDwgMikpO1xuICAgIH1cblxuICAgIGxhc3RMZW5ndGggPSBsZW5ndGg7XG4gICAgcmV0dXJuIGRhdGFWaWV3O1xuICB9XG4gIGZ1bmN0aW9uIGNvbW1pdFdyaXRlKCkge1xuICAgIG9mZnNldCArPSBsYXN0TGVuZ3RoO1xuICB9XG4gIGZ1bmN0aW9uIHdyaXRlRmxvYXQ2NCh2YWx1ZSkge1xuICAgIGNvbW1pdFdyaXRlKHByZXBhcmVXcml0ZSg4KS5zZXRGbG9hdDY0KG9mZnNldCwgdmFsdWUpKTtcbiAgfVxuICBmdW5jdGlvbiB3cml0ZVVpbnQ4KHZhbHVlKSB7XG4gICAgY29tbWl0V3JpdGUocHJlcGFyZVdyaXRlKDEpLnNldFVpbnQ4KG9mZnNldCwgdmFsdWUpKTtcbiAgfVxuICBmdW5jdGlvbiB3cml0ZVVpbnQ4QXJyYXkodmFsdWUpIHtcbiAgICB2YXIgZGF0YVZpZXcgPSBwcmVwYXJlV3JpdGUodmFsdWUubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgKytpKVxuICAgICAgZGF0YVZpZXcuc2V0VWludDgob2Zmc2V0ICsgaSwgdmFsdWVbaV0pO1xuICAgIGNvbW1pdFdyaXRlKCk7XG4gIH1cbiAgZnVuY3Rpb24gd3JpdGVVaW50MTYodmFsdWUpIHtcbiAgICBjb21taXRXcml0ZShwcmVwYXJlV3JpdGUoMikuc2V0VWludDE2KG9mZnNldCwgdmFsdWUpKTtcbiAgfVxuICBmdW5jdGlvbiB3cml0ZVVpbnQzMih2YWx1ZSkge1xuICAgIGNvbW1pdFdyaXRlKHByZXBhcmVXcml0ZSg0KS5zZXRVaW50MzIob2Zmc2V0LCB2YWx1ZSkpO1xuICB9XG4gIGZ1bmN0aW9uIHdyaXRlVWludDY0KHZhbHVlKSB7XG4gICAgdmFyIGxvdyA9IHZhbHVlICUgUE9XXzJfMzI7XG4gICAgdmFyIGhpZ2ggPSAodmFsdWUgLSBsb3cpIC8gUE9XXzJfMzI7XG4gICAgdmFyIGRhdGFWaWV3ID0gcHJlcGFyZVdyaXRlKDgpO1xuICAgIGRhdGFWaWV3LnNldFVpbnQzMihvZmZzZXQsIGhpZ2gpO1xuICAgIGRhdGFWaWV3LnNldFVpbnQzMihvZmZzZXQgKyA0LCBsb3cpO1xuICAgIGNvbW1pdFdyaXRlKCk7XG4gIH1cbiAgZnVuY3Rpb24gd3JpdGVUeXBlQW5kTGVuZ3RoKHR5cGUsIGxlbmd0aCkge1xuICAgIGlmIChsZW5ndGggPCAyNCkge1xuICAgICAgd3JpdGVVaW50OCh0eXBlIDw8IDUgfCBsZW5ndGgpO1xuICAgIH0gZWxzZSBpZiAobGVuZ3RoIDwgMHgxMDApIHtcbiAgICAgIHdyaXRlVWludDgodHlwZSA8PCA1IHwgMjQpO1xuICAgICAgd3JpdGVVaW50OChsZW5ndGgpO1xuICAgIH0gZWxzZSBpZiAobGVuZ3RoIDwgMHgxMDAwMCkge1xuICAgICAgd3JpdGVVaW50OCh0eXBlIDw8IDUgfCAyNSk7XG4gICAgICB3cml0ZVVpbnQxNihsZW5ndGgpO1xuICAgIH0gZWxzZSBpZiAobGVuZ3RoIDwgMHgxMDAwMDAwMDApIHtcbiAgICAgIHdyaXRlVWludDgodHlwZSA8PCA1IHwgMjYpO1xuICAgICAgd3JpdGVVaW50MzIobGVuZ3RoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgd3JpdGVVaW50OCh0eXBlIDw8IDUgfCAyNyk7XG4gICAgICB3cml0ZVVpbnQ2NChsZW5ndGgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGVuY29kZUl0ZW0odmFsdWUpIHtcbiAgICB2YXIgaTtcblxuICAgIGlmICh2YWx1ZSA9PT0gZmFsc2UpXG4gICAgICByZXR1cm4gd3JpdGVVaW50OCgweGY0KTtcbiAgICBpZiAodmFsdWUgPT09IHRydWUpXG4gICAgICByZXR1cm4gd3JpdGVVaW50OCgweGY1KTtcbiAgICBpZiAodmFsdWUgPT09IG51bGwpXG4gICAgICByZXR1cm4gd3JpdGVVaW50OCgweGY2KTtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZClcbiAgICAgIHJldHVybiB3cml0ZVVpbnQ4KDB4ZjcpO1xuXG4gICAgc3dpdGNoICh0eXBlb2YgdmFsdWUpIHtcbiAgICAgIGNhc2UgXCJudW1iZXJcIjpcbiAgICAgICAgaWYgKE1hdGguZmxvb3IodmFsdWUpID09PSB2YWx1ZSkge1xuICAgICAgICAgIGlmICgwIDw9IHZhbHVlICYmIHZhbHVlIDw9IFBPV18yXzUzKVxuICAgICAgICAgICAgcmV0dXJuIHdyaXRlVHlwZUFuZExlbmd0aCgwLCB2YWx1ZSk7XG4gICAgICAgICAgaWYgKC1QT1dfMl81MyA8PSB2YWx1ZSAmJiB2YWx1ZSA8IDApXG4gICAgICAgICAgICByZXR1cm4gd3JpdGVUeXBlQW5kTGVuZ3RoKDEsIC0odmFsdWUgKyAxKSk7XG4gICAgICAgIH1cbiAgICAgICAgd3JpdGVVaW50OCgweGZiKTtcbiAgICAgICAgcmV0dXJuIHdyaXRlRmxvYXQ2NCh2YWx1ZSk7XG5cbiAgICAgIGNhc2UgXCJzdHJpbmdcIjpcbiAgICAgICAgdmFyIHV0ZjhkYXRhID0gW107XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB2YWx1ZS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgIHZhciBjaGFyQ29kZSA9IHZhbHVlLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgICAgaWYgKGNoYXJDb2RlIDwgMHg4MCkge1xuICAgICAgICAgICAgdXRmOGRhdGEucHVzaChjaGFyQ29kZSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChjaGFyQ29kZSA8IDB4ODAwKSB7XG4gICAgICAgICAgICB1dGY4ZGF0YS5wdXNoKDB4YzAgfCBjaGFyQ29kZSA+PiA2KTtcbiAgICAgICAgICAgIHV0ZjhkYXRhLnB1c2goMHg4MCB8IGNoYXJDb2RlICYgMHgzZik7XG4gICAgICAgICAgfSBlbHNlIGlmIChjaGFyQ29kZSA8IDB4ZDgwMCkge1xuICAgICAgICAgICAgdXRmOGRhdGEucHVzaCgweGUwIHwgY2hhckNvZGUgPj4gMTIpO1xuICAgICAgICAgICAgdXRmOGRhdGEucHVzaCgweDgwIHwgKGNoYXJDb2RlID4+IDYpICAmIDB4M2YpO1xuICAgICAgICAgICAgdXRmOGRhdGEucHVzaCgweDgwIHwgY2hhckNvZGUgJiAweDNmKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2hhckNvZGUgPSAoY2hhckNvZGUgJiAweDNmZikgPDwgMTA7XG4gICAgICAgICAgICBjaGFyQ29kZSB8PSB2YWx1ZS5jaGFyQ29kZUF0KCsraSkgJiAweDNmZjtcbiAgICAgICAgICAgIGNoYXJDb2RlICs9IDB4MTAwMDA7XG5cbiAgICAgICAgICAgIHV0ZjhkYXRhLnB1c2goMHhmMCB8IGNoYXJDb2RlID4+IDE4KTtcbiAgICAgICAgICAgIHV0ZjhkYXRhLnB1c2goMHg4MCB8IChjaGFyQ29kZSA+PiAxMikgICYgMHgzZik7XG4gICAgICAgICAgICB1dGY4ZGF0YS5wdXNoKDB4ODAgfCAoY2hhckNvZGUgPj4gNikgICYgMHgzZik7XG4gICAgICAgICAgICB1dGY4ZGF0YS5wdXNoKDB4ODAgfCBjaGFyQ29kZSAmIDB4M2YpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHdyaXRlVHlwZUFuZExlbmd0aCgzLCB1dGY4ZGF0YS5sZW5ndGgpO1xuICAgICAgICByZXR1cm4gd3JpdGVVaW50OEFycmF5KHV0ZjhkYXRhKTtcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdmFyIGxlbmd0aDtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgbGVuZ3RoID0gdmFsdWUubGVuZ3RoO1xuICAgICAgICAgIHdyaXRlVHlwZUFuZExlbmd0aCg0LCBsZW5ndGgpO1xuICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7ICsraSlcbiAgICAgICAgICAgIGVuY29kZUl0ZW0odmFsdWVbaV0pO1xuICAgICAgICB9IGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgICAgICAgIHdyaXRlVHlwZUFuZExlbmd0aCgyLCB2YWx1ZS5sZW5ndGgpO1xuICAgICAgICAgIHdyaXRlVWludDhBcnJheSh2YWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyh2YWx1ZSk7XG4gICAgICAgICAgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgICAgICAgd3JpdGVUeXBlQW5kTGVuZ3RoKDUsIGxlbmd0aCk7XG4gICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgICAgIGVuY29kZUl0ZW0oa2V5KTtcbiAgICAgICAgICAgIGVuY29kZUl0ZW0odmFsdWVba2V5XSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICB9XG5cbiAgZW5jb2RlSXRlbSh2YWx1ZSk7XG5cbiAgaWYgKFwic2xpY2VcIiBpbiBkYXRhKVxuICAgIHJldHVybiBkYXRhLnNsaWNlKDAsIG9mZnNldCk7XG5cbiAgdmFyIHJldCA9IG5ldyBBcnJheUJ1ZmZlcihvZmZzZXQpO1xuICB2YXIgcmV0VmlldyA9IG5ldyBEYXRhVmlldyhyZXQpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG9mZnNldDsgKytpKVxuICAgIHJldFZpZXcuc2V0VWludDgoaSwgZGF0YVZpZXcuZ2V0VWludDgoaSkpO1xuICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBkZWNvZGUoZGF0YSwgdGFnZ2VyLCBzaW1wbGVWYWx1ZSkge1xuICB2YXIgZGF0YVZpZXcgPSBuZXcgRGF0YVZpZXcoZGF0YSk7XG4gIHZhciBvZmZzZXQgPSAwO1xuXG4gIGlmICh0eXBlb2YgdGFnZ2VyICE9PSBcImZ1bmN0aW9uXCIpXG4gICAgdGFnZ2VyID0gZnVuY3Rpb24odmFsdWUpIHsgcmV0dXJuIHZhbHVlOyB9O1xuICBpZiAodHlwZW9mIHNpbXBsZVZhbHVlICE9PSBcImZ1bmN0aW9uXCIpXG4gICAgc2ltcGxlVmFsdWUgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfTtcblxuICBmdW5jdGlvbiBjb21taXRSZWFkKGxlbmd0aCwgdmFsdWUpIHtcbiAgICBvZmZzZXQgKz0gbGVuZ3RoO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBmdW5jdGlvbiByZWFkQXJyYXlCdWZmZXIobGVuZ3RoKSB7XG4gICAgcmV0dXJuIGNvbW1pdFJlYWQobGVuZ3RoLCBuZXcgVWludDhBcnJheShkYXRhLCBvZmZzZXQsIGxlbmd0aCkpO1xuICB9XG4gIGZ1bmN0aW9uIHJlYWRGbG9hdDE2KCkge1xuICAgIHZhciB0ZW1wQXJyYXlCdWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIoNCk7XG4gICAgdmFyIHRlbXBEYXRhVmlldyA9IG5ldyBEYXRhVmlldyh0ZW1wQXJyYXlCdWZmZXIpO1xuICAgIHZhciB2YWx1ZSA9IHJlYWRVaW50MTYoKTtcblxuICAgIHZhciBzaWduID0gdmFsdWUgJiAweDgwMDA7XG4gICAgdmFyIGV4cG9uZW50ID0gdmFsdWUgJiAweDdjMDA7XG4gICAgdmFyIGZyYWN0aW9uID0gdmFsdWUgJiAweDAzZmY7XG5cbiAgICBpZiAoZXhwb25lbnQgPT09IDB4N2MwMClcbiAgICAgIGV4cG9uZW50ID0gMHhmZiA8PCAxMDtcbiAgICBlbHNlIGlmIChleHBvbmVudCAhPT0gMClcbiAgICAgIGV4cG9uZW50ICs9ICgxMjcgLSAxNSkgPDwgMTA7XG4gICAgZWxzZSBpZiAoZnJhY3Rpb24gIT09IDApXG4gICAgICByZXR1cm4gKHNpZ24gPyAtMSA6IDEpICogZnJhY3Rpb24gKiBQT1dfMl8yNDtcblxuICAgIHRlbXBEYXRhVmlldy5zZXRVaW50MzIoMCwgc2lnbiA8PCAxNiB8IGV4cG9uZW50IDw8IDEzIHwgZnJhY3Rpb24gPDwgMTMpO1xuICAgIHJldHVybiB0ZW1wRGF0YVZpZXcuZ2V0RmxvYXQzMigwKTtcbiAgfVxuICBmdW5jdGlvbiByZWFkRmxvYXQzMigpIHtcbiAgICByZXR1cm4gY29tbWl0UmVhZCg0LCBkYXRhVmlldy5nZXRGbG9hdDMyKG9mZnNldCkpO1xuICB9XG4gIGZ1bmN0aW9uIHJlYWRGbG9hdDY0KCkge1xuICAgIHJldHVybiBjb21taXRSZWFkKDgsIGRhdGFWaWV3LmdldEZsb2F0NjQob2Zmc2V0KSk7XG4gIH1cbiAgZnVuY3Rpb24gcmVhZFVpbnQ4KCkge1xuICAgIHJldHVybiBjb21taXRSZWFkKDEsIGRhdGFWaWV3LmdldFVpbnQ4KG9mZnNldCkpO1xuICB9XG4gIGZ1bmN0aW9uIHJlYWRVaW50MTYoKSB7XG4gICAgcmV0dXJuIGNvbW1pdFJlYWQoMiwgZGF0YVZpZXcuZ2V0VWludDE2KG9mZnNldCkpO1xuICB9XG4gIGZ1bmN0aW9uIHJlYWRVaW50MzIoKSB7XG4gICAgcmV0dXJuIGNvbW1pdFJlYWQoNCwgZGF0YVZpZXcuZ2V0VWludDMyKG9mZnNldCkpO1xuICB9XG4gIGZ1bmN0aW9uIHJlYWRVaW50NjQoKSB7XG4gICAgcmV0dXJuIHJlYWRVaW50MzIoKSAqIFBPV18yXzMyICsgcmVhZFVpbnQzMigpO1xuICB9XG4gIGZ1bmN0aW9uIHJlYWRCcmVhaygpIHtcbiAgICBpZiAoZGF0YVZpZXcuZ2V0VWludDgob2Zmc2V0KSAhPT0gMHhmZilcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICBvZmZzZXQgKz0gMTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBmdW5jdGlvbiByZWFkTGVuZ3RoKGFkZGl0aW9uYWxJbmZvcm1hdGlvbikge1xuICAgIGlmIChhZGRpdGlvbmFsSW5mb3JtYXRpb24gPCAyNClcbiAgICAgIHJldHVybiBhZGRpdGlvbmFsSW5mb3JtYXRpb247XG4gICAgaWYgKGFkZGl0aW9uYWxJbmZvcm1hdGlvbiA9PT0gMjQpXG4gICAgICByZXR1cm4gcmVhZFVpbnQ4KCk7XG4gICAgaWYgKGFkZGl0aW9uYWxJbmZvcm1hdGlvbiA9PT0gMjUpXG4gICAgICByZXR1cm4gcmVhZFVpbnQxNigpO1xuICAgIGlmIChhZGRpdGlvbmFsSW5mb3JtYXRpb24gPT09IDI2KVxuICAgICAgcmV0dXJuIHJlYWRVaW50MzIoKTtcbiAgICBpZiAoYWRkaXRpb25hbEluZm9ybWF0aW9uID09PSAyNylcbiAgICAgIHJldHVybiByZWFkVWludDY0KCk7XG4gICAgaWYgKGFkZGl0aW9uYWxJbmZvcm1hdGlvbiA9PT0gMzEpXG4gICAgICByZXR1cm4gLTE7XG4gICAgdGhyb3cgXCJJbnZhbGlkIGxlbmd0aCBlbmNvZGluZ1wiO1xuICB9XG4gIGZ1bmN0aW9uIHJlYWRJbmRlZmluaXRlU3RyaW5nTGVuZ3RoKG1ham9yVHlwZSkge1xuICAgIHZhciBpbml0aWFsQnl0ZSA9IHJlYWRVaW50OCgpO1xuICAgIGlmIChpbml0aWFsQnl0ZSA9PT0gMHhmZilcbiAgICAgIHJldHVybiAtMTtcbiAgICB2YXIgbGVuZ3RoID0gcmVhZExlbmd0aChpbml0aWFsQnl0ZSAmIDB4MWYpO1xuICAgIGlmIChsZW5ndGggPCAwIHx8IChpbml0aWFsQnl0ZSA+PiA1KSAhPT0gbWFqb3JUeXBlKVxuICAgICAgdGhyb3cgXCJJbnZhbGlkIGluZGVmaW5pdGUgbGVuZ3RoIGVsZW1lbnRcIjtcbiAgICByZXR1cm4gbGVuZ3RoO1xuICB9XG5cbiAgZnVuY3Rpb24gYXBwZW5kVXRmMTZEYXRhKHV0ZjE2ZGF0YSwgbGVuZ3RoKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgICAgdmFyIHZhbHVlID0gcmVhZFVpbnQ4KCk7XG4gICAgICBpZiAodmFsdWUgJiAweDgwKSB7XG4gICAgICAgIGlmICh2YWx1ZSA8IDB4ZTApIHtcbiAgICAgICAgICB2YWx1ZSA9ICh2YWx1ZSAmIDB4MWYpIDw8ICA2XG4gICAgICAgICAgICAgICAgfCAocmVhZFVpbnQ4KCkgJiAweDNmKTtcbiAgICAgICAgICBsZW5ndGggLT0gMTtcbiAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSA8IDB4ZjApIHtcbiAgICAgICAgICB2YWx1ZSA9ICh2YWx1ZSAmIDB4MGYpIDw8IDEyXG4gICAgICAgICAgICAgICAgfCAocmVhZFVpbnQ4KCkgJiAweDNmKSA8PCA2XG4gICAgICAgICAgICAgICAgfCAocmVhZFVpbnQ4KCkgJiAweDNmKTtcbiAgICAgICAgICBsZW5ndGggLT0gMjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YWx1ZSA9ICh2YWx1ZSAmIDB4MGYpIDw8IDE4XG4gICAgICAgICAgICAgICAgfCAocmVhZFVpbnQ4KCkgJiAweDNmKSA8PCAxMlxuICAgICAgICAgICAgICAgIHwgKHJlYWRVaW50OCgpICYgMHgzZikgPDwgNlxuICAgICAgICAgICAgICAgIHwgKHJlYWRVaW50OCgpICYgMHgzZik7XG4gICAgICAgICAgbGVuZ3RoIC09IDM7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHZhbHVlIDwgMHgxMDAwMCkge1xuICAgICAgICB1dGYxNmRhdGEucHVzaCh2YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZSAtPSAweDEwMDAwO1xuICAgICAgICB1dGYxNmRhdGEucHVzaCgweGQ4MDAgfCAodmFsdWUgPj4gMTApKTtcbiAgICAgICAgdXRmMTZkYXRhLnB1c2goMHhkYzAwIHwgKHZhbHVlICYgMHgzZmYpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBkZWNvZGVJdGVtKCkge1xuICAgIHZhciBpbml0aWFsQnl0ZSA9IHJlYWRVaW50OCgpO1xuICAgIHZhciBtYWpvclR5cGUgPSBpbml0aWFsQnl0ZSA+PiA1O1xuICAgIHZhciBhZGRpdGlvbmFsSW5mb3JtYXRpb24gPSBpbml0aWFsQnl0ZSAmIDB4MWY7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbmd0aDtcblxuICAgIGlmIChtYWpvclR5cGUgPT09IDcpIHtcbiAgICAgIHN3aXRjaCAoYWRkaXRpb25hbEluZm9ybWF0aW9uKSB7XG4gICAgICAgIGNhc2UgMjU6XG4gICAgICAgICAgcmV0dXJuIHJlYWRGbG9hdDE2KCk7XG4gICAgICAgIGNhc2UgMjY6XG4gICAgICAgICAgcmV0dXJuIHJlYWRGbG9hdDMyKCk7XG4gICAgICAgIGNhc2UgMjc6XG4gICAgICAgICAgcmV0dXJuIHJlYWRGbG9hdDY0KCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGVuZ3RoID0gcmVhZExlbmd0aChhZGRpdGlvbmFsSW5mb3JtYXRpb24pO1xuICAgIGlmIChsZW5ndGggPCAwICYmIChtYWpvclR5cGUgPCAyIHx8IDYgPCBtYWpvclR5cGUpKVxuICAgICAgdGhyb3cgXCJJbnZhbGlkIGxlbmd0aFwiO1xuXG4gICAgc3dpdGNoIChtYWpvclR5cGUpIHtcbiAgICAgIGNhc2UgMDpcbiAgICAgICAgcmV0dXJuIGxlbmd0aDtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgcmV0dXJuIC0xIC0gbGVuZ3RoO1xuICAgICAgY2FzZSAyOlxuICAgICAgICBpZiAobGVuZ3RoIDwgMCkge1xuICAgICAgICAgIHZhciBlbGVtZW50cyA9IFtdO1xuICAgICAgICAgIHZhciBmdWxsQXJyYXlMZW5ndGggPSAwO1xuICAgICAgICAgIHdoaWxlICgobGVuZ3RoID0gcmVhZEluZGVmaW5pdGVTdHJpbmdMZW5ndGgobWFqb3JUeXBlKSkgPj0gMCkge1xuICAgICAgICAgICAgZnVsbEFycmF5TGVuZ3RoICs9IGxlbmd0aDtcbiAgICAgICAgICAgIGVsZW1lbnRzLnB1c2gocmVhZEFycmF5QnVmZmVyKGxlbmd0aCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgZnVsbEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoZnVsbEFycmF5TGVuZ3RoKTtcbiAgICAgICAgICB2YXIgZnVsbEFycmF5T2Zmc2V0ID0gMDtcbiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGZ1bGxBcnJheS5zZXQoZWxlbWVudHNbaV0sIGZ1bGxBcnJheU9mZnNldCk7XG4gICAgICAgICAgICBmdWxsQXJyYXlPZmZzZXQgKz0gZWxlbWVudHNbaV0ubGVuZ3RoO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gZnVsbEFycmF5O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZWFkQXJyYXlCdWZmZXIobGVuZ3RoKTtcbiAgICAgIGNhc2UgMzpcbiAgICAgICAgdmFyIHV0ZjE2ZGF0YSA9IFtdO1xuICAgICAgICBpZiAobGVuZ3RoIDwgMCkge1xuICAgICAgICAgIHdoaWxlICgobGVuZ3RoID0gcmVhZEluZGVmaW5pdGVTdHJpbmdMZW5ndGgobWFqb3JUeXBlKSkgPj0gMClcbiAgICAgICAgICAgIGFwcGVuZFV0ZjE2RGF0YSh1dGYxNmRhdGEsIGxlbmd0aCk7XG4gICAgICAgIH0gZWxzZVxuICAgICAgICAgIGFwcGVuZFV0ZjE2RGF0YSh1dGYxNmRhdGEsIGxlbmd0aCk7XG4gICAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIHV0ZjE2ZGF0YSk7XG4gICAgICBjYXNlIDQ6XG4gICAgICAgIHZhciByZXRBcnJheTtcbiAgICAgICAgaWYgKGxlbmd0aCA8IDApIHtcbiAgICAgICAgICByZXRBcnJheSA9IFtdO1xuICAgICAgICAgIHdoaWxlICghcmVhZEJyZWFrKCkpXG4gICAgICAgICAgICByZXRBcnJheS5wdXNoKGRlY29kZUl0ZW0oKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0QXJyYXkgPSBuZXcgQXJyYXkobGVuZ3RoKTtcbiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpXG4gICAgICAgICAgICByZXRBcnJheVtpXSA9IGRlY29kZUl0ZW0oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmV0QXJyYXk7XG4gICAgICBjYXNlIDU6XG4gICAgICAgIHZhciByZXRPYmplY3QgPSB7fTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aCB8fCBsZW5ndGggPCAwICYmICFyZWFkQnJlYWsoKTsgKytpKSB7XG4gICAgICAgICAgdmFyIGtleSA9IGRlY29kZUl0ZW0oKTtcbiAgICAgICAgICByZXRPYmplY3Rba2V5XSA9IGRlY29kZUl0ZW0oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmV0T2JqZWN0O1xuICAgICAgY2FzZSA2OlxuICAgICAgICByZXR1cm4gdGFnZ2VyKGRlY29kZUl0ZW0oKSwgbGVuZ3RoKTtcbiAgICAgIGNhc2UgNzpcbiAgICAgICAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICAgICAgICBjYXNlIDIwOlxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIGNhc2UgMjE6XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICBjYXNlIDIyOlxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgY2FzZSAyMzpcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBzaW1wbGVWYWx1ZShsZW5ndGgpO1xuICAgICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIHJldCA9IGRlY29kZUl0ZW0oKTtcbiAgaWYgKG9mZnNldCAhPT0gZGF0YS5ieXRlTGVuZ3RoKVxuICAgIHRocm93IFwiUmVtYWluaW5nIGJ5dGVzXCI7XG4gIHJldHVybiByZXQ7XG59XG5cbmV4cG9ydCBjb25zdCBDQk9SID0geyBlbmNvZGU6IGVuY29kZSwgZGVjb2RlOiBkZWNvZGUgfTtcblxuIiwiaW1wb3J0IHsgQ0JPUiB9IGZyb20gJy4vY2Jvci5qcyc7XG5pbXBvcnQgZmV0Y2ggZnJvbSAnbm9kZS1mZXRjaCc7XG5jb25zdCBBUElfU0VSVkVSX0hPU1QgPSBcImh0dHBzOi8vdHN1LmdnOjMwMDBcIlxuY29uc3QgQkxBQ0tMSVNUID0gW1xuICA0NjI2NTg5OTQsIC8v7Y+s7Lm47KeA7Jqw7Yuw67mEXG4gIDQ4NDU4NDA0MywgLy/tj63siqTtmYDsp51cbiAgNDc0Nzg1OTA0LCAvL+2PreyKpOyhseuztOuLqOq5jOyWj+uwnOumrFxuICA0NjYwODMyNTIsIC8v67Cc66as7Y+t7Iqk7JuQ7Yis7KGx67O0XG4gIDQ2ODk5ODYzMiwgLy/rsJzrpqztj63siqTtmYDsp53sobHrs7RcbiAgNDY4OTk4NjMyLCAvL+uwnOumrO2PreyKpOuyhOqyveyhseuztFxuICA0NjM1NDIxMDgsIC8v7Y+s7Lm47Yis6rKs7KGx67O0XG4gIDQ4MDE1OTg5OCwgLy/tj6zsubjrp4jsubTsmKRcbiAgNDYzMDE2NDg2LCAvL+2PrOy5uOq4iOydgOuPmeydtFxuICA0ODA1NjY4NzYsIC8v7Y+s7Lm466eI7Lm07Jik7KGx67O0XG4gIDQ2MjY1ODk5NCwgLy/tj6zsubjsp4DsmrDti7DruYRcbl07XG5hc3luYyBmdW5jdGlvbiBfZmV0Y2gocGF0aCwgcGFyYW1zKSB7XG4gIGxldCByZXM7XG4gIGlmKHRoaXMgIT0gbnVsbCAmJiB0aGlzLmZldGNoICE9IG51bGwpIFxuICAgIHJlcyA9IGF3YWl0IHRoaXMuZmV0Y2gocGF0aCwgcGFyYW1zKTtcbiAgLyplbHNlIGlmKHdpbmRvdyAhPSB1bmRlZmluZWQgJiYgd2luZG93LmZldGNoICE9IG51bGwpXG4gICAgcmV0dXJuIGF3YWl0IHdpbmRvdy5mZXRjaChwYXRoKTsqL1xuICBlbHNlXG4gICAgcmVzID0gYXdhaXQgZmV0Y2gocGF0aCwgcGFyYW1zKTtcbiAgaWYocmVzLnN0YXR1cyAhPSAyMDApXG4gICAgdGhyb3cgcmVzLnN0YXR1cztcbiAgZWxzZSByZXR1cm4gcmVzO1xufVxuYXN5bmMgZnVuY3Rpb24gZmV0Y2hfY2JvcihwYXRoKSB7XG4gIGxldCByZXMgPSBhd2FpdCBfZmV0Y2gocGF0aCk7XG4gIGxldCBib2R5ID0gYXdhaXQgcmVzLmFycmF5QnVmZmVyKCk7XG4gIHJldHVybiBDQk9SLmRlY29kZShib2R5KTtcbn1cbmV4cG9ydCBjb25zdCBBUEkgPSB7XG4gIHN0cmVhbWVyX21hcDogYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAoYXdhaXQgZmV0Y2hfY2JvcihBUElfU0VSVkVSX0hPU1QgKyBcIi9hcGkvc3RyZWFtZXItbWFwXCIpKS5maWx0ZXIocyA9PiAhQkxBQ0tMSVNULmluY2x1ZGVzKHMuaWQpKTtcbiAgfSxcbiAgc3RyZWFtZXI6IGFzeW5jIGZ1bmN0aW9uIChpZCkge1xuICAgIHJldHVybiBhd2FpdCBmZXRjaF9jYm9yKEFQSV9TRVJWRVJfSE9TVCArIGAvYXBpL3N0cmVhbWVyLyR7aWR9YCk7XG4gIH0sXG4gIHRoaW5fc3RyZWFtZXJzOiBhc3luYyBmdW5jdGlvbiAoc2VhcmNoX29yX2lkcykge1xuICAgIGlmKHR5cGVvZihzZWFyY2hfb3JfaWRzKSA9PSBcInN0cmluZ1wiKSBcbiAgICAgIHJldHVybiBhd2FpdCBmZXRjaF9jYm9yKEFQSV9TRVJWRVJfSE9TVCArIGAvYXBpL3RoaW4tc3RyZWFtZXJzP3NlYXJjaD0ke3NlYXJjaF9vcl9pZHN9YCk7XG4gICAgZWxzZXtcbiAgICAgIHNlYXJjaF9vcl9pZHMgPSBcImlkc1tdPVwiICsgc2VhcmNoX29yX2lkcy5qb2luKFwiJmlkc1tdPVwiKVxuICAgICAgcmV0dXJuIGF3YWl0IGZldGNoX2Nib3IoQVBJX1NFUlZFUl9IT1NUICsgYC9hcGkvdGhpbi1zdHJlYW1lcnM/JHtzZWFyY2hfb3JfaWRzfWApO1xuICAgIH1cbiAgfSxcbiAgdGltZWxpbmU6IGFzeW5jIGZ1bmN0aW9uIChpZCwgZnJvbSwgdG8pIHtcbiAgICByZXR1cm4gYXdhaXQgZmV0Y2hfY2JvcihBUElfU0VSVkVSX0hPU1QgKyBgL2FwaS9zdHJlYW1lci8ke2lkfS90aW1lbGluZT9mcm9tPSR7ZnJvbS50b0lTT1N0cmluZygpfSZ0bz0ke3RvLnRvSVNPU3RyaW5nKCl9YCk7XG4gIH0sXG4gIHNpbWlsYXJfc3RyZWFtZXJzOiBhc3luYyBmdW5jdGlvbiAoaWQsIG9mZnNldD0wKSB7XG4gICAgaWYoIUJMQUNLTElTVC5pbmNsdWRlcyhpZC0wKSlcbiAgICAgIHJldHVybiAoYXdhaXQgZmV0Y2hfY2JvcihBUElfU0VSVkVSX0hPU1QgKyBgL2FwaS9zdHJlYW1lci8ke2lkfS9zaW1pbGFyLXN0cmVhbWVycz9vZmZzZXQ9JHtvZmZzZXR9YCkpLmZpbHRlcihzID0+ICFCTEFDS0xJU1QuaW5jbHVkZXMocy5pZCkpO1xuICAgIGVsc2VcbiAgICAgIHJldHVybiAoYXdhaXQgZmV0Y2hfY2JvcihBUElfU0VSVkVSX0hPU1QgKyBgL2FwaS9zdHJlYW1lci8ke2lkfS9zaW1pbGFyLXN0cmVhbWVycz9vZmZzZXQ9JHtvZmZzZXR9YCkpLmZpbHRlcihzID0+IEJMQUNLTElTVC5pbmNsdWRlcyhzLmlkKSk7XG4gIH0sXG4gIHN0cmVhbV9yYW5nZXM6IGFzeW5jIGZ1bmN0aW9uIChpZCwgZnJvbSwgdG8pIHtcbiAgICByZXR1cm4gYXdhaXQgZmV0Y2hfY2JvcihBUElfU0VSVkVSX0hPU1QgKyBgL2FwaS9zdHJlYW1lci8ke2lkfS9zdHJlYW0tcmFuZ2VzP2Zyb209JHtmcm9tLnRvSVNPU3RyaW5nKCl9JnRvPSR7dG8udG9JU09TdHJpbmcoKX1gKTtcbiAgICAvKnJldHVybiBbXG4gICAgICAgIFtuZXcgRGF0ZSgpIC8gMTAwMCAtIDYwKjYwKjI5LCBuZXcgRGF0ZSgpLzEwMDAgLSA2MCo2MCoyNF0sXG4gICAgICAgIFtuZXcgRGF0ZSgpIC8gMTAwMCAtIDYwKjYwKjIzLCBuZXcgRGF0ZSgpLzEwMDAgLSA2MCo2MCoyMV0sXG4gICAgICAgIFtuZXcgRGF0ZSgpIC8gMTAwMCAtIDYwKjYwKjUsIG5ldyBEYXRlKCkvMTAwMCAtIDYwKjYwKjRdLFxuICAgICAgICBbbmV3IERhdGUoKSAvIDEwMDAgLSA2MCo2MCoyLCBuZXcgRGF0ZSgpLzEwMDAgLSA2MCo2MF0sXG4gICAgICBdOyovXG4gIH0sXG4gIGNvbW1lbnRzOiBhc3luYyBmdW5jdGlvbihpZCwgb2Zmc2V0PTApIHtcbiAgICByZXR1cm4gYXdhaXQgZmV0Y2hfY2JvcihBUElfU0VSVkVSX0hPU1QgKyBgL2FwaS9zdHJlYW1lci8ke2lkfS9jb21tZW50cz9vZmZzZXQ9JHtvZmZzZXR9YCk7XG4gIH0sXG4gIHdyaXRlX2NvbW1lbnQ6IGFzeW5jIGZ1bmN0aW9uKGlkLCBuaWNrbmFtZSwgcGFzc3dvcmQsIGNvbnRlbnRzLCBwYXJlbnRfaWQ9bnVsbCkge1xuICAgIHJldHVybiBhd2FpdCBfZmV0Y2goQVBJX1NFUlZFUl9IT1NUICsgYC9hcGkvc3RyZWFtZXIvJHtpZH0vY29tbWVudHNgLCB7XG4gICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgfSxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgbmlja25hbWU6IG5pY2tuYW1lLCBcbiAgICAgICAgcGFzc3dvcmQ6IHBhc3N3b3JkLFxuICAgICAgICBjb250ZW50czogY29udGVudHMsXG4gICAgICAgIHBhcmVudF9pZDogcGFyZW50X2lkLFxuICAgICAgfSksXG4gICAgfSlcbiAgfSxcbiAgdm90ZV9jb21tZW50OiBhc3luYyBmdW5jdGlvbihpZCwgY29tbWVudF9pZCwgdXB2b3RlKSB7XG4gICAgcmV0dXJuIGF3YWl0IF9mZXRjaChBUElfU0VSVkVSX0hPU1QgKyBgL2FwaS9zdHJlYW1lci8ke2lkfS9jb21tZW50c2AsIHtcbiAgICAgIG1ldGhvZDogXCJQQVRDSFwiLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgfSxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgdXB2b3RlOiB1cHZvdGUsXG4gICAgICAgIGlkOiBjb21tZW50X2lkLFxuICAgICAgfSksXG4gICAgfSk7XG4gIH0sXG4gIGZpbmdlcnByaW50X2hhc2g6IGFzeW5jIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBhd2FpdCBmZXRjaF9jYm9yKEFQSV9TRVJWRVJfSE9TVCArICcvYXBpL21lL2ZpbmdlcnByaW50LWhhc2gnKTtcbiAgfSxcbiAga2V5d29yZHM6IGFzeW5jIGZ1bmN0aW9uKGlkKSB7XG4gICAgcmV0dXJuIGF3YWl0IGZldGNoX2Nib3IoQVBJX1NFUlZFUl9IT1NUICsgYC9hcGkvc3RyZWFtZXIvJHtpZH0vY2hhdHRpbmcva2V5d29yZHNgKTtcbiAgfSxcbiAgYXZlcmFnZV9zdWJzY3JpYmVyX2Rpc3RyaWJ1dGlvbjogYXN5bmMgZnVuY3Rpb24oaWQpIHtcbiAgICByZXR1cm4gYXdhaXQgZmV0Y2hfY2JvcihBUElfU0VSVkVSX0hPU1QgKyBgL2FwaS9zdHJlYW1lci8ke2lkfS9zdWJzY3JpYmVyL2F2ZXJhZ2UtZGlzdHJpYnV0aW9uYCk7XG4gIH0sXG4gIHJlYWx0aW1lX2NoYXR0aW5nX3NwZWVkX3N0cmVhbWVyX3Jhbmtpbmc6IGFzeW5jIGZ1bmN0aW9uKG9mZnNldD0wKSB7XG4gICAgcmV0dXJuIGF3YWl0IGZldGNoX2Nib3IoQVBJX1NFUlZFUl9IT1NUICsgYC9hcGkvc3RyZWFtZXItcmFua2luZy9yZWFsdGltZS1jaGF0dGluZy1zcGVlZD9vZmZzZXQ9JHtvZmZzZXR9YCk7XG4gIH0sXG4gIGF2ZXJhZ2Vfdmlld2VyX2NvdW50X3N0cmVhbWVyX3Jhbmtpbmc6IGFzeW5jIGZ1bmN0aW9uKG9mZnNldD0wKSB7XG4gICAgcmV0dXJuIGF3YWl0IGZldGNoX2Nib3IoQVBJX1NFUlZFUl9IT1NUICsgYC9hcGkvc3RyZWFtZXItcmFua2luZy9hdmVyYWdlLXZpZXdlci1jb3VudD9vZmZzZXQ9JHtvZmZzZXR9YCk7XG4gIH0sXG4gIHN0cmVhbWVyX3Jhbmtpbmc6IGFzeW5jIGZ1bmN0aW9uKG9mZnNldD0wLCBvcmRlcl9ieT1cImNoYXR0aW5nX3NwZWVkXCIsIGRlc2M9dHJ1ZSkge1xuICAgIHJldHVybiAoYXdhaXQgZmV0Y2hfY2JvcihBUElfU0VSVkVSX0hPU1QgKyBgL2FwaS9zdHJlYW1lci1yYW5raW5nP29mZnNldD0ke29mZnNldH0mb3JkZXJfYnk9JHtvcmRlcl9ieX0mZGVzYz0ke2Rlc2N9YCkpLmZpbHRlcihzID0+ICFCTEFDS0xJU1QuaW5jbHVkZXMocy5pZCkpO1xuICB9LFxuICB2aWV3ZXJfbWlncmF0aW9uX2NvdW50czogYXN5bmMgZnVuY3Rpb24oaWQxLCBpZDIsIGZyb20sIHRvKSB7XG4gICAgcmV0dXJuIGF3YWl0IGZldGNoX2Nib3IoQVBJX1NFUlZFUl9IT1NUICsgYC9hcGkvdmlld2VyLW1pZ3JhdGlvbnM/aWQxPSR7aWQxfSZpZDI9JHtpZDJ9JmZyb209JHtmcm9tLnRvSVNPU3RyaW5nKCl9JnRvPSR7dG8udG9JU09TdHJpbmcoKX1gKTtcbiAgfSxcbiAgdmlld2VyX21pZ3JhdGlvbl9jb3VudF9yYW5raW5nOiBhc3luYyBmdW5jdGlvbihvZmZzZXQpIHtcbiAgICByZXR1cm4gYXdhaXQgZmV0Y2hfY2JvcihBUElfU0VSVkVSX0hPU1QgKyBgL2FwaS92aWV3ZXItbWlncmF0aW9uLXJhbmtpbmc/b2Zmc2V0PSR7b2Zmc2V0fWApO1xuICB9LFxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBwcmVmaXggPSAnZmFzJztcbnZhciBpY29uTmFtZSA9ICdxdWVzdGlvbic7XG52YXIgd2lkdGggPSAzODQ7XG52YXIgaGVpZ2h0ID0gNTEyO1xudmFyIGxpZ2F0dXJlcyA9IFtdO1xudmFyIHVuaWNvZGUgPSAnZjEyOCc7XG52YXIgc3ZnUGF0aERhdGEgPSAnTTIwMi4wMjEgMEMxMjIuMjAyIDAgNzAuNTAzIDMyLjcwMyAyOS45MTQgOTEuMDI2Yy03LjM2MyAxMC41OC01LjA5MyAyNS4wODYgNS4xNzggMzIuODc0bDQzLjEzOCAzMi43MDljMTAuMzczIDcuODY1IDI1LjEzMiA2LjAyNiAzMy4yNTMtNC4xNDggMjUuMDQ5LTMxLjM4MSA0My42My00OS40NDkgODIuNzU3LTQ5LjQ0OSAzMC43NjQgMCA2OC44MTYgMTkuNzk5IDY4LjgxNiA0OS42MzEgMCAyMi41NTItMTguNjE3IDM0LjEzNC00OC45OTMgNTEuMTY0LTM1LjQyMyAxOS44Ni04Mi4yOTkgNDQuNTc2LTgyLjI5OSAxMDYuNDA1VjMyMGMwIDEzLjI1NSAxMC43NDUgMjQgMjQgMjRoNzIuNDcxYzEzLjI1NSAwIDI0LTEwLjc0NSAyNC0yNHYtNS43NzNjMC00Mi44NiAxMjUuMjY4LTQ0LjY0NSAxMjUuMjY4LTE2MC42MjdDMzc3LjUwNCA2Ni4yNTYgMjg2LjkwMiAwIDIwMi4wMjEgMHpNMTkyIDM3My40NTljLTM4LjE5NiAwLTY5LjI3MSAzMS4wNzUtNjkuMjcxIDY5LjI3MSAwIDM4LjE5NSAzMS4wNzUgNjkuMjcgNjkuMjcxIDY5LjI3czY5LjI3MS0zMS4wNzUgNjkuMjcxLTY5LjI3MS0zMS4wNzUtNjkuMjctNjkuMjcxLTY5LjI3eic7XG5cbmV4cG9ydHMuZGVmaW5pdGlvbiA9IHtcbiAgcHJlZml4OiBwcmVmaXgsXG4gIGljb25OYW1lOiBpY29uTmFtZSxcbiAgaWNvbjogW1xuICAgIHdpZHRoLFxuICAgIGhlaWdodCxcbiAgICBsaWdhdHVyZXMsXG4gICAgdW5pY29kZSxcbiAgICBzdmdQYXRoRGF0YVxuICBdfTtcblxuZXhwb3J0cy5mYVF1ZXN0aW9uID0gZXhwb3J0cy5kZWZpbml0aW9uO1xuZXhwb3J0cy5wcmVmaXggPSBwcmVmaXg7XG5leHBvcnRzLmljb25OYW1lID0gaWNvbk5hbWU7XG5leHBvcnRzLndpZHRoID0gd2lkdGg7XG5leHBvcnRzLmhlaWdodCA9IGhlaWdodDtcbmV4cG9ydHMubGlnYXR1cmVzID0gbGlnYXR1cmVzO1xuZXhwb3J0cy51bmljb2RlID0gdW5pY29kZTtcbmV4cG9ydHMuc3ZnUGF0aERhdGEgPSBzdmdQYXRoRGF0YTsiLCI8ZGl2IGNsYXNzPVwicmVsYXRpdmUgaW5saW5lLWJsb2NrIGFsaWduLXRvcFwiIG9uOm1vdXNlb3Zlcj17bW91c2VvdmVyfSBvbjptb3VzZW91dD17bW91c2VvdXR9IG9uOmNsaWNrPXtjbGlja30gb246dG91Y2hzdGFydD17Y2xpY2t9IGNsYXNzOmN1cnNvci1wb2ludGVyPXtjbGlja30+XG4gIDxkaXYgY2xhc3M9XCJhYnNvbHV0ZSBtbC02IHRvb2x0aXAtYXJyb3cgYmctYmxhY2sgdGV4dC13aGl0ZSB0ZXh0LXhzIG9wYWNpdHktNzUgcC0yXCIgY2xhc3M6aGlkZGVuPXshbW91c2Vfb3ZlcmVkfSBjbGFzczpyaWdodD17cG9zaXRpb249PVwicmlnaHRcIn0gY2xhc3M6Ym90dG9tPXtwb3NpdGlvbj09XCJib3R0b21cIn0+XG4gICAgPHNsb3QgbmFtZT1cInRpcFwiPjwvc2xvdD5cbiAgPC9kaXY+XG4gIDxzbG90IG5hbWU9XCJjb250ZW50c1wiPlxuICAgIDxzdmcgYXJlYS1oaWRkZW49XCJ0cnVlXCIgcm9sZT1cImltZ1wiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIHtmYVF1ZXN0aW9uLmljb25bMF19IHtmYVF1ZXN0aW9uLmljb25bMV19XCIgY2xhc3M9XCJ3LTQgaC00IC1tdC0xIG92ZXJmbG93LXZpc2libGUgaW5saW5lLWJsb2NrXCI+XG4gICAgICA8cGF0aCBmaWxsPVwiY3VycmVudENvbG9yXCIgZD1cIntmYVF1ZXN0aW9uLmljb25bNF19XCIvPlxuICAgIDwvc3ZnPlxuICA8L3Nsb3Q+XG48L2Rpdj5cblxuPHN0eWxlPlxuLnJpZ2h0LnRvb2x0aXAtYXJyb3cge1xuICBib3gtc2hhZG93OiAwIDNweCA2cHggcmdiYSgwLCAwLCAwLCAwLjEpO1xuICB6LWluZGV4OiA1MDA7XG4gIHdpZHRoOiBtYXgtY29udGVudDtcbn1cbi5yaWdodC50b29sdGlwLWFycm93OjpiZWZvcmUge1xuICBjb250ZW50OiBcIlwiO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogMC40cmVtO1xuICByaWdodDogMTAwJTtcbiAgYm9yZGVyLXdpZHRoOiA2cHg7XG4gIGJvcmRlci1zdHlsZTogc29saWQ7XG4gIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQgIzAwMCB0cmFuc3BhcmVudCB0cmFuc3BhcmVudDtcbn1cbi5yaWdodC50b29sdGlwLWFycm93OjphZnRlciB7XG4gIGNvbnRlbnQ6IFwiXCI7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiBjYWxjKDAuNHJlbSArIDFweCk7XG4gIHJpZ2h0OiBjYWxjKDEwMCUgLSAxcHgpOyBcbiAgYm9yZGVyLXdpZHRoOiA1cHg7XG4gIGJvcmRlci1zdHlsZTogc29saWQ7XG4gIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQgIzAwMCB0cmFuc3BhcmVudCB0cmFuc3BhcmVudDtcbn1cblxuLmJvdHRvbS50b29sdGlwLWFycm93IHtcbiAgYm94LXNoYWRvdzogMCAzcHggNnB4IHJnYmEoMCwgMCwgMCwgMC4xKTtcbiAgei1pbmRleDogNTAwO1xuICB0b3A6IDE1MCU7XG4gIHJpZ2h0OiA1MCU7XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKDUwJSwgMCk7XG4gIHdpZHRoOiBtYXgtY29udGVudDtcbn1cbi5ib3R0b20udG9vbHRpcC1hcnJvdzo6YWZ0ZXIge1xuICBjb250ZW50OiBcIlwiO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIGJvdHRvbTogMTAwJTsgIFxuICBsZWZ0OiA1MCU7XG4gIG1hcmdpbi1sZWZ0OiAtNXB4O1xuICBib3JkZXItd2lkdGg6IDVweDtcbiAgYm9yZGVyLXN0eWxlOiBzb2xpZDtcbiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudCB0cmFuc3BhcmVudCAjMDAwIHRyYW5zcGFyZW50O1xufVxuPC9zdHlsZT5cblxuPHNjcmlwdD5cbmltcG9ydCB7IGZhUXVlc3Rpb24gYXMgZmFRdWVzdGlvbiB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYVF1ZXN0aW9uJ1xubGV0IG1vdXNlX292ZXJlZCA9IGZhbHNlO1xuZXhwb3J0IGxldCBwb3NpdGlvbiA9IFwicmlnaHRcIjtcbmZ1bmN0aW9uIG1vdXNlb3Zlcigpe1xuICBtb3VzZV9vdmVyZWQgPSB0cnVlO1xufVxuZnVuY3Rpb24gbW91c2VvdXQoKXtcbiAgbW91c2Vfb3ZlcmVkID0gZmFsc2U7XG59XG5leHBvcnQgbGV0IGNsaWNrID0gbnVsbDtcbjwvc2NyaXB0PlxuIiwiPGRpdiBjbGFzcz1cInskJHByb3BzLmNsYXNzfSBtZDpwLTIgbXQtMiBtYi0yIG1kOm1iLTAgYm9yZGVyIHJvdW5kZWQtbGcgYm9yZGVyLWdyYXktNjAwIG1kOmJvcmRlci1ub25lIG1kOnJvdW5kZWQtbm9uZVwiPlxuPGRpdiBjbGFzcz1cInBhbmVsIG1kOmJnLXdoaXRlIG1kOmJvcmRlciBtZDpzaGFkb3cgdy1mdWxsXCIgXG4gIGNsYXNzOmxlZnQ9XCJ7bGVmdH1cIlxuICBjbGFzczpyaWdodD1cIntyaWdodH1cIlxuICA+XG4gIDxkaXYgY2xhc3M9XCJ0aXRsZS1jb250YWluZXIgZm9udC1ib2xkIG1kOm0tNCBtLTIgdGV4dC1sZ1wiIGNsYXNzOnNob3c9XCJ7dGl0bGVfc2hvdyB8fCBzdGF0aWNfdGl0bGV9XCIgb246bW91c2VvdmVyPXtvbm1vdXNlb3Zlcn0gb246bW91c2VsZWF2ZT17b25tb3VzZWxlYXZlfT5cbiAgICA8c2xvdCBuYW1lPVwidGl0bGVcIiA+XG4gICAgPC9zbG90PlxuICAgIHsjaWYgdGlwfVxuICAgICAgPFRpcD5cbiAgICAgICAgPHNsb3QgbmFtZT1cInRpcFwiPlxuICAgICAgICA8L3Nsb3Q+XG4gICAgICA8L1RpcD5cbiAgICB7L2lmfVxuICA8L2Rpdj5cbiAgPGRpdiBjbGFzcz1cIm92ZXJmbG93LWhpZGRlbiB3LWZ1bGwgaC1mdWxsIHJlbGF0aXZlIGNvbnRlbnRzXCJcbiAgICAgb246bW91c2VvdmVyPXtvbm1vdXNlb3Zlcn0gb246bW91c2VsZWF2ZT17b25tb3VzZWxlYXZlfT5cbiAgICA8c2xvdCBuYW1lPVwiY29udGVudHNcIj5cbiAgICA8L3Nsb3Q+XG4gIDwvZGl2PlxuPC9kaXY+XG48L2Rpdj5cblxuPHNjcmlwdD5cbmltcG9ydCBUaXAgZnJvbSAnLi9UaXAuc3ZlbHRlJztcblxuZXhwb3J0IGxldCB0aXAgPSBmYWxzZTtcbmV4cG9ydCBsZXQgc3RhdGljX3RpdGxlID1mYWxzZTtcbmV4cG9ydCBsZXQgbGVmdCA9ZmFsc2U7XG5leHBvcnQgbGV0IHJpZ2h0ID1mYWxzZTtcblxubGV0IHRpdGxlX3Nob3cgPSBmYWxzZTtcbmxldCB0aW1lciA9IG51bGw7XG5mdW5jdGlvbiBvbm1vdXNlb3ZlcihlKSB7XG4gIHRpdGxlX3Nob3cgPSB0cnVlO1xuICAvKiAgY29uc29sZS5sb2codGl0bGVfc2hvdyk7XG4gIGlmKHRpbWVyKSB7XG4gICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICB0aW1lciA9IG51bGw7XG4gIH1cbiAgdGltZXIgPSBzZXRUaW1lb3V0KCgpPT57XG4gICAgY29uc29sZS5sb2codGl0bGVfc2hvdyk7XG4gICAgdGl0bGVfc2hvdyA9IGZhbHNlO1xuICB9LCAxMDAwKTsqL1xufVxuXG5mdW5jdGlvbiBvbm1vdXNlbGVhdmUoZSkge1xuICB0aXRsZV9zaG93ID0gZmFsc2U7XG59XG48L3NjcmlwdD5cblxuXG48c3R5bGU+XG4vKi50aXRsZS1jb250YWluZXIge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHBhZGRpbmc6IDAuNXJlbTtcbn0qL1xuLyoudGl0bGUtY29udGFpbmVyLnNob3cge1xuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgwLCAtMTAwJSk7XG4gIHotaW5kZXg6IDM7XG59Ki9cbi8qLnBhbmVsIHtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGhlaWdodDogZml0LWNvbnRlbnQ7XG59Ki9cblxuXG5AbWVkaWEgKG1pbi13aWR0aDogNzY4cHgpIHsgXG4gIC5wYW5lbCB7XG4gIH1cbiAgLmNvbnRlbnRzIHtcbiAgfVxufVxuXG4uY29udGVudHMge1xuICB6LWluZGV4OiAyO1xuICBib3JkZXItcmFkaXVzOiAycHg7XG59XG4ubGVmdCB7XG4gIG1hcmdpbi1sZWZ0OiAwO1xufVxuLnJpZ2h0IHtcbiAgbWFyZ2luLXJpZ2h0OiAwO1xufVxuPC9zdHlsZT5cbiIsImZ1bmN0aW9uIHJhbmRvbV9oc2xfY29sb3IobWluLCBtYXgsIHNlZWQpIHtcbiAgbGV0IHJhbmRvbTtcbiAgaWYodHlwZW9mKHNlZWQpID09IFwic3RyaW5nXCIpXG4gICAgcmFuZG9tID0gbXVsYmVycnkzMihoYXNoKHNlZWQpKTtcbiAgZWxzZVxuICAgIHJhbmRvbSA9IG11bGJlcnJ5MzIoc2VlZCk7XG4gIHJldHVybiAnaHNsKCcgK1xuICAgIChyYW5kb20oKSAqIDM2MCkudG9GaXhlZCgpICsgJywnICtcbiAgICAocmFuZG9tKCkgKiAzMCArIDcwKS50b0ZpeGVkKCkgKyAnJSwnICtcbiAgICAocmFuZG9tKCkgKiAobWF4IC0gbWluKSArIG1pbikudG9GaXhlZCgpICsgJyUpJztcbn1cbmZ1bmN0aW9uIG11bGJlcnJ5MzIoYSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHQgPSBhICs9IDB4NkQyQjc5RjU7XG4gICAgdCA9IE1hdGguaW11bCh0IF4gdCA+Pj4gMTUsIHQgfCAxKTtcbiAgICB0IF49IHQgKyBNYXRoLmltdWwodCBeIHQgPj4+IDcsIHQgfCA2MSk7XG4gICAgcmV0dXJuICgodCBeIHQgPj4+IDE0KSA+Pj4gMCkgLyA0Mjk0OTY3Mjk2O1xuICB9XG59XG5mdW5jdGlvbiBoYXNoKHNlZWQpIHtcbiAgbGV0IGhhc2ggPSAwLCBpLCBjaHI7XG4gIGlmIChzZWVkLmxlbmd0aCA9PT0gMCkgcmV0dXJuIGhhc2g7XG4gIGZvciAoaSA9IDA7IGkgPCBzZWVkLmxlbmd0aDsgaSsrKSB7XG4gICAgY2hyICAgPSBzZWVkLmNoYXJDb2RlQXQoaSk7XG4gICAgaGFzaCAgPSAoKGhhc2ggPDwgNSkgLSBoYXNoKSArIGNocjtcbiAgICBoYXNoIHw9IDA7IFxuICB9XG4gIHJldHVybiBoYXNoO1xufTtcbmV4cG9ydCBjb25zdCBkYXJrX3JhbmRvbV9jb2xvciA9IChzZWVkKSA9PiB7XG4gIHJldHVybiByYW5kb21faHNsX2NvbG9yKDEwLCA1MCwgc2VlZCk7XG59XG5cblxuXG5jb25zdCBsb2NhbGVzID0ge1xuICBwcmVmaXg6ICcnLFxuICBzdWZpeDogICcnLFxuICBcbiAgc2Vjb25kczogJ+uqh+y0iOyghCcsXG4gIG1pbnV0ZTogICcx67aE7KCEJyxcbiAgbWludXRlczogJyVk67aE7KCEJyxcbiAgaG91cjogICAgJ+2VnOyLnOqwhOyghCcsXG4gIGhvdXJzOiAgICclZOyLnOqwhOyghCcsXG4gIGRheTogICAgICftlZjro6jsoIQnLFxuICBkYXlzOiAgICAnJWTsnbzsoIQnLFxuICBtb250aDogICAn7ZWc64us7KCEJyxcbiAgbW9udGhzOiAgJyVk64us7KCEJyxcbiAgeWVhcjogICAgJ+ydvOuFhOyghCcsXG4gIHllYXJzOiAgICclZOuFhOyghCdcbn07XG5cbmV4cG9ydCBjb25zdCB0aW1lX2FnbyA9IGZ1bmN0aW9uKHRpbWUpIHtcbiAgdmFyIHNlY29uZHMgPSBNYXRoLmZsb29yKChuZXcgRGF0ZSgpIC0gdGltZSkgLyAxMDAwKSxcbiAgICAgIHNlcGFyYXRvciA9IGxvY2FsZXMuc2VwYXJhdG9yIHx8ICcgJyxcbiAgICAgIHdvcmRzID0gbG9jYWxlcy5wcmVmaXggKyBzZXBhcmF0b3IsXG4gICAgICBpbnRlcnZhbCA9IDAsXG4gICAgICBpbnRlcnZhbHMgPSB7XG4gICAgICAgIHllYXI6ICAgc2Vjb25kcyAvIDMxNTM2MDAwLFxuICAgICAgICBtb250aDogIHNlY29uZHMgLyAyNTkyMDAwLFxuICAgICAgICBkYXk6ICAgIHNlY29uZHMgLyA4NjQwMCxcbiAgICAgICAgaG91cjogICBzZWNvbmRzIC8gMzYwMCxcbiAgICAgICAgbWludXRlOiBzZWNvbmRzIC8gNjBcbiAgICAgIH07XG4gIFxuICB2YXIgZGlzdGFuY2UgPSBsb2NhbGVzLnNlY29uZHM7XG4gIFxuICBmb3IgKHZhciBrZXkgaW4gaW50ZXJ2YWxzKSB7XG4gICAgaW50ZXJ2YWwgPSBNYXRoLmZsb29yKGludGVydmFsc1trZXldKTtcbiAgICBcbiAgICBpZiAoaW50ZXJ2YWwgPiAxKSB7XG4gICAgICBkaXN0YW5jZSA9IGxvY2FsZXNba2V5ICsgJ3MnXTtcbiAgICAgIGJyZWFrO1xuICAgIH0gZWxzZSBpZiAoaW50ZXJ2YWwgPT09IDEpIHtcbiAgICAgIGRpc3RhbmNlID0gbG9jYWxlc1trZXldO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIFxuICBkaXN0YW5jZSA9IGRpc3RhbmNlLnJlcGxhY2UoLyVkL2ksIGludGVydmFsKTtcbiAgd29yZHMgKz0gZGlzdGFuY2UgKyBzZXBhcmF0b3IgKyBsb2NhbGVzLnN1Zml4O1xuICByZXR1cm4gd29yZHMudHJpbSgpO1xufTtcblxuZXhwb3J0IGNvbnN0IGZpbmRMYXN0SW5kZXggPSBmdW5jdGlvbihhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgbGV0IGwgPSBhcnJheS5sZW5ndGg7XG4gICAgd2hpbGUgKGwtLSkge1xuICAgICAgICBpZiAocHJlZGljYXRlKGFycmF5W2xdLCBsLCBhcnJheSkpXG4gICAgICAgICAgICByZXR1cm4gbDtcbiAgICB9XG4gICAgcmV0dXJuIC0xO1xufVxuIiwiPHVsIGNsYXNzPVwieyQkcHJvcHMuY2xhc3N9IGZvbnQtYm9sZCByb3VuZGVkLWxnXCI+XG4gIHsjaWYgc3RyZWFtZXIuYnJvYWRjYXN0ZXJfdHlwZSA9PSBcInBhcnRuZXJcIn1cbiAgICA8bGkgY2xhc3M9XCJweS1weCBtYi0xIG1yLTEgaW5saW5lLWJsb2NrXCI+XG4gICAgICA8VGlwIHBvc2l0aW9uPVwiYm90dG9tXCI+XG4gICAgICAgIDxkaXYgc2xvdD1cImNvbnRlbnRzXCI+XG4gICAgICAgICAgPGltZyBzcmM9XCIvdHdpdGNoX2dsaXRjaC5wbmdcIiBhbHQ9XCJwYXJ0bmVyXCIgY2xhc3M9XCJ3LTMgaC0zIGlubGluZVwiLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxzcGFuIHNsb3Q9XCJ0aXBcIj5cbiAgICAgICAgICDtirjsnITsuZgg7YyM7Yq464SIIOyKpO2KuOumrOuouFxuICAgICAgICA8L3NwYW4+XG4gICAgICA8L1RpcD5cbiAgICA8L2xpPlxuICB7L2lmfVxuICB7I2lmIHN0cmVhbWVyLmJyb2FkY2FzdGVyX3R5cGUgPT0gXCJhZmZpbGlhdGVcIn1cbiAgICA8bGkgY2xhc3M9XCJweS1weCBtYi0xIG1yLTEgaW5saW5lLWJsb2NrXCI+XG4gICAgICA8VGlwIHBvc2l0aW9uPVwiYm90dG9tXCI+XG4gICAgICAgIDxkaXYgc2xvdD1cImNvbnRlbnRzXCI+XG4gICAgICAgICAgPGltZyBzcmM9XCIvdmVyaWZpZWRfaWNvbi5wbmdcIiBhbHQ9XCJhZmZpbGlhdGVcIiBjbGFzcz1cInctMyBoLTMgaW5saW5lXCIvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPHNwYW4gc2xvdD1cInRpcFwiPlxuICAgICAgICAgIO2KuOychOy5mCDsoJztnLQg7Iqk7Yq466as66i4XG4gICAgICAgIDwvc3Bhbj5cbiAgICAgIDwvVGlwPlxuICAgIDwvbGk+XG4gIHsvaWZ9XG4gIHsjaWYgMH1cbiAgeyNpZiBzdHJlYW1lci5zdHJlYW1pbmdfaG91cnNfcGVyX3dlZWsgPj0gNTZ9XG4gICAgPGxpIGNsYXNzPVwicHktcHggbWItMSBtci0xIGlubGluZS1ibG9ja1wiPlxuICAgICAgPFRpcCBwb3NpdGlvbj1cImJvdHRvbVwiPlxuICAgICAgICA8ZGl2IHNsb3Q9XCJjb250ZW50c1wiPlxuICAgICAgICAgIDxzdmcgYXJlYS1oaWRkZW49XCJ0cnVlXCIgcm9sZT1cImltZ1wiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIHtmYVJvYm90Lmljb25bMF19IHtmYVJvYm90Lmljb25bMV19XCIgY2xhc3M9XCJ3LTQgaC00IG92ZXJmbG93LXZpc2libGUgaW5saW5lLWJsb2NrXCI+XG4gICAgICAgICAgICA8cGF0aCBmaWxsPVwiY3VycmVudENvbG9yXCIgZD1cIntmYVJvYm90Lmljb25bNF19XCIvPlxuICAgICAgICAgIDwvc3ZnPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPHNwYW4gc2xvdD1cInRpcFwiPlxuICAgICAgICAgIOuhnOu0hyAtIOydtCDsiqTtirjrpqzrqLjripQg7ZWcIOyjvOyXkCA1NuyLnOqwhCDsnbTsg4Eg67Cp7Iah7ZWp64uI64ukLlxuICAgICAgICA8L3NwYW4+XG4gICAgICA8L1RpcD5cbiAgICA8L2xpPlxuICB7L2lmfVxuICB7I2lmIHN0cmVhbWVyLmF2ZXJhZ2Vfdmlld2VyX2NvdW50ID49IDEwMDAwfVxuICAgIDxsaSBjbGFzcz1cInB5LXB4IG1iLTEgbXItMSBpbmxpbmUtYmxvY2tcIj5cbiAgICAgIDxUaXAgcG9zaXRpb249XCJib3R0b21cIj5cbiAgICAgICAgPGRpdiBzbG90PVwiY29udGVudHNcIj5cbiAgICAgICAgICA8c3ZnIGFyZWEtaGlkZGVuPVwidHJ1ZVwiIHJvbGU9XCJpbWdcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCB7ZmFDaXR5Lmljb25bMF19IHtmYUNpdHkuaWNvblsxXX1cIiBjbGFzcz1cInctNCBoLTQgb3ZlcmZsb3ctdmlzaWJsZSBpbmxpbmUtYmxvY2tcIj5cbiAgICAgICAgICAgIDxwYXRoIGZpbGw9XCJjdXJyZW50Q29sb3JcIiBkPVwie2ZhQ2l0eS5pY29uWzRdfVwiLz5cbiAgICAgICAgICA8L3N2Zz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxzcGFuIHNsb3Q9XCJ0aXBcIj5cbiAgICAgICAgICDrj4Tsi5wgLSDsnbQg7Iqk7Yq466as66i47J2YIOuwqeyGoeydhCDtj4nqt6Ag66eM66qFIOydtOyDgSDsi5zssq3tlanri4jri6QuXG4gICAgICAgIDwvc3Bhbj5cbiAgICAgIDwvVGlwPlxuICAgIDwvbGk+XG4gIHs6ZWxzZSBpZiBzdHJlYW1lci5hdmVyYWdlX3ZpZXdlcl9jb3VudCA+PSAxMDAwfVxuICAgIDxsaSBjbGFzcz1cInB5LXB4IG1iLTEgbXItMSBpbmxpbmUtYmxvY2tcIj5cbiAgICAgIDxUaXAgcG9zaXRpb249XCJib3R0b21cIj5cbiAgICAgICAgPGRpdiBzbG90PVwiY29udGVudHNcIj5cbiAgICAgICAgICA8c3ZnIGFyZWEtaGlkZGVuPVwidHJ1ZVwiIHJvbGU9XCJpbWdcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCB7ZmFCdWlsZGluZy5pY29uWzBdfSB7ZmFCdWlsZGluZy5pY29uWzFdfVwiIGNsYXNzPVwidy00IGgtNCBvdmVyZmxvdy12aXNpYmxlIGlubGluZS1ibG9ja1wiPlxuICAgICAgICAgICAgPHBhdGggZmlsbD1cImN1cnJlbnRDb2xvclwiIGQ9XCJ7ZmFCdWlsZGluZy5pY29uWzRdfVwiLz5cbiAgICAgICAgICA8L3N2Zz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxzcGFuIHNsb3Q9XCJ0aXBcIj5cbiAgICAgICAgICDruYzrlKkgLSDsnbQg7Iqk7Yq466as66i47J2YIOuwqeyGoeydhCDtj4nqt6Ag7LKc66qFIOydtOyDgSDsi5zssq3tlanri4jri6QuXG4gICAgICAgIDwvc3Bhbj5cbiAgICAgIDwvVGlwPlxuICAgIDwvbGk+XG4gIHs6ZWxzZSBpZiBzdHJlYW1lci5hdmVyYWdlX3ZpZXdlcl9jb3VudCA+PSAxMDB9XG4gICAgPGxpIGNsYXNzPVwicHktcHggbWItMSBtci0xIGlubGluZS1ibG9ja1wiPlxuICAgICAgPFRpcCBwb3NpdGlvbj1cImJvdHRvbVwiPlxuICAgICAgICA8ZGl2IHNsb3Q9XCJjb250ZW50c1wiPlxuICAgICAgICAgIDxzdmcgYXJlYS1oaWRkZW49XCJ0cnVlXCIgcm9sZT1cImltZ1wiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIHtmYUhvbWUuaWNvblswXX0ge2ZhSG9tZS5pY29uWzFdfVwiIGNsYXNzPVwidy00IGgtNCBvdmVyZmxvdy12aXNpYmxlIGlubGluZS1ibG9ja1wiPlxuICAgICAgICAgICAgPHBhdGggZmlsbD1cImN1cnJlbnRDb2xvclwiIGQ9XCJ7ZmFIb21lLmljb25bNF19XCIvPlxuICAgICAgICAgIDwvc3ZnPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPHNwYW4gc2xvdD1cInRpcFwiPlxuICAgICAgICAgIOyjvO2DnSAtIOydtCDsiqTtirjrpqzrqLjsnZgg67Cp7Iah7J2EIO2Pieq3oCDrsLHrqoUg7J207IOBIOyLnOyyre2VqeuLiOuLpC5cbiAgICAgICAgPC9zcGFuPlxuICAgICAgPC9UaXA+XG4gICAgPC9saT5cbiAgey9pZn1cbiAgey9pZn1cbiAgeyNpZiBzdHJlYW1lci5pc19zdHJlYW1pbmd9XG4gICAgPCEtLTxsaSBjbGFzcz1cInB5LXB4IG1iLTEgbXItMSBmb250LWJvbGQgcm91bmRlZC1sZyB0cmFja2luZy10aWdodGVyIGlubGluZS1ibG9ja1wiIHN0eWxlPVwiY29sb3I6ICNGRjQ1NjA7XCI+T04gQUlSPC9saT4tLT5cbiAgey9pZn1cbiAgeyNlYWNoIGJhZGdlcyBhcyBiYWRnZX1cbiAgICB7I2lmICFiYWRnZVsyXX1cbiAgICAgIDxsaSBjbGFzcz1cIm1iLTEgbXItMSBpbmxpbmUtYmxvY2tcIj5cbiAgICAgICAgPFRpcCBwb3NpdGlvbj1cImJvdHRvbVwiPlxuICAgICAgICAgIDxkaXYgc2xvdD1cImNvbnRlbnRzXCIgY2xhc3M9XCJweC0xIHB5LXB4IGZvbnQtYm9sZCByb3VuZGVkLWxnXCIgc3R5bGU9XCJjb2xvcjoge2JhZGdlWzFdfTsgYm9yZGVyOiAycHggc29saWQge2JhZGdlWzFdfTtcIj5cbiAgICAgICAgICAgIHtiYWRnZVswXX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8c3BhbiBzbG90PVwidGlwXCI+XG4gICAgICAgICAgICB7YmFkZ2VbM119XG4gICAgICAgICAgPC9zcGFuPlxuICAgICAgICA8L1RpcD5cbiAgICAgIDwvbGk+XG4gICAgezplbHNlfVxuICAgICAgPGxpIGNsYXNzPVwibWItMSBtci0xIGlubGluZS1ibG9ja1wiPlxuICAgICAgICA8VGlwIHBvc2l0aW9uPVwiYm90dG9tXCI+XG4gICAgICAgICAgPGRpdiBzbG90PVwiY29udGVudHNcIiBjbGFzcz1cInB4LTEgcHktcHggZm9udC1ib2xkIHJvdW5kZWQtbGdcIiBzdHlsZT1cImNvbG9yOiB3aGl0ZTsgYmFja2dyb3VuZC1jb2xvcjoge2JhZGdlWzFdfTsgYm9yZGVyOiAycHggc29saWQge2JhZGdlWzFdfTtcIj5cbiAgICAgICAgICAgIHtiYWRnZVswXX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8c3BhbiBzbG90PVwidGlwXCI+XG4gICAgICAgICAgICB7YmFkZ2VbM119XG4gICAgICAgICAgPC9zcGFuPlxuICAgICAgICA8L1RpcD5cbiAgICAgIDwvbGk+XG4gICAgey9pZn1cbiAgey9lYWNofVxuPC91bD5cblxuPHNjcmlwdD5cbiAgaW1wb3J0IHsgZGFya19yYW5kb21fY29sb3IgfSBmcm9tIFwiLi4vdXRpbC5qc1wiO1xuICBpbXBvcnQgeyBmYVJvYm90IH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhUm9ib3QnO1xuICBpbXBvcnQgeyBmYUJ1aWxkaW5nIH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhQnVpbGRpbmcnO1xuICBpbXBvcnQgeyBmYUhvbWUgfSBmcm9tICdAZm9ydGF3ZXNvbWUvZnJlZS1zb2xpZC1zdmctaWNvbnMvZmFIb21lJztcbiAgaW1wb3J0IHsgZmFDaXR5IH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhQ2l0eSc7XG4gIGltcG9ydCBUaXAgZnJvbSBcIi4vVGlwLnN2ZWx0ZVwiO1xuICBleHBvcnQgbGV0IHN0cmVhbWVyOyBcbiAgbGV0IGxhc3Rfc3RyZWFtZXIgPSBudWxsO1xuICBsZXQgYmFkZ2VzID0gW107XG4gICQ6IGlmKHN0cmVhbWVyICE9IGxhc3Rfc3RyZWFtZXIpe1xuICAgIGxhc3Rfc3RyZWFtZXIgPSBzdHJlYW1lcjtcbiAgfVxuPC9zY3JpcHQ+XG5cbjxzdHlsZT5cbiAgbGkge1xuICAgIGZvbnQtc2l6ZTogMC41cmVtO1xuICB9XG48L3N0eWxlPlxuIiwiPHVsIGNsYXNzPVwieyQkcHJvcHMuY2xhc3N9IGZvbnQtYm9sZCByb3VuZGVkLWxnXCI+XG4gIHsjZWFjaCBiYWRnZXMgYXMgYmFkZ2V9XG4gICAgeyNpZiAhYmFkZ2VbMl19XG4gICAgICA8bGkgY2xhc3M9XCJtYi0xIG1yLTFcIj5cbiAgICAgICAgPFRpcCBwb3NpdGlvbj1cImJvdHRvbVwiPlxuICAgICAgICAgIDxkaXYgc2xvdD1cImNvbnRlbnRzXCIgY2xhc3M9XCJweC0xIHB5LXB4IGZvbnQtYm9sZCByb3VuZGVkLWxnIHRydW5jYXRlXCIgc3R5bGU9XCJjb2xvcjoge2JhZGdlWzFdfTsgYm9yZGVyOiAycHggc29saWQge2JhZGdlWzFdfTsgbWF4LXdpZHRoOiAxMnJlbTtcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT1cIntiYWRnZVswXX1cIj5cbiAgICAgICAgICAgIHtiYWRnZVswXX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8c3BhbiBzbG90PVwidGlwXCI+XG4gICAgICAgICAgICB7YmFkZ2VbM119XG4gICAgICAgICAgPC9zcGFuPlxuICAgICAgICA8L1RpcD5cbiAgICAgIDwvbGk+XG4gICAgezplbHNlfVxuICAgICAgPGxpIGNsYXNzPVwibWItMSBtci0xXCI+XG4gICAgICAgIDxUaXAgcG9zaXRpb249XCJib3R0b21cIj5cbiAgICAgICAgICA8ZGl2IHNsb3Q9XCJjb250ZW50c1wiIGNsYXNzPVwicHgtMSBweS1weCBmb250LWJvbGQgcm91bmRlZC1sZyB0cnVuY2F0ZVwiIHN0eWxlPVwiY29sb3I6IHdoaXRlOyBiYWNrZ3JvdW5kLWNvbG9yOiB7YmFkZ2VbMV19OyBib3JkZXI6IDJweCBzb2xpZCB7YmFkZ2VbMV19OyBtYXgtd2lkdGg6IDEycmVtO1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPVwie2JhZGdlWzBdfVwiPlxuICAgICAgICAgICAge2JhZGdlWzBdfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxzcGFuIHNsb3Q9XCJ0aXBcIj5cbiAgICAgICAgICAgIHtiYWRnZVszXX1cbiAgICAgICAgICA8L3NwYW4+XG4gICAgICAgIDwvVGlwPlxuICAgICAgPC9saT5cbiAgICB7L2lmfVxuICB7L2VhY2h9XG48L3VsPlxuXG48c2NyaXB0PlxuICBpbXBvcnQgeyBkYXJrX3JhbmRvbV9jb2xvciB9IGZyb20gXCIuLi91dGlsLmpzXCI7XG4gIGltcG9ydCBUaXAgZnJvbSBcIi4vVGlwLnN2ZWx0ZVwiO1xuICBleHBvcnQgbGV0IHN0cmVhbWVyOyBcbiAgbGV0IGxhc3Rfc3RyZWFtZXIgPSBudWxsO1xuICBsZXQgYmFkZ2VzID0gW107XG4gICQ6IGlmKHN0cmVhbWVyICE9IGxhc3Rfc3RyZWFtZXIpe1xuICAgIGxhc3Rfc3RyZWFtZXIgPSBzdHJlYW1lcjtcbiAgICBiYWRnZXMgPSBbXTtcbiAgICBpZihzdHJlYW1lci5wcmltYXJ5X2dhbWVfbmFtZSlcbiAgICAgIGJhZGdlcy5wdXNoKFtzdHJlYW1lci5wcmltYXJ5X2dhbWVfbmFtZSwgZGFya19yYW5kb21fY29sb3Ioc3RyZWFtZXIucHJpbWFyeV9nYW1lX2lkKSwgMSwgXCLqsIDsnqUg66eO7J207ZWY64qUIOy7qO2FkOy4oFwiXSk7XG4gICAgaWYoc3RyZWFtZXIuc2Vjb25kYXJ5X2dhbWVfbmFtZSlcbiAgICAgIGJhZGdlcy5wdXNoKFtzdHJlYW1lci5zZWNvbmRhcnlfZ2FtZV9uYW1lLCBkYXJrX3JhbmRvbV9jb2xvcihzdHJlYW1lci5zZWNvbmRhcnlfZ2FtZV9pZCksIDEsIFwi65GQ67KI7Ke466GcIOunjuydtO2VmOuKlCDsu6jthZDsuKBcIl0pO1xuICAgIGJhZGdlcyA9IGJhZGdlcztcbiAgfVxuPC9zY3JpcHQ+XG5cbjxzdHlsZT5cbiAgbGkge1xuICAgIGZvbnQtc2l6ZTogMC41cmVtO1xuICAgIC8qIHdoaXRlLXNwYWNlOiBub3JtYWw7Ki9cbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIH1cbjwvc3R5bGU+XG4iLCI8c3ZnIGFyZWEtaGlkZGVuPVwidHJ1ZVwiIFxuICAgICByb2xlPVwiaW1nXCIgXG4gICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiBcbiAgICAgdmlld0JveD1cIjAgMCB7aWNvbi5pY29uWzBdfSB7aWNvbi5pY29uWzFdfVwiIFxuICAgICBjbGFzcz1cInskJHByb3BzLmNsYXNzfSBvdmVyZmxvdy12aXNpYmxlIGlubGluZS1ibG9ja1wiXG4gICAgIHN0eWxlPVwieyQkcHJvcHMuc3R5bGV9XCI+XG4gIDxwYXRoIGZpbGw9XCJjdXJyZW50Q29sb3JcIiBkPVwie2ljb24uaWNvbls0XX1cIi8+XG48L3N2Zz5cblxuPHNjcmlwdD5cbiAgZXhwb3J0IGxldCBpY29uO1xuPC9zY3JpcHQ+XG4iLCI8c2NyaXB0IGNvbnRleHQ9XCJtb2R1bGVcIj5cbiAgbGV0IG5leHRfaWQ9MDtcbiAgY29uc3QgcmVjZW50X3NlYXJjaF9oaXN0b3J5X2xlbmd0aCA9IDEwO1xuICBjb25zdCBsb2NhbF9zdG9yYWdlX3JlY2VudF9zZWFyY2hfa2V5ID0gJ3N0cmVhbWVyLWF1dG8tY29tcGxldGUtcmVjZW50LXNlYXJjaC1oaXN0b3J5JztcbiAgZnVuY3Rpb24gbG9hZF9yZWNlbnRfc2VhcmNoKGlkKXtcbiAgICByZXR1cm4gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShsb2NhbF9zdG9yYWdlX3JlY2VudF9zZWFyY2hfa2V5ICsgaWQpKSB8fCBbXTtcbiAgfVxuICBmdW5jdGlvbiBzYXZlX3JlY2VudF9zZWFyY2goaWQsIHJlY2VudF9zZWFyY2gpe1xuICAgIHJldHVybiBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShsb2NhbF9zdG9yYWdlX3JlY2VudF9zZWFyY2hfa2V5ICsgaWQsIEpTT04uc3RyaW5naWZ5KHJlY2VudF9zZWFyY2gpKTtcbiAgfVxuPC9zY3JpcHQ+XG48c2NyaXB0PlxuICBpbXBvcnQgeyBBUEkgfSBmcm9tICcuLi9hcGkuanMnO1xuICBpbXBvcnQgeyBvbk1vdW50IH0gZnJvbSAnc3ZlbHRlJztcblxuICBleHBvcnQgbGV0IHN0cmVhbWVycyA9IFtdO1xuICBleHBvcnQgbGV0IHNlbGVjdGVkID0gbnVsbDtcbiAgZXhwb3J0IGxldCBwbGFjZWhvbGRlciA9IFwiXCI7XG4gIGV4cG9ydCBsZXQgb25zZWxlY3QgPSAoZSk9Pnt9XG4gIGV4cG9ydCBsZXQgaW5wdXRpZCA9IFwiXCI7XG4gIGV4cG9ydCBsZXQgaW5wdXRfY2xhc3MgPSBcImJvcmRlciByb3VuZGVkIGZvY3VzOm91dGxpbmUtbm9uZSBtZDp3LTQ4IHctMzIgdGV4dC1zbSBsZWFkaW5nLWxvb3NlIHByLTUgdHJhbnNpdGlvbi1hbGwgZm9jdXM6b3V0bGluZS0wIGJvcmRlciBib3JkZXItdHJhbnNwYXJlbnQgZm9jdXM6Ymctd2hpdGUgZm9jdXM6Ym9yZGVyLXByaW1hcnktNjAwIHBsYWNlaG9sZGVyLWdyYXktNjAwIHJvdW5kZWQtbGcgIGJnLXByaW1hcnktMTAwIHBsLTdcIjtcbiAgZXhwb3J0IGxldCBpY29uID0gdHJ1ZTtcbiAgZXhwb3J0IGxldCBpZCA9IG5leHRfaWQrKztcbiAgZXhwb3J0IGxldCBhdXRvY29tcGxldGVfY2xhc3MgPSBcIm1kOnctNDggdy0zMlwiO1xuICBleHBvcnQgbGV0IGljb25fY2xhc3MgPSBcInctMyBoLTNcIjtcbiAgXG4gIFxuICBsZXQgaW5wdXRfZWxlbWVudDtcbiAgZXhwb3J0IGxldCBpbnB1dF92YWx1ZT1cIlwiO1xuICBsZXQgbGFzdF9rZXl3b3JkO1xuICBsZXQgZm9jdXNlZCA9IGZhbHNlO1xuICBsZXQgZmlsdGVyZWRfc3RyZWFtZXJzID0gW107XG4gIGxldCByZWNlbnRfc2VhcmNoX2hpc3RvcnkgPSBbXTtcblxuICBvbk1vdW50KCgpPT57XG4gICAgcmVjZW50X3NlYXJjaF9oaXN0b3J5ID0gbG9hZF9yZWNlbnRfc2VhcmNoKGlkKTtcbiAgICByZWNlbnRfc2VhcmNoX2hpc3RvcnkgPSByZWNlbnRfc2VhcmNoX2hpc3RvcnkubWFwKHIgPT4gc3RyZWFtZXJzLmZpbmQocyA9PiBzLmlkID09IHIuaWQpIHx8IHIpO1xuICB9KTtcblxuICBmdW5jdGlvbiBhZGRfc3RyZWFtZXJfdG9fcmVjZW50X3NlYXJjaF9oaXN0b3J5KHN0cmVhbWVyKSB7XG4gICAgbGV0IGluZGV4ID0gcmVjZW50X3NlYXJjaF9oaXN0b3J5LmZpbmRJbmRleChzPT5zLmlkID09IHN0cmVhbWVyLmlkKTtcbiAgICBpZihpbmRleCA+PSAwKVxuICAgICAgcmVjZW50X3NlYXJjaF9oaXN0b3J5LnNwbGljZShpbmRleCwgMSk7XG4gICAgcmVjZW50X3NlYXJjaF9oaXN0b3J5ID0gW3N0cmVhbWVyLCAuLi5yZWNlbnRfc2VhcmNoX2hpc3Rvcnkuc2xpY2UoMCwgcmVjZW50X3NlYXJjaF9oaXN0b3J5X2xlbmd0aC0xKV07XG4gIH1cblxuICBmdW5jdGlvbiBmaWx0ZXIoc3RyZWFtZXJzLCBrZXl3b3JkKXtcbiAgICAgIGZpbHRlcmVkX3N0cmVhbWVycyA9IGtleXdvcmQ/IHN0cmVhbWVycy5maWx0ZXIocyA9PiBzLm5hbWUudG9Mb2NhbGVMb3dlckNhc2UoKS5zZWFyY2goa2V5d29yZC50b0xvY2FsZUxvd2VyQ2FzZSgpKSA+PSAwKTogW107XG4gICAgICBmb3IobGV0IHMgb2YgZmlsdGVyZWRfc3RyZWFtZXJzKXtcbiAgICAgICAgbGV0IGkgPSBzLm5hbWUudG9Mb2NhbGVMb3dlckNhc2UoKS5zZWFyY2goa2V5d29yZC50b0xvY2FsZUxvd2VyQ2FzZSgpKTtcbiAgICAgICAgcy5fbGVmdCA9IHMubmFtZS5zbGljZSgwLCBpKTtcbiAgICAgICAgcy5fY2VudGVyID0gcy5uYW1lLnNsaWNlKGksIGkra2V5d29yZC5sZW5ndGgpO1xuICAgICAgICBzLl9yaWdodCA9IHMubmFtZS5zbGljZShpICsga2V5d29yZC5sZW5ndGgpO1xuICAgICAgfVxuICAgICAgLy9zZWxlY3RlZCA9IGZpbHRlcmVkX3N0cmVhbWVycy5maW5kKHMgPT4gcy5uYW1lID09PSBrZXl3b3JkKTtcbiAgfVxuICBmdW5jdGlvbiBvbl9pbnB1dF9jaGFuZ2UoZSkge1xuICAgIGxldCBrZXl3b3JkID0gaW5wdXRfdmFsdWU7XG4gICAgaWYobGFzdF9rZXl3b3JkID09IGtleXdvcmQpIFxuICAgICAgcmV0dXJuO1xuICAgIGxhc3Rfa2V5d29yZCA9IGtleXdvcmQ7XG4gICAgaWYoc3RyZWFtZXJzLmxlbmd0aCl7XG4gICAgICBmaWx0ZXIoc3RyZWFtZXJzLCBrZXl3b3JkKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBBUEkudGhpbl9zdHJlYW1lcnMoa2V5d29yZClcbiAgICAgICAgLnRoZW4oc3RyZWFtZXJzPT57XG4gICAgICAgICAgZmlsdGVyKHN0cmVhbWVycywga2V5d29yZCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBvbl9saXN0X2NsaWNrKHN0cmVhbWVyKSB7XG4gICAgc2VsZWN0ZWQgPSBzdHJlYW1lcjtcbiAgICBpbnB1dF9lbGVtZW50LnZhbHVlID0gc3RyZWFtZXIubmFtZTtcbiAgICBpbnB1dF9lbGVtZW50LmJsdXIoKTtcbiAgICBhZGRfc3RyZWFtZXJfdG9fcmVjZW50X3NlYXJjaF9oaXN0b3J5KHN0cmVhbWVyKTtcbiAgICBzYXZlX3JlY2VudF9zZWFyY2goaWQsIHJlY2VudF9zZWFyY2hfaGlzdG9yeSk7XG4gICAgb25zZWxlY3Qoc2VsZWN0ZWQpO1xuICB9XG4gIGZ1bmN0aW9uIHJlbW92ZV9mcm9tX3JlY2VudF9oaXN0b3J5KHN0cmVhbWVyLCBlKSB7XG4gICAgcmVjZW50X3NlYXJjaF9oaXN0b3J5ID0gcmVjZW50X3NlYXJjaF9oaXN0b3J5LmZpbHRlcihlPT5lLmlkICE9IHN0cmVhbWVyLmlkKTtcbiAgICBzYXZlX3JlY2VudF9zZWFyY2goaWQsIHJlY2VudF9zZWFyY2hfaGlzdG9yeSk7XG4gICAgZm9jdXMgPSB0cnVlO1xuICAgIHJldHVybiBlLnByZXZlbnREZWZhdWx0KCkgJiYgZmFsc2U7XG4gIH1cbjwvc2NyaXB0PlxuXG48ZGl2IGNsYXNzPVwiaW5saW5lLWJsb2NrIHJlbGF0aXZlIHskJHByb3BzLmNsYXNzfVwiID5cbiAgPGlucHV0IFxuICAgIHBsYWNlaG9sZGVyPXtwbGFjZWhvbGRlcn1cbiAgICBpZCA9IFwie2lucHV0aWR9XCJcbiAgICBjbGFzcz1cIntpbnB1dF9jbGFzc31cIlxuICAgIG9uOmZvY3VzPXtlPT5mb2N1c2VkPXRydWV9IG9uOmtleXVwPXtvbl9pbnB1dF9jaGFuZ2V9IGJpbmQ6dmFsdWU9e2lucHV0X3ZhbHVlfSBiaW5kOnRoaXM9e2lucHV0X2VsZW1lbnR9XG4gICAgb246Ymx1cj17ZT0+Zm9jdXNlZD1mYWxzZX0gLz5cbiAgeyNpZiBpY29uID09PSB0cnVlfVxuICA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB4bWxuczp4bGluaz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiB2ZXJzaW9uPVwiMS4xXCIgeD1cIjBweFwiIHk9XCIwcHhcIiB2aWV3Qm94PVwiMCAwIDU2Ljk2NiA1Ni45NjZcIiB4bWw6c3BhY2U9XCJwcmVzZXJ2ZVwiIHdpZHRoPVwiNTEycHhcIiBoZWlnaHQ9XCI1MTJweFwiIGlkPVwiQ2FwYV8xXCIgY2xhc3M9XCJ7aWNvbl9jbGFzc30gdGV4dC1ncmF5LTYwMCBmaWxsLWN1cnJlbnQgYWJzb2x1dGVcIiBzdHlsZT1cImVuYWJsZS1iYWNrZ3JvdW5kOm5ldyAwIDAgNTYuOTY2IDU2Ljk2NjsgdG9wOiA1MCU7IHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKTsgbGVmdDogMC42cmVtO1wiPlxuICAgICAgICA8cGF0aCBkPVwiTTU1LjE0Niw1MS44ODdMNDEuNTg4LDM3Ljc4NmMzLjQ4Ni00LjE0NCw1LjM5Ni05LjM1OCw1LjM5Ni0xNC43ODZjMC0xMi42ODItMTAuMzE4LTIzLTIzLTIzcy0yMywxMC4zMTgtMjMsMjMgIHMxMC4zMTgsMjMsMjMsMjNjNC43NjEsMCw5LjI5OC0xLjQzNiwxMy4xNzctNC4xNjJsMTMuNjYxLDE0LjIwOGMwLjU3MSwwLjU5MywxLjMzOSwwLjkyLDIuMTYyLDAuOTIgIGMwLjc3OSwwLDEuNTE4LTAuMjk3LDIuMDc5LTAuODM3QzU2LjI1NSw1NC45ODIsNTYuMjkzLDUzLjA4LDU1LjE0Niw1MS44ODd6IE0yMy45ODQsNmM5LjM3NCwwLDE3LDcuNjI2LDE3LDE3cy03LjYyNiwxNy0xNywxNyAgcy0xNy03LjYyNi0xNy0xN1MxNC42MSw2LDIzLjk4NCw2elwiPjwvcGF0aD5cbiAgPC9zdmc+XG4gIHsvaWZ9XG4gIDx1bCBjbGFzcz1cImFic29sdXRlIGJnLXdoaXRlIHotNTBcIiBjbGFzczpoaWRkZW49XCJ7IWZvY3VzZWR9XCI+XG4gICAgeyNpZiAhaW5wdXRfdmFsdWUgJiYgcmVjZW50X3NlYXJjaF9oaXN0b3J5fVxuICAgICAgeyNlYWNoIHJlY2VudF9zZWFyY2hfaGlzdG9yeSBhcyBzdHJlYW1lcn1cbiAgICAgICAgPGxpIG9uOm1vdXNlZG93bj17ZT0+b25fbGlzdF9jbGljayhzdHJlYW1lcil9IGNsYXNzPVwibWQ6dy00OCB3LTMyIHB4LTIgcHktMiBob3ZlcjpiZy1wdXJwbGUtNTAwIGhvdmVyOnRleHQtd2hpdGUgdGV4dC1ibGFjayBmbGV4IGZsZXgtcm93IGl0ZW1zLWNlbnRlciB0cnVuY2F0ZSBiZy13aGl0ZSBmbGV4LXdyYXBcIj5cbiAgICAgICAgICA8aW1nIGNsYXNzPVwicm91bmRlZC1mdWxsIGgtOCB3LThcIiBzcmM9e3N0cmVhbWVyLnByb2ZpbGVfaW1hZ2VfdXJsfSAvPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJweC0yXCI+PHNwYW4+e3N0cmVhbWVyLm5hbWV9PC9zcGFuPjwvZGl2PlxuICAgICAgICA8L2xpPlxuICAgICAgICA8YnV0dG9uIHN0eWxlPVwibGluZS1oZWlnaHQ6IDFyZW1cIiBjbGFzcz1cImFic29sdXRlIHJpZ2h0LTAgdy00IGgtNCB0ZXh0LWNlbnRlciAtbXItNiAtbXQtOCB0ZXh0LWdyYXktODAwIGJnLXdoaXRlIHJvdW5kZWQtZnVsbFwiIG9uOm1vdXNlZG93bj17ZT0+cmVtb3ZlX2Zyb21fcmVjZW50X2hpc3Rvcnkoc3RyZWFtZXIsIGUpfT7wn56pPC9idXR0b24+XG4gICAgICB7L2VhY2h9XG4gICAgezplbHNlfVxuICAgICAgeyNlYWNoIGZpbHRlcmVkX3N0cmVhbWVycyBhcyBzdHJlYW1lcn1cbiAgICAgICAgPGxpIG9uOm1vdXNlZG93bj17ZT0+b25fbGlzdF9jbGljayhzdHJlYW1lcil9IGNsYXNzPVwie2F1dG9jb21wbGV0ZV9jbGFzc30gcHgtMiBweS0yIGhvdmVyOmJnLXB1cnBsZS01MDAgaG92ZXI6dGV4dC13aGl0ZSB0ZXh0LWJsYWNrIGZsZXggZmxleC1yb3cgaXRlbXMtY2VudGVyIHRydW5jYXRlIGJnLXdoaXRlXCI+XG4gICAgICAgICAgPGltZyBjbGFzcz1cInJvdW5kZWQtZnVsbCBoLTggdy04XCIgc3JjPXtzdHJlYW1lci5wcm9maWxlX2ltYWdlX3VybH0gLz5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwicHgtMlwiPjxzcGFuPntzdHJlYW1lci5fbGVmdH08L3NwYW4+PHNwYW4gY2xhc3M9XCJ0ZXh0LXJlZC01MDBcIj57c3RyZWFtZXIuX2NlbnRlcn08L3NwYW4+PHNwYW4+e3N0cmVhbWVyLl9yaWdodH08L3NwYW4+PC9kaXY+XG4gICAgICAgIDwvbGk+XG4gICAgICB7L2VhY2h9XG4gICAgey9pZn1cbiAgPC91bD5cbjwvZGl2PlxuXG5cbjxzdHlsZT5cbjwvc3R5bGU+XG4iLCIndXNlIHN0cmljdCc7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHByZWZpeCA9ICdmYXMnO1xudmFyIGljb25OYW1lID0gJ2NvbW1lbnQnO1xudmFyIHdpZHRoID0gNTEyO1xudmFyIGhlaWdodCA9IDUxMjtcbnZhciBsaWdhdHVyZXMgPSBbXTtcbnZhciB1bmljb2RlID0gJ2YwNzUnO1xudmFyIHN2Z1BhdGhEYXRhID0gJ00yNTYgMzJDMTE0LjYgMzIgMCAxMjUuMSAwIDI0MGMwIDQ5LjYgMjEuNCA5NSA1NyAxMzAuN0M0NC41IDQyMS4xIDIuNyA0NjYgMi4yIDQ2Ni41Yy0yLjIgMi4zLTIuOCA1LjctMS41IDguN1M0LjggNDgwIDggNDgwYzY2LjMgMCAxMTYtMzEuOCAxNDAuNi01MS40IDMyLjcgMTIuMyA2OSAxOS40IDEwNy40IDE5LjQgMTQxLjQgMCAyNTYtOTMuMSAyNTYtMjA4UzM5Ny40IDMyIDI1NiAzMnonO1xuXG5leHBvcnRzLmRlZmluaXRpb24gPSB7XG4gIHByZWZpeDogcHJlZml4LFxuICBpY29uTmFtZTogaWNvbk5hbWUsXG4gIGljb246IFtcbiAgICB3aWR0aCxcbiAgICBoZWlnaHQsXG4gICAgbGlnYXR1cmVzLFxuICAgIHVuaWNvZGUsXG4gICAgc3ZnUGF0aERhdGFcbiAgXX07XG5cbmV4cG9ydHMuZmFDb21tZW50ID0gZXhwb3J0cy5kZWZpbml0aW9uO1xuZXhwb3J0cy5wcmVmaXggPSBwcmVmaXg7XG5leHBvcnRzLmljb25OYW1lID0gaWNvbk5hbWU7XG5leHBvcnRzLndpZHRoID0gd2lkdGg7XG5leHBvcnRzLmhlaWdodCA9IGhlaWdodDtcbmV4cG9ydHMubGlnYXR1cmVzID0gbGlnYXR1cmVzO1xuZXhwb3J0cy51bmljb2RlID0gdW5pY29kZTtcbmV4cG9ydHMuc3ZnUGF0aERhdGEgPSBzdmdQYXRoRGF0YTsiLCIndXNlIHN0cmljdCc7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHByZWZpeCA9ICdmYXMnO1xudmFyIGljb25OYW1lID0gJ2tleSc7XG52YXIgd2lkdGggPSA1MTI7XG52YXIgaGVpZ2h0ID0gNTEyO1xudmFyIGxpZ2F0dXJlcyA9IFtdO1xudmFyIHVuaWNvZGUgPSAnZjA4NCc7XG52YXIgc3ZnUGF0aERhdGEgPSAnTTUxMiAxNzYuMDAxQzUxMiAyNzMuMjAzIDQzMy4yMDIgMzUyIDMzNiAzNTJjLTExLjIyIDAtMjIuMTktMS4wNjItMzIuODI3LTMuMDY5bC0yNC4wMTIgMjcuMDE0QTIzLjk5OSAyMy45OTkgMCAwIDEgMjYxLjIyMyAzODRIMjI0djQwYzAgMTMuMjU1LTEwLjc0NSAyNC0yNCAyNGgtNDB2NDBjMCAxMy4yNTUtMTAuNzQ1IDI0LTI0IDI0SDI0Yy0xMy4yNTUgMC0yNC0xMC43NDUtMjQtMjR2LTc4LjA1OWMwLTYuMzY1IDIuNTI5LTEyLjQ3IDcuMDI5LTE2Ljk3MWwxNjEuODAyLTE2MS44MDJDMTYzLjEwOCAyMTMuODE0IDE2MCAxOTUuMjcxIDE2MCAxNzYgMTYwIDc4Ljc5OCAyMzguNzk3LjAwMSAzMzUuOTk5IDAgNDMzLjQ4OC0uMDAxIDUxMiA3OC41MTEgNTEyIDE3Ni4wMDF6TTMzNiAxMjhjMCAyNi41MSAyMS40OSA0OCA0OCA0OHM0OC0yMS40OSA0OC00OC0yMS40OS00OC00OC00OC00OCAyMS40OS00OCA0OHonO1xuXG5leHBvcnRzLmRlZmluaXRpb24gPSB7XG4gIHByZWZpeDogcHJlZml4LFxuICBpY29uTmFtZTogaWNvbk5hbWUsXG4gIGljb246IFtcbiAgICB3aWR0aCxcbiAgICBoZWlnaHQsXG4gICAgbGlnYXR1cmVzLFxuICAgIHVuaWNvZGUsXG4gICAgc3ZnUGF0aERhdGFcbiAgXX07XG5cbmV4cG9ydHMuZmFLZXkgPSBleHBvcnRzLmRlZmluaXRpb247XG5leHBvcnRzLnByZWZpeCA9IHByZWZpeDtcbmV4cG9ydHMuaWNvbk5hbWUgPSBpY29uTmFtZTtcbmV4cG9ydHMud2lkdGggPSB3aWR0aDtcbmV4cG9ydHMuaGVpZ2h0ID0gaGVpZ2h0O1xuZXhwb3J0cy5saWdhdHVyZXMgPSBsaWdhdHVyZXM7XG5leHBvcnRzLnVuaWNvZGUgPSB1bmljb2RlO1xuZXhwb3J0cy5zdmdQYXRoRGF0YSA9IHN2Z1BhdGhEYXRhOyIsIid1c2Ugc3RyaWN0Jztcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgcHJlZml4ID0gJ2Zhcyc7XG52YXIgaWNvbk5hbWUgPSAndXNlcic7XG52YXIgd2lkdGggPSA0NDg7XG52YXIgaGVpZ2h0ID0gNTEyO1xudmFyIGxpZ2F0dXJlcyA9IFtdO1xudmFyIHVuaWNvZGUgPSAnZjAwNyc7XG52YXIgc3ZnUGF0aERhdGEgPSAnTTIyNCAyNTZjNzAuNyAwIDEyOC01Ny4zIDEyOC0xMjhTMjk0LjcgMCAyMjQgMCA5NiA1Ny4zIDk2IDEyOHM1Ny4zIDEyOCAxMjggMTI4em04OS42IDMyaC0xNi43Yy0yMi4yIDEwLjItNDYuOSAxNi03Mi45IDE2cy01MC42LTUuOC03Mi45LTE2aC0xNi43QzYwLjIgMjg4IDAgMzQ4LjIgMCA0MjIuNFY0NjRjMCAyNi41IDIxLjUgNDggNDggNDhoMzUyYzI2LjUgMCA0OC0yMS41IDQ4LTQ4di00MS42YzAtNzQuMi02MC4yLTEzNC40LTEzNC40LTEzNC40eic7XG5cbmV4cG9ydHMuZGVmaW5pdGlvbiA9IHtcbiAgcHJlZml4OiBwcmVmaXgsXG4gIGljb25OYW1lOiBpY29uTmFtZSxcbiAgaWNvbjogW1xuICAgIHdpZHRoLFxuICAgIGhlaWdodCxcbiAgICBsaWdhdHVyZXMsXG4gICAgdW5pY29kZSxcbiAgICBzdmdQYXRoRGF0YVxuICBdfTtcblxuZXhwb3J0cy5mYVVzZXIgPSBleHBvcnRzLmRlZmluaXRpb247XG5leHBvcnRzLnByZWZpeCA9IHByZWZpeDtcbmV4cG9ydHMuaWNvbk5hbWUgPSBpY29uTmFtZTtcbmV4cG9ydHMud2lkdGggPSB3aWR0aDtcbmV4cG9ydHMuaGVpZ2h0ID0gaGVpZ2h0O1xuZXhwb3J0cy5saWdhdHVyZXMgPSBsaWdhdHVyZXM7XG5leHBvcnRzLnVuaWNvZGUgPSB1bmljb2RlO1xuZXhwb3J0cy5zdmdQYXRoRGF0YSA9IHN2Z1BhdGhEYXRhOyIsIid1c2Ugc3RyaWN0Jztcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgcHJlZml4ID0gJ2Zhcyc7XG52YXIgaWNvbk5hbWUgPSAndXNlci1jbG9jayc7XG52YXIgd2lkdGggPSA2NDA7XG52YXIgaGVpZ2h0ID0gNTEyO1xudmFyIGxpZ2F0dXJlcyA9IFtdO1xudmFyIHVuaWNvZGUgPSAnZjRmZCc7XG52YXIgc3ZnUGF0aERhdGEgPSAnTTQ5NiAyMjRjLTc5LjYgMC0xNDQgNjQuNC0xNDQgMTQ0czY0LjQgMTQ0IDE0NCAxNDQgMTQ0LTY0LjQgMTQ0LTE0NC02NC40LTE0NC0xNDQtMTQ0em02NCAxNTAuM2MwIDUuMy00LjQgOS43LTkuNyA5LjdoLTYwLjZjLTUuMyAwLTkuNy00LjQtOS43LTkuN3YtNzYuNmMwLTUuMyA0LjQtOS43IDkuNy05LjdoMTIuNmM1LjMgMCA5LjcgNC40IDkuNyA5LjdWMzUyaDM4LjNjNS4zIDAgOS43IDQuNCA5LjcgOS43djEyLjZ6TTMyMCAzNjhjMC0yNy44IDYuNy01NC4xIDE4LjItNzcuNS04LTEuNS0xNi4yLTIuNS0yNC42LTIuNWgtMTYuN2MtMjIuMiAxMC4yLTQ2LjkgMTYtNzIuOSAxNnMtNTAuNi01LjgtNzIuOS0xNmgtMTYuN0M2MC4yIDI4OCAwIDM0OC4yIDAgNDIyLjRWNDY0YzAgMjYuNSAyMS41IDQ4IDQ4IDQ4aDM0Ny4xYy00NS4zLTMxLjktNzUuMS04NC41LTc1LjEtMTQ0em0tOTYtMTEyYzcwLjcgMCAxMjgtNTcuMyAxMjgtMTI4UzI5NC43IDAgMjI0IDAgOTYgNTcuMyA5NiAxMjhzNTcuMyAxMjggMTI4IDEyOHonO1xuXG5leHBvcnRzLmRlZmluaXRpb24gPSB7XG4gIHByZWZpeDogcHJlZml4LFxuICBpY29uTmFtZTogaWNvbk5hbWUsXG4gIGljb246IFtcbiAgICB3aWR0aCxcbiAgICBoZWlnaHQsXG4gICAgbGlnYXR1cmVzLFxuICAgIHVuaWNvZGUsXG4gICAgc3ZnUGF0aERhdGFcbiAgXX07XG5cbmV4cG9ydHMuZmFVc2VyQ2xvY2sgPSBleHBvcnRzLmRlZmluaXRpb247XG5leHBvcnRzLnByZWZpeCA9IHByZWZpeDtcbmV4cG9ydHMuaWNvbk5hbWUgPSBpY29uTmFtZTtcbmV4cG9ydHMud2lkdGggPSB3aWR0aDtcbmV4cG9ydHMuaGVpZ2h0ID0gaGVpZ2h0O1xuZXhwb3J0cy5saWdhdHVyZXMgPSBsaWdhdHVyZXM7XG5leHBvcnRzLnVuaWNvZGUgPSB1bmljb2RlO1xuZXhwb3J0cy5zdmdQYXRoRGF0YSA9IHN2Z1BhdGhEYXRhOyIsIid1c2Ugc3RyaWN0Jztcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgcHJlZml4ID0gJ2Zhcyc7XG52YXIgaWNvbk5hbWUgPSAndXNlci1sb2NrJztcbnZhciB3aWR0aCA9IDY0MDtcbnZhciBoZWlnaHQgPSA1MTI7XG52YXIgbGlnYXR1cmVzID0gW107XG52YXIgdW5pY29kZSA9ICdmNTAyJztcbnZhciBzdmdQYXRoRGF0YSA9ICdNMjI0IDI1NkExMjggMTI4IDAgMSAwIDk2IDEyOGExMjggMTI4IDAgMCAwIDEyOCAxMjh6bTk2IDY0YTYzLjA4IDYzLjA4IDAgMCAxIDguMS0zMC41Yy00LjgtLjUtOS41LTEuNS0xNC41LTEuNWgtMTYuN2ExNzQuMDggMTc0LjA4IDAgMCAxLTE0NS44IDBoLTE2LjdBMTM0LjQzIDEzNC40MyAwIDAgMCAwIDQyMi40VjQ2NGE0OCA0OCAwIDAgMCA0OCA0OGgyODAuOWE2My41NCA2My41NCAwIDAgMS04LjktMzJ6bTI4OC0zMmgtMzJ2LTgwYTgwIDgwIDAgMCAwLTE2MCAwdjgwaC0zMmEzMiAzMiAwIDAgMC0zMiAzMnYxNjBhMzIgMzIgMCAwIDAgMzIgMzJoMjI0YTMyIDMyIDAgMCAwIDMyLTMyVjMyMGEzMiAzMiAwIDAgMC0zMi0zMnpNNDk2IDQzMmEzMiAzMiAwIDEgMSAzMi0zMiAzMiAzMiAwIDAgMS0zMiAzMnptMzItMTQ0aC02NHYtODBhMzIgMzIgMCAwIDEgNjQgMHonO1xuXG5leHBvcnRzLmRlZmluaXRpb24gPSB7XG4gIHByZWZpeDogcHJlZml4LFxuICBpY29uTmFtZTogaWNvbk5hbWUsXG4gIGljb246IFtcbiAgICB3aWR0aCxcbiAgICBoZWlnaHQsXG4gICAgbGlnYXR1cmVzLFxuICAgIHVuaWNvZGUsXG4gICAgc3ZnUGF0aERhdGFcbiAgXX07XG5cbmV4cG9ydHMuZmFVc2VyTG9jayA9IGV4cG9ydHMuZGVmaW5pdGlvbjtcbmV4cG9ydHMucHJlZml4ID0gcHJlZml4O1xuZXhwb3J0cy5pY29uTmFtZSA9IGljb25OYW1lO1xuZXhwb3J0cy53aWR0aCA9IHdpZHRoO1xuZXhwb3J0cy5oZWlnaHQgPSBoZWlnaHQ7XG5leHBvcnRzLmxpZ2F0dXJlcyA9IGxpZ2F0dXJlcztcbmV4cG9ydHMudW5pY29kZSA9IHVuaWNvZGU7XG5leHBvcnRzLnN2Z1BhdGhEYXRhID0gc3ZnUGF0aERhdGE7IiwiJ3VzZSBzdHJpY3QnO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBwcmVmaXggPSAnZmFzJztcbnZhciBpY29uTmFtZSA9ICdob3VyZ2xhc3MtaGFsZic7XG52YXIgd2lkdGggPSAzODQ7XG52YXIgaGVpZ2h0ID0gNTEyO1xudmFyIGxpZ2F0dXJlcyA9IFtdO1xudmFyIHVuaWNvZGUgPSAnZjI1Mic7XG52YXIgc3ZnUGF0aERhdGEgPSAnTTM2MCAwSDI0QzEwLjc0NSAwIDAgMTAuNzQ1IDAgMjR2MTZjMCAxMy4yNTUgMTAuNzQ1IDI0IDI0IDI0IDAgOTAuOTY1IDUxLjAxNiAxNjcuNzM0IDEyMC44NDIgMTkyQzc1LjAxNiAyODAuMjY2IDI0IDM1Ny4wMzUgMjQgNDQ4Yy0xMy4yNTUgMC0yNCAxMC43NDUtMjQgMjR2MTZjMCAxMy4yNTUgMTAuNzQ1IDI0IDI0IDI0aDMzNmMxMy4yNTUgMCAyNC0xMC43NDUgMjQtMjR2LTE2YzAtMTMuMjU1LTEwLjc0NS0yNC0yNC0yNCAwLTkwLjk2NS01MS4wMTYtMTY3LjczNC0xMjAuODQyLTE5MkMzMDguOTg0IDIzMS43MzQgMzYwIDE1NC45NjUgMzYwIDY0YzEzLjI1NSAwIDI0LTEwLjc0NSAyNC0yNFYyNGMwLTEzLjI1NS0xMC43NDUtMjQtMjQtMjR6bS03NS4wNzggMzg0SDk5LjA4YzE3LjA1OS00Ni43OTcgNTIuMDk2LTgwIDkyLjkyLTgwIDQwLjgyMSAwIDc1Ljg2MiAzMy4xOTYgOTIuOTIyIDgwem0uMDE5LTI1Nkg5OS4wNzhDOTEuOTg4IDEwOC41NDggODggODYuNzQ4IDg4IDY0aDIwOGMwIDIyLjgwNS0zLjk4NyA0NC41ODctMTEuMDU5IDY0eic7XG5cbmV4cG9ydHMuZGVmaW5pdGlvbiA9IHtcbiAgcHJlZml4OiBwcmVmaXgsXG4gIGljb25OYW1lOiBpY29uTmFtZSxcbiAgaWNvbjogW1xuICAgIHdpZHRoLFxuICAgIGhlaWdodCxcbiAgICBsaWdhdHVyZXMsXG4gICAgdW5pY29kZSxcbiAgICBzdmdQYXRoRGF0YVxuICBdfTtcblxuZXhwb3J0cy5mYUhvdXJnbGFzc0hhbGYgPSBleHBvcnRzLmRlZmluaXRpb247XG5leHBvcnRzLnByZWZpeCA9IHByZWZpeDtcbmV4cG9ydHMuaWNvbk5hbWUgPSBpY29uTmFtZTtcbmV4cG9ydHMud2lkdGggPSB3aWR0aDtcbmV4cG9ydHMuaGVpZ2h0ID0gaGVpZ2h0O1xuZXhwb3J0cy5saWdhdHVyZXMgPSBsaWdhdHVyZXM7XG5leHBvcnRzLnVuaWNvZGUgPSB1bmljb2RlO1xuZXhwb3J0cy5zdmdQYXRoRGF0YSA9IHN2Z1BhdGhEYXRhOyIsIid1c2Ugc3RyaWN0Jztcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgcHJlZml4ID0gJ2Zhcyc7XG52YXIgaWNvbk5hbWUgPSAnaGlzdG9yeSc7XG52YXIgd2lkdGggPSA1MTI7XG52YXIgaGVpZ2h0ID0gNTEyO1xudmFyIGxpZ2F0dXJlcyA9IFtdO1xudmFyIHVuaWNvZGUgPSAnZjFkYSc7XG52YXIgc3ZnUGF0aERhdGEgPSAnTTUwNCAyNTUuNTMxYy4yNTMgMTM2LjY0LTExMS4xOCAyNDguMzcyLTI0Ny44MiAyNDguNDY4LTU5LjAxNS4wNDItMTEzLjIyMy0yMC41My0xNTUuODIyLTU0LjkxMS0xMS4wNzctOC45NC0xMS45MDUtMjUuNTQxLTEuODM5LTM1LjYwN2wxMS4yNjctMTEuMjY3YzguNjA5LTguNjA5IDIyLjM1My05LjU1MSAzMS44OTEtMS45ODRDMTczLjA2MiA0MjUuMTM1IDIxMi43ODEgNDQwIDI1NiA0NDBjMTAxLjcwNSAwIDE4NC04Mi4zMTEgMTg0LTE4NCAwLTEwMS43MDUtODIuMzExLTE4NC0xODQtMTg0LTQ4LjgxNCAwLTkzLjE0OSAxOC45NjktMTI2LjA2OCA0OS45MzJsNTAuNzU0IDUwLjc1NGMxMC4wOCAxMC4wOCAyLjk0MSAyNy4zMTQtMTEuMzEzIDI3LjMxNEgyNGMtOC44MzcgMC0xNi03LjE2My0xNi0xNlYzOC42MjdjMC0xNC4yNTQgMTcuMjM0LTIxLjM5MyAyNy4zMTQtMTEuMzE0bDQ5LjM3MiA0OS4zNzJDMTI5LjIwOSAzNC4xMzYgMTg5LjU1MiA4IDI1NiA4YzEzNi44MSAwIDI0Ny43NDcgMTEwLjc4IDI0OCAyNDcuNTMxem0tMTgwLjkxMiA3OC43ODRsOS44MjMtMTIuNjNjOC4xMzgtMTAuNDYzIDYuMjUzLTI1LjU0Mi00LjIxLTMzLjY3OUwyODggMjU2LjM0OVYxNTJjMC0xMy4yNTUtMTAuNzQ1LTI0LTI0LTI0aC0xNmMtMTMuMjU1IDAtMjQgMTAuNzQ1LTI0IDI0djEzNS42NTFsNjUuNDA5IDUwLjg3NGMxMC40NjMgOC4xMzcgMjUuNTQxIDYuMjUzIDMzLjY3OS00LjIxeic7XG5cbmV4cG9ydHMuZGVmaW5pdGlvbiA9IHtcbiAgcHJlZml4OiBwcmVmaXgsXG4gIGljb25OYW1lOiBpY29uTmFtZSxcbiAgaWNvbjogW1xuICAgIHdpZHRoLFxuICAgIGhlaWdodCxcbiAgICBsaWdhdHVyZXMsXG4gICAgdW5pY29kZSxcbiAgICBzdmdQYXRoRGF0YVxuICBdfTtcblxuZXhwb3J0cy5mYUhpc3RvcnkgPSBleHBvcnRzLmRlZmluaXRpb247XG5leHBvcnRzLnByZWZpeCA9IHByZWZpeDtcbmV4cG9ydHMuaWNvbk5hbWUgPSBpY29uTmFtZTtcbmV4cG9ydHMud2lkdGggPSB3aWR0aDtcbmV4cG9ydHMuaGVpZ2h0ID0gaGVpZ2h0O1xuZXhwb3J0cy5saWdhdHVyZXMgPSBsaWdhdHVyZXM7XG5leHBvcnRzLnVuaWNvZGUgPSB1bmljb2RlO1xuZXhwb3J0cy5zdmdQYXRoRGF0YSA9IHN2Z1BhdGhEYXRhOyIsIid1c2Ugc3RyaWN0Jztcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgcHJlZml4ID0gJ2Zhcyc7XG52YXIgaWNvbk5hbWUgPSAnZG9sbGFyLXNpZ24nO1xudmFyIHdpZHRoID0gMjg4O1xudmFyIGhlaWdodCA9IDUxMjtcbnZhciBsaWdhdHVyZXMgPSBbXTtcbnZhciB1bmljb2RlID0gJ2YxNTUnO1xudmFyIHN2Z1BhdGhEYXRhID0gJ00yMDkuMiAyMzMuNGwtMTA4LTMxLjZDODguNyAxOTguMiA4MCAxODYuNSA4MCAxNzMuNWMwLTE2LjMgMTMuMi0yOS41IDI5LjUtMjkuNWg2Ni4zYzEyLjIgMCAyNC4yIDMuNyAzNC4yIDEwLjUgNi4xIDQuMSAxNC4zIDMuMSAxOS41LTJsMzQuOC0zNGM3LjEtNi45IDYuMS0xOC40LTEuOC0yNC41QzIzOCA3NC44IDIwNy40IDY0LjEgMTc2IDY0VjE2YzAtOC44LTcuMi0xNi0xNi0xNmgtMzJjLTguOCAwLTE2IDcuMi0xNiAxNnY0OGgtMi41QzQ1LjggNjQtNS40IDExOC43LjUgMTgzLjZjNC4yIDQ2LjEgMzkuNCA4My42IDgzLjggOTYuNmwxMDIuNSAzMGMxMi41IDMuNyAyMS4yIDE1LjMgMjEuMiAyOC4zIDAgMTYuMy0xMy4yIDI5LjUtMjkuNSAyOS41aC02Ni4zQzEwMCAzNjggODggMzY0LjMgNzggMzU3LjVjLTYuMS00LjEtMTQuMy0zLjEtMTkuNSAybC0zNC44IDM0Yy03LjEgNi45LTYuMSAxOC40IDEuOCAyNC41IDI0LjUgMTkuMiA1NS4xIDI5LjkgODYuNSAzMHY0OGMwIDguOCA3LjIgMTYgMTYgMTZoMzJjOC44IDAgMTYtNy4yIDE2LTE2di00OC4yYzQ2LjYtLjkgOTAuMy0yOC42IDEwNS43LTcyLjcgMjEuNS02MS42LTE0LjYtMTI0LjgtNzIuNS0xNDEuN3onO1xuXG5leHBvcnRzLmRlZmluaXRpb24gPSB7XG4gIHByZWZpeDogcHJlZml4LFxuICBpY29uTmFtZTogaWNvbk5hbWUsXG4gIGljb246IFtcbiAgICB3aWR0aCxcbiAgICBoZWlnaHQsXG4gICAgbGlnYXR1cmVzLFxuICAgIHVuaWNvZGUsXG4gICAgc3ZnUGF0aERhdGFcbiAgXX07XG5cbmV4cG9ydHMuZmFEb2xsYXJTaWduID0gZXhwb3J0cy5kZWZpbml0aW9uO1xuZXhwb3J0cy5wcmVmaXggPSBwcmVmaXg7XG5leHBvcnRzLmljb25OYW1lID0gaWNvbk5hbWU7XG5leHBvcnRzLndpZHRoID0gd2lkdGg7XG5leHBvcnRzLmhlaWdodCA9IGhlaWdodDtcbmV4cG9ydHMubGlnYXR1cmVzID0gbGlnYXR1cmVzO1xuZXhwb3J0cy51bmljb2RlID0gdW5pY29kZTtcbmV4cG9ydHMuc3ZnUGF0aERhdGEgPSBzdmdQYXRoRGF0YTsiLCIndXNlIHN0cmljdCc7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHByZWZpeCA9ICdmYXMnO1xudmFyIGljb25OYW1lID0gJ3N0YXInO1xudmFyIHdpZHRoID0gNTc2O1xudmFyIGhlaWdodCA9IDUxMjtcbnZhciBsaWdhdHVyZXMgPSBbXTtcbnZhciB1bmljb2RlID0gJ2YwMDUnO1xudmFyIHN2Z1BhdGhEYXRhID0gJ00yNTkuMyAxNy44TDE5NCAxNTAuMiA0Ny45IDE3MS41Yy0yNi4yIDMuOC0zNi43IDM2LjEtMTcuNyA1NC42bDEwNS43IDEwMy0yNSAxNDUuNWMtNC41IDI2LjMgMjMuMiA0NiA0Ni40IDMzLjdMMjg4IDQzOS42bDEzMC43IDY4LjdjMjMuMiAxMi4yIDUwLjktNy40IDQ2LjQtMzMuN2wtMjUtMTQ1LjUgMTA1LjctMTAzYzE5LTE4LjUgOC41LTUwLjgtMTcuNy01NC42TDM4MiAxNTAuMiAzMTYuNyAxNy44Yy0xMS43LTIzLjYtNDUuNi0yMy45LTU3LjQgMHonO1xuXG5leHBvcnRzLmRlZmluaXRpb24gPSB7XG4gIHByZWZpeDogcHJlZml4LFxuICBpY29uTmFtZTogaWNvbk5hbWUsXG4gIGljb246IFtcbiAgICB3aWR0aCxcbiAgICBoZWlnaHQsXG4gICAgbGlnYXR1cmVzLFxuICAgIHVuaWNvZGUsXG4gICAgc3ZnUGF0aERhdGFcbiAgXX07XG5cbmV4cG9ydHMuZmFTdGFyID0gZXhwb3J0cy5kZWZpbml0aW9uO1xuZXhwb3J0cy5wcmVmaXggPSBwcmVmaXg7XG5leHBvcnRzLmljb25OYW1lID0gaWNvbk5hbWU7XG5leHBvcnRzLndpZHRoID0gd2lkdGg7XG5leHBvcnRzLmhlaWdodCA9IGhlaWdodDtcbmV4cG9ydHMubGlnYXR1cmVzID0gbGlnYXR1cmVzO1xuZXhwb3J0cy51bmljb2RlID0gdW5pY29kZTtcbmV4cG9ydHMuc3ZnUGF0aERhdGEgPSBzdmdQYXRoRGF0YTsiLCIndXNlIHN0cmljdCc7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHByZWZpeCA9ICdmYXMnO1xudmFyIGljb25OYW1lID0gJ2V4Y2hhbmdlLWFsdCc7XG52YXIgd2lkdGggPSA1MTI7XG52YXIgaGVpZ2h0ID0gNTEyO1xudmFyIGxpZ2F0dXJlcyA9IFtdO1xudmFyIHVuaWNvZGUgPSAnZjM2Mic7XG52YXIgc3ZnUGF0aERhdGEgPSAnTTAgMTY4di0xNmMwLTEzLjI1NSAxMC43NDUtMjQgMjQtMjRoMzYwVjgwYzAtMjEuMzY3IDI1Ljg5OS0zMi4wNDIgNDAuOTcxLTE2Ljk3MWw4MCA4MGM5LjM3MiA5LjM3MyA5LjM3MiAyNC41NjkgMCAzMy45NDFsLTgwIDgwQzQwOS45NTYgMjcxLjk4MiAzODQgMjYxLjQ1NiAzODQgMjQwdi00OEgyNGMtMTMuMjU1IDAtMjQtMTAuNzQ1LTI0LTI0em00ODggMTUySDEyOHYtNDhjMC0yMS4zMTQtMjUuODYyLTMyLjA4LTQwLjk3MS0xNi45NzFsLTgwIDgwYy05LjM3MiA5LjM3My05LjM3MiAyNC41NjkgMCAzMy45NDFsODAgODBDMTAyLjA1NyA0NjMuOTk3IDEyOCA0NTMuNDM3IDEyOCA0MzJ2LTQ4aDM2MGMxMy4yNTUgMCAyNC0xMC43NDUgMjQtMjR2LTE2YzAtMTMuMjU1LTEwLjc0NS0yNC0yNC0yNHonO1xuXG5leHBvcnRzLmRlZmluaXRpb24gPSB7XG4gIHByZWZpeDogcHJlZml4LFxuICBpY29uTmFtZTogaWNvbk5hbWUsXG4gIGljb246IFtcbiAgICB3aWR0aCxcbiAgICBoZWlnaHQsXG4gICAgbGlnYXR1cmVzLFxuICAgIHVuaWNvZGUsXG4gICAgc3ZnUGF0aERhdGFcbiAgXX07XG5cbmV4cG9ydHMuZmFFeGNoYW5nZUFsdCA9IGV4cG9ydHMuZGVmaW5pdGlvbjtcbmV4cG9ydHMucHJlZml4ID0gcHJlZml4O1xuZXhwb3J0cy5pY29uTmFtZSA9IGljb25OYW1lO1xuZXhwb3J0cy53aWR0aCA9IHdpZHRoO1xuZXhwb3J0cy5oZWlnaHQgPSBoZWlnaHQ7XG5leHBvcnRzLmxpZ2F0dXJlcyA9IGxpZ2F0dXJlcztcbmV4cG9ydHMudW5pY29kZSA9IHVuaWNvZGU7XG5leHBvcnRzLnN2Z1BhdGhEYXRhID0gc3ZnUGF0aERhdGE7IiwiJ3VzZSBzdHJpY3QnO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBwcmVmaXggPSAnZmFzJztcbnZhciBpY29uTmFtZSA9ICdjYXJldC11cCc7XG52YXIgd2lkdGggPSAzMjA7XG52YXIgaGVpZ2h0ID0gNTEyO1xudmFyIGxpZ2F0dXJlcyA9IFtdO1xudmFyIHVuaWNvZGUgPSAnZjBkOCc7XG52YXIgc3ZnUGF0aERhdGEgPSAnTTI4OC42NjIgMzUySDMxLjMzOGMtMTcuODE4IDAtMjYuNzQxLTIxLjU0My0xNC4xNDItMzQuMTQybDEyOC42NjItMTI4LjY2MmM3LjgxLTcuODEgMjAuNDc0LTcuODEgMjguMjg0IDBsMTI4LjY2MiAxMjguNjYyYzEyLjYgMTIuNTk5IDMuNjc2IDM0LjE0Mi0xNC4xNDIgMzQuMTQyeic7XG5cbmV4cG9ydHMuZGVmaW5pdGlvbiA9IHtcbiAgcHJlZml4OiBwcmVmaXgsXG4gIGljb25OYW1lOiBpY29uTmFtZSxcbiAgaWNvbjogW1xuICAgIHdpZHRoLFxuICAgIGhlaWdodCxcbiAgICBsaWdhdHVyZXMsXG4gICAgdW5pY29kZSxcbiAgICBzdmdQYXRoRGF0YVxuICBdfTtcblxuZXhwb3J0cy5mYUNhcmV0VXAgPSBleHBvcnRzLmRlZmluaXRpb247XG5leHBvcnRzLnByZWZpeCA9IHByZWZpeDtcbmV4cG9ydHMuaWNvbk5hbWUgPSBpY29uTmFtZTtcbmV4cG9ydHMud2lkdGggPSB3aWR0aDtcbmV4cG9ydHMuaGVpZ2h0ID0gaGVpZ2h0O1xuZXhwb3J0cy5saWdhdHVyZXMgPSBsaWdhdHVyZXM7XG5leHBvcnRzLnVuaWNvZGUgPSB1bmljb2RlO1xuZXhwb3J0cy5zdmdQYXRoRGF0YSA9IHN2Z1BhdGhEYXRhOyIsIid1c2Ugc3RyaWN0Jztcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgcHJlZml4ID0gJ2Zhcyc7XG52YXIgaWNvbk5hbWUgPSAnY2FyZXQtZG93bic7XG52YXIgd2lkdGggPSAzMjA7XG52YXIgaGVpZ2h0ID0gNTEyO1xudmFyIGxpZ2F0dXJlcyA9IFtdO1xudmFyIHVuaWNvZGUgPSAnZjBkNyc7XG52YXIgc3ZnUGF0aERhdGEgPSAnTTMxLjMgMTkyaDI1Ny4zYzE3LjggMCAyNi43IDIxLjUgMTQuMSAzNC4xTDE3NC4xIDM1NC44Yy03LjggNy44LTIwLjUgNy44LTI4LjMgMEwxNy4yIDIyNi4xQzQuNiAyMTMuNSAxMy41IDE5MiAzMS4zIDE5MnonO1xuXG5leHBvcnRzLmRlZmluaXRpb24gPSB7XG4gIHByZWZpeDogcHJlZml4LFxuICBpY29uTmFtZTogaWNvbk5hbWUsXG4gIGljb246IFtcbiAgICB3aWR0aCxcbiAgICBoZWlnaHQsXG4gICAgbGlnYXR1cmVzLFxuICAgIHVuaWNvZGUsXG4gICAgc3ZnUGF0aERhdGFcbiAgXX07XG5cbmV4cG9ydHMuZmFDYXJldERvd24gPSBleHBvcnRzLmRlZmluaXRpb247XG5leHBvcnRzLnByZWZpeCA9IHByZWZpeDtcbmV4cG9ydHMuaWNvbk5hbWUgPSBpY29uTmFtZTtcbmV4cG9ydHMud2lkdGggPSB3aWR0aDtcbmV4cG9ydHMuaGVpZ2h0ID0gaGVpZ2h0O1xuZXhwb3J0cy5saWdhdHVyZXMgPSBsaWdhdHVyZXM7XG5leHBvcnRzLnVuaWNvZGUgPSB1bmljb2RlO1xuZXhwb3J0cy5zdmdQYXRoRGF0YSA9IHN2Z1BhdGhEYXRhOyIsIjxzdmVsdGU6aGVhZD5cblx0PHRpdGxlPuyKpO2KuOumrOuouCDsiJzsnIQgLSDtirjsiJhnZzwvdGl0bGU+XG48L3N2ZWx0ZTpoZWFkPlxuXG48c3ZnIGNsYXNzPVwiaGlkZGVuXCI+XG48L3N2Zz5cbjxkaXYgY2xhc3M9XCJmbGV4IGZsZXgtY29sIG1kOml0ZW1zLXN0YXJ0IGl0ZW1zLXN0cmV0Y2ggY29udGFpbmVyIG0tYXV0byB3LWZ1bGxcIj5cbiAgPGRpdiBjbGFzcz1cInB0LTEwIHBiLTIgbS1hdXRvXCI+XG4gICAgPFN0cmVhbWVyQXV0b0NvbXBsZXRlIGJpbmQ6b25zZWxlY3Q9e29uX3N0cmVhbWVyX3NlYXJjaH0gXG4gICAgICAgICAgcGxhY2Vob2xkZXI9XCLsiqTtirjrpqzrqLgg6rKA7IOJXCIgXG4gICAgICAgICAgaW5wdXRpZD1cInN0cmVhbWVyLXNlYXJjaC1pbnB1dFwiIFxuICAgICAgICAgIGlkPVwibmF2aWdhdGlvbi1zdHJlYW1lci1zZWFyY2hcIlxuICAgICAgICAgIGNsYXNzPVwidy1mdWxsIG1kOnctMTI4XCJcbiAgICAgICAgICBpbnB1dF9jbGFzcz1cImJvcmRlciB3LWZ1bGwgdGV4dC1ub3JtYWwgcC02IHB4LTcgcHktNCBwbC0xMCBiZy13aGl0ZSBzaGFkb3dcIlxuICAgICAgICAgIGF1dG9jb21wbGV0ZV9jbGFzcz1cInctZnVsbFwiXG4gICAgICAgICAgaWNvbl9jbGFzcz1cInctNCBoLTQgbWwtMlwiXG4gICAgICAgICAgLz5cbiAgICA8ZGl2IGNsYXNzPVwidGV4dC1zbSB0ZXh0LWdyYXktNDAwIG10LTIgdGV4dC1jZW50ZXJcIj5cbiAgICAgICog7Iuc7LKt7J6Q6rCAIDI166qFIOydtOyDgeyduCDsiqTtirjrpqzrqLjqsIAg7J6Q64+Z7Jy866GcIOuTseuhneuQqeuLiOuLpC5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG4gIDxQYW5lbCBjbGFzcz1cIm1kOnAtNFwiPlxuICAgIDxoMyBzbG90PVwidGl0bGVcIiBjbGFzcz1cImlubGluZS1ibG9jayBtZDpmb250LWJhc2UgZm9udC0yeGxcIj4gXG4gICAgICDsi6Tsi5zqsIQg7Iuc7LKt7J6QIOydtOuPmVxuICAgICAgPFRpcD5cbiAgICAgICAgPHNwYW4gc2xvdD1cInRpcFwiPiBcbiAgICAgICAgICDsiqTtirjrpqzrqLgg6rCEIOyLnOyyreyekOydmCDtnZDrpoTsnYQg7Iuk7Iuc6rCE7Jy866GcIOyCtO2OtOuzvOyImCDsnojsirXri4jri6QuPGJyPlxuICAgICAgICAgIOqwgSDtmZTsgrTtkZzrpbwg7YG066at7ZW07IScIOuNlCDsnpDshLjtlZwg7KCV67O066W8IO2ZleyduO2VtOuztOyEuOyalC5cbiAgICAgICAgPGJyPlxuICAgICAgICAqIOyVvSDtlZwg7Iuc6rCEIOqwhOqyqeycvOuhnCDsl4XrjbDsnbTtirjrkKnri4jri6QuXG4gICAgICAgIDwvc3Bhbj5cbiAgICAgIDwvVGlwPlxuICAgICAgeyNpZiB2aWV3ZXJfbWlncmF0aW9uX2NvdW50X3JhbmtpbmcubGVuZ3RofVxuICAgICAgICA8c3BhbiBjbGFzcz1cInRleHQtZ3JheS02MDAgbWwtMiB0ZXh0LXNtXCI+XG4gICAgICAgICAge3RpbWVfYWdvKG5ldyBEYXRlKHZpZXdlcl9taWdyYXRpb25fY291bnRfcmFua2luZ1swXS50aW1lKSl97JeQIOyXheuNsOydtO2KuOuQqFxuICAgICAgICA8L3NwYW4+XG4gICAgICB7L2lmfVxuICAgIDwvaDM+XG4gICAgPGRpdiBzbG90PVwiY29udGVudHNcIiBjbGFzcz1cInctZnVsbCB0ZXh0LXhzIHdoaXRlc3BhY2Utbm8td3JhcCBmbGV4IGZsZXgtcm93IGZsZXgtd3JhcFwiPlxuICAgICAgeyNlYWNoIHZpZXdlcl9taWdyYXRpb25fY291bnRfcmFua2luZyBhcyB2LCBpICh2LnNvdXJjZV9pZCArIFwiLVwiICsgdi5kZXN0aW5hdGlvbl9pZCl9XG4gICAgICAgIDxkaXYgY2xhc3M9XCJtZDp3LTEvNSB3LTEvMiBwLTJcIj5cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cImZsZXggZmxleC1yb3cgaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyXCI+XG4gICAgICAgICAgICA8YSBjbGFzcz1cImZsZXgtbm9uZSBwLTJcIiBocmVmPVwiL3N0cmVhbWVyL3t2LnNvdXJjZV9pZH1cIj5cbiAgICAgICAgICAgICAgPGltZyBjbGFzcz1cInJvdW5kZWQtZnVsbCBoLTEyIHctMTIgYm9yZGVyIGJvcmRlci1ncmF5LTYwMFwiIHNyYz17di5zb3VyY2VfcHJvZmlsZV9pbWFnZV91cmx9IC8+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwdC0xIHRydW5jYXRlIHctMTJcIiB0aXRsZT1cInt2LnNvdXJjZV9uYW1lfVwiPnt2LnNvdXJjZV9uYW1lfTwvZGl2PlxuICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICAgPGEgY2xhc3M9XCJ0ZXh0LWNlbnRlclwiIGhyZWY9XCIvbWlncmF0aW9uP2lkMT17di5zb3VyY2VfaWR9JmlkMj17di5kZXN0aW5hdGlvbl9pZH0mZGF0ZT17bmV3IERhdGUoKS5nZXRUaW1lKCl9XCI+XG4gICAgICAgICAgICAgIDxzdmcgY2xhc3M9XCJ3LTggaC00IG92ZXJmbG93LXZpc2libGUgaW5saW5lLWJsb2NrXCIgdmlld0JveD1cIjAsMCwyMCwxXCI+XG4gICAgICAgICAgICAgICAgPGRlZnM+XG4gICAgICAgICAgICAgICAgICA8bWFya2VyIGlkPVwiaGVhZFwiIFxuICAgICAgICAgICAgICAgICAgICBtYXJrZXJXaWR0aD1cIjJcIiBtYXJrZXJIZWlnaHQ9XCI0XCIgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZYPVwiMC4xXCIgcmVmWT1cIjJcIiBvcmllbnQ9XCJhdXRvXCIgPlxuICAgICAgICAgICAgICAgICAgICA8cGF0aCBkPVwiTTAsMCBWNCBMMiwyIFpcIiBmaWxsPVwiY3VycmVudENvbG9yXCIgLz5cbiAgICAgICAgICAgICAgICA8L2RlZnM+XG4gICAgICAgICAgICAgICAgICA8cGF0aCBmaWxsPVwiY3VycmVudENvbG9yXCIgZD1cIk0wLDAgTHsyMC1NYXRoLnNxcnQodi5taWdyYXRpb25fY291bnQpLzEwKjJ9LDBcIiBzdHJva2Utd2lkdGg9XCJ7TWF0aC5zcXJ0KHYubWlncmF0aW9uX2NvdW50KS8xMH1cIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBtYXJrZXItZW5kPVwidXJsKCNoZWFkKVwiIC8+XG4gICAgICAgICAgICAgIDwvc3ZnPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidGV4dC1ncmF5LTYwMFwiPlxuICAgICAgICAgICAgICAgIHt2Lm1pZ3JhdGlvbl9jb3VudH3rqoVcbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICA8YSBjbGFzcz1cImZsZXgtbm9uZSBwLTJcIiBocmVmPVwiL3N0cmVhbWVyL3t2LmRlc3RpbmF0aW9uX2lkfVwiPlxuICAgICAgICAgICAgICA8aW1nIGNsYXNzPVwicm91bmRlZC1mdWxsIGgtMTIgdy0xMiBib3JkZXIgYm9yZGVyLWdyYXktNjAwXCIgc3JjPXt2LmRlc3RpbmF0aW9uX3Byb2ZpbGVfaW1hZ2VfdXJsfSAvPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicHQtMSB0cnVuY2F0ZSB3LTEyXCIgdGl0bGU9XCJ7di5kZXN0aW5hdGlvbl9uYW1lfVwiPnt2LmRlc3RpbmF0aW9uX25hbWV9PC9kaXY+XG4gICAgICAgICAgICA8L2E+XG4gICAgICAgICAgPC9zcGFuPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIHsvZWFjaH1cbiAgICAgICAgPGJ1dHRvbiBvbjpjbGljaz17bG9hZF92aWV3ZXJfbWlncmF0aW9uX2NvdW50X3Jhbmtpbmd9IGNsYXNzPVwidy1mdWxsIHB5LTQgYm9yZGVyLXRcIj5cbiAgICAgICAgICAgIOuNlCDrs7TquLBcbiAgICAgICAgPC9idXR0b24+XG4gICAgPC9kaXY+XG4gIDwvUGFuZWw+XG4gIDxQYW5lbCBjbGFzcz1cIm1kOnAtNFwiPlxuICAgIDxoMyBzbG90PVwidGl0bGVcIiBjbGFzcz1cImlubGluZS1ibG9jayBtZDpmb250LWJhc2UgZm9udC0yeGxcIj4gXG4gICAgICDsiqTtirjrpqzrqLgg7Iic7JyEXG4gICAgICA8VGlwPlxuICAgICAgICA8c3BhbiBzbG90PVwidGlwXCI+IFxuICAgICAgICDri6TslpHtlZwg7KeA7ZGc66W8IOq4sOykgOycvOuhnCDsiqTtirjrpqzrqLgg7Iic7JyE66W8IO2ZleyduO2VoCDsiJgg7J6I7Iq164uI64ukLjxicj4gXG4gICAgICAgIO2RnCDsg4Hri6jsnZgg6rCBIOyngO2RnOulvCDtgbTrpq3tlZjsl6wg7KCV66Cs7Iuc7Lyc67O07IS47JqULjxicj5cbiAgICAgICAgKiDslb0gNeu2hCDqsITqsqnsnLzroZwg7JeF642w7J207Yq465Cp64uI64ukLlxuICAgICAgICA8L3NwYW4+XG4gICAgICA8L1RpcD5cbiAgICAgIHsjaWYgdmlld2VyX21pZ3JhdGlvbl9jb3VudF9yYW5raW5nLmxlbmd0aH1cbiAgICAgICAgPHNwYW4gY2xhc3M9XCJ0ZXh0LWdyYXktNjAwIG1sLTIgdGV4dC1zbVwiPlxuICAgICAgICAgIHt0aW1lX2FnbyhuZXcgRGF0ZShyYW5raW5nX3VwZGF0ZV90aW1lKSl97JeQIOyXheuNsOydtO2KuOuQqFxuICAgICAgICA8L3NwYW4+XG4gICAgICB7L2lmfVxuICAgIDwvaDM+XG4gICAgPHRhYmxlIHNsb3Q9XCJjb250ZW50c1wiIGNsYXNzPVwidy1mdWxsIHRleHQteHMgd2hpdGVzcGFjZS1uby13cmFwIHN0cmVhbWVyLXJhbmtpbmdcIiB3aWR0aD1cIjEwMDBcIj5cbiAgICAgIDx0aGVhZD5cbiAgICAgICAgPHRyIGNsYXNzPVwiYm9yZGVyLWIgYm9yZGVyLWdyYXktNDAwXCI+XG4gICAgICAgICAgPHRoIGNsYXNzPVwiXCIgd2lkdGg9XCI1MFwiPuyInOychDwvdGg+XG4gICAgICAgICAgPHRoIHdpZHRoPVwiNDAwXCI+7Iqk7Yq466as66i4PC90aD5cbiAgICAgICAgICA8dGggd2lkdGg9XCIxMDBcIiBjbGFzcz1cImdyb3VwIGN1cnNvci1wb2ludGVyIGhvdmVyOmJnLXJlZC02MDAgaG92ZXI6dGV4dC13aGl0ZSB0ZXh0LXJlZC02MDAgYm9yZGVyLXJlZC02MDBcIiBcbiAgICAgICAgICAgICAgY2xhc3M6b3JkZXJlZD17c3RhdGUub3JkZXJfYnk9PVwiY2hhdHRpbmdfc3BlZWRcIn0gXG4gICAgICAgICAgICAgIG9uOmNsaWNrPXtlPT5jaGFuZ2Vfb3JkZXIoXCJjaGF0dGluZ19zcGVlZFwiLCB0cnVlKX0gdGl0bGU9XCLsi6Tsi5zqsIQg7LGE7YyF7IaN64+EXCI+XG4gICAgICAgICAgICB7I2lmIHN0YXRlLm9yZGVyX2J5ID09IFwiY2hhdHRpbmdfc3BlZWRcIn1cbiAgICAgICAgICAgICAgeyNpZiBzdGF0ZS5kZXNjfVxuICAgICAgICAgICAgICAgIDxGYUljb24gaWNvbj17ZmFDYXJldERvd259IGNsYXNzPVwidy00IGgtNFwiIC8+XG4gICAgICAgICAgICAgIHs6ZWxzZX1cbiAgICAgICAgICAgICAgICA8RmFJY29uIGljb249e2ZhQ2FyZXRVcH0gY2xhc3M9XCJ3LTQgaC00XCIgLz5cbiAgICAgICAgICAgICAgey9pZn1cbiAgICAgICAgICAgIHsvaWZ9XG4gICAgICAgICAgICA8RmFJY29uIGljb249e2ZhQ29tbWVudH0gY2xhc3M9XCJ3LTQgaC00XCIgLz5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwieGw6aW5saW5lIGhpZGRlbiB0ZXh0LWdyYXktODAwIGdyb3VwLWhvdmVyOnRleHQtd2hpdGVcIj5cbiAgICAgICAgICAgICAg7Iuk7Iuc6rCEIOyxhO2MheyGjeuPhFxuICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgIDwvdGg+XG4gICAgICAgICAgPHRoIHdpZHRoPVwiMTAwXCIgY2xhc3M9XCJncm91cCBjdXJzb3ItcG9pbnRlciBob3ZlcjpiZy15ZWxsb3ctNjAwIGhvdmVyOnRleHQtd2hpdGUgdGV4dC15ZWxsb3ctNjAwIGJvcmRlci15ZWxsb3ctNjAwXCIgXG4gICAgICAgICAgICAgIGNsYXNzOm9yZGVyZWQ9e3N0YXRlLm9yZGVyX2J5PT1cInZpZXdlcl9jb3VudFwifVxuICAgICAgICAgICAgICBvbjpjbGljaz17ZT0+Y2hhbmdlX29yZGVyKFwidmlld2VyX2NvdW50XCIsIHRydWUpfSB0aXRsZT1cIuyLpOyyreyekFwiPlxuICAgICAgICAgICAgeyNpZiBzdGF0ZS5vcmRlcl9ieSA9PSBcInZpZXdlcl9jb3VudFwifVxuICAgICAgICAgICAgICB7I2lmIHN0YXRlLmRlc2N9XG4gICAgICAgICAgICAgICAgPEZhSWNvbiBpY29uPXtmYUNhcmV0RG93bn0gY2xhc3M9XCJ3LTQgaC00XCIgLz5cbiAgICAgICAgICAgICAgezplbHNlfVxuICAgICAgICAgICAgICAgIDxGYUljb24gaWNvbj17ZmFDYXJldFVwfSBjbGFzcz1cInctNCBoLTRcIiAvPlxuICAgICAgICAgICAgICB7L2lmfVxuICAgICAgICAgICAgey9pZn1cbiAgICAgICAgICAgIDxGYUljb24gaWNvbj17ZmFVc2VyfSBjbGFzcz1cInctNCBoLTRcIiAvPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ4bDppbmxpbmUgaGlkZGVuIHRleHQtZ3JheS04MDAgZ3JvdXAtaG92ZXI6dGV4dC13aGl0ZVwiPlxuICAgICAgICAgICAgICDsi6Tssq3snpAgXG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgPC90aD5cbiAgICAgICAgICA8dGggd2lkdGg9XCIxMDBcIiBjbGFzcz1cImdyb3VwIGN1cnNvci1wb2ludGVyIGhvdmVyOmJnLXB1cnBsZS02MDAgaG92ZXI6dGV4dC13aGl0ZSB0ZXh0LXB1cnBsZS02MDAgYm9yZGVyLXB1cnBsZS02MDBcIiBcbiAgICAgICAgICAgICAgY2xhc3M6b3JkZXJlZD17c3RhdGUub3JkZXJfYnk9PVwiZm9sbG93ZXJfY291bnRcIn1cbiAgICAgICAgICAgICAgb246Y2xpY2s9e2U9PmNoYW5nZV9vcmRlcihcImZvbGxvd2VyX2NvdW50XCIsIHRydWUpfSB0aXRsZT1cIu2MlOuhnOybjFwiPlxuICAgICAgICAgICAgeyNpZiBzdGF0ZS5vcmRlcl9ieSA9PSBcImZvbGxvd2VyX2NvdW50XCJ9XG4gICAgICAgICAgICAgIHsjaWYgc3RhdGUuZGVzY31cbiAgICAgICAgICAgICAgICA8RmFJY29uIGljb249e2ZhQ2FyZXREb3dufSBjbGFzcz1cInctNCBoLTRcIiAvPlxuICAgICAgICAgICAgICB7OmVsc2V9XG4gICAgICAgICAgICAgICAgPEZhSWNvbiBpY29uPXtmYUNhcmV0VXB9IGNsYXNzPVwidy00IGgtNFwiIC8+XG4gICAgICAgICAgICAgIHsvaWZ9XG4gICAgICAgICAgICB7L2lmfVxuICAgICAgICAgICAgPEZhSWNvbiBpY29uPXtmYVN0YXJ9IGNsYXNzPVwidy00IGgtNFwiIC8+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cInhsOmlubGluZSBoaWRkZW4gdGV4dC1ncmF5LTgwMCBncm91cC1ob3Zlcjp0ZXh0LXdoaXRlXCI+XG4gICAgICAgICAgICAgIO2MlOuhnOybjFxuICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgIDwvdGg+XG4gICAgICAgICAgPHRoIHdpZHRoPVwiMTAwXCIgY2xhc3M9XCJncm91cCBjdXJzb3ItcG9pbnRlciBob3ZlcjpiZy1vcmFuZ2UtNjAwIGhvdmVyOnRleHQtd2hpdGUgdGV4dC1vcmFuZ2UtNjAwIGJvcmRlci1vcmFuZ2UtNjAwXCIgXG4gICAgICAgICAgICAgIGNsYXNzOm9yZGVyZWQ9e3N0YXRlLm9yZGVyX2J5PT1cImF2ZXJhZ2Vfdmlld2VyX2NvdW50XCJ9XG4gICAgICAgICAgICAgIG9uOmNsaWNrPXtlPT5jaGFuZ2Vfb3JkZXIoXCJhdmVyYWdlX3ZpZXdlcl9jb3VudFwiLCB0cnVlKX0gdGl0bGU9XCLtj4nssq3snpBcIj5cbiAgICAgICAgICAgIHsjaWYgc3RhdGUub3JkZXJfYnkgPT0gXCJhdmVyYWdlX3ZpZXdlcl9jb3VudFwifVxuICAgICAgICAgICAgICB7I2lmIHN0YXRlLmRlc2N9XG4gICAgICAgICAgICAgICAgPEZhSWNvbiBpY29uPXtmYUNhcmV0RG93bn0gY2xhc3M9XCJ3LTQgaC00XCIgLz5cbiAgICAgICAgICAgICAgezplbHNlfVxuICAgICAgICAgICAgICAgIDxGYUljb24gaWNvbj17ZmFDYXJldFVwfSBjbGFzcz1cInctNCBoLTRcIiAvPlxuICAgICAgICAgICAgICB7L2lmfVxuICAgICAgICAgICAgey9pZn1cbiAgICAgICAgICAgIDxGYUljb24gaWNvbj17ZmFVc2VyQ2xvY2t9IGNsYXNzPVwidy01IGgtNFwiIC8+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cInhsOmlubGluZSBoaWRkZW4gdGV4dC1ncmF5LTgwMCBncm91cC1ob3Zlcjp0ZXh0LXdoaXRlXCI+XG4gICAgICAgICAgICAgIO2PieyyreyekCBcbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICA8L3RoPlxuICAgICAgICAgIDx0aCB3aWR0aD1cIjEwMFwiIGNsYXNzPVwiZ3JvdXAgY3Vyc29yLXBvaW50ZXIgaG92ZXI6YmctZ3JlZW4tNjAwIGhvdmVyOnRleHQtd2hpdGUgdGV4dC1ncmVlbi02MDAgaGlkZGVuIG1kOnRhYmxlLWNlbGwgYm9yZGVyLWdyZWVuLTYwMFwiIFxuICAgICAgICAgICAgICBjbGFzczpvcmRlcmVkPXtzdGF0ZS5vcmRlcl9ieT09XCJ2aWV3ZXJfY2hhdHRlcl9yYXRpb1wifVxuICAgICAgICAgICAgICBvbjpjbGljaz17ZT0+Y2hhbmdlX29yZGVyKFwidmlld2VyX2NoYXR0ZXJfcmF0aW9cIiwgZmFsc2UpfSB0aXRsZT1cIuuhnOq3uOyduC/si6Tssq3snpAg67mE7JyoXCI+XG4gICAgICAgICAgICB7I2lmIHN0YXRlLm9yZGVyX2J5ID09IFwidmlld2VyX2NoYXR0ZXJfcmF0aW9cIn1cbiAgICAgICAgICAgICAgeyNpZiBzdGF0ZS5kZXNjfVxuICAgICAgICAgICAgICAgIDxGYUljb24gaWNvbj17ZmFDYXJldERvd259IGNsYXNzPVwidy00IGgtNFwiIC8+XG4gICAgICAgICAgICAgIHs6ZWxzZX1cbiAgICAgICAgICAgICAgICA8RmFJY29uIGljb249e2ZhQ2FyZXRVcH0gY2xhc3M9XCJ3LTQgaC00XCIgLz5cbiAgICAgICAgICAgICAgey9pZn1cbiAgICAgICAgICAgIHsvaWZ9XG4gICAgICAgICAgICA8RmFJY29uIGljb249e2ZhVXNlckxvY2t9IGNsYXNzPVwidy01IGgtNFwiIC8+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cInhsOmlubGluZSBoaWRkZW4gdGV4dC1ncmF5LTgwMCBncm91cC1ob3Zlcjp0ZXh0LXdoaXRlXCI+XG4gICAgICAgICAgICAgIOuhnOq3uOyduOu5hFxuICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgIDwvdGg+XG4gICAgICAgICAgPHRoIHdpZHRoPVwiMTAwXCIgY2xhc3M9XCJncm91cCBjdXJzb3ItcG9pbnRlciBob3ZlcjpiZy10ZWFsLTYwMCBob3Zlcjp0ZXh0LXdoaXRlIHRleHQtdGVhbC02MDAgaGlkZGVuIG1kOnRhYmxlLWNlbGwgYm9yZGVyLXRlYWwtNjAwXCIgXG4gICAgICAgICAgICAgIGNsYXNzOm9yZGVyZWQ9e3N0YXRlLm9yZGVyX2J5PT1cImF2ZXJhZ2Vfc3Vic2NyaWJlcl9yYXRpb1wifVxuICAgICAgICAgICAgICBvbjpjbGljaz17ZT0+Y2hhbmdlX29yZGVyKFwiYXZlcmFnZV9zdWJzY3JpYmVyX3JhdGlvXCIsIHRydWUpfSB0aXRsZT1cIuq1rOuPheyekOu5hOycqFwiPlxuICAgICAgICAgICAgeyNpZiBzdGF0ZS5vcmRlcl9ieSA9PSBcImF2ZXJhZ2Vfc3Vic2NyaWJlcl9yYXRpb1wifVxuICAgICAgICAgICAgICB7I2lmIHN0YXRlLmRlc2N9XG4gICAgICAgICAgICAgICAgPEZhSWNvbiBpY29uPXtmYUNhcmV0RG93bn0gY2xhc3M9XCJ3LTQgaC00XCIgLz5cbiAgICAgICAgICAgICAgezplbHNlfVxuICAgICAgICAgICAgICAgIDxGYUljb24gaWNvbj17ZmFDYXJldFVwfSBjbGFzcz1cInctNCBoLTRcIiAvPlxuICAgICAgICAgICAgICB7L2lmfVxuICAgICAgICAgICAgey9pZn1cbiAgICAgICAgICAgIDxzcGFuPlxuICAgICAgICAgICAgICA8RmFJY29uIGljb249e2ZhVXNlcn0gY2xhc3M9XCJ3LTQgaC00XCIgLz5cbiAgICAgICAgICAgICAgPEZhSWNvbiBpY29uPXtmYURvbGxhclNpZ259IGNsYXNzPVwidy0zIGgtMyAtbWwtMiAtbXQtMlwiIC8+XG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cInhsOmlubGluZSBoaWRkZW4gdGV4dC1ncmF5LTgwMCBncm91cC1ob3Zlcjp0ZXh0LXdoaXRlXCI+XG4gICAgICAgICAgICAgIOq1rOuPheyekOu5hCBcbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICA8L3RoPlxuICAgICAgICAgIDx0aCB3aWR0aD1cIjEwMFwiIGNsYXNzPVwiZ3JvdXAgY3Vyc29yLXBvaW50ZXIgaG92ZXI6YmctYmx1ZS02MDAgaG92ZXI6dGV4dC13aGl0ZSB0ZXh0LWJsdWUtNjAwIGJvcmRlci1ibHVlLTYwMCBoaWRkZW4gbWQ6dGFibGUtY2VsbFwiIFxuICAgICAgICAgICAgICBjbGFzczpvcmRlcmVkPXtzdGF0ZS5vcmRlcl9ieT09XCJzdHJlYW1pbmdfaG91cnNfcGVyX3dlZWtcIn1cbiAgICAgICAgICAgICAgb246Y2xpY2s9e2U9PmNoYW5nZV9vcmRlcihcInN0cmVhbWluZ19ob3Vyc19wZXJfd2Vla1wiLCB0cnVlKX0gdGl0bGU9XCLrsKnshqHsi5zqsIRcIj5cbiAgICAgICAgICAgIHsjaWYgc3RhdGUub3JkZXJfYnkgPT0gXCJzdHJlYW1pbmdfaG91cnNfcGVyX3dlZWtcIn1cbiAgICAgICAgICAgICAgeyNpZiBzdGF0ZS5kZXNjfVxuICAgICAgICAgICAgICAgIDxzdmcgYXJlYS1oaWRkZW49XCJ0cnVlXCIgcm9sZT1cImltZ1wiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIHtmYUNhcmV0RG93bi5pY29uWzBdfSB7ZmFDYXJldERvd24uaWNvblsxXX1cIiBjbGFzcz1cInctNCBoLTQgb3ZlcmZsb3ctdmlzaWJsZSBpbmxpbmUtYmxvY2tcIj5cbiAgICAgICAgICAgICAgICAgIDxwYXRoIGZpbGw9XCJjdXJyZW50Q29sb3JcIiBkPVwie2ZhQ2FyZXREb3duLmljb25bNF19XCIvPlxuICAgICAgICAgICAgICAgIDwvc3ZnPlxuICAgICAgICAgICAgICB7OmVsc2V9XG4gICAgICAgICAgICAgICAgPHN2ZyBhcmVhLWhpZGRlbj1cInRydWVcIiByb2xlPVwiaW1nXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAge2ZhQ2FyZXRVcC5pY29uWzBdfSB7ZmFDYXJldFVwLmljb25bMV19XCIgY2xhc3M9XCJ3LTQgaC00IG92ZXJmbG93LXZpc2libGUgaW5saW5lLWJsb2NrXCI+XG4gICAgICAgICAgICAgICAgICA8cGF0aCBmaWxsPVwiY3VycmVudENvbG9yXCIgZD1cIntmYUNhcmV0VXAuaWNvbls0XX1cIi8+XG4gICAgICAgICAgICAgICAgPC9zdmc+XG4gICAgICAgICAgICAgIHsvaWZ9XG4gICAgICAgICAgICB7L2lmfVxuICAgICAgICAgICAgeyNpZiBzdGF0ZS5vcmRlcl9ieSA9PSBcInN0cmVhbWluZ19ob3Vyc19wZXJfd2Vla1wifVxuICAgICAgICAgICAgICB7I2lmIHN0YXRlLmRlc2N9XG4gICAgICAgICAgICAgICAgPEZhSWNvbiBpY29uPXtmYUNhcmV0RG93bn0gY2xhc3M9XCJ3LTQgaC00XCIgLz5cbiAgICAgICAgICAgICAgezplbHNlfVxuICAgICAgICAgICAgICAgIDxGYUljb24gaWNvbj17ZmFDYXJldFVwfSBjbGFzcz1cInctNCBoLTRcIiAvPlxuICAgICAgICAgICAgICB7L2lmfVxuICAgICAgICAgICAgey9pZn1cbiAgICAgICAgICAgIDxGYUljb24gaWNvbj17ZmFIb3VyZ2xhc3NIYWxmfSBjbGFzcz1cInctNCBoLTRcIiAvPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ4bDppbmxpbmUgaGlkZGVuIHRleHQtZ3JheS04MDAgZ3JvdXAtaG92ZXI6dGV4dC13aGl0ZVwiPlxuICAgICAgICAgICAgICDrsKnshqHsi5zqsIQgXG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgPC90aD5cbiAgICAgICAgICA8dGggd2lkdGg9XCIxMDBcIiBjbGFzcz1cImhpZGRlbiBtZDp0YWJsZS1jZWxsXCIgdGl0bGU9XCLrp4jsp4Drp4kg67Cp7IahXCI+XG4gICAgICAgICAgICA8RmFJY29uIGljb249e2ZhSGlzdG9yeX0gY2xhc3M9XCJ3LTQgaC00XCIgLz5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwieGw6aW5saW5lIGhpZGRlbiB0ZXh0LWdyYXktODAwXCI+XG4gICAgICAgICAgICAgIOuniOyngOuniSDrsKnshqFcbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICA8L3RoPlxuICAgICAgICA8L3RyPlxuICAgICAgPC90aGVhZD5cbiAgICAgIDx0Ym9keSBjbGFzcz1cIlwiPlxuICAgICAgICB7I2VhY2ggcmFua2luZ3NbSlNPTi5zdHJpbmdpZnkoc3RhdGUpXSBhcyBzdHJlYW1lciwgaSAoc3RyZWFtZXIuaWQpfVxuICAgICAgICA8dHIgY2xhc3M9XCJvZGQ6YmctZ3JheS0xMDBcIj5cbiAgICAgICAgICA8dGQgY2xhc3M9XCJ0ZXh0LXhsIHRleHQtZ3JheS02MDAgdGV4dC1jZW50ZXJcIj5cbiAgICAgICAgICAgIHtpKzF9XG4gICAgICAgICAgPC90ZD5cbiAgICAgICAgICA8dGQgY2xhc3M9XCJmbGV4IGZsZXgtcm93IGl0ZW1zLWNlbnRlciBtYXgtdy01eGxcIj5cbiAgICAgICAgICAgIDxhIGNsYXNzPVwiZmxleC1ub25lIHNlbGYtc3RhcnQgbWQ6c2VsZi1jZW50ZXJcIiBocmVmPVwiL3N0cmVhbWVyL3tzdHJlYW1lci5pZH1cIj5cbiAgICAgICAgICAgICAgPGltZyBjbGFzcz1cInJvdW5kZWQtZnVsbCBtZDpoLTEyIG1kOnctMTIgaC04IHctOCBib3JkZXIgYm9yZGVyLWdyYXktNjAwXCIgc3JjPXtzdHJlYW1lci5wcm9maWxlX2ltYWdlX3VybH0gLz5cbiAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmbGV4LXNocmluayBtZDpwbC0yIHRleHQtbGVmdFwiPlxuICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgIDxhIGNsYXNzPVwiXCIgaHJlZj1cIi9zdHJlYW1lci97c3RyZWFtZXIuaWR9XCI+XG4gICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInBsLTJcIj57c3RyZWFtZXIubmFtZX08L3NwYW4+XG4gICAgICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICAgICAgIDxCYWRnZXMge3N0cmVhbWVyfSBjbGFzcz1cImlubGluZS1ibG9jayBibG9jayBtbC0xXCI+IDwvQmFkZ2VzPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPEdhbWVCYWRnZXMge3N0cmVhbWVyfSBjbGFzcz1cImZsZXggZmxleC1yb3cgbWQ6bWwtMiAtbWwtOCBtZDpwdC0xIHB0LTQgZmxleC13cmFwXCI+IDwvR2FtZUJhZGdlcz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgPHRkIGNsYXNzPVwidGV4dC1yZWQtNjAwXCI+XG4gICAgICAgICAgICB7I2lmIHN0cmVhbWVyLmNoYXR0aW5nX3NwZWVkfVxuICAgICAgICAgICAgICB7c3RyZWFtZXIuY2hhdHRpbmdfc3BlZWQudG9GaXhlZCgxKX3qsJwv7LSIXG4gICAgICAgICAgICB7L2lmfVxuICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgPHRkIGNsYXNzPVwidGV4dC15ZWxsb3ctNjAwXCI+XG4gICAgICAgICAgICB7I2lmIHN0cmVhbWVyLnZpZXdlcl9jb3VudCAhPSBudWxsfVxuICAgICAgICAgICAgICB7c3RyZWFtZXIudmlld2VyX2NvdW50LnRvTG9jYWxlU3RyaW5nKCdrbycsIHt1c2VHcm91cGluZzp0cnVlfSl966qFXG4gICAgICAgICAgICB7L2lmfVxuICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgPHRkIGNsYXNzPVwidGV4dC1wdXJwbGUtNjAwXCI+XG4gICAgICAgICAgICB7c3RyZWFtZXIuZm9sbG93ZXJfY291bnQudG9Mb2NhbGVTdHJpbmcoJ2tvJywge3VzZUdyb3VwaW5nOnRydWV9KX3rqoVcbiAgICAgICAgICA8L3RkPlxuICAgICAgICAgIDx0ZCBjbGFzcz1cInRleHQtb3JhbmdlLTYwMFwiPlxuICAgICAgICAgICAge3N0cmVhbWVyLmF2ZXJhZ2Vfdmlld2VyX2NvdW50LnRvTG9jYWxlU3RyaW5nKCdrbycsIHt1c2VHcm91cGluZzp0cnVlfSl966qFXG4gICAgICAgICAgPC90ZD5cbiAgICAgICAgICA8dGQgY2xhc3M9XCJ0ZXh0LWdyZWVuLTYwMCBoaWRkZW4gbWQ6dGFibGUtY2VsbFwiPlxuICAgICAgICAgICAgeyNpZiBzdHJlYW1lci52aWV3ZXJfY2hhdHRlcl9yYXRpbyAhPSBudWxsfVxuICAgICAgICAgICAgICB7KHN0cmVhbWVyLnZpZXdlcl9jaGF0dGVyX3JhdGlvKjEwMCkudG9GaXhlZCgxKX0lXG4gICAgICAgICAgICB7L2lmfVxuICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgPHRkIGNsYXNzPVwidGV4dC10ZWFsLTYwMCBoaWRkZW4gbWQ6dGFibGUtY2VsbFwiPlxuICAgICAgICAgICAgeyNpZiBzdHJlYW1lci5hdmVyYWdlX3N1YnNjcmliZXJfcmF0aW99XG4gICAgICAgICAgICAgIHsoc3RyZWFtZXIuYXZlcmFnZV9zdWJzY3JpYmVyX3JhdGlvKjEwMCkudG9GaXhlZCgxKX0lXG4gICAgICAgICAgICB7L2lmfVxuICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgPHRkIGNsYXNzPVwidGV4dC1ibHVlLTYwMCB3LTMyIGhpZGRlbiBtZDp0YWJsZS1jZWxsXCI+XG4gICAgICAgICAgICB7I2lmIHN0cmVhbWVyLnN0cmVhbWluZ19ob3Vyc19wZXJfd2Vla31cbiAgICAgICAgICAgICAg7KO8IHtzdHJlYW1lci5zdHJlYW1pbmdfaG91cnNfcGVyX3dlZWsudG9GaXhlZCgxKX3si5zqsIRcbiAgICAgICAgICAgIHs6ZWxzZX1cbiAgICAgICAgICAgIHsvaWZ9XG4gICAgICAgICAgPC90ZD5cbiAgICAgICAgICA8dGQgY2xhc3M9XCJ0ZXh0LWdyYXktNjAwIGhpZGRlbiBtZDp0YWJsZS1jZWxsXCI+XG4gICAgICAgICAgICB7I2lmIHN0cmVhbWVyLmlzX3N0cmVhbWluZ31cbiAgICAgICAgICAgICAg7KeA6riIXG4gICAgICAgICAgICB7OmVsc2UgaWYgc3RyZWFtZXIubGFzdF9zdHJlYW1pbmdfdGltZX1cbiAgICAgICAgICAgICAge3RpbWVfYWdvKG5ldyBEYXRlKHN0cmVhbWVyLmxhc3Rfc3RyZWFtaW5nX3RpbWUpKX1cbiAgICAgICAgICAgIHs6ZWxzZX1cbiAgICAgICAgICAgIHsvaWZ9XG4gICAgICAgICAgPC90ZD5cbiAgICAgICAgPC90cj5cbiAgICAgICAgey9lYWNofVxuICAgICAgPC90Ym9keT5cbiAgICAgIDx0Zm9vdD5cbiAgICAgICAgPHRyIGNsYXNzPVwiXCI+XG4gICAgICAgICAgPHRkIGNvbHNwYW49XCI0MlwiIGNsYXNzPVwiXCI+XG4gICAgICAgICAgICA8YnV0dG9uIG9uOmNsaWNrPXtsb2FkX3Jhbmtpbmd9IGNsYXNzPVwidy1mdWxsIHB5LTQgYm9yZGVyLXRcIj5cbiAgICAgICAgICAgICAgICDrjZQg67O06riwXG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICA8L3RkPlxuICAgICAgICA8L3RyPlxuICAgICAgPC90Zm9vdD5cbiAgICA8L3RhYmxlPlxuICA8L1BhbmVsPlxuPC9kaXY+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgeyBvbk1vdW50IH0gZnJvbSBcInN2ZWx0ZVwiO1xuaW1wb3J0IHsgQVBJIH0gZnJvbSAnLi4vYXBpLmpzJztcbmltcG9ydCBQYW5lbCBmcm9tIFwiLi4vY29tcG9uZW50cy9QYW5lbC5zdmVsdGVcIjtcbmltcG9ydCBCYWRnZXMgZnJvbSBcIi4uL2NvbXBvbmVudHMvQmFkZ2VzLnN2ZWx0ZVwiO1xuaW1wb3J0IEdhbWVCYWRnZXMgZnJvbSBcIi4uL2NvbXBvbmVudHMvR2FtZUJhZGdlcy5zdmVsdGVcIjtcbmltcG9ydCBUaXAgZnJvbSAnLi4vY29tcG9uZW50cy9UaXAuc3ZlbHRlJztcbmltcG9ydCBGYUljb24gZnJvbSAnLi4vY29tcG9uZW50cy9GYUljb24uc3ZlbHRlJztcbmltcG9ydCBTdHJlYW1lckF1dG9Db21wbGV0ZSBmcm9tIFwiLi4vY29tcG9uZW50cy9TdHJlYW1lckF1dG9Db21wbGV0ZS5zdmVsdGVcIjtcbmltcG9ydCB7IHRpbWVfYWdvIH0gZnJvbSBcIi4uL3V0aWwuanNcIjtcblxuaW1wb3J0IHsgZmFDb21tZW50IH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhQ29tbWVudCc7XG5pbXBvcnQgeyBmYUtleSB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYUtleSc7XG5pbXBvcnQgeyBmYVVzZXIgfSBmcm9tICdAZm9ydGF3ZXNvbWUvZnJlZS1zb2xpZC1zdmctaWNvbnMvZmFVc2VyJztcbmltcG9ydCB7IGZhVXNlckNsb2NrIH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhVXNlckNsb2NrJztcbmltcG9ydCB7IGZhVXNlckxvY2sgfSBmcm9tICdAZm9ydGF3ZXNvbWUvZnJlZS1zb2xpZC1zdmctaWNvbnMvZmFVc2VyTG9jayc7XG5pbXBvcnQgeyBmYUhvdXJnbGFzc0hhbGYgfSBmcm9tICdAZm9ydGF3ZXNvbWUvZnJlZS1zb2xpZC1zdmctaWNvbnMvZmFIb3VyZ2xhc3NIYWxmJztcbmltcG9ydCB7IGZhSGlzdG9yeSB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYUhpc3RvcnknO1xuaW1wb3J0IHsgZmFEb2xsYXJTaWduIH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhRG9sbGFyU2lnbic7XG5pbXBvcnQgeyBmYVN0YXIgfSBmcm9tICdAZm9ydGF3ZXNvbWUvZnJlZS1zb2xpZC1zdmctaWNvbnMvZmFTdGFyJztcbmltcG9ydCB7IGZhQXJyb3dSaWdodCB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYUFycm93UmlnaHQnO1xuaW1wb3J0IHsgZmFFeGNoYW5nZUFsdCB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYUV4Y2hhbmdlQWx0JztcbmltcG9ydCB7IGZhQ2FyZXRVcCB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYUNhcmV0VXAnO1xuaW1wb3J0IHsgZmFDYXJldERvd24gfSBmcm9tICdAZm9ydGF3ZXNvbWUvZnJlZS1zb2xpZC1zdmctaWNvbnMvZmFDYXJldERvd24nO1xuXG5sZXQgc3RhdGUgPSB7XG4gIFwib3JkZXJfYnlcIjogXCJjaGF0dGluZ19zcGVlZFwiLFxuICBcImRlc2NcIjogdHJ1ZSxcbn1cblxubGV0IGN1cnJlbnRfb3JkZXJfYnkgPSBcImNoYXR0aW5nX3NwZWVkXCI7XG5sZXQgY3VycmVudF9kZXNjID0gdHJ1ZTtcbmxldCByYW5raW5ncyA9IHsgfTtcbmxldCBvZmZzZXRzID0geyB9O1xubGV0IHJhbmtpbmdfdXBkYXRlX3RpbWUgPSBudWxsO1xuXG5sZXQgdmlld2VyX21pZ3JhdGlvbl9jb3VudF9yYW5raW5nID0gW107XG5sZXQgdmlld2VyX21pZ3JhdGlvbl9jb3VudF9vZmZzZXQgPSAwO1xuXG5mdW5jdGlvbiBjaGFuZ2Vfb3JkZXIob3JkZXJfYnksIGRlc2MpIHtcbiAgLyppZihvcmRlcl9ieSA9PSBzdGF0ZS5vcmRlcl9ieSlcbiAgICBzdGF0ZS5kZXNjID0gIXN0YXRlLmRlc2M7XG4gIGVsc2UqL1xuICAgIHN0YXRlID0ge1xuICAgICAgXCJvcmRlcl9ieVwiOiBvcmRlcl9ieSxcbiAgICAgIFwiZGVzY1wiOiAgZGVzYyxcbiAgICB9O1xuICBpZighcmFua2luZ3NbSlNPTi5zdHJpbmdpZnkoc3RhdGUpXSkge1xuICAgIGxvYWRfcmFua2luZygpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGxvYWRfcmFua2luZygpe1xuICBpZihvZmZzZXRzW0pTT04uc3RyaW5naWZ5KHN0YXRlKV0gPT0gbnVsbClcbiAgICBvZmZzZXRzW0pTT04uc3RyaW5naWZ5KHN0YXRlKV0gPSAwO1xuICBpZihyYW5raW5nc1tKU09OLnN0cmluZ2lmeShzdGF0ZSldID09IG51bGwpXG4gICAgcmFua2luZ3NbSlNPTi5zdHJpbmdpZnkoc3RhdGUpXSA9IFtdO1xuICBvZmZzZXRzW0pTT04uc3RyaW5naWZ5KHN0YXRlKV0gPSByYW5raW5nc1tKU09OLnN0cmluZ2lmeShzdGF0ZSldLmxlbmd0aDtcbiAgbGV0IGxhc3Rfc3RhdGUgPSB7XG4gICAgXCJvcmRlcl9ieVwiOiBzdGF0ZS5vcmRlcl9ieSxcbiAgICBcImRlc2NcIjogc3RhdGUuZGVzY1xuICB9O1xuICBBUEkuc3RyZWFtZXJfcmFua2luZyhvZmZzZXRzW0pTT04uc3RyaW5naWZ5KGxhc3Rfc3RhdGUpXSwgbGFzdF9zdGF0ZS5vcmRlcl9ieSwgbGFzdF9zdGF0ZS5kZXNjKS50aGVuKHJhbmtpbmcgPT4ge1xuICAgIGlmKHJhbmtpbmcpe1xuICAgICAgcmFua2luZ3NbSlNPTi5zdHJpbmdpZnkobGFzdF9zdGF0ZSldID0gWy4uLnJhbmtpbmdzW0pTT04uc3RyaW5naWZ5KGxhc3Rfc3RhdGUpXSwgLi4ucmFua2luZ11cbiAgICAgIGNvbnNvbGUubG9nKHJhbmtpbmcpO1xuICAgICAgcmFua2luZ191cGRhdGVfdGltZSA9IE1hdGgubWF4KHJhbmtpbmdfdXBkYXRlX3RpbWUsIC4uLnJhbmtpbmcubWFwKHIgPT4gbmV3IERhdGUoci5sYXN0X3N0cmVhbWluZ190aW1lKS5nZXRUaW1lKCkpKTtcbiAgICAgIGNvbnNvbGUubG9nKHJhbmtpbmdfdXBkYXRlX3RpbWUpO1xuICAgICAgY29uc29sZS5sb2cobmV3IERhdGUocmFua2luZ191cGRhdGVfdGltZSkpO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGxvYWRfdmlld2VyX21pZ3JhdGlvbl9jb3VudF9yYW5raW5nKCl7XG4gIHZpZXdlcl9taWdyYXRpb25fY291bnRfb2Zmc2V0ID0gdmlld2VyX21pZ3JhdGlvbl9jb3VudF9yYW5raW5nLmxlbmd0aDtcbiAgQVBJLnZpZXdlcl9taWdyYXRpb25fY291bnRfcmFua2luZyh2aWV3ZXJfbWlncmF0aW9uX2NvdW50X29mZnNldCkudGhlbihyYW5raW5nID0+IHtcbiAgICBpZihyYW5raW5nKXtcbiAgICAgIHZpZXdlcl9taWdyYXRpb25fY291bnRfcmFua2luZyA9IFsuLi52aWV3ZXJfbWlncmF0aW9uX2NvdW50X3JhbmtpbmcsIC4uLnJhbmtpbmddO1xuICAgIH1cbiAgfSk7XG59XG5cbmxvYWRfcmFua2luZygpO1xubG9hZF92aWV3ZXJfbWlncmF0aW9uX2NvdW50X3JhbmtpbmcoKTtcblxuZnVuY3Rpb24gb25fc3RyZWFtZXJfc2VhcmNoKHRhcmdldCkge1xuICB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUgPSBcIi9zdHJlYW1lci9cIiArIHRhcmdldC5pZDtcbn1cbjwvc2NyaXB0PlxuXG48c3R5bGU+XG4gIEBtZWRpYSAobWluLXdpZHRoOiA3NjhweCkgeyBcbiAgICAuc3RyZWFtZXItcmFua2luZyB0Ym9keSB0ZCB7XG4gICAgICBwYWRkaW5nOiAwLjVyZW0gMC4yNXJlbTtcbiAgICAgIHBhZGRpbmctdG9wOiAxLjByZW07XG4gICAgICBwYWRkaW5nLWJvdHRvbTogMS4wcmVtO1xuICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIH1cbiAgICAuc3RyZWFtZXItcmFua2luZyB0aGVhZCB0aCB7XG4gICAgICBwYWRkaW5nLWxlZnQ6IDFyZW07XG4gICAgICBwYWRkaW5nLXJpZ2h0OiAxcmVtO1xuICAgICAgcGFkZGluZy1ib3R0b206IC41cmVtO1xuICAgICAgcGFkZGluZy10b3A6IC41cmVtO1xuICAgIH1cbiAgfVxuICAuc3RyZWFtZXItcmFua2luZyB0Ym9keSB0ZCB7XG4gICAgcGFkZGluZzogMC41cmVtIDAuMjVyZW07XG4gICAgcGFkZGluZy10b3A6IDEuMHJlbTtcbiAgICBwYWRkaW5nLWJvdHRvbTogMS4wcmVtO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgfVxuICAuc3RyZWFtZXItcmFua2luZyB0aGVhZCB0aCB7XG4gICAgcGFkZGluZy1sZWZ0OiAwLjVyZW07XG4gICAgcGFkZGluZy1yaWdodDogMC41cmVtO1xuICAgIHBhZGRpbmctYm90dG9tOiAuNXJlbTtcbiAgICBwYWRkaW5nLXRvcDogLjVyZW07XG4gIH1cbiAgLnN0cmVhbWVyLXJhbmtpbmcgdGJvZHkgdHIgdGQ6bGFzdC1jaGlsZCB7XG4gICAgcGFkZGluZy1yaWdodDogMXJlbTtcbiAgfVxuICAuc3RyZWFtZXItcmFua2luZyAub3JkZXJlZCB7XG4gICAgYm9yZGVyLWJvdHRvbS13aWR0aDogMnB4O1xuICB9XG48L3N0eWxlPlxuIiwiaW1wb3J0IHsgc2FmZV9ub3RfZXF1YWwsIG5vb3AsIHJ1bl9hbGwsIGlzX2Z1bmN0aW9uIH0gZnJvbSAnLi4vaW50ZXJuYWwnO1xuZXhwb3J0IHsgZ2V0X3N0b3JlX3ZhbHVlIGFzIGdldCB9IGZyb20gJy4uL2ludGVybmFsJztcblxuY29uc3Qgc3Vic2NyaWJlcl9xdWV1ZSA9IFtdO1xuLyoqXG4gKiBDcmVhdGVzIGEgYFJlYWRhYmxlYCBzdG9yZSB0aGF0IGFsbG93cyByZWFkaW5nIGJ5IHN1YnNjcmlwdGlvbi5cbiAqIEBwYXJhbSB2YWx1ZSBpbml0aWFsIHZhbHVlXG4gKiBAcGFyYW0ge1N0YXJ0U3RvcE5vdGlmaWVyfXN0YXJ0IHN0YXJ0IGFuZCBzdG9wIG5vdGlmaWNhdGlvbnMgZm9yIHN1YnNjcmlwdGlvbnNcbiAqL1xuZnVuY3Rpb24gcmVhZGFibGUodmFsdWUsIHN0YXJ0KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3Vic2NyaWJlOiB3cml0YWJsZSh2YWx1ZSwgc3RhcnQpLnN1YnNjcmliZSxcbiAgICB9O1xufVxuLyoqXG4gKiBDcmVhdGUgYSBgV3JpdGFibGVgIHN0b3JlIHRoYXQgYWxsb3dzIGJvdGggdXBkYXRpbmcgYW5kIHJlYWRpbmcgYnkgc3Vic2NyaXB0aW9uLlxuICogQHBhcmFtIHsqPX12YWx1ZSBpbml0aWFsIHZhbHVlXG4gKiBAcGFyYW0ge1N0YXJ0U3RvcE5vdGlmaWVyPX1zdGFydCBzdGFydCBhbmQgc3RvcCBub3RpZmljYXRpb25zIGZvciBzdWJzY3JpcHRpb25zXG4gKi9cbmZ1bmN0aW9uIHdyaXRhYmxlKHZhbHVlLCBzdGFydCA9IG5vb3ApIHtcbiAgICBsZXQgc3RvcDtcbiAgICBjb25zdCBzdWJzY3JpYmVycyA9IFtdO1xuICAgIGZ1bmN0aW9uIHNldChuZXdfdmFsdWUpIHtcbiAgICAgICAgaWYgKHNhZmVfbm90X2VxdWFsKHZhbHVlLCBuZXdfdmFsdWUpKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IG5ld192YWx1ZTtcbiAgICAgICAgICAgIGlmIChzdG9wKSB7IC8vIHN0b3JlIGlzIHJlYWR5XG4gICAgICAgICAgICAgICAgY29uc3QgcnVuX3F1ZXVlID0gIXN1YnNjcmliZXJfcXVldWUubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3Vic2NyaWJlcnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcyA9IHN1YnNjcmliZXJzW2ldO1xuICAgICAgICAgICAgICAgICAgICBzWzFdKCk7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXJfcXVldWUucHVzaChzLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChydW5fcXVldWUpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdWJzY3JpYmVyX3F1ZXVlLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyX3F1ZXVlW2ldWzBdKHN1YnNjcmliZXJfcXVldWVbaSArIDFdKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyX3F1ZXVlLmxlbmd0aCA9IDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHVwZGF0ZShmbikge1xuICAgICAgICBzZXQoZm4odmFsdWUpKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gc3Vic2NyaWJlKHJ1biwgaW52YWxpZGF0ZSA9IG5vb3ApIHtcbiAgICAgICAgY29uc3Qgc3Vic2NyaWJlciA9IFtydW4sIGludmFsaWRhdGVdO1xuICAgICAgICBzdWJzY3JpYmVycy5wdXNoKHN1YnNjcmliZXIpO1xuICAgICAgICBpZiAoc3Vic2NyaWJlcnMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICBzdG9wID0gc3RhcnQoc2V0KSB8fCBub29wO1xuICAgICAgICB9XG4gICAgICAgIHJ1bih2YWx1ZSk7XG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IHN1YnNjcmliZXJzLmluZGV4T2Yoc3Vic2NyaWJlcik7XG4gICAgICAgICAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzdWJzY3JpYmVycy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICBzdG9wKCk7XG4gICAgICAgICAgICAgICAgc3RvcCA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB7IHNldCwgdXBkYXRlLCBzdWJzY3JpYmUgfTtcbn1cbi8qKlxuICogRGVyaXZlZCB2YWx1ZSBzdG9yZSBieSBzeW5jaHJvbml6aW5nIG9uZSBvciBtb3JlIHJlYWRhYmxlIHN0b3JlcyBhbmRcbiAqIGFwcGx5aW5nIGFuIGFnZ3JlZ2F0aW9uIGZ1bmN0aW9uIG92ZXIgaXRzIGlucHV0IHZhbHVlcy5cbiAqIEBwYXJhbSB7U3RvcmVzfSBzdG9yZXMgaW5wdXQgc3RvcmVzXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFN0b3Jlcz0sIGZ1bmN0aW9uKCopPSk6Kn1mbiBmdW5jdGlvbiBjYWxsYmFjayB0aGF0IGFnZ3JlZ2F0ZXMgdGhlIHZhbHVlc1xuICogQHBhcmFtIHsqPX1pbml0aWFsX3ZhbHVlIHdoZW4gdXNlZCBhc3luY2hyb25vdXNseVxuICovXG5mdW5jdGlvbiBkZXJpdmVkKHN0b3JlcywgZm4sIGluaXRpYWxfdmFsdWUpIHtcbiAgICBjb25zdCBzaW5nbGUgPSAhQXJyYXkuaXNBcnJheShzdG9yZXMpO1xuICAgIGNvbnN0IHN0b3Jlc19hcnJheSA9IHNpbmdsZVxuICAgICAgICA/IFtzdG9yZXNdXG4gICAgICAgIDogc3RvcmVzO1xuICAgIGNvbnN0IGF1dG8gPSBmbi5sZW5ndGggPCAyO1xuICAgIHJldHVybiByZWFkYWJsZShpbml0aWFsX3ZhbHVlLCAoc2V0KSA9PiB7XG4gICAgICAgIGxldCBpbml0ZWQgPSBmYWxzZTtcbiAgICAgICAgY29uc3QgdmFsdWVzID0gW107XG4gICAgICAgIGxldCBwZW5kaW5nID0gMDtcbiAgICAgICAgbGV0IGNsZWFudXAgPSBub29wO1xuICAgICAgICBjb25zdCBzeW5jID0gKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHBlbmRpbmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjbGVhbnVwKCk7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBmbihzaW5nbGUgPyB2YWx1ZXNbMF0gOiB2YWx1ZXMsIHNldCk7XG4gICAgICAgICAgICBpZiAoYXV0bykge1xuICAgICAgICAgICAgICAgIHNldChyZXN1bHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY2xlYW51cCA9IGlzX2Z1bmN0aW9uKHJlc3VsdCkgPyByZXN1bHQgOiBub29wO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBjb25zdCB1bnN1YnNjcmliZXJzID0gc3RvcmVzX2FycmF5Lm1hcCgoc3RvcmUsIGkpID0+IHN0b3JlLnN1YnNjcmliZSgodmFsdWUpID0+IHtcbiAgICAgICAgICAgIHZhbHVlc1tpXSA9IHZhbHVlO1xuICAgICAgICAgICAgcGVuZGluZyAmPSB+KDEgPDwgaSk7XG4gICAgICAgICAgICBpZiAoaW5pdGVkKSB7XG4gICAgICAgICAgICAgICAgc3luYygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCAoKSA9PiB7XG4gICAgICAgICAgICBwZW5kaW5nIHw9ICgxIDw8IGkpO1xuICAgICAgICB9KSk7XG4gICAgICAgIGluaXRlZCA9IHRydWU7XG4gICAgICAgIHN5bmMoKTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgICAgICAgICBydW5fYWxsKHVuc3Vic2NyaWJlcnMpO1xuICAgICAgICAgICAgY2xlYW51cCgpO1xuICAgICAgICB9O1xuICAgIH0pO1xufVxuXG5leHBvcnQgeyBkZXJpdmVkLCByZWFkYWJsZSwgd3JpdGFibGUgfTtcbiIsIid1c2Ugc3RyaWN0Jztcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgcHJlZml4ID0gJ2Zhcyc7XG52YXIgaWNvbk5hbWUgPSAndXNlci1zZWNyZXQnO1xudmFyIHdpZHRoID0gNDQ4O1xudmFyIGhlaWdodCA9IDUxMjtcbnZhciBsaWdhdHVyZXMgPSBbXTtcbnZhciB1bmljb2RlID0gJ2YyMWInO1xudmFyIHN2Z1BhdGhEYXRhID0gJ00zODMuOSAzMDguM2wyMy45LTYyLjZjNC0xMC41LTMuNy0yMS43LTE1LTIxLjdoLTU4LjVjMTEtMTguOSAxNy44LTQwLjYgMTcuOC02NHYtLjNjMzkuMi03LjggNjQtMTkuMSA2NC0zMS43IDAtMTMuMy0yNy4zLTI1LjEtNzAuMS0zMy05LjItMzIuOC0yNy02NS44LTQwLjYtODIuOC05LjUtMTEuOS0yNS45LTE1LjYtMzkuNS04LjhsLTI3LjYgMTMuOGMtOSA0LjUtMTkuNiA0LjUtMjguNiAwTDE4Mi4xIDMuNGMtMTMuNi02LjgtMzAtMy4xLTM5LjUgOC44LTEzLjUgMTctMzEuNCA1MC00MC42IDgyLjgtNDIuNyA3LjktNzAgMTkuNy03MCAzMyAwIDEyLjYgMjQuOCAyMy45IDY0IDMxLjd2LjNjMCAyMy40IDYuOCA0NS4xIDE3LjggNjRINTYuM2MtMTEuNSAwLTE5LjIgMTEuNy0xNC43IDIyLjNsMjUuOCA2MC4yQzI3LjMgMzI5LjggMCAzNzIuNyAwIDQyMi40djQ0LjhDMCA0OTEuOSAyMC4xIDUxMiA0NC44IDUxMmgzNTguNGMyNC43IDAgNDQuOC0yMC4xIDQ0LjgtNDQuOHYtNDQuOGMwLTQ4LjQtMjUuOC05MC40LTY0LjEtMTE0LjF6TTE3NiA0ODBsLTQxLjYtMTkyIDQ5LjYgMzIgMjQgNDAtMzIgMTIwem05NiAwbC0zMi0xMjAgMjQtNDAgNDkuNi0zMkwyNzIgNDgwem00MS43LTI5OC41Yy0zLjkgMTEuOS03IDI0LjYtMTYuNSAzMy40LTEwLjEgOS4zLTQ4IDIyLjQtNjQtMjUtMi44LTguNC0xNS40LTguNC0xOC4zIDAtMTcgNTAuMi01NiAzMi40LTY0IDI1LTkuNS04LjgtMTIuNy0yMS41LTE2LjUtMzMuNC0uOC0yLjUtNi4zLTUuNy02LjMtNS44di0xMC44YzI4LjMgMy42IDYxIDUuOCA5NiA1LjhzNjcuNy0yLjEgOTYtNS44djEwLjhjLS4xLjEtNS42IDMuMi02LjQgNS44eic7XG5cbmV4cG9ydHMuZGVmaW5pdGlvbiA9IHtcbiAgcHJlZml4OiBwcmVmaXgsXG4gIGljb25OYW1lOiBpY29uTmFtZSxcbiAgaWNvbjogW1xuICAgIHdpZHRoLFxuICAgIGhlaWdodCxcbiAgICBsaWdhdHVyZXMsXG4gICAgdW5pY29kZSxcbiAgICBzdmdQYXRoRGF0YVxuICBdfTtcblxuZXhwb3J0cy5mYVVzZXJTZWNyZXQgPSBleHBvcnRzLmRlZmluaXRpb247XG5leHBvcnRzLnByZWZpeCA9IHByZWZpeDtcbmV4cG9ydHMuaWNvbk5hbWUgPSBpY29uTmFtZTtcbmV4cG9ydHMud2lkdGggPSB3aWR0aDtcbmV4cG9ydHMuaGVpZ2h0ID0gaGVpZ2h0O1xuZXhwb3J0cy5saWdhdHVyZXMgPSBsaWdhdHVyZXM7XG5leHBvcnRzLnVuaWNvZGUgPSB1bmljb2RlO1xuZXhwb3J0cy5zdmdQYXRoRGF0YSA9IHN2Z1BhdGhEYXRhOyIsIid1c2Ugc3RyaWN0Jztcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgcHJlZml4ID0gJ2Zhcyc7XG52YXIgaWNvbk5hbWUgPSAnY29tbWVudC1kb3RzJztcbnZhciB3aWR0aCA9IDUxMjtcbnZhciBoZWlnaHQgPSA1MTI7XG52YXIgbGlnYXR1cmVzID0gW107XG52YXIgdW5pY29kZSA9ICdmNGFkJztcbnZhciBzdmdQYXRoRGF0YSA9ICdNMjU2IDMyQzExNC42IDMyIDAgMTI1LjEgMCAyNDBjMCA0OS42IDIxLjQgOTUgNTcgMTMwLjdDNDQuNSA0MjEuMSAyLjcgNDY2IDIuMiA0NjYuNWMtMi4yIDIuMy0yLjggNS43LTEuNSA4LjdTNC44IDQ4MCA4IDQ4MGM2Ni4zIDAgMTE2LTMxLjggMTQwLjYtNTEuNCAzMi43IDEyLjMgNjkgMTkuNCAxMDcuNCAxOS40IDE0MS40IDAgMjU2LTkzLjEgMjU2LTIwOFMzOTcuNCAzMiAyNTYgMzJ6TTEyOCAyNzJjLTE3LjcgMC0zMi0xNC4zLTMyLTMyczE0LjMtMzIgMzItMzIgMzIgMTQuMyAzMiAzMi0xNC4zIDMyLTMyIDMyem0xMjggMGMtMTcuNyAwLTMyLTE0LjMtMzItMzJzMTQuMy0zMiAzMi0zMiAzMiAxNC4zIDMyIDMyLTE0LjMgMzItMzIgMzJ6bTEyOCAwYy0xNy43IDAtMzItMTQuMy0zMi0zMnMxNC4zLTMyIDMyLTMyIDMyIDE0LjMgMzIgMzItMTQuMyAzMi0zMiAzMnonO1xuXG5leHBvcnRzLmRlZmluaXRpb24gPSB7XG4gIHByZWZpeDogcHJlZml4LFxuICBpY29uTmFtZTogaWNvbk5hbWUsXG4gIGljb246IFtcbiAgICB3aWR0aCxcbiAgICBoZWlnaHQsXG4gICAgbGlnYXR1cmVzLFxuICAgIHVuaWNvZGUsXG4gICAgc3ZnUGF0aERhdGFcbiAgXX07XG5cbmV4cG9ydHMuZmFDb21tZW50RG90cyA9IGV4cG9ydHMuZGVmaW5pdGlvbjtcbmV4cG9ydHMucHJlZml4ID0gcHJlZml4O1xuZXhwb3J0cy5pY29uTmFtZSA9IGljb25OYW1lO1xuZXhwb3J0cy53aWR0aCA9IHdpZHRoO1xuZXhwb3J0cy5oZWlnaHQgPSBoZWlnaHQ7XG5leHBvcnRzLmxpZ2F0dXJlcyA9IGxpZ2F0dXJlcztcbmV4cG9ydHMudW5pY29kZSA9IHVuaWNvZGU7XG5leHBvcnRzLnN2Z1BhdGhEYXRhID0gc3ZnUGF0aERhdGE7IiwiJ3VzZSBzdHJpY3QnO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBwcmVmaXggPSAnZmFzJztcbnZhciBpY29uTmFtZSA9ICdzdW4nO1xudmFyIHdpZHRoID0gNTEyO1xudmFyIGhlaWdodCA9IDUxMjtcbnZhciBsaWdhdHVyZXMgPSBbXTtcbnZhciB1bmljb2RlID0gJ2YxODUnO1xudmFyIHN2Z1BhdGhEYXRhID0gJ00yNTYgMTYwYy01Mi45IDAtOTYgNDMuMS05NiA5NnM0My4xIDk2IDk2IDk2IDk2LTQzLjEgOTYtOTYtNDMuMS05Ni05Ni05NnptMjQ2LjQgODAuNWwtOTQuNy00Ny4zIDMzLjUtMTAwLjRjNC41LTEzLjYtOC40LTI2LjUtMjEuOS0yMS45bC0xMDAuNCAzMy41LTQ3LjQtOTQuOGMtNi40LTEyLjgtMjQuNi0xMi44LTMxIDBsLTQ3LjMgOTQuN0w5Mi43IDcwLjhjLTEzLjYtNC41LTI2LjUgOC40LTIxLjkgMjEuOWwzMy41IDEwMC40LTk0LjcgNDcuNGMtMTIuOCA2LjQtMTIuOCAyNC42IDAgMzFsOTQuNyA0Ny4zLTMzLjUgMTAwLjVjLTQuNSAxMy42IDguNCAyNi41IDIxLjkgMjEuOWwxMDAuNC0zMy41IDQ3LjMgOTQuN2M2LjQgMTIuOCAyNC42IDEyLjggMzEgMGw0Ny4zLTk0LjcgMTAwLjQgMzMuNWMxMy42IDQuNSAyNi41LTguNCAyMS45LTIxLjlsLTMzLjUtMTAwLjQgOTQuNy00Ny4zYzEzLTYuNSAxMy0yNC43LjItMzEuMXptLTE1NS45IDEwNmMtNDkuOSA0OS45LTEzMS4xIDQ5LjktMTgxIDAtNDkuOS00OS45LTQ5LjktMTMxLjEgMC0xODEgNDkuOS00OS45IDEzMS4xLTQ5LjkgMTgxIDAgNDkuOSA0OS45IDQ5LjkgMTMxLjEgMCAxODF6JztcblxuZXhwb3J0cy5kZWZpbml0aW9uID0ge1xuICBwcmVmaXg6IHByZWZpeCxcbiAgaWNvbk5hbWU6IGljb25OYW1lLFxuICBpY29uOiBbXG4gICAgd2lkdGgsXG4gICAgaGVpZ2h0LFxuICAgIGxpZ2F0dXJlcyxcbiAgICB1bmljb2RlLFxuICAgIHN2Z1BhdGhEYXRhXG4gIF19O1xuXG5leHBvcnRzLmZhU3VuID0gZXhwb3J0cy5kZWZpbml0aW9uO1xuZXhwb3J0cy5wcmVmaXggPSBwcmVmaXg7XG5leHBvcnRzLmljb25OYW1lID0gaWNvbk5hbWU7XG5leHBvcnRzLndpZHRoID0gd2lkdGg7XG5leHBvcnRzLmhlaWdodCA9IGhlaWdodDtcbmV4cG9ydHMubGlnYXR1cmVzID0gbGlnYXR1cmVzO1xuZXhwb3J0cy51bmljb2RlID0gdW5pY29kZTtcbmV4cG9ydHMuc3ZnUGF0aERhdGEgPSBzdmdQYXRoRGF0YTsiLCIndXNlIHN0cmljdCc7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHByZWZpeCA9ICdmYXMnO1xudmFyIGljb25OYW1lID0gJ21vb24nO1xudmFyIHdpZHRoID0gNTEyO1xudmFyIGhlaWdodCA9IDUxMjtcbnZhciBsaWdhdHVyZXMgPSBbXTtcbnZhciB1bmljb2RlID0gJ2YxODYnO1xudmFyIHN2Z1BhdGhEYXRhID0gJ00yODMuMjExIDUxMmM3OC45NjIgMCAxNTEuMDc5LTM1LjkyNSAxOTguODU3LTk0Ljc5MiA3LjA2OC04LjcwOC0uNjM5LTIxLjQzLTExLjU2Mi0xOS4zNS0xMjQuMjAzIDIzLjY1NC0yMzguMjYyLTcxLjU3Ni0yMzguMjYyLTE5Ni45NTQgMC03Mi4yMjIgMzguNjYyLTEzOC42MzUgMTAxLjQ5OC0xNzQuMzk0IDkuNjg2LTUuNTEyIDcuMjUtMjAuMTk3LTMuNzU2LTIyLjIzQTI1OC4xNTYgMjU4LjE1NiAwIDAgMCAyODMuMjExIDBjLTE0MS4zMDkgMC0yNTYgMTE0LjUxMS0yNTYgMjU2IDAgMTQxLjMwOSAxMTQuNTExIDI1NiAyNTYgMjU2eic7XG5cbmV4cG9ydHMuZGVmaW5pdGlvbiA9IHtcbiAgcHJlZml4OiBwcmVmaXgsXG4gIGljb25OYW1lOiBpY29uTmFtZSxcbiAgaWNvbjogW1xuICAgIHdpZHRoLFxuICAgIGhlaWdodCxcbiAgICBsaWdhdHVyZXMsXG4gICAgdW5pY29kZSxcbiAgICBzdmdQYXRoRGF0YVxuICBdfTtcblxuZXhwb3J0cy5mYU1vb24gPSBleHBvcnRzLmRlZmluaXRpb247XG5leHBvcnRzLnByZWZpeCA9IHByZWZpeDtcbmV4cG9ydHMuaWNvbk5hbWUgPSBpY29uTmFtZTtcbmV4cG9ydHMud2lkdGggPSB3aWR0aDtcbmV4cG9ydHMuaGVpZ2h0ID0gaGVpZ2h0O1xuZXhwb3J0cy5saWdhdHVyZXMgPSBsaWdhdHVyZXM7XG5leHBvcnRzLnVuaWNvZGUgPSB1bmljb2RlO1xuZXhwb3J0cy5zdmdQYXRoRGF0YSA9IHN2Z1BhdGhEYXRhOyIsIid1c2Ugc3RyaWN0Jztcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgcHJlZml4ID0gJ2Zhcyc7XG52YXIgaWNvbk5hbWUgPSAnZXh0ZXJuYWwtbGluay1hbHQnO1xudmFyIHdpZHRoID0gNTEyO1xudmFyIGhlaWdodCA9IDUxMjtcbnZhciBsaWdhdHVyZXMgPSBbXTtcbnZhciB1bmljb2RlID0gJ2YzNWQnO1xudmFyIHN2Z1BhdGhEYXRhID0gJ000MzIsMzIwSDQwMGExNiwxNiwwLDAsMC0xNiwxNlY0NDhINjRWMTI4SDIwOGExNiwxNiwwLDAsMCwxNi0xNlY4MGExNiwxNiwwLDAsMC0xNi0xNkg0OEE0OCw0OCwwLDAsMCwwLDExMlY0NjRhNDgsNDgsMCwwLDAsNDgsNDhINDAwYTQ4LDQ4LDAsMCwwLDQ4LTQ4VjMzNkExNiwxNiwwLDAsMCw0MzIsMzIwWk00ODgsMGgtMTI4Yy0yMS4zNywwLTMyLjA1LDI1LjkxLTE3LDQxbDM1LjczLDM1LjczTDEzNSwzMjAuMzdhMjQsMjQsMCwwLDAsMCwzNEwxNTcuNjcsMzc3YTI0LDI0LDAsMCwwLDM0LDBMNDM1LjI4LDEzMy4zMiw0NzEsMTY5YzE1LDE1LDQxLDQuNSw0MS0xN1YyNEEyNCwyNCwwLDAsMCw0ODgsMFonO1xuXG5leHBvcnRzLmRlZmluaXRpb24gPSB7XG4gIHByZWZpeDogcHJlZml4LFxuICBpY29uTmFtZTogaWNvbk5hbWUsXG4gIGljb246IFtcbiAgICB3aWR0aCxcbiAgICBoZWlnaHQsXG4gICAgbGlnYXR1cmVzLFxuICAgIHVuaWNvZGUsXG4gICAgc3ZnUGF0aERhdGFcbiAgXX07XG5cbmV4cG9ydHMuZmFFeHRlcm5hbExpbmtBbHQgPSBleHBvcnRzLmRlZmluaXRpb247XG5leHBvcnRzLnByZWZpeCA9IHByZWZpeDtcbmV4cG9ydHMuaWNvbk5hbWUgPSBpY29uTmFtZTtcbmV4cG9ydHMud2lkdGggPSB3aWR0aDtcbmV4cG9ydHMuaGVpZ2h0ID0gaGVpZ2h0O1xuZXhwb3J0cy5saWdhdHVyZXMgPSBsaWdhdHVyZXM7XG5leHBvcnRzLnVuaWNvZGUgPSB1bmljb2RlO1xuZXhwb3J0cy5zdmdQYXRoRGF0YSA9IHN2Z1BhdGhEYXRhOyIsIjxkaXYgY2xhc3M9XCJ3LWZ1bGwgcmVsYXRpdmVcIj5cbiAgPGRpdiBjbGFzcz1cInctZnVsbFwiPlxuICAgIDxzdmcgY2xhc3M9XCJmbGV4LWdyb3cgYm9yZGVyLWdyYXktOTAwIHctZnVsbFwiIHdpZHRoPXt3aWR0aH0gaGVpZ2h0PXtoZWlnaHR9IGJpbmQ6dGhpcz17c3ZnfT5cbiAgICAgIDxkZWZzPlxuICAgICAgICB7I2VhY2ggT2JqZWN0LnZhbHVlcyhnYW1lcykgYXMgZ2FtZX1cbiAgICAgICAgPHBhdHRlcm4gaWQ9XCJnYW1lLWJveC1hcnQte2dhbWUuaWR9XCIgd2lkdGg9e2dhbWVfYm94X2FydF93aWR0aH0gaGVpZ2h0PXtnYW1lX2JveF9hcnRfaGVpZ2h0fSBwYXR0ZXJuVW5pdHM9XCJ1c2VyU3BhY2VPblVzZVwiIHk9e2hlaWdodCowLjI1fT5cbiAgICAgICAgICB7I2lmIGdhbWUuYm94X2FydF91cmx9XG4gICAgICAgICAgICA8aW1hZ2UgeGxpbms6aHJlZj17Z2FtZS5ib3hfYXJ0X3VybC5yZXBsYWNlKFwie3dpZHRofVwiLCBnYW1lX2JveF9hcnRfd2lkdGgpLnJlcGxhY2UoXCJ7aGVpZ2h0fVwiLCBnYW1lX2JveF9hcnRfaGVpZ2h0KX0gd2lkdGg9e2dhbWVfYm94X2FydF93aWR0aH0gaGVpZ2h0PXtnYW1lX2JveF9hcnRfaGVpZ2h0fSB4PTAgeT0wID4gPC9pbWFnZT5cbiAgICAgICAgICB7L2lmfVxuICAgICAgICA8L3BhdHRlcm4+XG4gICAgICAgIHsvZWFjaH1cbiAgICAgICAgPG1hcmtlciBpZD1cImJpZ2hlYWRcIiBcbiAgICAgICAgICBtYXJrZXJXaWR0aD1cIjRcIiBtYXJrZXJIZWlnaHQ9XCI4XCIgXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJlZlg9XCIwLjFcIiByZWZZPVwiNFwiIG9yaWVudD1cImF1dG9cIiA+XG4gICAgICAgICAgPHBhdGggZD1cIk0wLDAgVjggTDQsNCBaXCIgZmlsbD1cIiM0NDRcIiAvPlxuICAgICAgICA8L21hcmtlcj5cbiAgICAgIDwvZGVmcz5cbiAgICAgIDwhLS08ZyBzaGFwZS1yZW5kZXJpbmc9XCJjcmlzcEVkZ2VzXCI+XG4gICAgICAgIDxsaW5lIHgxPVwie3dpZHRoKjAvOH1cIiB4Mj1cInt3aWR0aCowLzh9XCIgeTE9XCIwXCIgeTI9XCJ7aGVpZ2h0fVwiIHN0cm9rZS13aWR0aD1cIjEuMFwiIHN0cm9rZT1cIiM0NDRcIj48L2xpbmU+XG4gICAgICAgIDx0ZXh0IHg9XCIwXCIgeT1cIjBcIiBmaWxsPVwiIzQ0NFwiIGZvbnQtc2l6ZT1cIjEwXCIgZm9udC1mYW1pbHk9XCJBcmlhbFwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSh7d2lkdGgqMC84ICsgM30sIDMpIHJvdGF0ZSg5MClcIj5cbiAgICAgICAgICAwYW1cbiAgICAgICAgPC90ZXh0PlxuICAgICAgICA8bGluZSB4MT1cInt3aWR0aCoxLzh9XCIgeDI9XCJ7d2lkdGgqMS84fVwiIHkxPVwiMFwiIHkyPVwie2hlaWdodH1cIiBzdHJva2Utd2lkdGg9XCIxLjBcIiBzdHJva2U9XCIjYWFhXCI+PC9saW5lPlxuICAgICAgICA8dGV4dCB4PVwiMFwiIHk9XCIwXCIgZmlsbD1cIiNhYWFcIiBmb250LXNpemU9XCIxMFwiIGZvbnQtZmFtaWx5PVwiQXJpYWxcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoe3dpZHRoKjEvOCArIDN9LCAzKSByb3RhdGUoOTApXCI+XG4gICAgICAgICAgM2FtXG4gICAgICAgIDwvdGV4dD5cbiAgICAgICAgPGxpbmUgeDE9XCJ7d2lkdGgqMi84fVwiIHgyPVwie3dpZHRoKjIvOH1cIiB5MT1cIjBcIiB5Mj1cIntoZWlnaHR9XCIgc3Ryb2tlLXdpZHRoPVwiMS4wXCIgc3Ryb2tlPVwiIzY2NlwiPjwvbGluZT5cbiAgICAgICAgPHRleHQgZmlsbD1cIiM2NjZcIiBmb250LXNpemU9XCIxMFwiIGZvbnQtZmFtaWx5PVwiQXJpYWxcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoe3dpZHRoKjIvOCArIDN9LCAzKSByb3RhdGUoOTApXCI+XG4gICAgICAgICAgNmFtXG4gICAgICAgIDwvdGV4dD5cbiAgICAgICAgPGxpbmUgeDE9XCJ7d2lkdGgqMy84fVwiIHgyPVwie3dpZHRoKjMvOH1cIiB5MT1cIjBcIiB5Mj1cIntoZWlnaHR9XCIgc3Ryb2tlLXdpZHRoPVwiMS4wXCIgc3Ryb2tlPVwiI2FhYVwiPjwvbGluZT5cbiAgICAgICAgPHRleHQgZmlsbD1cIiNhYWFcIiBmb250LXNpemU9XCIxMFwiIGZvbnQtZmFtaWx5PVwiQXJpYWxcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoe3dpZHRoKjMvOCArIDN9LCAzKSByb3RhdGUoOTApXCI+XG4gICAgICAgICAgOWFtXG4gICAgICAgIDwvdGV4dD5cbiAgICAgICAgPGxpbmUgeDE9XCJ7d2lkdGgqNC84fVwiIHgyPVwie3dpZHRoKjQvOH1cIiB5MT1cIjBcIiB5Mj1cIntoZWlnaHR9XCIgc3Ryb2tlLXdpZHRoPVwiMS4wXCIgc3Ryb2tlPVwiIzQ0NFwiPjwvbGluZT5cbiAgICAgICAgPHRleHQgZmlsbD1cIiM0NDRcIiBmb250LXNpemU9XCIxMFwiIGZvbnQtZmFtaWx5PVwiQXJpYWxcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoe3dpZHRoKjQvOCArIDN9LCAzKSByb3RhdGUoOTApXCI+XG4gICAgICAgICAg7KCV7JikXG4gICAgICAgIDwvdGV4dD5cbiAgICAgICAgPGxpbmUgeDE9XCJ7d2lkdGgqNS84fVwiIHgyPVwie3dpZHRoKjUvOH1cIiB5MT1cIjBcIiB5Mj1cIntoZWlnaHR9XCIgc3Ryb2tlLXdpZHRoPVwiMS4wXCIgc3Ryb2tlPVwiI2FhYVwiPjwvbGluZT5cbiAgICAgICAgPHRleHQgZmlsbD1cIiNhYWFcIiBmb250LXNpemU9XCIxMFwiIGZvbnQtZmFtaWx5PVwiQXJpYWxcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoe3dpZHRoKjUvOCArIDN9LCAzKSByb3RhdGUoOTApXCI+XG4gICAgICAgICAgM3BtXG4gICAgICAgIDwvdGV4dD5cbiAgICAgICAgPGxpbmUgeDE9XCJ7d2lkdGgqNi84fVwiIHgyPVwie3dpZHRoKjYvOH1cIiB5MT1cIjBcIiB5Mj1cIntoZWlnaHR9XCIgc3Ryb2tlLXdpZHRoPVwiMS4wXCIgc3Ryb2tlPVwiIzY2NlwiPjwvbGluZT5cbiAgICAgICAgPHRleHQgZmlsbD1cIiM2NjZcIiBmb250LXNpemU9XCIxMFwiIGZvbnQtZmFtaWx5PVwiQXJpYWxcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoe3dpZHRoKjYvOCArIDN9LCAzKSByb3RhdGUoOTApXCI+XG4gICAgICAgICAgNnBtXG4gICAgICAgIDwvdGV4dD5cbiAgICAgICAgPGxpbmUgeDE9XCJ7d2lkdGgqNy84fVwiIHgyPVwie3dpZHRoKjcvOH1cIiB5MT1cIjBcIiB5Mj1cIntoZWlnaHR9XCIgc3Ryb2tlLXdpZHRoPVwiMS4wXCIgc3Ryb2tlPVwiI2FhYVwiPjwvbGluZT5cbiAgICAgICAgPHRleHQgZmlsbD1cIiNhYWFcIiBmb250LXNpemU9XCIxMFwiIGZvbnQtZmFtaWx5PVwiQXJpYWxcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoe3dpZHRoKjcvOCArIDN9LCAzKSByb3RhdGUoOTApXCI+XG4gICAgICAgICAgOXBtXG4gICAgICAgIDwvdGV4dD5cbiAgICAgICAgPGxpbmUgeDE9XCJ7d2lkdGgqOC84fVwiIHgyPVwie3dpZHRoKjgvOH1cIiB5MT1cIjBcIiB5Mj1cIntoZWlnaHR9XCIgc3Ryb2tlLXdpZHRoPVwiMS4wXCIgc3Ryb2tlPVwiIzQ0NFwiPjwvbGluZT5cbiAgICAgICAgPHRleHQgeD1cIjBcIiB5PVwiMFwiIGZpbGw9XCIjNDQ0XCIgZm9udC1zaXplPVwiMTBcIiBmb250LWZhbWlseT1cIkFyaWFsXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKHt3aWR0aCo4LzggKyAzfSwgMykgcm90YXRlKDkwKVwiPlxuICAgICAgICAgIDEycG1cbiAgICAgICAgPC90ZXh0PlxuICAgICAgPC9nPi0tPlxuICAgICAgPGcgc3Ryb2tlPVwiI0EwQUVDMFwiIHN0cm9rZS13aWR0aD0xLjA+XG4gICAgICA8cGF0aCBcbiAgICAgICAgIGQ9XCJNMCx7aGVpZ2h0KjAuNX0gTHt3aWR0aCAtIDR9LHtoZWlnaHQqMC41fVwiIFxuICAgICAgICAgZmlsbD1cIm5vbmVcIlxuICAgICAgICAgbWFya2VyLWVuZD1cInVybCgjYmlnaGVhZClcIlxuICAgICAgLz4gXG4gICAgICAgIHsjZWFjaCBkYXRhX2NodW5rcyBhcyBkYXRhfVxuICAgICAgICAgIHsjaWYgZGF0YVswXSAmJiBkYXRhWzBdWzVdICYmIGRhdGFbMF1bNV0uZ2FtZSAmJiBnYW1lc1tkYXRhWzBdWzVdLmdhbWUuaWRdICYmIGRhdGFbMF1bNV0uZ2FtZS5ib3hfYXJ0X3VybH1cbiAgICAgICAgICAgIDxwYXRoIFxuICAgICAgICAgICAgICBzdHlsZT1cImZpbGw6dXJsKCNnYW1lLWJveC1hcnQte2RhdGFbMF1bNV0uZ2FtZS5pZH0pOyBzdHJva2UtbGluZWpvaW46IHJvdW5kO1wiXG4gICAgICAgICAgICAgICBkPVwie2RhdGEucGF0aH1cIiAvPlxuICAgICAgICAgIHs6ZWxzZX1cbiAgICAgICAgICAgIDxwYXRoIFxuICAgICAgICAgICAgICBzdHlsZT1cInN0cm9rZS1saW5lam9pbjogcm91bmQ7XCJcbiAgICAgICAgICAgICAgZmlsbD1cIiMwMDAwMDBcIiBcbiAgICAgICAgICAgICAgIGQ9XCJ7ZGF0YS5wYXRofVwiIC8+XG4gICAgICAgICAgey9pZn1cbiAgICAgICAgey9lYWNofVxuICAgICAgPC9nPlxuICAgICAgPGcgc2hhcGUtcmVuZGVyaW5nPVwiY3Jpc3BFZGdlc1wiPlxuICAgICAgICA8bGluZSBjbGFzczpoaWRkZW49e3Rvb2x0aXBfZGF0YSA9PSBudWxsfSB4MT17dG9vbHRpcF94fSB4Mj17dG9vbHRpcF94fSB5MT17MH0geTI9e2hlaWdodH0gc3Ryb2tlPVwiIzAwMDAwMFwiIHN0cm9rZS13aWR0aD0wLjUgXG4gICAgICAgICAgc3Ryb2tlLWRhc2hhcnJheT1cIjQgMVwiXG4gICAgICAgICAgLz5cbiAgICAgIDwvZz5cbiAgICA8L3N2Zz5cbiAgPC9kaXY+XG5cdHsjaWYgdG9vbHRpcF9kYXRhfSBcbiAgICA8ZGl2IGNsYXNzPVwiYWJzb2x1dGUgYmctd2hpdGUgb3BhY2l0eS03NSB6LTUwXCIgc3R5bGU9XCJ7dG9vbHRpcF94IDwgd2lkdGgqMC41PyAnbGVmdDonICsgKHRvb2x0aXBfeCs1KSArICdweCc6ICdyaWdodDonICsgKCh3aWR0aC10b29sdGlwX3gpKzUpICsgJ3B4J307IHRvcDoge3Rvb2x0aXBfeSArIDV9cHhcIj4gXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZmxleCBmbGV4LWNvbCBmb250LXNhbnMgY3VzdG9tLXRvb2x0aXAgcC0zIHctNDggZmxleC11bndyYXBcIj4gXG5cdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJ0ZXh0LWdyYXktNjAwIHRleHQteHMgZm9udC1zZW1pYm9sZCB0cmFja2luZy13aWRlXCI+XG5cdFx0XHRcdFx0XHRcdFx0e3Rvb2x0aXBfZGF0YV90aW1lX2Zvcm1hdCh0b29sdGlwX2RhdGEpfVxuXHRcdFx0XHRcdFx0XHQ8L2Rpdj5cbiAgICAgICAgICAgICAgPHAgY2xhc3M9XCJicmVhay1hbGwgbXQtMSB0ZXh0LWdyYXkgaXRhbGljIHRyYWNraW5nLXRpZ2h0XCIgc3R5bGU9XCJmb250LXNpemU6IDAuNXJlbVwiPlxuXHRcdFx0XHRcdFx0XHRcdHt0b29sdGlwX2RhdGFbNV0udGl0bGV9XG4gICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibXQtMSBmbGV4IGZsZXgtcm93IGZsZXgtd3JhcCBpdGVtcy1jZW50ZXIgdGV4dC1ncmF5LTkwMFwiPlxuICAgICAgICAgICAgICAgICAgPHN2ZyBhcmVhLWhpZGRlbj1cInRydWVcIiByb2xlPVwiaW1nXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAge2ZhVXNlci5pY29uWzBdfSB7ZmFVc2VyLmljb25bMV19XCIgY2xhc3M9XCJ3LTQgaC00IG1yLTIgb3ZlcmZsb3ctdmlzaWJsZSBpbmxpbmUtYmxvY2tcIj5cbiAgICAgICAgICAgICAgICAgICAgPHBhdGggZmlsbD1cImN1cnJlbnRDb2xvclwiIGQ9XCJ7ZmFVc2VyLmljb25bNF19XCIvPlxuICAgICAgICAgICAgICAgICAgPC9zdmc+XG4gICAgICAgICAgICAgICAgICA8Yj57dG9vbHRpcF9kYXRhWzFdfeuqhTwvYj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZmxleCBmbGV4LXJvdyBmbGV4LXdyYXAgaXRlbXMtY2VudGVyIHRleHQtZ3JheS02MDAgdGV4dC14c1wiPlxuICAgICAgICAgICAgICAgICAgPHN2ZyBhcmVhLWhpZGRlbj1cInRydWVcIiByb2xlPVwiaW1nXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAge2ZhVXNlclNlY3JldC5pY29uWzBdfSB7ZmFVc2VyU2VjcmV0Lmljb25bMV19XCIgY2xhc3M9XCJ3LTMgaC0zIG1yLTIgb3ZlcmZsb3ctdmlzaWJsZSBpbmxpbmUtYmxvY2tcIj5cbiAgICAgICAgICAgICAgICAgICAgPHBhdGggZmlsbD1cImN1cnJlbnRDb2xvclwiIGQ9XCJ7ZmFVc2VyU2VjcmV0Lmljb25bNF19XCIvPlxuICAgICAgICAgICAgICAgICAgPC9zdmc+XG4gICAgICAgICAgICAgICAgICA8Yj57dG9vbHRpcF9kYXRhWzFdIC0gdG9vbHRpcF9kYXRhWzJdfeuqhTwvYj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZmxleCBmbGV4LXJvdyBmbGV4LXdyYXAgaXRlbXMtY2VudGVyIHRleHQteWVsbG93LTcwMCB0ZXh0LXhzXCI+XG4gICAgICAgICAgICAgICAgICA8c3ZnIGFyZWEtaGlkZGVuPVwidHJ1ZVwiIHJvbGU9XCJpbWdcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCB7ZmFLZXkuaWNvblswXX0ge2ZhS2V5Lmljb25bMV19XCIgY2xhc3M9XCJ3LTMgaC0zIG1yLTIgb3ZlcmZsb3ctdmlzaWJsZSBpbmxpbmUtYmxvY2tcIj5cbiAgICAgICAgICAgICAgICAgICAgPHBhdGggZmlsbD1cImN1cnJlbnRDb2xvclwiIGQ9XCJ7ZmFLZXkuaWNvbls0XX1cIi8+XG4gICAgICAgICAgICAgICAgICA8L3N2Zz5cbiAgICAgICAgICAgICAgICAgIDxiPnt0b29sdGlwX2RhdGFbMl1966qFPC9iPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtdC0xIGZsZXggZmxleC1yb3cgZmxleC13cmFwIGl0ZW1zLWNlbnRlclwiIHN0eWxlPVwiY29sb3I6ICNGRjZGNjFcIj5cbiAgICAgICAgICAgICAgICAgIDxzdmcgYXJlYS1oaWRkZW49XCJ0cnVlXCIgcm9sZT1cImltZ1wiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIHtmYUNvbW1lbnREb3RzLmljb25bMF19IHtmYUNvbW1lbnREb3RzLmljb25bMV19XCIgY2xhc3M9XCJ3LTQgaC00IG1yLTIgb3ZlcmZsb3ctdmlzaWJsZSBpbmxpbmUtYmxvY2tcIj5cbiAgICAgICAgICAgICAgICAgICAgPHBhdGggZmlsbD1cImN1cnJlbnRDb2xvclwiIGQ9XCJ7ZmFDb21tZW50RG90cy5pY29uWzRdfVwiLz5cbiAgICAgICAgICAgICAgICAgIDwvc3ZnPlxuICAgICAgICAgICAgICAgICAgPGI+e3Rvb2x0aXBfZGF0YVs0XS50b0ZpeGVkKDEpfeyxhO2MhS/stIg8L2I+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm10LTEgZmxleCBmbGV4LXJvdyBmbGV4LXdyYXAgaXRlbXMtY2VudGVyIHRleHQtcHVycGxlLTYwMFwiPlxuICAgICAgICAgICAgICAgICAgPHN2ZyBhcmVhLWhpZGRlbj1cInRydWVcIiByb2xlPVwiaW1nXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAge2ZhSGlzdG9yeS5pY29uWzBdfSB7ZmFIaXN0b3J5Lmljb25bMV19XCIgY2xhc3M9XCJ3LTQgaC00IG1yLTIgb3ZlcmZsb3ctdmlzaWJsZSBpbmxpbmUtYmxvY2tcIj5cbiAgICAgICAgICAgICAgICAgICAgPHBhdGggZmlsbD1cImN1cnJlbnRDb2xvclwiIGQ9XCJ7ZmFIaXN0b3J5Lmljb25bNF19XCIvPlxuICAgICAgICAgICAgICAgICAgPC9zdmc+XG4gICAgICAgICAgICAgICAgICA8Yj7sl4Xtg4DsnoQge01hdGguZmxvb3IoKHRvb2x0aXBfZGF0YVswXSAtIHRvb2x0aXBfZGF0YVs1XS5zdGFydGVkX2F0KSAvIDM2MDApfeyLnOqwhHtNYXRoLnJvdW5kKCh0b29sdGlwX2RhdGFbMF0gLSB0b29sdGlwX2RhdGFbNV0uc3RhcnRlZF9hdCkgJSAzNjAwIC8gNjApfeu2hDwvYj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPHAgY2xhc3M9XCJtdC0yIHRleHQteHMgcHgtMSBib3JkZXIgcm91bmRlZC1mdWxsIHRleHQtd2hpdGUgdGV4dC1jZW50ZXJcIiBzdHlsZT1cImJhY2tncm91bmQtY29sb3I6IHtkYXJrX3JhbmRvbV9jb2xvcih0b29sdGlwX2RhdGFbNV0uZ2FtZSAmJiB0b29sdGlwX2RhdGFbNV0uZ2FtZS5pZCB8fCAwKX1cIj5cbiAgICAgICAgICAgICAgICB7dG9vbHRpcF9kYXRhWzVdLmdhbWUgIT0gbnVsbD8gdG9vbHRpcF9kYXRhWzVdLmdhbWUubmFtZSA6IFwiXCJ9XG4gICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cblx0ey9pZn1cbjwvZGl2PlxuXG48c2NyaXB0IGNvbnRleHQ9XCJtb2R1bGVcIj5cbiAgaW1wb3J0IHsgd3JpdGFibGUgfSBmcm9tICdzdmVsdGUvc3RvcmUnO1xuICBsZXQgbWF4X3lfYXhpcyA9IHdyaXRhYmxlKDApO1xuICBsZXQgbWF4X3lfYXhpc19yaWdodCA9IHdyaXRhYmxlKDApO1xuXG5cdGZ1bmN0aW9uIHRvb2x0aXBfZGF0YV90aW1lX2Zvcm1hdChkYXRhKSB7XG5cdFx0bGV0IGQgPSBuZXcgRGF0ZShkYXRhWzBdKjEwMDApLFxuXHRcdFx0XHRoID0gZC5nZXRIb3VycygpLCBtID0gZC5nZXRNaW51dGVzKCk7XG5cdFx0cmV0dXJuIGAke2g8MTI/IFwiQU1cIjogXCJQTVwifSAkeyhcIjBcIisoaD4xMj8gaC0xMjogaCkpLnNsaWNlKC0yKX06JHsoXCIwXCIrbSkuc2xpY2UoLTIpfWA7XG5cdH1cbjwvc2NyaXB0PlxuXG48c2NyaXB0PlxuaW1wb3J0IHsgb25Nb3VudCB9IGZyb20gXCJzdmVsdGVcIjtcbmltcG9ydCB7IGZhVXNlciB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYVVzZXInXG5pbXBvcnQgeyBmYVVzZXJMb2NrIH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhVXNlckxvY2snXG5pbXBvcnQgeyBmYVVzZXJTZWNyZXQgfSBmcm9tICdAZm9ydGF3ZXNvbWUvZnJlZS1zb2xpZC1zdmctaWNvbnMvZmFVc2VyU2VjcmV0J1xuaW1wb3J0IHsgZmFVc2VyQ2hlY2sgfSBmcm9tICdAZm9ydGF3ZXNvbWUvZnJlZS1zb2xpZC1zdmctaWNvbnMvZmFVc2VyQ2hlY2snXG5pbXBvcnQgeyBmYUNvbW1lbnREb3RzIH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhQ29tbWVudERvdHMnXG5pbXBvcnQgeyBmYUtleSB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYUtleSdcbmltcG9ydCB7IGZhU3VuIH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhU3VuJ1xuaW1wb3J0IHsgZmFNb29uIH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhTW9vbidcbmltcG9ydCB7IGZhRXh0ZXJuYWxMaW5rQWx0IH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhRXh0ZXJuYWxMaW5rQWx0J1xuaW1wb3J0IHsgZmFIaXN0b3J5IH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhSGlzdG9yeSc7XG5pbXBvcnQgeyBkYXJrX3JhbmRvbV9jb2xvciwgZmluZExhc3RJbmRleCB9IGZyb20gXCIuLi91dGlsLmpzXCI7XG5pbXBvcnQgeyBBUEkgfSBmcm9tICcuLi9hcGkuanMnO1xuXG5leHBvcnQgbGV0IGRhdGU7XG5leHBvcnQgbGV0IHN0cmVhbWVyO1xuXG5cblxubGV0IHRvb2x0aXBfeD0wLCBcblx0XHR0b29sdGlwX3k9MCwgXG5cdFx0dG9vbHRpcF9kYXRhPW51bGw7XG5cbmxldCB0b2RheSA9IG5ldyBEYXRlKGRhdGUpOyB0b2RheS5zZXRIb3VycygwLDAsMCwwKTtcbmxldCB0byA9IG5ldyBEYXRlKHRvZGF5LmdldFRpbWUoKSArIDEwMDAqNjAqNjAqMjQpO1xubGV0IGZyb20gPSB0b2RheTtcblxuZXhwb3J0IGxldCBoZWlnaHQgPSAxMDA7XG5sZXQgd2lkdGggPSA1MDA7XG5cbmxldCBnYW1lcyA9IHt9O1xubGV0IGRhdGFfY2h1bmtzID0gW107XG5sZXQgbGFzdF9kYXRhID0gbnVsbDtcbiQ6IGdhbWVfYm94X2FydF93aWR0aCA9IGhlaWdodCowLjQ7XG4kOiBnYW1lX2JveF9hcnRfaGVpZ2h0ID0gaGVpZ2h0KjAuNTtcblxubGV0IHN2ZztcblxubGV0IHRvX3RpbWVzdGFtcCA9IHRvLmdldFRpbWUoKS8xMDAwO1xubGV0IGZyb21fdGltZXN0YW1wID0gZnJvbS5nZXRUaW1lKCkvMTAwMDtcbmZ1bmN0aW9uIHhzY2FsZSh4KSB7XG4gIHJldHVybiB3aWR0aCAqICh4IC0gZnJvbV90aW1lc3RhbXApIC8gKDI0KjYwKjYwKTtcbn1cbmZ1bmN0aW9uIGl4c2NhbGUoeCkge1xuICByZXR1cm4geCAvIHdpZHRoICogKDI0KjYwKjYwKSArIGZyb21fdGltZXN0YW1wXG59XG5mdW5jdGlvbiB5c2NhbGUoeCkge1xuICByZXR1cm4gaGVpZ2h0ICogKCRtYXhfeV9heGlzIC0geCkgLyAkbWF4X3lfYXhpcztcbn1cbmZ1bmN0aW9uIHlzY2FsZV9yaWdodCh4KSB7XG4gIHJldHVybiBoZWlnaHQgKiAoJG1heF95X2F4aXNfcmlnaHQgLSB4KSAvICRtYXhfeV9heGlzX3JpZ2h0ICsgMztcbn1cbmZ1bmN0aW9uIHVwZGF0ZV9wYXRoKCkge1xuICBmb3IobGV0IGRhdGEgb2YgZGF0YV9jaHVua3Mpe1xuICAgIGRhdGEucGF0aCA9IFxuICAgICAgYE0ke3hzY2FsZShkYXRhWzBdWzBdKX0sJHtoZWlnaHQqMC41fWAgK1xuICAgICAgZGF0YS5tYXAoZD0+XG4gICAgICAgIGBMJHt4c2NhbGUoZFswXSl9LCR7eXNjYWxlKGRbMl0pKjAuNX1gXG4gICAgICApLmpvaW4oXCJcIikgKyBcbiAgICAgIGRhdGEubWFwKChfLCBpLCBhcnIpID0+XG4gICAgICAgIGBMJHt4c2NhbGUoYXJyW2Fyci5sZW5ndGggLSBpIC0gMV1bMF0pfSwke3lzY2FsZShhcnJbYXJyLmxlbmd0aCAtIGkgLSAxXVsyXSkqLTAuNSArIGhlaWdodCoxLjB9YFxuICAgICAgKS5qb2luKFwiXCIpICsgXG4gICAgICBgTCR7eHNjYWxlKGRhdGFbMF1bMF0pfSwke2hlaWdodCowLjV9YDtcbiAgfVxuICBkYXRhX2NodW5rcyA9IGRhdGFfY2h1bmtzO1xufVxubGV0IGxhc3RfbWF4X3lfYXhpcyA9ICRtYXhfeV9heGlzO1xubGV0IGxhc3RfbWF4X3lfYXhpc19yaWdodCA9ICRtYXhfeV9heGlzX3JpZ2h0O1xuJDogaWYoZGF0YV9jaHVua3MgJiYgKChsYXN0X21heF95X2F4aXMgIT0gJG1heF95X2F4aXMpIHx8IChsYXN0X21heF95X2F4aXNfcmlnaHQgIT0gJG1heF95X2F4aXNfcmlnaHQpKSkge1xuICBsYXN0X21heF95X2F4aXMgPSAkbWF4X3lfYXhpcztcbiAgbGFzdF9tYXhfeV9heGlzX3JpZ2h0ID0gJG1heF95X2F4aXNfcmlnaHQ7XG4gIHVwZGF0ZV9wYXRoKCk7XG59XG5cbmxldCBub3dfeCA9IG51bGw7XG5cbm9uTW91bnQoYXN5bmMgKCk9PiB7XG5cdHdpZHRoID0gc3ZnLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoO1xuICBub3dfeCA9IHhzY2FsZShuZXcgRGF0ZSgpLmdldFRpbWUoKS8xMDAwKTtcbiAgaWYoc3RyZWFtZXIgPT0gbnVsbClcbiAgICByZXR1cm47XG4gIGxldCB7c3RyZWFtX2NoYW5nZXMsIHN0cmVhbV9tZXRhZGF0YV9jaGFuZ2VzfSA9IGF3YWl0IEFQSS50aW1lbGluZShzdHJlYW1lci5pZCwgZnJvbSwgdG8pO1xuICBsYXN0X2RhdGEgPSBzdHJlYW1fY2hhbmdlc1tzdHJlYW1fY2hhbmdlcy5sZW5ndGgtMV07XG4gIG1heF95X2F4aXMudXBkYXRlKHggPT4gTWF0aC5tYXgoeCwgLi4uc3RyZWFtX2NoYW5nZXMubWFwKGQ9Pk1hdGgubWF4KGRbMl0pKSkpO1xuICBtYXhfeV9heGlzX3JpZ2h0LnVwZGF0ZSh4ID0+IE1hdGgubWF4KHgsIC4uLnN0cmVhbV9jaGFuZ2VzLm1hcChkPT5kWzRdKSkpO1xuICBsZXQgaj0wO1xuICBsZXQgbWV0YWRhdGFzID0gc3RyZWFtX2NoYW5nZXMubWFwKHggPT4ge1xuICAgIHdoaWxlKHN0cmVhbV9tZXRhZGF0YV9jaGFuZ2VzLmxlbmd0aCA+IGogJiYgeFswXSA+PSBzdHJlYW1fbWV0YWRhdGFfY2hhbmdlc1tqXS50aW1lKSArK2o7XG4gICAgaWYoeFsxXSA9PT0gbnVsbCkgcmV0dXJuIG51bGw7XG4gICAgZWxzZSBpZihqPjApIHJldHVybiBzdHJlYW1fbWV0YWRhdGFfY2hhbmdlc1tqLTFdO1xuICAgIGVsc2UgcmV0dXJuIG51bGw7XG4gIH0pO1xuICBzdHJlYW1fY2hhbmdlcyA9IHN0cmVhbV9jaGFuZ2VzLm1hcCgoZCwgaSk9PlsuLi5kLCBtZXRhZGF0YXNbaV1dKTtcbiAgbGV0IHNtX24gPSAyMCwgY2hhdHRpbmdfc3BlZWRfc20gPSBbc3RyZWFtX2NoYW5nZXMuc2xpY2UoMCwgc21fbikucmVkdWNlKChhLGIpPT5hK2JbNF0sIDApL3NtX25dO1xuICBmb3IobGV0IGk9c21fbiwgbD1zdHJlYW1fY2hhbmdlcy5sZW5ndGgsIHNtPWNoYXR0aW5nX3NwZWVkX3NtWzBdOyBpPGw7ICsraSl7XG4gICAgc20gPSBzbSArIChzdHJlYW1fY2hhbmdlc1tpXVs0XSAtIHN0cmVhbV9jaGFuZ2VzW2ktc21fbl1bNF0pL3NtX247XG4gICAgY2hhdHRpbmdfc3BlZWRfc20ucHVzaChzbSk7XG4gIH1cbiAgZm9yKGxldCBpPTAsIHNtPTA7IGk8TWF0aC5taW4oc21fbiwgc3RyZWFtX2NoYW5nZXMubGVuZ3RoKTsgKytpKXtcbiAgICBzbSA9IHNtKmkvKGkrMSkgKyBzdHJlYW1fY2hhbmdlc1tpXVs0XS8oaSsxKTtcbiAgICBzdHJlYW1fY2hhbmdlc1tpXVs0XSA9IHNtO1xuICB9XG4gIGZvcihsZXQgaT0wLCBsPWNoYXR0aW5nX3NwZWVkX3NtLmxlbmd0aDsgaTxsOyArK2kpXG4gICAgc3RyZWFtX2NoYW5nZXNbTWF0aC5taW4oc3RyZWFtX2NoYW5nZXMubGVuZ3RoLTEsIGkgKyBzbV9uLTEpXVs0XSA9IGNoYXR0aW5nX3NwZWVkX3NtW2ldO1xuXG5cdHN2Zy5vbm1vdXNlbW92ZSA9IGZ1bmN0aW9uKGUpe1xuXHRcdGxldCB4ID0gZS5jbGllbnRYIC0gc3ZnLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLngsIFxuXHRcdFx0XHR5ID0gZS5jbGllbnRZIC0gc3ZnLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnk7XG4gICAgdG9vbHRpcF94ID0geDsgXG4gICAgdG9vbHRpcF95ID0geTtcbiAgICBsZXQgdGFyZ2V0X2RhdGUgPSBpeHNjYWxlKHgpO1xuICAgIGxldCByaWdodF9pbmRleCA9IHN0cmVhbV9jaGFuZ2VzLmZpbmRJbmRleChkID0+IGRbMF0gPj0gdGFyZ2V0X2RhdGUpLFxuICAgICAgICBsZWZ0X2luZGV4ID0gZmluZExhc3RJbmRleChzdHJlYW1fY2hhbmdlcywgZCA9PiBkWzBdIDw9IHRhcmdldF9kYXRlKTtcbiAgICBsZXQgbmVhcmVzdF9pbmRleDsgXG4gICAgaWYocmlnaHRfaW5kZXggPj0gMCAmJiBsZWZ0X2luZGV4ID49IDApIFxuICAgICAgbmVhcmVzdF9pbmRleCA9IE1hdGguYWJzKHN0cmVhbV9jaGFuZ2VzW2xlZnRfaW5kZXhdWzBdIC0gdGFyZ2V0X2RhdGUpIDw9IE1hdGguYWJzKHN0cmVhbV9jaGFuZ2VzW3JpZ2h0X2luZGV4XVswXSAtIHRhcmdldF9kYXRlKT9cbiAgICAgICAgbGVmdF9pbmRleDogcmlnaHRfaW5kZXg7XG4gICAgZWxzZSBpZihyaWdodF9pbmRleCA+PSAwKVxuICAgICAgbmVhcmVzdF9pbmRleCA9IHJpZ2h0X2luZGV4O1xuICAgIGVsc2UgaWYobGVmdF9pbmRleCA+PSAwKVxuICAgICAgbmVhcmVzdF9pbmRleCA9IGxlZnRfaW5kZXg7XG4gICAgZWxzZSB7XG4gICAgICB0b29sdGlwX2RhdGEgPSBudWxsO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmKE1hdGguYWJzKHN0cmVhbV9jaGFuZ2VzW25lYXJlc3RfaW5kZXhdWzBdIC0gdGFyZ2V0X2RhdGUpIDwgNjAqNjApIHsvLyB8fCByaWdodF9pbmRleCAhPSAwICYmIG1ldGFkYXRhc1tyaWdodF9pbmRleF0uc3RhcnRlZF9hdCA9PSBtZXRhZGF0YXNbcmlnaHRfaW5kZXgtMV0uc3RhcnRlZF9hdCkge1xuICAgICAgdG9vbHRpcF9kYXRhID0gc3RyZWFtX2NoYW5nZXNbbmVhcmVzdF9pbmRleF07XG4gICAgfVxuICAgIGVsc2UgXG4gICAgICB0b29sdGlwX2RhdGEgPSBudWxsO1xuICB9XG4gIHN2Zy5vbm1vdXNlbGVhdmUgPSBmdW5jdGlvbihlKXtcbiAgICB0b29sdGlwX2RhdGEgPSBudWxsO1xuICB9XG4gIGRhdGFfY2h1bmtzLnB1c2goW10pO1xuXHRmb3IobGV0IGk9MCwgbD1zdHJlYW1fY2hhbmdlcy5sZW5ndGgsIGo9MDsgaTxsOyArK2kpIHtcbiAgIFx0ICBpZihpPjAgJiYgbWV0YWRhdGFzW2ldICE9IG1ldGFkYXRhc1tpLTFdICYmIFxuICAgICAgICAgICgobWV0YWRhdGFzW2ldID09IG51bGwgfHwgbWV0YWRhdGFzW2ktMV0gPT0gbnVsbCkgfHwgXG4gICAgICAgICAgICBtZXRhZGF0YXNbaV0uc3RhcnRlZF9hdCAhPSBtZXRhZGF0YXNbaS0xXS5zdGFydGVkX2F0IHx8IFxuICAgICAgICAgICAgKG1ldGFkYXRhc1tpXS5nYW1lICYmIG1ldGFkYXRhc1tpXS5nYW1lLmlkKSAhPSAobWV0YWRhdGFzW2ktMV0uZ2FtZSAmJiBtZXRhZGF0YXNbaS0xXS5nYW1lLmlkKSB8fFxuICAgICAgICAgICAgbWV0YWRhdGFzW2ldLnRpdGxlICE9IG1ldGFkYXRhc1tpLTFdLnRpdGxlKSl7XG4gICAgICAgICsrajtcbiAgICAgICAgZGF0YV9jaHVua3MucHVzaChbXSk7XG4gICAgICAgIGlmKG1ldGFkYXRhc1tpXSAmJiBtZXRhZGF0YXNbaS0xXSAmJiBtZXRhZGF0YXNbaV0uc3RhcnRlZF9hdCA9PSBtZXRhZGF0YXNbaS0xXS5zdGFydGVkX2F0KXtcbiAgICAgICAgICBsZXQgbWlkID0gc3RyZWFtX2NoYW5nZXNbaV0uc2xpY2UoMCwgNSkubWFwKChkLCBqKSA9PiBNYXRoLmZsb29yKChkICsgc3RyZWFtX2NoYW5nZXNbaS0xXVtqXSkqMC41KSk7XG4gICAgICAgICAgZGF0YV9jaHVua3Nbai0xXS5wdXNoKFsuLi5taWQsIG1ldGFkYXRhc1tpLTFdXSlcbiAgICAgICAgICBkYXRhX2NodW5rc1tqXS5wdXNoKFsuLi5taWQsIG1ldGFkYXRhc1tpXV0pXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGRhdGFfY2h1bmtzW2pdLnB1c2goc3RyZWFtX2NoYW5nZXNbaV0pXG4gIH1cbiAgdXBkYXRlX3BhdGgoKTtcbiAgZGF0YV9jaHVua3MgPSBkYXRhX2NodW5rcztcbiAgZm9yKGxldCBkYXRhIG9mIGRhdGFfY2h1bmtzKXtcbiAgXHRpZihkYXRhWzBdID09IG51bGwgfHwgZGF0YVswXVs1XSA9PSBudWxsIHx8IGRhdGFbMF1bNV0uZ2FtZSA9PSBudWxsKSBjb250aW51ZTtcblx0XHRnYW1lc1tkYXRhWzBdWzVdLmdhbWUuaWRdID0gZGF0YVswXVs1XS5nYW1lO1xuXHR9XG59KTtcbjwvc2NyaXB0PlxuXG48c3R5bGU+XG4uaXNfc3RyZWFtaW5nX2xhYmVsIHtcbiAgYW5pbWF0aW9uOiBibGlua2VyIDFzIGxpbmVhciBpbmZpbml0ZTtcbn1cbkBrZXlmcmFtZXMgYmxpbmtlciB7XG4gIDUwJSB7XG4gICAgb3BhY2l0eTogMDtcbiAgfVxufVxuPC9zdHlsZT5cbiIsIjxzdmcgY2xhc3M9XCJ3LWZ1bGwgb3ZlcmZsb3ctdmlzaWJsZSBvcGFjaXR5LTUwIHskJHByb3BzLmNsYXNzfVwiIHZpZXdCb3g9XCIwIDAge3dpZHRofSB7aGVpZ2h0fVwiIHdpZHRoPVwie3dpZHRofVwiIGhlaWdodD1cIntoZWlnaHR9XCIgYmluZDp0aGlzPXtzdmd9PlxuICA8ZGVmcz5cbiAgICA8bWFya2VyIGlkPVwiaGVhZFwiIFxuICAgICAgbWFya2VyV2lkdGg9XCIyXCIgbWFya2VySGVpZ2h0PVwiNFwiIFxuICAgICAgICAgICAgICAgICAgICAgIHJlZlg9XCIwLjFcIiByZWZZPVwiMlwiIG9yaWVudD1cImF1dG9cIiA+XG4gICAgICA8cGF0aCBkPVwiTTAsMCBWNCBMMiwyIFpcIiBmaWxsPVwiIzcxODA5NlwiIC8+XG4gICAgPC9tYXJrZXI+XG4gIDwvZGVmcz5cbiAgPGc+XG4gICAgeyNlYWNoIHBhdGhzIGFzIHBhdGh9XG4gICAgPHBhdGhcbiAgICAgIG1hcmtlci1lbmQ9XCJ1cmwoI2hlYWQpXCJcbiAgICAgIHN0cm9rZS13aWR0aD1cIntwYXRoLndpZHRofVwiIFxuICAgICAgZmlsbD1cIm5vbmVcIiBcbiAgICAgIHN0cm9rZT1cIiM3MTgwOTZcIiBcbiAgICAgIGQ9XCJ7cGF0aC5wYXRofVwiXG4gICAgICAvPlxuICAgICAgPHRleHQgXG4gICAgICAgIGZpbGw9XCIjNzE4MDk2XCIgXG4gICAgICAgIGZvbnQtc2l6ZT1cInsxMCArIHBhdGgud2lkdGgqMn1cIiBcbiAgICAgICAgZm9udC1mYW1pbHk9XCJBcmlhbFwiIFxuICAgICAgICB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoe3BhdGgueCArIHBhdGgud2lkdGh9LCB7aGVpZ2h0KjAuNX0pIHJvdGF0ZSg5MClcIlxuICAgICAgICB0ZXh0LWFuY2hvcj1cIm1pZGRsZVwiXG4gICAgICAgID5cbiAgICAgICAge3BhdGguY291bnR966qFXG4gICAgICA8L3RleHQ+XG4gICAgey9lYWNofVxuICA8L2c+XG48L3N2Zz5cbjxzY3JpcHQ+XG4gIGltcG9ydCB7IG9uTW91bnQgfSBmcm9tIFwic3ZlbHRlXCI7XG4gIGNvbnN0IGxlbmd0aCA9IDEwO1xuICBsZXQgd2lkdGggPSAxO1xuICBsZXQgc3ZnO1xuICBleHBvcnQgbGV0IGhlaWdodCA9IDEwMDtcbiAgZXhwb3J0IGxldCB0aW1lbGluZV9oZWlnaHQgPSAxNTA7XG4gIGV4cG9ydCBsZXQgbWlncmF0aW9ucztcbiAgZXhwb3J0IGxldCBpZDE7XG4gIGV4cG9ydCBsZXQgaWQyO1xuICBsZXQgdG9kYXk7XG4gIG9uTW91bnQoKCk9PiB7XG4gICAgd2lkdGggPSBzdmcuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGg7XG4gIH0pO1xuICAkOiB7XG4gICAgaWYobWlncmF0aW9ucy5sZW5ndGgpe1xuICAgICAgdG9kYXkgPSBuZXcgRGF0ZShtaWdyYXRpb25zWzBdLnRpbWUpO1xuICAgICAgdG9kYXkuc2V0SG91cnMoMCwwLDAsMClcbiAgICB9XG4gIH1cbiAgJDogcGF0aHMgPSBtaWdyYXRpb25zLm1hcChtID0+IHtcbiAgICBsZXQgeCA9IChuZXcgRGF0ZShtLnRpbWUpLmdldFRpbWUoKSAtIHRvZGF5LmdldFRpbWUoKSAtIDMwKjYwKjEwMDApKndpZHRoLygyNCo2MCo2MCoxMDAwKTtcbiAgICBsZXQgdyA9IE1hdGgubWF4KDEsIChNYXRoLnNxcnQobS5taWdyYXRpb25fY291bnQpIC8gNSkqd2lkdGgvMTAwMCk7XG4gICAgaWYobS5zb3VyY2UgPT0gaWQxKVxuICAgICAgLy9yZXR1cm4gYE0ke3h9LCR7MH0gQyR7eCArIGxlbmd0aH0sJHswfSAke3h9LCR7aGVpZ2h0fSAke3ggKyBsZW5ndGh9LCR7aGVpZ2h0fWA7XG4gICAgICByZXR1cm4ge1wicGF0aFwiOiBgTSR7eH0sJHstdGltZWxpbmVfaGVpZ2h0KjAuNX0gTCR7eH0sJHtoZWlnaHQqMi8zIC0gdyoxLjV9YCwgXCJ3aWR0aFwiOiB3LCBcImNvdW50XCI6IG0ubWlncmF0aW9uX2NvdW50LCBcInhcIjogeH07XG4gICAgZWxzZVxuICAgICAgLy9yZXR1cm4gYE0ke3h9LCR7aGVpZ2h0fSBDJHt4ICsgbGVuZ3RofSwke2hlaWdodH0gJHt4fSwkezB9ICR7eCArIGxlbmd0aH0sJHswfWA7XG4gICAgICByZXR1cm4ge1wicGF0aFwiOiBgTSR7eH0sJHtoZWlnaHQrdGltZWxpbmVfaGVpZ2h0KjAuNX0gTCR7eH0sJHtoZWlnaHQqMS8zICsgdyoxLjV9YCwgXCJ3aWR0aFwiOiB3LCBcImNvdW50XCI6IG0ubWlncmF0aW9uX2NvdW50LCBcInhcIjogeH07XG4gIH0pO1xuPC9zY3JpcHQ+XG4iLCJjb25zdCBnZXRDYWxlbmRhclBhZ2UgPSAobW9udGgsIHllYXIsIGRheVByb3BzLCB3ZWVrU3RhcnQgPSAwKSA9PiB7XG4gIGxldCBkYXRlID0gbmV3IERhdGUoeWVhciwgbW9udGgsIDEpO1xuICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgLSBkYXRlLmdldERheSgpICsgd2Vla1N0YXJ0KTtcbiAgbGV0IG5leHRNb250aCA9IG1vbnRoID09PSAxMSA/IDAgOiBtb250aCArIDE7XG4gIC8vIGVuc3VyZSBkYXlzIHN0YXJ0cyBvbiBTdW5kYXlcbiAgLy8gYW5kIGVuZCBvbiBzYXR1cmRheVxuICBsZXQgd2Vla3MgPSBbXTtcbiAgd2hpbGUgKGRhdGUuZ2V0TW9udGgoKSAhPT0gbmV4dE1vbnRoIHx8IGRhdGUuZ2V0RGF5KCkgIT09IHdlZWtTdGFydCB8fCB3ZWVrcy5sZW5ndGggIT09IDYpIHtcbiAgICBpZiAoZGF0ZS5nZXREYXkoKSA9PT0gd2Vla1N0YXJ0KSB3ZWVrcy51bnNoaWZ0KHsgZGF5czogW10sIGlkOiBgJHt5ZWFyfSR7bW9udGh9JHt5ZWFyfSR7d2Vla3MubGVuZ3RofWAgfSk7XG4gICAgY29uc3QgdXBkYXRlZCA9IE9iamVjdC5hc3NpZ24oe1xuICAgICAgcGFydE9mTW9udGg6IGRhdGUuZ2V0TW9udGgoKSA9PT0gbW9udGgsXG4gICAgICBkYXk6IGRhdGUuZ2V0RGF0ZSgpLFxuICAgICAgbW9udGg6IGRhdGUuZ2V0TW9udGgoKSxcbiAgICAgIHllYXI6IGRhdGUuZ2V0RnVsbFllYXIoKSxcbiAgICAgIGRhdGU6IG5ldyBEYXRlKGRhdGUpXG4gICAgfSwgZGF5UHJvcHMoZGF0ZSkpO1xuICAgIHdlZWtzWzBdLmRheXMucHVzaCh1cGRhdGVkKTtcbiAgICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgKyAxKTtcbiAgfVxuICB3ZWVrcy5yZXZlcnNlKCk7XG4gIHJldHVybiB7IG1vbnRoLCB5ZWFyLCB3ZWVrcyB9O1xufTtcblxuY29uc3QgZ2V0RGF5UHJvcHNIYW5kbGVyID0gKHN0YXJ0LCBlbmQsIHNlbGVjdGFibGVDYWxsYmFjaykgPT4ge1xuICBsZXQgdG9kYXkgPSBuZXcgRGF0ZSgpO1xuICB0b2RheS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgcmV0dXJuIGRhdGUgPT4ge1xuICAgIGNvbnN0IGlzSW5SYW5nZSA9IGRhdGUgPj0gc3RhcnQgJiYgZGF0ZSA8PSBlbmQ7XG4gICAgcmV0dXJuIHtcbiAgICAgIGlzSW5SYW5nZSxcbiAgICAgIHNlbGVjdGFibGU6IGlzSW5SYW5nZSAmJiAoIXNlbGVjdGFibGVDYWxsYmFjayB8fCBzZWxlY3RhYmxlQ2FsbGJhY2soZGF0ZSkpLFxuICAgICAgaXNUb2RheTogZGF0ZS5nZXRUaW1lKCkgPT09IHRvZGF5LmdldFRpbWUoKVxuICAgIH07XG4gIH07XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TW9udGhzKHN0YXJ0LCBlbmQsIHNlbGVjdGFibGVDYWxsYmFjayA9IG51bGwsIHdlZWtTdGFydCA9IDApIHtcbiAgc3RhcnQuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gIGVuZC5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgbGV0IGVuZERhdGUgPSBuZXcgRGF0ZShlbmQuZ2V0RnVsbFllYXIoKSwgZW5kLmdldE1vbnRoKCkgKyAxLCAxKTtcbiAgbGV0IG1vbnRocyA9IFtdO1xuICBsZXQgZGF0ZSA9IG5ldyBEYXRlKHN0YXJ0LmdldEZ1bGxZZWFyKCksIHN0YXJ0LmdldE1vbnRoKCksIDEpO1xuICBsZXQgZGF5UHJvcHNIYW5kbGVyID0gZ2V0RGF5UHJvcHNIYW5kbGVyKHN0YXJ0LCBlbmQsIHNlbGVjdGFibGVDYWxsYmFjayk7XG4gIHdoaWxlIChkYXRlIDwgZW5kRGF0ZSkge1xuICAgIG1vbnRocy5wdXNoKGdldENhbGVuZGFyUGFnZShkYXRlLmdldE1vbnRoKCksIGRhdGUuZ2V0RnVsbFllYXIoKSwgZGF5UHJvcHNIYW5kbGVyLCB3ZWVrU3RhcnQpKTtcbiAgICBkYXRlLnNldE1vbnRoKGRhdGUuZ2V0TW9udGgoKSArIDEpO1xuICB9XG4gIHJldHVybiBtb250aHM7XG59XG5cbmV4cG9ydCBjb25zdCBhcmVEYXRlc0VxdWl2YWxlbnQgPSAoYSwgYikgPT4gYS5nZXREYXRlKCkgPT09IGIuZ2V0RGF0ZSgpXG4gICYmIGEuZ2V0TW9udGgoKSA9PT0gYi5nZXRNb250aCgpXG4gICYmIGEuZ2V0RnVsbFllYXIoKSA9PT0gYi5nZXRGdWxsWWVhcigpO1xuIiwiPHNjcmlwdD5cbiAgaW1wb3J0IHsgYXJlRGF0ZXNFcXVpdmFsZW50IH0gZnJvbSAnLi9saWIvaGVscGVycyc7XG4gIGltcG9ydCB7IGZseSwgZmFkZSB9IGZyb20gJ3N2ZWx0ZS90cmFuc2l0aW9uJztcbiAgaW1wb3J0IHsgY3JlYXRlRXZlbnREaXNwYXRjaGVyIH0gZnJvbSAnc3ZlbHRlJztcblxuICBjb25zdCBkaXNwYXRjaCA9IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlcigpO1xuXG4gIGV4cG9ydCBsZXQgZGF5cztcbiAgZXhwb3J0IGxldCBzZWxlY3RlZDtcbiAgZXhwb3J0IGxldCBoaWdobGlnaHRlZDtcbiAgZXhwb3J0IGxldCBzaG91bGRTaGFrZURhdGU7XG4gIGV4cG9ydCBsZXQgZGlyZWN0aW9uO1xuPC9zY3JpcHQ+XHJcblxyXG48ZGl2IFxyXG4gIGNsYXNzPVwid2Vla1wiIFxyXG4gIGluOmZseT17eyB4OiBkaXJlY3Rpb24gKiA1MCwgZHVyYXRpb246IDE4MCwgZGVsYXk6IDkwIH19XHJcbiAgb3V0OmZhZGU9e3sgZHVyYXRpb246IDE4MCB9fVxyXG4+XHJcbiAgeyNlYWNoIGRheXMgYXMgZGF5fVxyXG4gICAgPGRpdiBcclxuICAgICAgY2xhc3M9XCJkYXlcIiBcclxuICAgICAgY2xhc3M6b3V0c2lkZS1tb250aD17IWRheS5wYXJ0T2ZNb250aH1cclxuICAgICAgY2xhc3M6aXMtdG9kYXk9e2RheS5pc1RvZGF5fVxyXG4gICAgICBjbGFzczppcy1kaXNhYmxlZD17IWRheS5zZWxlY3RhYmxlfVxyXG4gICAgPlxyXG4gICAgICA8YnV0dG9uIFxyXG4gICAgICAgIGNsYXNzPVwiZGF5LS1sYWJlbFwiIFxyXG4gICAgICAgIGNsYXNzOnNlbGVjdGVkPXthcmVEYXRlc0VxdWl2YWxlbnQoZGF5LmRhdGUsIHNlbGVjdGVkKX1cclxuICAgICAgICBjbGFzczpoaWdobGlnaHRlZD17YXJlRGF0ZXNFcXVpdmFsZW50KGRheS5kYXRlLCBoaWdobGlnaHRlZCl9XHJcbiAgICAgICAgY2xhc3M6c2hha2UtZGF0ZT17c2hvdWxkU2hha2VEYXRlICYmIGFyZURhdGVzRXF1aXZhbGVudChkYXkuZGF0ZSwgc2hvdWxkU2hha2VEYXRlKX1cclxuICAgICAgICBjbGFzczpkaXNhYmxlZD17IWRheS5zZWxlY3RhYmxlfVxyXG4gICAgICAgIHR5cGU9XCJidXR0b25cIlxyXG4gICAgICAgIG9uOmNsaWNrPXsoKSA9PiBkaXNwYXRjaCgnZGF0ZVNlbGVjdGVkJywgZGF5LmRhdGUpfVxyXG4gICAgICA+XHJcbiAgICAgICAge2RheS5kYXRlLmdldERhdGUoKX1cclxuICAgICAgPC9idXR0b24+XHJcbiAgICA8L2Rpdj5cclxuICB7L2VhY2h9XHJcbjwvZGl2PlxyXG5cclxuPHN0eWxlPlxyXG4gIC53ZWVrIHsgXHJcbiAgICBwYWRkaW5nOiAwO1xyXG4gICAgbWFyZ2luOiAwO1xyXG4gICAgZGlzcGxheTogLXdlYmtpdC1ib3g7XHJcbiAgICBkaXNwbGF5OiAtbW96LWJveDtcclxuICAgIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xyXG4gICAgZGlzcGxheTogLXdlYmtpdC1mbGV4O1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGZsZXgtZmxvdzogcm93O1xyXG4gICAgLXdlYmtpdC1mbGV4LWZsb3c6IHJvdztcclxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kO1xyXG4gICAgLW1zLWdyaWQtY29sdW1uOiAxO1xyXG4gICAgZ3JpZC1jb2x1bW46IDE7IFxyXG4gIH1cclxuICAud2VlazpudGgtY2hpbGQoNm4gKyAxKSB7IFxyXG4gICAgLW1zLWdyaWQtcm93OiAxOyBcclxuICAgIGdyaWQtcm93OiAxOyBcclxuICB9XHJcbiAgLndlZWs6bnRoLWNoaWxkKDZuICsgMikgeyBcclxuICAgIC1tcy1ncmlkLXJvdzogMjsgXHJcbiAgICBncmlkLXJvdzogMjsgXHJcbiAgfVxyXG4gIC53ZWVrOm50aC1jaGlsZCg2biArIDMpIHsgXHJcbiAgICAtbXMtZ3JpZC1yb3c6IDM7IFxyXG4gICAgZ3JpZC1yb3c6IDM7IFxyXG4gIH1cclxuICAud2VlazpudGgtY2hpbGQoNm4gKyA0KSB7IFxyXG4gICAgLW1zLWdyaWQtcm93OiA0OyBcclxuICAgIGdyaWQtcm93OiA0OyBcclxuICB9XHJcbiAgLndlZWs6bnRoLWNoaWxkKDZuICsgNSkgeyBcclxuICAgIC1tcy1ncmlkLXJvdzogNTsgXHJcbiAgICBncmlkLXJvdzogNTsgXHJcbiAgfVxyXG4gIC53ZWVrOm50aC1jaGlsZCg2biArIDYpIHsgXHJcbiAgICAtbXMtZ3JpZC1yb3c6IDY7IFxyXG4gICAgZ3JpZC1yb3c6IDY7IFxyXG4gIH1cclxuICAuZGF5IHsgXHJcbiAgICBtYXJnaW46IDJweDtcclxuICAgIGNvbG9yOiB2YXIoLS1kYXktdGV4dC1jb2xvcik7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIGZvbnQtc2l6ZTogMTZweDtcclxuICAgIGZsZXg6IDEgMCBhdXRvO1xyXG4gICAgaGVpZ2h0OiBhdXRvO1xyXG4gICAgZGlzcGxheTogZmxleDsgXHJcbiAgICBmbGV4LWJhc2lzOiAwO1xyXG4gIH1cclxuICAuZGF5Lm91dHNpZGUtbW9udGgsIFxyXG4gIC5kYXkuaXMtZGlzYWJsZWQgeyBcclxuICAgIG9wYWNpdHk6IDAuMzU7XHJcbiAgfVxyXG4gIC5kYXk6YmVmb3JlIHsgXHJcbiAgICBjb250ZW50OiAnJztcclxuICAgIGZsb2F0OiBsZWZ0O1xyXG4gICAgcGFkZGluZy10b3A6IDEwMCU7XHJcbiAgfVxyXG4gIC5kYXktLWxhYmVsIHsgXHJcbiAgICBjb2xvcjogdmFyKC0tZGF5LXRleHQtY29sb3IpO1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgYm9yZGVyOiAxcHggc29saWQgI2ZmZjtcclxuICAgIGJvcmRlci1yYWRpdXM6IDUwJTsgXHJcbiAgICBtYXJnaW46IDEwJTtcclxuICAgIHBhZGRpbmc6IDA7XHJcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgYmFja2dyb3VuZDogdmFyKC0tZGF5LWJhY2tncm91bmQtY29sb3IpO1xyXG4gICAgY3Vyc29yOiBwb2ludGVyO1xyXG4gICAgdHJhbnNpdGlvbjogYWxsIDEwMG1zIGxpbmVhcjtcclxuICAgIGZvbnQtd2VpZ2h0OiBub3JtYWw7XHJcbiAgfVxyXG4gIC5kYXktLWxhYmVsLmRpc2FibGVkIHsgXHJcbiAgICBjdXJzb3I6IGRlZmF1bHQ7XHJcbiAgfVxyXG4gIEBtZWRpYSAobWluLXdpZHRoOiA0ODBweCkgeyBcclxuICAgIC5kYXktLWxhYmVsLmhpZ2hsaWdodGVkLFxyXG4gICAgLmRheS0tbGFiZWw6bm90KC5kaXNhYmxlZCk6aG92ZXIgeyBcclxuICAgICAgYmFja2dyb3VuZDogdmFyKC0tZGF5LWhpZ2hsaWdodGVkLWJhY2tncm91bmQtY29sb3IpO1xyXG4gICAgICBib3JkZXItY29sb3I6IHZhcigtLWRheS1oaWdobGlnaHRlZC1iYWNrZ3JvdW5kLWNvbG9yKTtcclxuICAgICAgY29sb3I6IHZhcigtLWRheS1oaWdobGlnaHRlZC10ZXh0LWNvbG9yKTtcclxuICAgIH1cclxuICB9XHJcbiAgLmRheS0tbGFiZWwuc2hha2UtZGF0ZSB7IFxyXG4gICAgYW5pbWF0aW9uOiBzaGFrZSAwLjRzIDEgbGluZWFyO1xyXG4gIH1cclxuICAuZGF5LS1sYWJlbC5zZWxlY3RlZDpob3ZlcixcclxuICAuZGF5LS1sYWJlbC5zZWxlY3RlZCxcclxuICAuZGF5LS1sYWJlbDphY3RpdmU6bm90KC5kaXNhYmxlZCkgeyBcclxuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWhpZ2hsaWdodC1jb2xvcik7XHJcbiAgICBib3JkZXItY29sb3I6IHZhcigtLWhpZ2hsaWdodC1jb2xvcik7XHJcbiAgICBjb2xvcjogI2ZmZjtcclxuICB9XHJcbiAgLmRheS5pcy10b2RheSAuZGF5LS1sYWJlbCwgXHJcbiAgLmRheS5pcy10b2RheSAuZGF5LS1sYWJlbDpob3ZlciB7IFxyXG4gICAgb3BhY2l0eTogMTsgXHJcbiAgICBiYWNrZ3JvdW5kOiBub25lO1xyXG4gICAgYm9yZGVyLWNvbG9yOiB2YXIoLS1oaWdobGlnaHQtY29sb3IpO1xyXG4gICAgY29sb3I6ICMwMDA7XHJcbiAgfVxyXG5cclxuICBAa2V5ZnJhbWVzIHNoYWtlIHtcclxuICAgIDAlIHsgdHJhbnNmb3JtOiB0cmFuc2xhdGUoN3B4KTsgfVxyXG4gICAgMjAlIHsgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTdweCk7IH1cclxuICAgIDQwJSB7IHRyYW5zZm9ybTogdHJhbnNsYXRlKDNweCk7IH1cclxuICAgIDYwJSB7IHRyYW5zZm9ybTogdHJhbnNsYXRlKC0zcHgpOyB9XHJcbiAgICA4MCUgeyB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgxcHgpOyB9XHJcbiAgICAxMDAlIHsgdHJhbnNmb3JtOiB0cmFuc2xhdGUoMHB4KTsgfVxyXG4gIH1cclxuPC9zdHlsZT5cclxuIiwiPHNjcmlwdD5cbiAgaW1wb3J0IFdlZWsgZnJvbSAnLi9XZWVrLnN2ZWx0ZSc7XG5cbiAgZXhwb3J0IGxldCBpZDtcbiAgZXhwb3J0IGxldCB2aXNpYmxlTW9udGg7XG4gIGV4cG9ydCBsZXQgc2VsZWN0ZWQ7XG4gIGV4cG9ydCBsZXQgaGlnaGxpZ2h0ZWQ7XG4gIGV4cG9ydCBsZXQgc2hvdWxkU2hha2VEYXRlO1xuXG4gIGxldCBsYXN0SWQgPSBpZDtcbiAgbGV0IGRpcmVjdGlvbjtcblxuICAkOiB7XG4gICAgZGlyZWN0aW9uID0gbGFzdElkIDwgaWQgPyAxIDogLTE7XG4gICAgbGFzdElkID0gaWQ7XG4gIH1cbjwvc2NyaXB0PlxyXG5cclxuPGRpdiBjbGFzcz1cIm1vbnRoLWNvbnRhaW5lclwiPlxyXG4gIHsjZWFjaCB2aXNpYmxlTW9udGgud2Vla3MgYXMgd2VlayAod2Vlay5pZCkgfVxyXG4gICAgPFdlZWsgXHJcbiAgICAgIGRheXM9e3dlZWsuZGF5c30gXHJcbiAgICAgIHtzZWxlY3RlZH0gXHJcbiAgICAgIHtoaWdobGlnaHRlZH0gXHJcbiAgICAgIHtzaG91bGRTaGFrZURhdGV9IFxyXG4gICAgICB7ZGlyZWN0aW9ufVxyXG4gICAgICBvbjpkYXRlU2VsZWN0ZWQgXHJcbiAgICAvPlxyXG4gIHsvZWFjaH1cclxuPC9kaXY+XHJcblxyXG48c3R5bGU+XHJcbiAgLm1vbnRoLWNvbnRhaW5lciB7IFxyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBkaXNwbGF5OiAtbXMtZ3JpZDtcclxuICAgIGRpc3BsYXk6IGdyaWQ7XHJcbiAgICAtbXMtZ3JpZC1jb2x1bW5zOiAxZnI7XHJcbiAgICAtbXMtZ3JpZC1yb3dzOiAxZnI7XHJcbiAgfVxyXG48L3N0eWxlPlxyXG4iLCI8c2NyaXB0PlxuICBpbXBvcnQgeyBjcmVhdGVFdmVudERpc3BhdGNoZXIgfSBmcm9tICdzdmVsdGUnO1xuXG4gIGNvbnN0IGRpc3BhdGNoID0gY3JlYXRlRXZlbnREaXNwYXRjaGVyKCk7XG5cbiAgZXhwb3J0IGxldCBtb250aDtcbiAgZXhwb3J0IGxldCB5ZWFyO1xuICBleHBvcnQgbGV0IHN0YXJ0O1xuICBleHBvcnQgbGV0IGVuZDtcbiAgZXhwb3J0IGxldCBjYW5JbmNyZW1lbnRNb250aDtcbiAgZXhwb3J0IGxldCBjYW5EZWNyZW1lbnRNb250aDtcbiAgZXhwb3J0IGxldCBtb250aHNPZlllYXI7XG5cbiAgbGV0IG1vbnRoU2VsZWN0b3JPcGVuID0gZmFsc2U7XG4gIGxldCBhdmFpbGFibGVNb250aHM7XG5cbiAgJDoge1xuICAgIGxldCBpc09uTG93ZXJCb3VuZGFyeSA9IHN0YXJ0LmdldEZ1bGxZZWFyKCkgPT09IHllYXI7XG4gICAgbGV0IGlzT25VcHBlckJvdW5kYXJ5ID0gZW5kLmdldEZ1bGxZZWFyKCkgPT09IHllYXI7XG4gICAgYXZhaWxhYmxlTW9udGhzID0gbW9udGhzT2ZZZWFyLm1hcCgobSwgaSkgPT4ge1xuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHtcbiAgICAgICAgbmFtZTogbVswXSxcbiAgICAgICAgYWJicmV2OiBtWzFdXG4gICAgICB9LCB7XG4gICAgICAgIHNlbGVjdGFibGU6XG4gICAgICAgICAgKCFpc09uTG93ZXJCb3VuZGFyeSAmJiAhaXNPblVwcGVyQm91bmRhcnkpXG4gICAgICAgICAgfHwgKFxuICAgICAgICAgICAgKCFpc09uTG93ZXJCb3VuZGFyeSB8fCBpID49IHN0YXJ0LmdldE1vbnRoKCkpXG4gICAgICAgICAgICAmJiAoIWlzT25VcHBlckJvdW5kYXJ5IHx8IGkgPD0gZW5kLmdldE1vbnRoKCkpXG4gICAgICAgICAgKVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiB0b2dnbGVNb250aFNlbGVjdG9yT3BlbigpIHtcbiAgICBtb250aFNlbGVjdG9yT3BlbiA9ICFtb250aFNlbGVjdG9yT3BlbjtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1vbnRoU2VsZWN0ZWQoZXZlbnQsIHsgbSwgaSB9KSB7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgaWYgKCFtLnNlbGVjdGFibGUpIHJldHVybjtcbiAgICBkaXNwYXRjaCgnbW9udGhTZWxlY3RlZCcsIGkpO1xuICAgIHRvZ2dsZU1vbnRoU2VsZWN0b3JPcGVuKCk7XG4gIH1cbjwvc2NyaXB0PlxyXG5cclxuPGRpdiBjbGFzcz1cInRpdGxlXCI+XHJcbiAgPGRpdiBjbGFzcz1cImhlYWRpbmctc2VjdGlvblwiPlxyXG4gICAgPGRpdiBjbGFzcz1cImNvbnRyb2xcIiBcclxuICAgICAgY2xhc3M6ZW5hYmxlZD17Y2FuRGVjcmVtZW50TW9udGh9XHJcbiAgICAgIG9uOmNsaWNrPXsoKSA9PiBkaXNwYXRjaCgnaW5jcmVtZW50TW9udGgnLCAtMSl9PlxyXG4gICAgICA8aSBjbGFzcz1cImFycm93IGxlZnRcIj48L2k+XHJcbiAgICA8L2Rpdj5cclxuICAgIDxkaXYgY2xhc3M9XCJsYWJlbFwiIG9uOmNsaWNrPXt0b2dnbGVNb250aFNlbGVjdG9yT3Blbn0+XHJcbiAgICAgIHttb250aHNPZlllYXJbbW9udGhdWzBdfSB7eWVhcn1cclxuICAgIDwvZGl2PiBcclxuICAgIDxkaXYgY2xhc3M9XCJjb250cm9sXCJcclxuICAgICAgY2xhc3M6ZW5hYmxlZD17Y2FuSW5jcmVtZW50TW9udGh9XHJcbiAgICAgIG9uOmNsaWNrPXsoKSA9PiBkaXNwYXRjaCgnaW5jcmVtZW50TW9udGgnLCAxKX0+XHJcbiAgICAgIDxpIGNsYXNzPVwiYXJyb3cgcmlnaHRcIj48L2k+XHJcbiAgICA8L2Rpdj5cclxuICA8L2Rpdj5cclxuICA8ZGl2IGNsYXNzPVwibW9udGgtc2VsZWN0b3JcIiBjbGFzczpvcGVuPXttb250aFNlbGVjdG9yT3Blbn0+XHJcbiAgICB7I2VhY2ggYXZhaWxhYmxlTW9udGhzIGFzIG1vbnRoRGVmaW5pdGlvbiwgaW5kZXh9XHJcbiAgICAgIDxkaXYgXHJcbiAgICAgICAgY2xhc3M9XCJtb250aC1zZWxlY3Rvci0tbW9udGhcIiBcclxuICAgICAgICBjbGFzczpzZWxlY3RlZD17aW5kZXggPT09IG1vbnRofVxyXG4gICAgICAgIGNsYXNzOnNlbGVjdGFibGU9e21vbnRoRGVmaW5pdGlvbi5zZWxlY3RhYmxlfVxyXG4gICAgICAgIG9uOmNsaWNrPXtlID0+IG1vbnRoU2VsZWN0ZWQoZSwgeyBtOiBtb250aERlZmluaXRpb24sIGk6IGluZGV4IH0pfVxyXG4gICAgICA+XHJcbiAgICAgICAgPHNwYW4+e21vbnRoRGVmaW5pdGlvbi5hYmJyZXZ9PC9zcGFuPlxyXG4gICAgICA8L2Rpdj5cclxuICAgIHsvZWFjaH1cclxuICA8L2Rpdj5cclxuPC9kaXY+XHJcblxyXG48c3R5bGU+XHJcbiAgLmhlYWRpbmctc2VjdGlvbiB7IFxyXG4gICAgZm9udC1zaXplOiAyMHB4O1xyXG4gICAgcGFkZGluZzogMjRweCAxNXB4O1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcclxuICAgIGNvbG9yOiAjM2Q0NTQ4O1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgfVxyXG4gIC5sYWJlbCB7IFxyXG4gICAgY3Vyc29yOiBwb2ludGVyO1xyXG4gIH1cclxuICAubW9udGgtc2VsZWN0b3IgeyBcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIHRvcDogNzVweDsgXHJcbiAgICBsZWZ0OiAwOyBcclxuICAgIHJpZ2h0OiAwOyBcclxuICAgIGJvdHRvbTogMDsgXHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xyXG4gICAgdHJhbnNpdGlvbjogYWxsIDMwMG1zOyBcclxuICAgIHRyYW5zZm9ybTogc2NhbGUoMS4yKTsgXHJcbiAgICBvcGFjaXR5OiAwOyBcclxuICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcclxuICAgIHotaW5kZXg6IDE7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgfVxyXG4gIC5tb250aC1zZWxlY3Rvci5vcGVuIHsgXHJcbiAgICB0cmFuc2Zvcm06IHNjYWxlKDEpOyBcclxuICAgIHZpc2liaWxpdHk6IHZpc2libGU7XHJcbiAgICBvcGFjaXR5OiAxO1xyXG4gIH1cclxuICAubW9udGgtc2VsZWN0b3ItLW1vbnRoIHsgXHJcbiAgICB3aWR0aDogMzEuMzMzJTsgXHJcbiAgICBtYXJnaW46IC41JTsgXHJcbiAgICBoZWlnaHQ6IDIzJTtcclxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuICAgIGNvbG9yOiAjNGE0YTRhO1xyXG4gICAgYm9yZGVyOiAxcHggc29saWQgI2VmZWZlZjtcclxuICAgIG9wYWNpdHk6IDAuMjtcclxuICB9XHJcbiAgLm1vbnRoLXNlbGVjdG9yLS1tb250aC5zZWxlY3RhYmxlIHsgXHJcbiAgICBvcGFjaXR5OiAxOyBcclxuICB9XHJcbiAgLm1vbnRoLXNlbGVjdG9yLS1tb250aC5zZWxlY3RhYmxlOmhvdmVyIHsgXHJcbiAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgICBib3gtc2hhZG93OiAwcHggMHB4IDNweCByZ2JhKDAsMCwwLDAuMTUpO1xyXG4gIH1cclxuICAubW9udGgtc2VsZWN0b3ItLW1vbnRoLnNlbGVjdGVkIHsgXHJcbiAgICBiYWNrZ3JvdW5kOiB2YXIoLS1oaWdobGlnaHQtY29sb3IpO1xyXG4gICAgY29sb3I6ICNmZmY7XHJcbiAgfVxyXG4gIC5tb250aC1zZWxlY3Rvci0tbW9udGg6YmVmb3JlIHsgXHJcbiAgICBjb250ZW50OiAnICc7XHJcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgICBoZWlnaHQ6IDEwMCU7XHJcbiAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xyXG4gIH1cclxuICAubW9udGgtc2VsZWN0b3ItLW1vbnRoIHNwYW4geyBcclxuICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7IFxyXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gIH1cclxuXHJcbiAgLmNvbnRyb2wgeyBcclxuICAgIHBhZGRpbmc6IDAgOHB4O1xyXG4gICAgb3BhY2l0eTogMC4yO1xyXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDNweCk7XHJcbiAgfVxyXG5cclxuICAuY29udHJvbC5lbmFibGVkIHsgXHJcbiAgICBvcGFjaXR5OiAxOyBcclxuICAgIGN1cnNvcjogcG9pbnRlcjtcclxuICB9XHJcblxyXG4gIC5hcnJvdyB7XHJcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgICB3aWR0aDogMThweDtcclxuICAgIGhlaWdodDogMThweDtcclxuICAgIGJvcmRlci1zdHlsZTogc29saWQ7XHJcbiAgICBib3JkZXItY29sb3I6ICNhOWE5YTk7XHJcbiAgICBib3JkZXItd2lkdGg6IDA7XHJcbiAgICBib3JkZXItYm90dG9tLXdpZHRoOiAycHg7XHJcbiAgICBib3JkZXItcmlnaHQtd2lkdGg6IDJweDtcclxuICB9XHJcblxyXG4gIC5hcnJvdy5yaWdodCB7XHJcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSgtNDVkZWcpO1xyXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSgtNDVkZWcpO1xyXG4gIH1cclxuXHJcbiAgLmFycm93LmxlZnQge1xyXG4gICAgdHJhbnNmb3JtOiByb3RhdGUoMTM1ZGVnKTtcclxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoMTM1ZGVnKTtcclxuICB9XHJcblxyXG48L3N0eWxlPlxyXG4iLCI8c2NyaXB0PlxuICBpbXBvcnQgeyBvbk1vdW50LCBjcmVhdGVFdmVudERpc3BhdGNoZXIsIHRpY2sgfSBmcm9tICdzdmVsdGUnO1xuXG4gIGNvbnN0IGRpc3BhdGNoID0gY3JlYXRlRXZlbnREaXNwYXRjaGVyKCk7XG5cbiAgbGV0IG9uY2UgPSAoZWwsIGV2dCwgY2IpID0+IHtcbiAgICBmdW5jdGlvbiBoYW5kbGVyKCkge1xuICAgICAgY2IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZ0LCBoYW5kbGVyKTtcbiAgICB9XG4gICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihldnQsIGhhbmRsZXIpO1xuICB9O1xuXG4gIGxldCBwb3BvdmVyO1xuICBsZXQgdztcbiAgbGV0IHRyaWdnZXJDb250YWluZXI7XG4gIGxldCBjb250ZW50c0FuaW1hdGVkO1xuICBsZXQgY29udGVudHNXcmFwcGVyO1xuICBsZXQgdHJhbnNsYXRlWSA9IDA7XG4gIGxldCB0cmFuc2xhdGVYID0gMDtcblxuICBleHBvcnQgbGV0IG9wZW4gPSBmYWxzZTtcbiAgZXhwb3J0IGxldCBzaHJpbms7XG4gIGV4cG9ydCBsZXQgdHJpZ2dlcjtcbiAgZXhwb3J0IGNvbnN0IGNsb3NlID0gKCkgPT4ge1xuICAgIHNocmluayA9IHRydWU7XG4gICAgb25jZShjb250ZW50c0FuaW1hdGVkLCAnYW5pbWF0aW9uZW5kJywgKCkgPT4ge1xuICAgICAgc2hyaW5rID0gZmFsc2U7XG4gICAgICBvcGVuID0gZmFsc2U7XG4gICAgICBkaXNwYXRjaCgnY2xvc2VkJyk7XG4gICAgfSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gY2hlY2tGb3JGb2N1c0xvc3MoZXZ0KSB7XG4gICAgaWYgKCFvcGVuKSByZXR1cm47XG4gICAgbGV0IGVsID0gZXZ0LnRhcmdldDtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICBkbyB7XHJcbiAgICAgIGlmIChlbCA9PT0gcG9wb3ZlcikgcmV0dXJuO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgIH0gd2hpbGUgKGVsID0gZWwucGFyZW50Tm9kZSk7XHJcbiAgICBjbG9zZSgpO1xuICB9XG5cbiAgb25Nb3VudCgoKSA9PiB7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBjaGVja0ZvckZvY3VzTG9zcyk7XG4gICAgaWYgKCF0cmlnZ2VyKSByZXR1cm47XG4gICAgdHJpZ2dlckNvbnRhaW5lci5hcHBlbmRDaGlsZCh0cmlnZ2VyLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodHJpZ2dlcikpO1xuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBjaGVja0ZvckZvY3VzTG9zcyk7XG4gICAgfTtcbiAgfSk7XG5cbiAgY29uc3QgZ2V0RGlzdGFuY2VUb0VkZ2VzID0gYXN5bmMgKCkgPT4ge1xuICAgIGlmICghb3BlbikgeyBvcGVuID0gdHJ1ZTsgfVxuICAgIGF3YWl0IHRpY2soKTtcbiAgICBsZXQgcmVjdCA9IGNvbnRlbnRzV3JhcHBlci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICByZXR1cm4ge1xuICAgICAgdG9wOiByZWN0LnRvcCArICgtMSAqIHRyYW5zbGF0ZVkpLFxuICAgICAgYm90dG9tOiB3aW5kb3cuaW5uZXJIZWlnaHQgLSByZWN0LmJvdHRvbSArIHRyYW5zbGF0ZVksXG4gICAgICBsZWZ0OiByZWN0LmxlZnQgKyAoLTEgKiB0cmFuc2xhdGVYKSxcbiAgICAgIHJpZ2h0OiBkb2N1bWVudC5ib2R5LmNsaWVudFdpZHRoIC0gcmVjdC5yaWdodCArIHRyYW5zbGF0ZVhcbiAgICB9O1xuICB9O1xuXG4gIGNvbnN0IGdldFRyYW5zbGF0ZSA9IGFzeW5jICgpID0+IHtcbiAgICBsZXQgZGlzdCA9IGF3YWl0IGdldERpc3RhbmNlVG9FZGdlcygpO1xuICAgIGxldCB4OyBsZXRcbiAgICAgIHk7XG4gICAgaWYgKHcgPCA0ODApIHtcbiAgICAgIHkgPSBkaXN0LmJvdHRvbTtcbiAgICB9IGVsc2UgaWYgKGRpc3QudG9wIDwgMCkge1xuICAgICAgeSA9IE1hdGguYWJzKGRpc3QudG9wKTtcbiAgICB9IGVsc2UgaWYgKGRpc3QuYm90dG9tIDwgMCkge1xuICAgICAgeSA9IGRpc3QuYm90dG9tO1xuICAgIH0gZWxzZSB7XG4gICAgICB5ID0gMDtcbiAgICB9XG4gICAgaWYgKGRpc3QubGVmdCA8IDApIHtcbiAgICAgIHggPSBNYXRoLmFicyhkaXN0LmxlZnQpO1xuICAgIH0gZWxzZSBpZiAoZGlzdC5yaWdodCA8IDApIHtcbiAgICAgIHggPSBkaXN0LnJpZ2h0O1xuICAgIH0gZWxzZSB7XG4gICAgICB4ID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIHsgeCwgeSB9O1xuICB9O1xuXG4gIGNvbnN0IGRvT3BlbiA9IGFzeW5jICgpID0+IHtcbiAgICBjb25zdCB7IHgsIHkgfSA9IGF3YWl0IGdldFRyYW5zbGF0ZSgpO1xuXG4gICAgdHJhbnNsYXRlWCA9IHg7XG4gICAgdHJhbnNsYXRlWSA9IHk7XG4gICAgb3BlbiA9IHRydWU7XG5cbiAgICBkaXNwYXRjaCgnb3BlbmVkJyk7XG4gIH07XG48L3NjcmlwdD5cclxuXHJcbjxzdmVsdGU6d2luZG93IGJpbmQ6aW5uZXJXaWR0aD17d30gLz5cclxuPGRpdiBjbGFzcz1cInNjLXBvcG92ZXJcIiBiaW5kOnRoaXM9e3BvcG92ZXJ9PlxyXG4gIDxkaXYgY2xhc3M9XCJ0cmlnZ2VyXCIgb246Y2xpY2s9e2RvT3Blbn0gYmluZDp0aGlzPXt0cmlnZ2VyQ29udGFpbmVyfT5cclxuICAgIDxzbG90IG5hbWU9XCJ0cmlnZ2VyXCI+XHJcbiAgICA8L3Nsb3Q+XHJcbiAgPC9kaXY+XHJcbiAgPGRpdiBcclxuICAgIGNsYXNzPVwiY29udGVudHMtd3JhcHBlclwiIFxyXG4gICAgY2xhc3M6dmlzaWJsZT17b3Blbn1cclxuICAgIGNsYXNzOnNocmluaz17c2hyaW5rfVxyXG4gICAgc3R5bGU9XCJ0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLC01MCUpIHRyYW5zbGF0ZSh7dHJhbnNsYXRlWH1weCwge3RyYW5zbGF0ZVl9cHgpXCIgXHJcbiAgICBiaW5kOnRoaXM9e2NvbnRlbnRzV3JhcHBlcn0+XHJcbiAgICA8ZGl2IGNsYXNzPVwiY29udGVudHNcIiBiaW5kOnRoaXM9e2NvbnRlbnRzQW5pbWF0ZWR9PlxyXG4gICAgICA8ZGl2IGNsYXNzPVwiY29udGVudHMtaW5uZXJcIj5cclxuICAgICAgICA8c2xvdCBuYW1lPVwiY29udGVudHNcIj48L3Nsb3Q+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbiAgPC9kaXY+XHJcbjwvZGl2PlxyXG5cclxuPHN0eWxlPlxyXG4gIC5zYy1wb3BvdmVyIHsgXHJcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgfVxyXG5cclxuICAuY29udGVudHMtd3JhcHBlciB7IFxyXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7IFxyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgdG9wOiA1MCU7IFxyXG4gICAgbGVmdDogNTAlOyBcclxuICAgIHRyYW5zaXRpb246IG5vbmU7XHJcbiAgICB6LWluZGV4OiAyO1xyXG4gICAgZGlzcGxheTogbm9uZTtcclxuICB9XHJcblxyXG4gIC5jb250ZW50cyB7IFxyXG4gICAgYmFja2dyb3VuZDogI2ZmZjtcclxuICAgIGJveC1zaGFkb3c6IDBweCAxMHB4IDI2cHggcmdiYSgwLDAsMCwwLjQpIDtcclxuICAgIG9wYWNpdHk6IC44OyBcclxuICAgIHBhZGRpbmctdG9wOiAwO1xyXG4gICAgZGlzcGxheTogbm9uZTtcclxuICAgIGFuaW1hdGlvbjogZ3JvdyAyMDBtcyBmb3J3YXJkcyBjdWJpYy1iZXppZXIoLjkyLC4wOSwuMTgsMS4wNSk7XHJcbiAgfVxyXG5cclxuICAuY29udGVudHMtaW5uZXIgeyBcclxuICAgIGFuaW1hdGlvbjogZmFkZUluIDQwMG1zIGZvcndhcmRzO1xyXG4gIH1cclxuXHJcbiAgLmNvbnRlbnRzLXdyYXBwZXIudmlzaWJsZSB7IFxyXG4gICAgZGlzcGxheTogYmxvY2s7XHJcbiAgfVxyXG5cclxuICAuY29udGVudHMtd3JhcHBlci52aXNpYmxlIC5jb250ZW50cyB7IFxyXG4gICAgb3BhY2l0eTogMTsgXHJcbiAgICB0cmFuc2Zvcm06IHNjYWxlKDEpO1xyXG4gICAgZGlzcGxheTogYmxvY2s7XHJcbiAgfVxyXG5cclxuICAuY29udGVudHMtd3JhcHBlci5zaHJpbmsgLmNvbnRlbnRzIHsgXHJcbiAgICBhbmltYXRpb246IHNocmluayAxNTBtcyBmb3J3YXJkcyBjdWJpYy1iZXppZXIoLjkyLC4wOSwuMTgsMS4wNSk7XHJcbiAgfVxyXG5cclxuICBAa2V5ZnJhbWVzIGdyb3cgeyBcclxuICAgIDAlIHsgXHJcbiAgICAgIHRyYW5zZm9ybTogc2NhbGUoLjksLjEpOyBcclxuICAgICAgb3BhY2l0eTogMDsgXHJcbiAgICB9XHJcbiAgICAzMCUgeyBcclxuICAgICAgb3BhY2l0eTogMTsgXHJcbiAgICB9XHJcbiAgICAxMDAlIHsgXHJcbiAgICAgIHRyYW5zZm9ybTogc2NhbGUoMSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBAa2V5ZnJhbWVzIHNocmluayB7IFxyXG4gICAgMCUgeyBcclxuICAgICAgdHJhbnNmb3JtOiBzY2FsZSgxKTsgXHJcbiAgICAgIG9wYWNpdHk6IDE7IFxyXG4gICAgfVxyXG4gICAgNzAlIHsgXHJcbiAgICAgIG9wYWNpdHk6IDE7IFxyXG4gICAgfVxyXG4gICAgMTAwJSB7IFxyXG4gICAgICBvcGFjaXR5OiAwOyBcclxuICAgICAgdHJhbnNmb3JtOiBzY2FsZSguOSwuMSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBAa2V5ZnJhbWVzIGZhZGVJbiB7IFxyXG4gICAgMCUgeyBcclxuICAgICAgb3BhY2l0eTogMDsgXHJcbiAgICB9XHJcbiAgICA1MCUgeyBcclxuICAgICAgb3BhY2l0eTogMDtcclxuICAgIH1cclxuICAgIDEwMCUgeyBcclxuICAgICAgb3BhY2l0eTogMTsgXHJcbiAgICB9XHJcbiAgfVxyXG48L3N0eWxlPlxyXG4iLCIvKipcclxuICogZ2VuZXJpYyBmdW5jdGlvbiB0byBpbmplY3QgZGF0YSBpbnRvIHRva2VuLWxhZGVuIHN0cmluZ1xyXG4gKiBAcGFyYW0gc3RyIHtTdHJpbmd9IFJlcXVpcmVkXHJcbiAqIEBwYXJhbSBuYW1lIHtTdHJpbmd9IFJlcXVpcmVkXHJcbiAqIEBwYXJhbSB2YWx1ZSB7U3RyaW5nfEludGVnZXJ9IFJlcXVpcmVkXHJcbiAqIEByZXR1cm5zIHtTdHJpbmd9XHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqIGluamVjdFN0cmluZ0RhdGEoXCJUaGUgZm9sbG93aW5nIGlzIGEgdG9rZW46ICN7dG9rZW5OYW1lfVwiLCBcInRva2VuTmFtZVwiLCAxMjMpOyBcclxuICogQHJldHVybnMge1N0cmluZ30gXCJUaGUgZm9sbG93aW5nIGlzIGEgdG9rZW46IDEyM1wiXHJcbiAqXHJcbiAqL1xyXG5jb25zdCBpbmplY3RTdHJpbmdEYXRhID0gKHN0cixuYW1lLHZhbHVlKSA9PiBzdHJcclxuICAucmVwbGFjZShuZXcgUmVnRXhwKCcjeycrbmFtZSsnfScsJ2cnKSwgdmFsdWUpO1xyXG5cclxuLyoqXHJcbiAqIEdlbmVyaWMgZnVuY3Rpb24gdG8gZW5mb3JjZSBsZW5ndGggb2Ygc3RyaW5nLiBcclxuICogXHJcbiAqIFBhc3MgYSBzdHJpbmcgb3IgbnVtYmVyIHRvIHRoaXMgZnVuY3Rpb24gYW5kIHNwZWNpZnkgdGhlIGRlc2lyZWQgbGVuZ3RoLlxyXG4gKiBUaGlzIGZ1bmN0aW9uIHdpbGwgZWl0aGVyIHBhZCB0aGUgIyB3aXRoIGxlYWRpbmcgMCdzIChpZiBzdHIubGVuZ3RoIDwgbGVuZ3RoKVxyXG4gKiBvciByZW1vdmUgZGF0YSBmcm9tIHRoZSBlbmQgKEBmcm9tQmFjaz09ZmFsc2UpIG9yIGJlZ2lubmluZyAoQGZyb21CYWNrPT10cnVlKVxyXG4gKiBvZiB0aGUgc3RyaW5nIHdoZW4gc3RyLmxlbmd0aCA+IGxlbmd0aC5cclxuICpcclxuICogV2hlbiBsZW5ndGggPT0gc3RyLmxlbmd0aCBvciB0eXBlb2YgbGVuZ3RoID09ICd1bmRlZmluZWQnLCB0aGlzIGZ1bmN0aW9uXHJcbiAqIHJldHVybnMgdGhlIG9yaWdpbmFsIEBzdHIgcGFyYW1ldGVyLlxyXG4gKiBcclxuICogQHBhcmFtIHN0ciB7U3RyaW5nfSBSZXF1aXJlZFxyXG4gKiBAcGFyYW0gbGVuZ3RoIHtJbnRlZ2VyfSBSZXF1aXJlZFxyXG4gKiBAcGFyYW0gZnJvbUJhY2sge0Jvb2xlYW59IE9wdGlvbmFsXHJcbiAqIEByZXR1cm5zIHtTdHJpbmd9XHJcbiAqXHJcbiAqL1xyXG5jb25zdCBlbmZvcmNlTGVuZ3RoID0gZnVuY3Rpb24oc3RyLGxlbmd0aCxmcm9tQmFjaykge1xyXG4gIHN0ciA9IHN0ci50b1N0cmluZygpO1xyXG4gIGlmKHR5cGVvZiBsZW5ndGggPT0gJ3VuZGVmaW5lZCcpIHJldHVybiBzdHI7XHJcbiAgaWYoc3RyLmxlbmd0aCA9PSBsZW5ndGgpIHJldHVybiBzdHI7XHJcbiAgZnJvbUJhY2sgPSAodHlwZW9mIGZyb21CYWNrID09ICd1bmRlZmluZWQnKSA/IGZhbHNlIDogZnJvbUJhY2s7XHJcbiAgaWYoc3RyLmxlbmd0aCA8IGxlbmd0aCkge1xyXG4gICAgLy8gcGFkIHRoZSBiZWdpbm5pbmcgb2YgdGhlIHN0cmluZyB3LyBlbm91Z2ggMCdzIHRvIHJlYWNoIGRlc2lyZWQgbGVuZ3RoOlxyXG4gICAgd2hpbGUobGVuZ3RoIC0gc3RyLmxlbmd0aCA+IDApIHN0ciA9ICcwJyArIHN0cjtcclxuICB9IGVsc2UgaWYoc3RyLmxlbmd0aCA+IGxlbmd0aCkge1xyXG4gICAgaWYoZnJvbUJhY2spIHtcclxuICAgICAgLy8gZ3JhYiB0aGUgZGVzaXJlZCAjL2NoYXJzIGZyb20gZW5kIG9mIHN0cmluZzogZXg6ICcyMDE1JyAtPiAnMTUnXHJcbiAgICAgIHN0ciA9IHN0ci5zdWJzdHJpbmcoc3RyLmxlbmd0aC1sZW5ndGgpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gZ3JhYiB0aGUgZGVzaXJlZCAjL2NoYXJzIGZyb20gYmVnaW5uaW5nIG9mIHN0cmluZzogZXg6ICcyMDE1JyAtPiAnMjAnXHJcbiAgICAgIHN0ciA9IHN0ci5zdWJzdHJpbmcoMCxsZW5ndGgpO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gc3RyO1xyXG59O1xuXG5jb25zdCBkYXlzT2ZXZWVrID0gWyBcclxuICBbICdTdW5kYXknLCAnU3VuJyBdLFxyXG4gIFsgJ01vbmRheScsICdNb24nIF0sXHJcbiAgWyAnVHVlc2RheScsICdUdWUnIF0sXHJcbiAgWyAnV2VkbmVzZGF5JywgJ1dlZCcgXSxcclxuICBbICdUaHVyc2RheScsICdUaHUnIF0sXHJcbiAgWyAnRnJpZGF5JywgJ0ZyaScgXSxcclxuICBbICdTYXR1cmRheScsICdTYXQnIF1cclxuXTtcclxuXHJcbmNvbnN0IG1vbnRoc09mWWVhciA9IFsgXHJcbiAgWyAnSmFudWFyeScsICdKYW4nIF0sXHJcbiAgWyAnRmVicnVhcnknLCAnRmViJyBdLFxyXG4gIFsgJ01hcmNoJywgJ01hcicgXSxcclxuICBbICdBcHJpbCcsICdBcHInIF0sXHJcbiAgWyAnTWF5JywgJ01heScgXSxcclxuICBbICdKdW5lJywgJ0p1bicgXSxcclxuICBbICdKdWx5JywgJ0p1bCcgXSxcclxuICBbICdBdWd1c3QnLCAnQXVnJyBdLFxyXG4gIFsgJ1NlcHRlbWJlcicsICdTZXAnIF0sXHJcbiAgWyAnT2N0b2JlcicsICdPY3QnIF0sXHJcbiAgWyAnTm92ZW1iZXInLCAnTm92JyBdLFxyXG4gIFsgJ0RlY2VtYmVyJywgJ0RlYycgXVxyXG5dO1xyXG5cclxubGV0IGRpY3Rpb25hcnkgPSB7IFxyXG4gIGRheXNPZldlZWssIFxyXG4gIG1vbnRoc09mWWVhclxyXG59O1xyXG5cclxuY29uc3QgZXh0ZW5kRGljdGlvbmFyeSA9IChjb25mKSA9PiBcclxuICBPYmplY3Qua2V5cyhjb25mKS5mb3JFYWNoKGtleSA9PiB7XHJcbiAgICBpZihkaWN0aW9uYXJ5W2tleV0gJiYgZGljdGlvbmFyeVtrZXldLmxlbmd0aCA9PSBjb25mW2tleV0ubGVuZ3RoKSB7XHJcbiAgICAgIGRpY3Rpb25hcnlba2V5XSA9IGNvbmZba2V5XTtcclxuICAgIH1cclxuICB9KTtcclxuXHJcbmNvbnN0IHJlc2V0RGljdGlvbmFyeSA9ICgpID0+IGV4dGVuZERpY3Rpb25hcnkoe2RheXNPZldlZWssbW9udGhzT2ZZZWFyfSk7XG5cbnZhciBhY2NlcHRlZERhdGVUb2tlbnMgPSBbXHJcbiAgeyBcclxuICAgIC8vIGQ6IGRheSBvZiB0aGUgbW9udGgsIDIgZGlnaXRzIHdpdGggbGVhZGluZyB6ZXJvczpcclxuICAgIGtleTogJ2QnLCBcclxuICAgIG1ldGhvZDogZnVuY3Rpb24oZGF0ZSkgeyByZXR1cm4gZW5mb3JjZUxlbmd0aChkYXRlLmdldERhdGUoKSwgMik7IH0gXHJcbiAgfSwgeyBcclxuICAgIC8vIEQ6IHRleHR1YWwgcmVwcmVzZW50YXRpb24gb2YgZGF5LCAzIGxldHRlcnM6IFN1biB0aHJ1IFNhdFxyXG4gICAga2V5OiAnRCcsIFxyXG4gICAgbWV0aG9kOiBmdW5jdGlvbihkYXRlKSB7IHJldHVybiBkaWN0aW9uYXJ5LmRheXNPZldlZWtbZGF0ZS5nZXREYXkoKV1bMV07IH0gXHJcbiAgfSwgeyBcclxuICAgIC8vIGo6IGRheSBvZiBtb250aCB3aXRob3V0IGxlYWRpbmcgMCdzXHJcbiAgICBrZXk6ICdqJywgXHJcbiAgICBtZXRob2Q6IGZ1bmN0aW9uKGRhdGUpIHsgcmV0dXJuIGRhdGUuZ2V0RGF0ZSgpOyB9IFxyXG4gIH0sIHsgXHJcbiAgICAvLyBsOiBmdWxsIHRleHR1YWwgcmVwcmVzZW50YXRpb24gb2YgZGF5IG9mIHdlZWs6IFN1bmRheSB0aHJ1IFNhdHVyZGF5XHJcbiAgICBrZXk6ICdsJywgXHJcbiAgICBtZXRob2Q6IGZ1bmN0aW9uKGRhdGUpIHsgcmV0dXJuIGRpY3Rpb25hcnkuZGF5c09mV2Vla1tkYXRlLmdldERheSgpXVswXTsgfSBcclxuICB9LCB7IFxyXG4gICAgLy8gRjogZnVsbCB0ZXh0IG1vbnRoOiAnSmFudWFyeScgdGhydSAnRGVjZW1iZXInXHJcbiAgICBrZXk6ICdGJywgXHJcbiAgICBtZXRob2Q6IGZ1bmN0aW9uKGRhdGUpIHsgcmV0dXJuIGRpY3Rpb25hcnkubW9udGhzT2ZZZWFyW2RhdGUuZ2V0TW9udGgoKV1bMF07IH0gXHJcbiAgfSwgeyBcclxuICAgIC8vIG06IDIgZGlnaXQgbnVtZXJpYyBtb250aDogJzAxJyAtICcxMic6XHJcbiAgICBrZXk6ICdtJywgXHJcbiAgICBtZXRob2Q6IGZ1bmN0aW9uKGRhdGUpIHsgcmV0dXJuIGVuZm9yY2VMZW5ndGgoZGF0ZS5nZXRNb250aCgpKzEsMik7IH0gXHJcbiAgfSwgeyBcclxuICAgIC8vIE06IGEgc2hvcnQgdGV4dHVhbCByZXByZXNlbnRhdGlvbiBvZiB0aGUgbW9udGgsIDMgbGV0dGVyczogJ0phbicgLSAnRGVjJ1xyXG4gICAga2V5OiAnTScsIFxyXG4gICAgbWV0aG9kOiBmdW5jdGlvbihkYXRlKSB7IHJldHVybiBkaWN0aW9uYXJ5Lm1vbnRoc09mWWVhcltkYXRlLmdldE1vbnRoKCldWzFdOyB9IFxyXG4gIH0sIHsgXHJcbiAgICAvLyBuOiBudW1lcmljIHJlcHJlc2V0YXRpb24gb2YgbW9udGggdy9vIGxlYWRpbmcgMCdzLCAnMScgLSAnMTInOlxyXG4gICAga2V5OiAnbicsIFxyXG4gICAgbWV0aG9kOiBmdW5jdGlvbihkYXRlKSB7IHJldHVybiBkYXRlLmdldE1vbnRoKCkgKyAxOyB9IFxyXG4gIH0sIHsgXHJcbiAgICAvLyBZOiBGdWxsIG51bWVyaWMgeWVhciwgNCBkaWdpdHNcclxuICAgIGtleTogJ1knLCBcclxuICAgIG1ldGhvZDogZnVuY3Rpb24oZGF0ZSkgeyByZXR1cm4gZGF0ZS5nZXRGdWxsWWVhcigpOyB9IFxyXG4gIH0sIHsgXHJcbiAgICAvLyB5OiAyIGRpZ2l0IG51bWVyaWMgeWVhcjpcclxuICAgIGtleTogJ3knLCBcclxuICAgIG1ldGhvZDogZnVuY3Rpb24oZGF0ZSkgeyByZXR1cm4gZW5mb3JjZUxlbmd0aChkYXRlLmdldEZ1bGxZZWFyKCksMix0cnVlKTsgfVxyXG4gICB9XHJcbl07XHJcblxyXG52YXIgYWNjZXB0ZWRUaW1lVG9rZW5zID0gW1xyXG4gIHsgXHJcbiAgICAvLyBhOiBsb3dlcmNhc2UgYW50ZSBtZXJpZGllbSBhbmQgcG9zdCBtZXJpZGllbSAnYW0nIG9yICdwbSdcclxuICAgIGtleTogJ2EnLCBcclxuICAgIG1ldGhvZDogZnVuY3Rpb24oZGF0ZSkgeyByZXR1cm4gKGRhdGUuZ2V0SG91cnMoKSA+IDExKSA/ICdwbScgOiAnYW0nOyB9IFxyXG4gIH0sIHsgXHJcbiAgICAvLyBBOiB1cHBlcmNhc2UgYW50ZSBtZXJkaWllbSBhbmQgcG9zdCBtZXJpZGllbSAnQU0nIG9yICdQTSdcclxuICAgIGtleTogJ0EnLCBcclxuICAgIG1ldGhvZDogZnVuY3Rpb24oZGF0ZSkgeyByZXR1cm4gKGRhdGUuZ2V0SG91cnMoKSA+IDExKSA/ICdQTScgOiAnQU0nOyB9IFxyXG4gIH0sIHsgXHJcbiAgICAvLyBnOiAxMi1ob3VyIGZvcm1hdCBvZiBhbiBob3VyIHdpdGhvdXQgbGVhZGluZyB6ZXJvcyAxLTEyXHJcbiAgICBrZXk6ICdnJywgXHJcbiAgICBtZXRob2Q6IGZ1bmN0aW9uKGRhdGUpIHsgcmV0dXJuIGRhdGUuZ2V0SG91cnMoKSAlIDEyIHx8IDEyOyB9IFxyXG4gIH0sIHsgXHJcbiAgICAvLyBHOiAyNC1ob3VyIGZvcm1hdCBvZiBhbiBob3VyIHdpdGhvdXQgbGVhZGluZyB6ZXJvcyAwLTIzXHJcbiAgICBrZXk6ICdHJywgXHJcbiAgICBtZXRob2Q6IGZ1bmN0aW9uKGRhdGUpIHsgcmV0dXJuIGRhdGUuZ2V0SG91cnMoKTsgfSBcclxuICB9LCB7IFxyXG4gICAgLy8gaDogMTItaG91ciBmb3JtYXQgb2YgYW4gaG91ciB3aXRoIGxlYWRpbmcgemVyb3MgMDEtMTJcclxuICAgIGtleTogJ2gnLCBcclxuICAgIG1ldGhvZDogZnVuY3Rpb24oZGF0ZSkgeyByZXR1cm4gZW5mb3JjZUxlbmd0aChkYXRlLmdldEhvdXJzKCklMTIgfHwgMTIsMik7IH0gXHJcbiAgfSwgeyBcclxuICAgIC8vIEg6IDI0LWhvdXIgZm9ybWF0IG9mIGFuIGhvdXIgd2l0aCBsZWFkaW5nIHplcm9zOiAwMC0yM1xyXG4gICAga2V5OiAnSCcsIFxyXG4gICAgbWV0aG9kOiBmdW5jdGlvbihkYXRlKSB7IHJldHVybiBlbmZvcmNlTGVuZ3RoKGRhdGUuZ2V0SG91cnMoKSwyKTsgfSBcclxuICB9LCB7IFxyXG4gICAgLy8gaTogTWludXRlcyB3aXRoIGxlYWRpbmcgemVyb3MgMDAtNTlcclxuICAgIGtleTogJ2knLCBcclxuICAgIG1ldGhvZDogZnVuY3Rpb24oZGF0ZSkgeyByZXR1cm4gZW5mb3JjZUxlbmd0aChkYXRlLmdldE1pbnV0ZXMoKSwyKTsgfSBcclxuICB9LCB7IFxyXG4gICAgLy8gczogU2Vjb25kcyB3aXRoIGxlYWRpbmcgemVyb3MgMDAtNTlcclxuICAgIGtleTogJ3MnLCBcclxuICAgIG1ldGhvZDogZnVuY3Rpb24oZGF0ZSkgeyByZXR1cm4gZW5mb3JjZUxlbmd0aChkYXRlLmdldFNlY29uZHMoKSwyKTsgfVxyXG4gICB9XHJcbl07XHJcblxyXG4vKipcclxuICogSW50ZXJuYXRpb25hbGl6YXRpb24gb2JqZWN0IGZvciB0aW1lVXRpbHMuaW50ZXJuYXRpb25hbGl6ZSgpLlxyXG4gKiBAdHlwZWRlZiBpbnRlcm5hdGlvbmFsaXplT2JqXHJcbiAqIEBwcm9wZXJ0eSB7QXJyYXl9IFtkYXlzT2ZXZWVrPVsgJ1N1bmRheScsICdNb25kYXknLCAnVHVlc2RheScsICdXZWRuZXNkYXknLCAnVGh1cnNkYXknLCAnRnJpZGF5JywgJ1NhdHVyZGF5JyBdXSBkYXlzT2ZXZWVrIFdlZWtkYXkgbGFiZWxzIGFzIHN0cmluZ3MsIHN0YXJ0aW5nIHdpdGggU3VuZGF5LlxyXG4gKiBAcHJvcGVydHkge0FycmF5fSBbbW9udGhzT2ZZZWFyPVsgJ0phbnVhcnknLCdGZWJydWFyeScsJ01hcmNoJywnQXByaWwnLCdNYXknLCdKdW5lJywnSnVseScsJ0F1Z3VzdCcsJ1NlcHRlbWJlcicsJ09jdG9iZXInLCdOb3ZlbWJlcicsJ0RlY2VtYmVyJyBdXSBtb250aHNPZlllYXIgTW9udGggbGFiZWxzIGFzIHN0cmluZ3MsIHN0YXJ0aW5nIHdpdGggSmFudWFyeS5cclxuICovXHJcblxyXG4vKipcclxuICogVGhpcyBmdW5jdGlvbiBjYW4gYmUgdXNlZCB0byBzdXBwb3J0IGFkZGl0aW9uYWwgbGFuZ3VhZ2VzIGJ5IHBhc3NpbmcgYW4gb2JqZWN0IHdpdGggXHJcbiAqIGBkYXlzT2ZXZWVrYCBhbmQgYG1vbnRoc09mWWVhcmAgYXR0cmlidXRlcy4gIEVhY2ggYXR0cmlidXRlIHNob3VsZCBiZSBhbiBhcnJheSBvZlxyXG4gKiBzdHJpbmdzIChleDogYGRheXNPZldlZWs6IFsnbW9uZGF5JywgJ3R1ZXNkYXknLCAnd2VkbmVzZGF5Jy4uLl1gKVxyXG4gKlxyXG4gKiBAcGFyYW0ge2ludGVybmF0aW9uYWxpemVPYmp9IGNvbmZcclxuICovXHJcbmNvbnN0IGludGVybmF0aW9uYWxpemUgPSAoY29uZj17fSkgPT4geyBcclxuICBleHRlbmREaWN0aW9uYXJ5KGNvbmYpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIGdlbmVyaWMgZm9ybWF0RGF0ZSBmdW5jdGlvbiB3aGljaCBhY2NlcHRzIGR5bmFtaWMgdGVtcGxhdGVzXHJcbiAqIEBwYXJhbSBkYXRlIHtEYXRlfSBSZXF1aXJlZFxyXG4gKiBAcGFyYW0gdGVtcGxhdGUge1N0cmluZ30gT3B0aW9uYWxcclxuICogQHJldHVybnMge1N0cmluZ31cclxuICpcclxuICogQGV4YW1wbGVcclxuICogZm9ybWF0RGF0ZShuZXcgRGF0ZSgpLCAnI3tNfS4gI3tqfSwgI3tZfScpXHJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFJldHVybnMgYSBmb3JtYXR0ZWQgZGF0ZVxyXG4gKlxyXG4gKi9cclxuY29uc3QgZm9ybWF0RGF0ZSA9IChkYXRlLHRlbXBsYXRlPScje219LyN7ZH0vI3tZfScpID0+IHtcclxuICBhY2NlcHRlZERhdGVUb2tlbnMuZm9yRWFjaCh0b2tlbiA9PiB7XHJcbiAgICBpZih0ZW1wbGF0ZS5pbmRleE9mKGAjeyR7dG9rZW4ua2V5fX1gKSA9PSAtMSkgcmV0dXJuOyBcclxuICAgIHRlbXBsYXRlID0gaW5qZWN0U3RyaW5nRGF0YSh0ZW1wbGF0ZSx0b2tlbi5rZXksdG9rZW4ubWV0aG9kKGRhdGUpKTtcclxuICB9KTsgXHJcbiAgYWNjZXB0ZWRUaW1lVG9rZW5zLmZvckVhY2godG9rZW4gPT4ge1xyXG4gICAgaWYodGVtcGxhdGUuaW5kZXhPZihgI3ske3Rva2VuLmtleX19YCkgPT0gLTEpIHJldHVybjtcclxuICAgIHRlbXBsYXRlID0gaW5qZWN0U3RyaW5nRGF0YSh0ZW1wbGF0ZSx0b2tlbi5rZXksdG9rZW4ubWV0aG9kKGRhdGUpKTtcclxuICB9KTtcclxuICByZXR1cm4gdGVtcGxhdGU7XHJcbn07XHJcblxyXG4vKipcclxuICogU21hbGwgZnVuY3Rpb24gZm9yIHJlc2V0dGluZyBsYW5ndWFnZSB0byBFbmdsaXNoICh1c2VkIGluIHRlc3RpbmcpLlxyXG4gKi9cclxuY29uc3QgcmVzZXRJbnRlcm5hdGlvbmFsaXphdGlvbiA9ICgpID0+IHJlc2V0RGljdGlvbmFyeSgpO1xuXG5leHBvcnQgeyBpbnRlcm5hdGlvbmFsaXplLCBmb3JtYXREYXRlLCByZXNldEludGVybmF0aW9uYWxpemF0aW9uIH07XG4iLCJleHBvcnQgY29uc3Qga2V5Q29kZXMgPSB7XG4gIGxlZnQ6IDM3LFxuICB1cDogMzgsXG4gIHJpZ2h0OiAzOSxcbiAgZG93bjogNDAsXG4gIHBndXA6IDMzLFxuICBwZ2Rvd246IDM0LFxuICBlbnRlcjogMTMsXG4gIGVzY2FwZTogMjcsXG4gIHRhYjogOVxufTtcblxuZXhwb3J0IGNvbnN0IGtleUNvZGVzQXJyYXkgPSBPYmplY3Qua2V5cyhrZXlDb2RlcykubWFwKGsgPT4ga2V5Q29kZXNba10pO1xuIiwiPHNjcmlwdD5cbiAgaW1wb3J0IE1vbnRoIGZyb20gJy4vTW9udGguc3ZlbHRlJztcbiAgaW1wb3J0IE5hdkJhciBmcm9tICcuL05hdkJhci5zdmVsdGUnO1xuICBpbXBvcnQgUG9wb3ZlciBmcm9tICcuL1BvcG92ZXIuc3ZlbHRlJztcbiAgaW1wb3J0IHsgZ2V0TW9udGhzIH0gZnJvbSAnLi9saWIvaGVscGVycyc7XG4gIGltcG9ydCB7IGZvcm1hdERhdGUsIGludGVybmF0aW9uYWxpemUgfSBmcm9tICd0aW1lVXRpbHMnO1xuICBpbXBvcnQgeyBrZXlDb2Rlcywga2V5Q29kZXNBcnJheSB9IGZyb20gJy4vbGliL2tleUNvZGVzJztcbiAgaW1wb3J0IHsgb25Nb3VudCwgY3JlYXRlRXZlbnREaXNwYXRjaGVyIH0gZnJvbSAnc3ZlbHRlJztcblxuICBjb25zdCBkaXNwYXRjaCA9IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlcigpO1xuICBjb25zdCB0b2RheSA9IG5ldyBEYXRlKCk7XG5cbiAgbGV0IHBvcG92ZXI7XG5cbiAgZXhwb3J0IGxldCBmb3JtYXQgPSAnI3ttfS8je2R9LyN7WX0nO1xuICBleHBvcnQgbGV0IHN0YXJ0ID0gbmV3IERhdGUoMTk4NywgOSwgMjkpO1xuICBleHBvcnQgbGV0IGVuZCA9IG5ldyBEYXRlKDIwMjAsIDksIDI5KTtcbiAgZXhwb3J0IGxldCBzZWxlY3RlZCA9IHRvZGF5O1xuICBleHBvcnQgbGV0IGRhdGVDaG9zZW4gPSBmYWxzZTtcbiAgZXhwb3J0IGxldCB0cmlnZ2VyID0gbnVsbDtcbiAgZXhwb3J0IGxldCBzZWxlY3RhYmxlQ2FsbGJhY2sgPSBudWxsO1xuICBleHBvcnQgbGV0IHdlZWtTdGFydCA9IDA7XG4gIGV4cG9ydCBsZXQgZGF5c09mV2VlayA9IFtcbiAgICBbJ1N1bmRheScsICdTdW4nXSxcbiAgICBbJ01vbmRheScsICdNb24nXSxcbiAgICBbJ1R1ZXNkYXknLCAnVHVlJ10sXG4gICAgWydXZWRuZXNkYXknLCAnV2VkJ10sXG4gICAgWydUaHVyc2RheScsICdUaHUnXSxcbiAgICBbJ0ZyaWRheScsICdGcmknXSxcbiAgICBbJ1NhdHVyZGF5JywgJ1NhdCddXG4gIF07XG4gIGV4cG9ydCBsZXQgbW9udGhzT2ZZZWFyID0gW1xuICAgIFsnSmFudWFyeScsICdKYW4nXSxcbiAgICBbJ0ZlYnJ1YXJ5JywgJ0ZlYiddLFxuICAgIFsnTWFyY2gnLCAnTWFyJ10sXG4gICAgWydBcHJpbCcsICdBcHInXSxcbiAgICBbJ01heScsICdNYXknXSxcbiAgICBbJ0p1bmUnLCAnSnVuJ10sXG4gICAgWydKdWx5JywgJ0p1bCddLFxuICAgIFsnQXVndXN0JywgJ0F1ZyddLFxuICAgIFsnU2VwdGVtYmVyJywgJ1NlcCddLFxuICAgIFsnT2N0b2JlcicsICdPY3QnXSxcbiAgICBbJ05vdmVtYmVyJywgJ05vdiddLFxuICAgIFsnRGVjZW1iZXInLCAnRGVjJ11cbiAgXTtcblxuICBleHBvcnQgbGV0IHN0eWxlID0gJyc7XG4gIFxuICAvLyB0aGVtaW5nIHZhcmlhYmxlczpcbiAgZXhwb3J0IGxldCBidXR0b25CYWNrZ3JvdW5kQ29sb3IgPSAnI2ZmZic7XG4gIGV4cG9ydCBsZXQgYnV0dG9uQm9yZGVyQ29sb3IgPSAnI2VlZSc7XG4gIGV4cG9ydCBsZXQgYnV0dG9uVGV4dENvbG9yID0gJyMzMzMnO1xuICBleHBvcnQgbGV0IGhpZ2hsaWdodENvbG9yID0gJyNmNzkwMWUnO1xuICBleHBvcnQgbGV0IGRheUJhY2tncm91bmRDb2xvciA9ICdub25lJztcbiAgZXhwb3J0IGxldCBkYXlUZXh0Q29sb3IgPSAnIzRhNGE0YSc7XG4gIGV4cG9ydCBsZXQgZGF5SGlnaGxpZ2h0ZWRCYWNrZ3JvdW5kQ29sb3IgPSAnI2VmZWZlZic7XG4gIGV4cG9ydCBsZXQgZGF5SGlnaGxpZ2h0ZWRUZXh0Q29sb3IgPSAnIzRhNGE0YSc7XG5cbiAgaW50ZXJuYXRpb25hbGl6ZSh7IGRheXNPZldlZWssIG1vbnRoc09mWWVhciB9KTtcbiAgbGV0IHNvcnRlZERheXNPZldlZWsgPSB3ZWVrU3RhcnQgPT09IDAgPyBkYXlzT2ZXZWVrIDogKCgpID0+IHtcbiAgICBsZXQgZG93ID0gZGF5c09mV2Vlay5zbGljZSgpO1xuICAgIGRvdy5wdXNoKGRvdy5zaGlmdCgpKTtcbiAgICByZXR1cm4gZG93O1xuICB9KSgpO1xuXG4gIGxldCBoaWdobGlnaHRlZCA9IHRvZGF5O1xuICBsZXQgc2hvdWxkU2hha2VEYXRlID0gZmFsc2U7XG4gIGxldCBzaGFrZUhpZ2hsaWdodFRpbWVvdXQ7XG4gIGxldCBtb250aCA9IHRvZGF5LmdldE1vbnRoKCk7XG4gIGxldCB5ZWFyID0gdG9kYXkuZ2V0RnVsbFllYXIoKTtcblxuICBsZXQgaXNPcGVuID0gZmFsc2U7XG4gIGxldCBpc0Nsb3NpbmcgPSBmYWxzZTtcblxuICB0b2RheS5zZXRIb3VycygwLCAwLCAwLCAwKTtcblxuICBmdW5jdGlvbiBhc3NpZ25tZW50SGFuZGxlcihmb3JtYXR0ZWQpIHtcbiAgICBpZiAoIXRyaWdnZXIpIHJldHVybjtcbiAgICB0cmlnZ2VyLmlubmVySFRNTCA9IGZvcm1hdHRlZDtcbiAgfVxuXG4gICQ6IG1vbnRocyA9IGdldE1vbnRocyhzdGFydCwgZW5kLCBzZWxlY3RhYmxlQ2FsbGJhY2ssIHdlZWtTdGFydCk7XG5cbiAgbGV0IG1vbnRoSW5kZXggPSAwO1xuICAkOiB7XG4gICAgbW9udGhJbmRleCA9IDA7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtb250aHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmIChtb250aHNbaV0ubW9udGggPT09IG1vbnRoICYmIG1vbnRoc1tpXS55ZWFyID09PSB5ZWFyKSB7XG4gICAgICAgIG1vbnRoSW5kZXggPSBpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAkOiB2aXNpYmxlTW9udGggPSBtb250aHNbbW9udGhJbmRleF07XG5cbiAgJDogdmlzaWJsZU1vbnRoSWQgPSB5ZWFyICsgbW9udGggLyAxMDA7XG4gICQ6IGxhc3RWaXNpYmxlRGF0ZSA9IHZpc2libGVNb250aC53ZWVrc1t2aXNpYmxlTW9udGgud2Vla3MubGVuZ3RoIC0gMV0uZGF5c1s2XS5kYXRlO1xuICAkOiBmaXJzdFZpc2libGVEYXRlID0gdmlzaWJsZU1vbnRoLndlZWtzWzBdLmRheXNbMF0uZGF0ZTtcbiAgJDogY2FuSW5jcmVtZW50TW9udGggPSBtb250aEluZGV4IDwgbW9udGhzLmxlbmd0aCAtIDE7XG4gICQ6IGNhbkRlY3JlbWVudE1vbnRoID0gbW9udGhJbmRleCA+IDA7XG4gICQ6IHdyYXBwZXJTdHlsZSA9IGBcbiAgICAtLWJ1dHRvbi1iYWNrZ3JvdW5kLWNvbG9yOiAke2J1dHRvbkJhY2tncm91bmRDb2xvcn07XG4gICAgLS1idXR0b24tYm9yZGVyLWNvbG9yOiAke2J1dHRvbkJvcmRlckNvbG9yfTtcbiAgICAtLWJ1dHRvbi10ZXh0LWNvbG9yOiAke2J1dHRvblRleHRDb2xvcn07XG4gICAgLS1oaWdobGlnaHQtY29sb3I6ICR7aGlnaGxpZ2h0Q29sb3J9O1xuICAgIC0tZGF5LWJhY2tncm91bmQtY29sb3I6ICR7ZGF5QmFja2dyb3VuZENvbG9yfTtcbiAgICAtLWRheS10ZXh0LWNvbG9yOiAke2RheVRleHRDb2xvcn07XG4gICAgLS1kYXktaGlnaGxpZ2h0ZWQtYmFja2dyb3VuZC1jb2xvcjogJHtkYXlIaWdobGlnaHRlZEJhY2tncm91bmRDb2xvcn07XG4gICAgLS1kYXktaGlnaGxpZ2h0ZWQtdGV4dC1jb2xvcjogJHtkYXlIaWdobGlnaHRlZFRleHRDb2xvcn07XG4gICAgJHtzdHlsZX1cbiAgYDtcblxuICBleHBvcnQgbGV0IGZvcm1hdHRlZFNlbGVjdGVkO1xuICAkOiB7XG4gICAgZm9ybWF0dGVkU2VsZWN0ZWQgPSB0eXBlb2YgZm9ybWF0ID09PSAnZnVuY3Rpb24nXG4gICAgICA/IGZvcm1hdChzZWxlY3RlZClcbiAgICAgIDogZm9ybWF0RGF0ZShzZWxlY3RlZCwgZm9ybWF0KTtcbiAgfVxuXG4gIG9uTW91bnQoKCkgPT4ge1xuICAgIG1vbnRoID0gc2VsZWN0ZWQuZ2V0TW9udGgoKTtcbiAgICB5ZWFyID0gc2VsZWN0ZWQuZ2V0RnVsbFllYXIoKTtcbiAgfSk7XG5cbiAgZnVuY3Rpb24gY2hhbmdlTW9udGgoc2VsZWN0ZWRNb250aCkge1xuICAgIG1vbnRoID0gc2VsZWN0ZWRNb250aDtcbiAgICBoaWdobGlnaHRlZCA9IG5ldyBEYXRlKHllYXIsIG1vbnRoLCAxKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluY3JlbWVudE1vbnRoKGRpcmVjdGlvbiwgZGF5ID0gMSkge1xuICAgIGlmIChkaXJlY3Rpb24gPT09IDEgJiYgIWNhbkluY3JlbWVudE1vbnRoKSByZXR1cm47XG4gICAgaWYgKGRpcmVjdGlvbiA9PT0gLTEgJiYgIWNhbkRlY3JlbWVudE1vbnRoKSByZXR1cm47XG4gICAgbGV0IGN1cnJlbnQgPSBuZXcgRGF0ZSh5ZWFyLCBtb250aCwgMSk7XG4gICAgY3VycmVudC5zZXRNb250aChjdXJyZW50LmdldE1vbnRoKCkgKyBkaXJlY3Rpb24pO1xuICAgIG1vbnRoID0gY3VycmVudC5nZXRNb250aCgpO1xuICAgIHllYXIgPSBjdXJyZW50LmdldEZ1bGxZZWFyKCk7XG4gICAgaGlnaGxpZ2h0ZWQgPSBuZXcgRGF0ZSh5ZWFyLCBtb250aCwgZGF5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldERlZmF1bHRIaWdobGlnaHRlZCgpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoc2VsZWN0ZWQpO1xuICB9XG5cbiAgY29uc3QgZ2V0RGF5ID0gKG0sIGQsIHkpID0+IHtcbiAgICBsZXQgdGhlTW9udGggPSBtb250aHMuZmluZChhTW9udGggPT4gYU1vbnRoLm1vbnRoID09PSBtICYmIGFNb250aC55ZWFyID09PSB5KTtcbiAgICBpZiAoIXRoZU1vbnRoKSByZXR1cm4gbnVsbDtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoZU1vbnRoLndlZWtzLmxlbmd0aDsgKytpKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhlTW9udGgud2Vla3NbaV0uZGF5cy5sZW5ndGg7ICsraikge1xuICAgICAgICBsZXQgYURheSA9IHRoZU1vbnRoLndlZWtzW2ldLmRheXNbal07XG4gICAgICAgIGlmIChhRGF5Lm1vbnRoID09PSBtICYmIGFEYXkuZGF5ID09PSBkICYmIGFEYXkueWVhciA9PT0geSkgcmV0dXJuIGFEYXk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGluY3JlbWVudERheUhpZ2hsaWdodGVkKGFtb3VudCkge1xuICAgIGxldCBwcm9wb3NlZERhdGUgPSBuZXcgRGF0ZShoaWdobGlnaHRlZCk7XG4gICAgcHJvcG9zZWREYXRlLnNldERhdGUoaGlnaGxpZ2h0ZWQuZ2V0RGF0ZSgpICsgYW1vdW50KTtcbiAgICBsZXQgY29ycmVzcG9uZGluZ0RheU9iaiA9IGdldERheShcbiAgICAgIHByb3Bvc2VkRGF0ZS5nZXRNb250aCgpLFxuICAgICAgcHJvcG9zZWREYXRlLmdldERhdGUoKSxcbiAgICAgIHByb3Bvc2VkRGF0ZS5nZXRGdWxsWWVhcigpXG4gICAgKTtcbiAgICBpZiAoIWNvcnJlc3BvbmRpbmdEYXlPYmogfHwgIWNvcnJlc3BvbmRpbmdEYXlPYmouaXNJblJhbmdlKSByZXR1cm47XG4gICAgaGlnaGxpZ2h0ZWQgPSBwcm9wb3NlZERhdGU7XG4gICAgaWYgKGFtb3VudCA+IDAgJiYgaGlnaGxpZ2h0ZWQgPiBsYXN0VmlzaWJsZURhdGUpIHtcbiAgICAgIGluY3JlbWVudE1vbnRoKDEsIGhpZ2hsaWdodGVkLmdldERhdGUoKSk7XG4gICAgfVxuICAgIGlmIChhbW91bnQgPCAwICYmIGhpZ2hsaWdodGVkIDwgZmlyc3RWaXNpYmxlRGF0ZSkge1xuICAgICAgaW5jcmVtZW50TW9udGgoLTEsIGhpZ2hsaWdodGVkLmdldERhdGUoKSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY2hlY2tJZlZpc2libGVEYXRlSXNTZWxlY3RhYmxlKGRhdGUpIHtcbiAgICBjb25zdCBwcm9wb3NlZERheSA9IGdldERheShkYXRlLmdldE1vbnRoKCksIGRhdGUuZ2V0RGF0ZSgpLCBkYXRlLmdldEZ1bGxZZWFyKCkpO1xuICAgIHJldHVybiBwcm9wb3NlZERheSAmJiBwcm9wb3NlZERheS5zZWxlY3RhYmxlO1xuICB9XG5cbiAgZnVuY3Rpb24gc2hha2VEYXRlKGRhdGUpIHtcbiAgICBjbGVhclRpbWVvdXQoc2hha2VIaWdobGlnaHRUaW1lb3V0KTtcbiAgICBzaG91bGRTaGFrZURhdGUgPSBkYXRlO1xuICAgIHNoYWtlSGlnaGxpZ2h0VGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgc2hvdWxkU2hha2VEYXRlID0gZmFsc2U7XG4gICAgfSwgNzAwKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFzc2lnblZhbHVlVG9UcmlnZ2VyKGZvcm1hdHRlZCkge1xuICAgIGFzc2lnbm1lbnRIYW5kbGVyKGZvcm1hdHRlZCk7XG4gIH1cblxuICBmdW5jdGlvbiByZWdpc3RlclNlbGVjdGlvbihjaG9zZW4pIHtcbiAgICBpZiAoIWNoZWNrSWZWaXNpYmxlRGF0ZUlzU2VsZWN0YWJsZShjaG9zZW4pKSByZXR1cm4gc2hha2VEYXRlKGNob3Nlbik7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgY2xvc2UoKTtcbiAgICBzZWxlY3RlZCA9IGNob3NlbjtcbiAgICBkYXRlQ2hvc2VuID0gdHJ1ZTtcbiAgICBhc3NpZ25WYWx1ZVRvVHJpZ2dlcihmb3JtYXR0ZWRTZWxlY3RlZCk7XG4gICAgcmV0dXJuIGRpc3BhdGNoKCdkYXRlU2VsZWN0ZWQnLCB7IGRhdGU6IGNob3NlbiB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUtleVByZXNzKGV2dCkge1xuICAgIGlmIChrZXlDb2Rlc0FycmF5LmluZGV4T2YoZXZ0LmtleUNvZGUpID09PSAtMSkgcmV0dXJuO1xuICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHN3aXRjaCAoZXZ0LmtleUNvZGUpIHtcbiAgICAgIGNhc2Uga2V5Q29kZXMubGVmdDpcbiAgICAgICAgaW5jcmVtZW50RGF5SGlnaGxpZ2h0ZWQoLTEpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2Uga2V5Q29kZXMudXA6XG4gICAgICAgIGluY3JlbWVudERheUhpZ2hsaWdodGVkKC03KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGtleUNvZGVzLnJpZ2h0OlxuICAgICAgICBpbmNyZW1lbnREYXlIaWdobGlnaHRlZCgxKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGtleUNvZGVzLmRvd246XG4gICAgICAgIGluY3JlbWVudERheUhpZ2hsaWdodGVkKDcpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2Uga2V5Q29kZXMucGd1cDpcbiAgICAgICAgaW5jcmVtZW50TW9udGgoLTEpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2Uga2V5Q29kZXMucGdkb3duOlxuICAgICAgICBpbmNyZW1lbnRNb250aCgxKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGtleUNvZGVzLmVzY2FwZTpcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgIGNsb3NlKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBrZXlDb2Rlcy5lbnRlcjpcbiAgICAgICAgcmVnaXN0ZXJTZWxlY3Rpb24oaGlnaGxpZ2h0ZWQpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlZ2lzdGVyQ2xvc2UoKSB7XG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGhhbmRsZUtleVByZXNzKTtcbiAgICBkaXNwYXRjaCgnY2xvc2UnKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNsb3NlKCkge1xuICAgIHBvcG92ZXIuY2xvc2UoKTtcbiAgICByZWdpc3RlckNsb3NlKCk7XG4gIH1cblxuICBmdW5jdGlvbiByZWdpc3Rlck9wZW4oKSB7XG4gICAgaGlnaGxpZ2h0ZWQgPSBnZXREZWZhdWx0SGlnaGxpZ2h0ZWQoKTtcbiAgICBtb250aCA9IHNlbGVjdGVkLmdldE1vbnRoKCk7XG4gICAgeWVhciA9IHNlbGVjdGVkLmdldEZ1bGxZZWFyKCk7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGhhbmRsZUtleVByZXNzKTtcbiAgICBkaXNwYXRjaCgnb3BlbicpO1xuICB9XG5cbjwvc2NyaXB0PlxuXG48ZGl2IFxuICBjbGFzcz1cImRhdGVwaWNrZXJcIiBcbiAgY2xhc3M6b3Blbj1cIntpc09wZW59XCIgXG4gIGNsYXNzOmNsb3Npbmc9XCJ7aXNDbG9zaW5nfVwiXG4gIHN0eWxlPXt3cmFwcGVyU3R5bGV9XG4+XG4gIDxQb3BvdmVyXG4gICAgYmluZDp0aGlzPVwie3BvcG92ZXJ9XCJcbiAgICBiaW5kOm9wZW49XCJ7aXNPcGVufVwiXG4gICAgYmluZDpzaHJpbms9XCJ7aXNDbG9zaW5nfVwiXG4gICAge3RyaWdnZXJ9XG4gICAgb246b3BlbmVkPVwie3JlZ2lzdGVyT3Blbn1cIlxuICAgIG9uOmNsb3NlZD1cIntyZWdpc3RlckNsb3NlfVwiXG4gID5cbiAgICA8ZGl2IHNsb3Q9XCJ0cmlnZ2VyXCI+XG4gICAgICA8c2xvdD5cbiAgICAgICAgeyNpZiAhdHJpZ2dlcn1cbiAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImNhbGVuZGFyLWJ1dHRvblwiIHR5cGU9XCJidXR0b25cIj5cbiAgICAgICAgICB7Zm9ybWF0dGVkU2VsZWN0ZWR9XG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgICB7L2lmfVxuICAgICAgPC9zbG90PlxuICAgIDwvZGl2PlxuICAgIDxkaXYgc2xvdD1cImNvbnRlbnRzXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FsZW5kYXJcIj5cbiAgICAgICAgPE5hdkJhciBcbiAgICAgICAgICB7bW9udGh9XG4gICAgICAgICAge3llYXJ9XG4gICAgICAgICAge2NhbkluY3JlbWVudE1vbnRofVxuICAgICAgICAgIHtjYW5EZWNyZW1lbnRNb250aH1cbiAgICAgICAgICB7c3RhcnR9XG4gICAgICAgICAge2VuZH1cbiAgICAgICAgICB7bW9udGhzT2ZZZWFyfVxuICAgICAgICAgIG9uOm1vbnRoU2VsZWN0ZWQ9e2UgPT4gY2hhbmdlTW9udGgoZS5kZXRhaWwpfVxuICAgICAgICAgIG9uOmluY3JlbWVudE1vbnRoPXtlID0+IGluY3JlbWVudE1vbnRoKGUuZGV0YWlsKX0gXG4gICAgICAgIC8+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJsZWdlbmRcIj5cbiAgICAgICAgICB7I2VhY2ggc29ydGVkRGF5c09mV2VlayBhcyBkYXl9XG4gICAgICAgICAgPHNwYW4+e2RheVsxXX08L3NwYW4+XG4gICAgICAgICAgey9lYWNofVxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPE1vbnRoIFxuICAgICAgICAgIHt2aXNpYmxlTW9udGh9XG4gICAgICAgICAge3NlbGVjdGVkfVxuICAgICAgICAgIHtoaWdobGlnaHRlZH1cbiAgICAgICAgICB7c2hvdWxkU2hha2VEYXRlfVxuICAgICAgICAgIGlkPXt2aXNpYmxlTW9udGhJZH1cbiAgICAgICAgICBvbjpkYXRlU2VsZWN0ZWQ9e2UgPT4gcmVnaXN0ZXJTZWxlY3Rpb24oZS5kZXRhaWwpfSBcbiAgICAgICAgLz5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L1BvcG92ZXI+XG48L2Rpdj5cblxuPHN0eWxlPlxuICAuZGF0ZXBpY2tlciB7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIG1hcmdpbjogMCBhdXRvO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBvdmVyZmxvdzogdmlzaWJsZTtcbiAgfVxuXG4gIC5jYWxlbmRhci1idXR0b24ge1xuICAgIHBhZGRpbmc6IDEwcHggMjBweDtcbiAgICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1idXR0b24tYm9yZGVyLWNvbG9yKTtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgd2lkdGg6IDMwMHB4O1xuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgYmFja2dyb3VuZDogdmFyKC0tYnV0dG9uLWJhY2tncm91bmQtY29sb3IpO1xuICAgIGNvbG9yOiB2YXIoLS1idXR0b24tdGV4dC1jb2xvcik7XG4gICAgYm9yZGVyLXJhZGl1czogN3B4O1xuICAgIGJveC1zaGFkb3c6IDBweCAwcHggM3B4IHJnYmEoMCwgMCwgMCwgMC4xKTtcbiAgfVxuXG4gICosXG4gICo6YmVmb3JlLFxuICAqOmFmdGVyIHtcbiAgICBib3gtc2l6aW5nOiBpbmhlcml0O1xuICB9XG5cbiAgLmNhbGVuZGFyIHtcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgIHVzZXItc2VsZWN0OiBub25lO1xuICAgIHdpZHRoOiAxMDB2dztcbiAgICBwYWRkaW5nOiAxMHB4O1xuICAgIHBhZGRpbmctdG9wOiAwO1xuICB9XG5cbiAgQG1lZGlhIChtaW4td2lkdGg6IDQ4MHB4KSB7XG4gICAgLmNhbGVuZGFyIHtcbiAgICAgIGhlaWdodDogYXV0bztcbiAgICAgIHdpZHRoOiAzNDBweDtcbiAgICAgIG1heC13aWR0aDogMTAwJTtcbiAgICB9XG4gIH1cblxuICAubGVnZW5kIHtcbiAgICBjb2xvcjogIzRhNGE0YTtcbiAgICBwYWRkaW5nOiAxMHB4IDA7XG4gICAgbWFyZ2luLWJvdHRvbTogNXB4O1xuICB9XG5cbiAgLmxlZ2VuZCBzcGFuIHtcbiAgICB3aWR0aDogMTQuMjg1NzE0JTtcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICB9XG48L3N0eWxlPlxuIiwiPHN2ZWx0ZTpoZWFkPlxuICA8dGl0bGU+IO2KuOyImGdnIC0g7Iuc7LKt7J6QIOydtOuPmXt0aXRsZV9zdWZpeH08L3RpdGxlPlxuPC9zdmVsdGU6aGVhZD5cblxuXG48ZGl2IGNsYXNzPVwicC02IHhsOmFic29sdXRlIHJlbGF0aXZlIGNvbnRhaW5lciBtLWF1dG9cIj5cbiAgPGgxIGNsYXNzPVwibWQ6dGV4dC0zeGwgdGV4dC0yeGwgaW5saW5lLWJsb2NrXCI+7Iuc7LKt7J6QIOydtOuPmTwvaDE+XG4gIDxUaXAgPlxuICAgIDxzcGFuIHNsb3Q9XCJ0aXBcIj4gXG4gICAg7Jes65+sIOuwqeyGoSDsgqzsnbTsl5DshJwg7Iuc7LKt7J6Q7J2YIO2dkOumhOydhCDsgrTtjrTrs7wg7IiYIOyeiOyKteuLiOuLpC48YnI+IFxuICAgIOuCoOynnOyZgCDsiqTtirjrpqzrqLjrpbwg7ISg7YOd7ZW067O07IS47JqULjxicj5cbiAgICAqIOyVvSDtlZzsi5zqsIQg6rCE6rKp7Jy866GcIOyXheuNsOydtO2KuCDrkKnri4jri6QuXG4gICAgPC9zcGFuPlxuICA8L1RpcD5cbjwvZGl2PlxuPGRpdiBjbGFzcz1cImNvbnRhaW5lciBtLWF1dG8gZmxleCBmbGV4LWNvbCBpdGVtcy1zdHJldGNoIHBiLThcIj5cbiAgPHRhYmxlIGNsYXNzPVwidGV4dC1jZW50ZXIgbWItMTIgbXQtNlwiPlxuICAgIDx0aGVhZD5cbiAgICAgIDx0cj5cbiAgICAgICAgPHRoPiDrgqDsp5wgPC90aD5cbiAgICAgICAgPHRoPiDsiqTtirjrpqzrqLgxIDwvdGg+XG4gICAgICAgIDx0aD4g7Iqk7Yq466as66i4MiA8L3RoPlxuICAgICAgPC90cj5cbiAgICA8L3RoZWFkPlxuICAgIDx0Ym9keT5cbiAgICA8dHI+XG4gICAgICA8dGQ+XG4gICAgICAgIDxEYXRlcGlja2VyIFxuICAgICAgICAgICBlbmQ9e25ldyBEYXRlKCl9IFxuICAgICAgICAgICBmb3JtYXQ9e2Q9PmQudG9Mb2NhbGVEYXRlU3RyaW5nKCl9IFxuICAgICAgICAgICBzZWxlY3RlZD17ZGF0ZX0gXG4gICAgICAgICAgIG9uOmRhdGVTZWxlY3RlZD17b25fZGF0ZV9waWNrfSBcbiAgICAgICAgICAgPlxuICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwicC0yIHB4LTQgYmctd2hpdGUgYm9yZGVyIHctZnVsbCB0cnVuY2F0ZVwiPlxuICAgICAgICAgICAgIHtkYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygpfVxuICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgPC9EYXRlcGlja2VyPlxuICAgICAgPC90ZD5cbiAgICAgIDx0ZD5cbiAgICAgICAgPFN0cmVhbWVyQXV0b0NvbXBsZXRlIFxuICAgICAgICAgICBiaW5kOm9uc2VsZWN0PXtvbl9zdHJlYW1lcl9zZWFyY2gxfSBcbiAgICAgICAgICAgcGxhY2Vob2xkZXI9XCLsiqTtirjrpqzrqLgg7ISg7YOdMVwiIFxuICAgICAgICAgICBpZD1cIm1pZ3JhdGlvbi1zdHJlYW1lci1zZWFyY2gxXCIgXG4gICAgICAgICAgIGlucHV0aWQ9XCJtaWdyYXRpb24tc3RyZWFtZXItc2VhcmNoMS1pbnB1dFwiXG4gICAgICAgICAgIGlucHV0X3ZhbHVlPXtzdHJlYW1lcjE/IHN0cmVhbWVyMS5uYW1lOiBcIlwifVxuICAgICAgICAgICBpbnB1dF9jbGFzcz1cImJnLXdoaXRlIHRleHQtc20gdy1mdWxsIHRyYW5zaXRpb24tYWxsIHRyYW5zaXRpb24tMTAwIHBsLTcgcHktMiB0cnVuY2F0ZSBib3JkZXJcIiAvPlxuICAgICAgPC90ZD5cbiAgICAgIDx0ZD5cbiAgICAgICAgPFN0cmVhbWVyQXV0b0NvbXBsZXRlIFxuICAgICAgICAgICBiaW5kOm9uc2VsZWN0PXtvbl9zdHJlYW1lcl9zZWFyY2gyfVxuICAgICAgICAgICBwbGFjZWhvbGRlcj1cIuyKpO2KuOumrOuouCDshKDtg50yXCIgXG4gICAgICAgICAgIGlkPVwibWlncmF0aW9uLXN0cmVhbWVyLXNlYXJjaDJcIiBcbiAgICAgICAgICAgaW5wdXRpZD1cIm1pZ3JhdGlvbi1zdHJlYW1lci1zZWFyY2gyLWlucHV0XCJcbiAgICAgICAgICAgaW5wdXRfdmFsdWU9e3N0cmVhbWVyMj8gc3RyZWFtZXIyLm5hbWU6IFwiXCJ9XG4gICAgICAgICAgIGlucHV0X2NsYXNzPVwiYmctd2hpdGUgdGV4dC1zbSB3LWZ1bGwgdHJhbnNpdGlvbi1hbGwgdHJhbnNpdGlvbi0xMDAgcGwtNyBweS0yIHRydW5jYXRlIGJvcmRlclwiIC8+XG4gICAgIDwvdGQ+XG4gICAgPC90cj5cbiAgICA8L3Rib2R5PlxuICA8L3RhYmxlPlxuICA8ZGl2IGNsYXNzPVwiZmxleCBmbGV4LXJvdyB3LWZ1bGwgaXRlbXMtY2VudGVyIHotMjBcIj5cbiAgICA8ZGl2IGNsYXNzPVwiXCI+XG4gICAgICA8YSBocmVmPVwie3N0cmVhbWVyMT8gJy9zdHJlYW1lci8nICsgc3RyZWFtZXIxLmlkIDogJyd9XCJcbiAgICAgICAgZm9yPVwibWlncmF0aW9uLXN0cmVhbWVyLXNlYXJjaDEtaW5wdXRcIlxuICAgICAgICBjbGFzcz1cInctMjQgZmxleCBmbGV4LWNvbCBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXIgb3ZlcmZsb3ctdmlzaWJsZSByZWxhdGl2ZVwiPlxuICAgICAgICB7I2lmIHN0cmVhbWVyMX1cbiAgICAgICAgICA8aW1nIGNsYXNzPVwicm91bmRlZC1mdWxsIGgtMjQgdy0yNCBib3JkZXIgYm9yZGVyLWdyYXktNjAwXCIgc3JjPXtzdHJlYW1lcjEucHJvZmlsZV9pbWFnZV91cmx9IC8+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInB0LTIgYWJzb2x1dGVcIiBzdHlsZT1cInRvcDogMTAwJVwiPjxzcGFuPntzdHJlYW1lcjEubmFtZX08L3NwYW4+PC9kaXY+XG4gICAgICAgIHs6ZWxzZX1cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwicm91bmRlZC1mdWxsIGgtMjQgdy0yNCBiZy1ncmF5LTEwMFwiID4gPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInB0LTIgdGV4dC10cmFuc3BhcmVudCB0ZXh0LWdyYXktNDAwIGFic29sdXRlXCIgc3R5bGU9XCJ0b3A6IDEwMCVcIj48c3Bhbj4/PC9zcGFuPjwvZGl2PlxuICAgICAgICB7L2lmfVxuICAgICAgPC9hPlxuICAgIDwvZGl2PlxuICAgIDxNaWdyYXRpb25UaW1lbGluZSBcbiAgICAgICBzdHJlYW1lcj17c3RyZWFtZXIxfSBcbiAgICAgICBoZWlnaHQ9XCIxNTBcIlxuICAgICAgIHtkYXRlfSAvPlxuICA8L2Rpdj5cbiAgPGRpdiBjbGFzcz1cImZsZXggZmxleC1yb3cgdy1mdWxsXCI+XG4gICAgPGRpdiBjbGFzcz1cInctMjRcIj48L2Rpdj5cbiAgICA8TWlncmF0aW9ucyBcbiAgICAgICAgIG1pZ3JhdGlvbnM9e3ZpZXdlcl9taWdyYXRpb25zfVxuICAgICAgICAgY2xhc3M9XCJmbGV4LTFcIlxuICAgICAgICAgaWQxPXtzdHJlYW1lcjEgJiYgc3RyZWFtZXIxLmlkfVxuICAgICAgICAgaWQyPXtzdHJlYW1lcjIgJiYgc3RyZWFtZXIyLmlkfSAvPlxuICA8L2Rpdj5cbiAgPGRpdiBjbGFzcz1cImZsZXggZmxleC1yb3cgdy1mdWxsIGl0ZW1zLWNlbnRlciB6LTEwXCI+XG4gICAgPGRpdj5cbiAgICAgIDxhIGhyZWY9XCJ7c3RyZWFtZXIyPyAnL3N0cmVhbWVyLycgKyBzdHJlYW1lcjIuaWQgOiAnJ31cIlxuICAgICAgICBmb3I9XCJtaWdyYXRpb24tc3RyZWFtZXItc2VhcmNoMi1pbnB1dFwiXG4gICAgICAgIGNsYXNzPVwidy0yNCBmbGV4IGZsZXgtY29sIGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlciBvdmVyZmxvdy12aXNpYmxlIGN1cnNvci1wb2ludGVyIHJlbGF0aXZlXCI+XG4gICAgICAgIHsjaWYgc3RyZWFtZXIyfVxuICAgICAgICAgIDxpbWcgY2xhc3M9XCJyb3VuZGVkLWZ1bGwgaC0yNCB3LTI0IGJvcmRlciBib3JkZXItZ3JheS02MDBcIiBzcmM9e3N0cmVhbWVyMi5wcm9maWxlX2ltYWdlX3VybH0gLz5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwicHQtMiBhYnNvbHV0ZVwiIHN0eWxlPVwidG9wOiAxMDAlXCI+PHNwYW4+e3N0cmVhbWVyMi5uYW1lfTwvc3Bhbj48L2Rpdj5cbiAgICAgICAgezplbHNlfVxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJyb3VuZGVkLWZ1bGwgaC0yNCB3LTI0IGJnLWdyYXktMTAwXCIgPiA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwicHQtMiB0ZXh0LXRyYW5zcGFyZW50IHRleHQtZ3JheS00MDAgYWJzb2x1dGVcIiBzdHlsZT1cInRvcDogMTAwJVwiPjxzcGFuPj88L3NwYW4+PC9kaXY+XG4gICAgICAgIHsvaWZ9XG4gICAgICA8L2E+XG4gICAgPC9kaXY+XG4gICAgPE1pZ3JhdGlvblRpbWVsaW5lIFxuICAgICAgIHN0cmVhbWVyPXtzdHJlYW1lcjJ9IFxuICAgICAgIGhlaWdodD1cIjE1MFwiXG4gICAgICAge2RhdGV9IC8+XG4gIDwvZGl2PlxuPC9kaXY+XG5cblxuPHNjcmlwdCBjb250ZXh0PVwibW9kdWxlXCI+XG5cdGltcG9ydCB7IEFQSSB9IGZyb20gJy4uLy4uL2FwaS5qcyc7XG5cbiAgZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHByZWxvYWQocGFnZSwgc2Vzc2lvbikge1xuICAgIGlmKHBhZ2UucXVlcnkuaWQxICYmIHBhZ2UucXVlcnkuaWQyICYmIHBhZ2UucXVlcnkuZGF0ZSkge1xuICAgICAgbGV0IFtzdHJlYW1lcjEsIHN0cmVhbWVyMl0gPSBhd2FpdCBBUEkudGhpbl9zdHJlYW1lcnMoW3BhZ2UucXVlcnkuaWQxLCBwYWdlLnF1ZXJ5LmlkMl0pO1xuICAgICAgbGV0IHRpbWUgPSBuZXcgRGF0ZShwYWdlLnF1ZXJ5LmRhdGUtMCk7IHRpbWUuc2V0SG91cnMoMCwwLDAsMCk7XG4gICAgICBsZXQgZnJvbSA9IHRpbWUsXG4gICAgICAgICAgdG8gPSBuZXcgRGF0ZSh0aW1lLmdldFRpbWUoKSArIDEwMDAqNjAqNjAqMjQpO1xuICAgICAgbGV0IHZpZXdlcl9taWdyYXRpb25zID0gYXdhaXQgQVBJLnZpZXdlcl9taWdyYXRpb25fY291bnRzKHBhZ2UucXVlcnkuaWQxLCBwYWdlLnF1ZXJ5LmlkMiwgZnJvbSwgdG8pO1xuICAgICAgbGV0IGRhdGUgPSBuZXcgRGF0ZShwYWdlLnF1ZXJ5LmRhdGUtMCk7XG4gICAgICByZXR1cm4geyBzdHJlYW1lcjEsIHN0cmVhbWVyMiwgdmlld2VyX21pZ3JhdGlvbnMsIGRhdGUgfTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBsZXQgZGF0ZSA9IG5ldyBEYXRlKCk7IGRhdGUuc2V0SG91cnMoMCwwLDAsMCk7XG4gICAgICByZXR1cm4geyBkYXRlIH07XG4gICAgfVxuICB9XG48L3NjcmlwdD5cblxuPHNjcmlwdD5cbiAgaW1wb3J0IFN0cmVhbWVyQXV0b0NvbXBsZXRlIGZyb20gJy4uLy4uL2NvbXBvbmVudHMvU3RyZWFtZXJBdXRvQ29tcGxldGUuc3ZlbHRlJztcblx0aW1wb3J0IE1pZ3JhdGlvblRpbWVsaW5lIGZyb20gJy4uLy4uL2NvbXBvbmVudHMvTWlncmF0aW9uVGltZWxpbmUuc3ZlbHRlJztcblx0aW1wb3J0IE1pZ3JhdGlvbnMgZnJvbSAnLi4vLi4vY29tcG9uZW50cy9NaWdyYXRpb25zLnN2ZWx0ZSc7XG5cdGltcG9ydCBUaXAgZnJvbSAnLi4vLi4vY29tcG9uZW50cy9UaXAuc3ZlbHRlJztcbiAgaW1wb3J0IERhdGVwaWNrZXIgZnJvbSBcInN2ZWx0ZS1jYWxlbmRhclwiO1xuXG4gIGV4cG9ydCBsZXQgc3RyZWFtZXIxO1xuICBleHBvcnQgbGV0IHN0cmVhbWVyMjtcbiAgZXhwb3J0IGxldCB2aWV3ZXJfbWlncmF0aW9ucyA9IFtdO1xuICBleHBvcnQgbGV0IGRhdGUgPSBuZXcgRGF0ZSgpO1xuICBsZXQgdGl0bGVfc3VmaXggPSBzdHJlYW1lcjEgJiYgc3RyZWFtZXIyPyBgfCAke3N0cmVhbWVyMS5uYW1lfSA8LT4gJHtzdHJlYW1lcjIubmFtZX1gOiAnJztcblxuXG5cbiAgZnVuY3Rpb24gdHJ5X2xvYWQoKXtcbiAgICBpZihzdHJlYW1lcjEgJiYgc3RyZWFtZXIyICYmIGRhdGUpe1xuICAgICAgd2luZG93LmxvY2F0aW9uLnNlYXJjaCA9IGBpZDE9JHtzdHJlYW1lcjEuaWR9JmlkMj0ke3N0cmVhbWVyMi5pZH0mZGF0ZT0ke2RhdGUuZ2V0VGltZSgpfWA7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25fZGF0ZV9waWNrKGUpIHtcbiAgICBpZihlLmRldGFpbC5kYXRlICE9IGRhdGUpe1xuICAgICAgZGF0ZSA9IGUuZGV0YWlsLmRhdGU7XG4gICAgICB0cnlfbG9hZCgpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBvbl9zdHJlYW1lcl9zZWFyY2gxKHRhcmdldCkge1xuICAgIGlmKHN0cmVhbWVyMSAhPSB0YXJnZXQpe1xuICAgICAgc3RyZWFtZXIxID0gdGFyZ2V0O1xuICAgICAgdHJ5X2xvYWQoKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gb25fc3RyZWFtZXJfc2VhcmNoMih0YXJnZXQpIHtcbiAgICBpZihzdHJlYW1lcjIgIT0gdGFyZ2V0KXtcbiAgICAgIHN0cmVhbWVyMiA9IHRhcmdldDtcbiAgICAgIHRyeV9sb2FkKCk7XG4gICAgfVxuICB9XG48L3NjcmlwdD5cblxuPHN0eWxlPlxuICA6Z2xvYmFsKC5jb250ZW50cy13cmFwcGVyKSB7XG4gICAgei1pbmRleDogNTAgIWltcG9ydGFudDtcbiAgfVxuPC9zdHlsZT5cbiIsIi8qKlxuICogU3ByaW5neSB2Mi43LjFcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTAtMjAxMyBEZW5uaXMgSG90c29uXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb25cbiAqIG9idGFpbmluZyBhIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uXG4gKiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXRcbiAqIHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLFxuICogY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZVxuICogU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmdcbiAqIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmVcbiAqIGluY2x1ZGVkIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsXG4gKiBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVNcbiAqIE9GIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EXG4gKiBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVFxuICogSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksXG4gKiBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkdcbiAqIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1JcbiAqIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cbiAqL1xuZXhwb3J0IGNvbnN0IFNwcmluZ3kgPSAoZnVuY3Rpb24gKCkge1xuXG5cdHZhciBTcHJpbmd5ID0ge307XG5cblx0dmFyIEdyYXBoID0gU3ByaW5neS5HcmFwaCA9IGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMubm9kZVNldCA9IHt9O1xuXHRcdHRoaXMubm9kZXMgPSBbXTtcblx0XHR0aGlzLmVkZ2VzID0gW107XG5cdFx0dGhpcy5hZGphY2VuY3kgPSB7fTtcblxuXHRcdHRoaXMubmV4dE5vZGVJZCA9IDA7XG5cdFx0dGhpcy5uZXh0RWRnZUlkID0gMDtcblx0XHR0aGlzLmV2ZW50TGlzdGVuZXJzID0gW107XG5cdH07XG5cblx0dmFyIE5vZGUgPSBTcHJpbmd5Lk5vZGUgPSBmdW5jdGlvbihpZCwgZGF0YSkge1xuXHRcdHRoaXMuaWQgPSBpZDtcblx0XHR0aGlzLmRhdGEgPSAoZGF0YSAhPT0gdW5kZWZpbmVkKSA/IGRhdGEgOiB7fTtcblxuXHQvLyBEYXRhIGZpZWxkcyB1c2VkIGJ5IGxheW91dCBhbGdvcml0aG0gaW4gdGhpcyBmaWxlOlxuXHQvLyB0aGlzLmRhdGEubWFzc1xuXHQvLyBEYXRhIHVzZWQgYnkgZGVmYXVsdCByZW5kZXJlciBpbiBzcHJpbmd5dWkuanNcblx0Ly8gdGhpcy5kYXRhLmxhYmVsXG5cdH07XG5cblx0dmFyIEVkZ2UgPSBTcHJpbmd5LkVkZ2UgPSBmdW5jdGlvbihpZCwgc291cmNlLCB0YXJnZXQsIGRhdGEpIHtcblx0XHR0aGlzLmlkID0gaWQ7XG5cdFx0dGhpcy5zb3VyY2UgPSBzb3VyY2U7XG5cdFx0dGhpcy50YXJnZXQgPSB0YXJnZXQ7XG5cdFx0dGhpcy5kYXRhID0gKGRhdGEgIT09IHVuZGVmaW5lZCkgPyBkYXRhIDoge307XG5cblx0Ly8gRWRnZSBkYXRhIGZpZWxkIHVzZWQgYnkgbGF5b3V0IGFsb3JpdGhtXG5cdC8vIHRoaXMuZGF0YS5sZW5ndGhcblx0Ly8gdGhpcy5kYXRhLnR5cGVcblx0fTtcblxuXHRHcmFwaC5wcm90b3R5cGUuYWRkTm9kZSA9IGZ1bmN0aW9uKG5vZGUpIHtcblx0XHRpZiAoIShub2RlLmlkIGluIHRoaXMubm9kZVNldCkpIHtcblx0XHRcdHRoaXMubm9kZXMucHVzaChub2RlKTtcblx0XHR9XG5cblx0XHR0aGlzLm5vZGVTZXRbbm9kZS5pZF0gPSBub2RlO1xuXG5cdFx0dGhpcy5ub3RpZnkoKTtcblx0XHRyZXR1cm4gbm9kZTtcblx0fTtcblxuXHRHcmFwaC5wcm90b3R5cGUuYWRkTm9kZXMgPSBmdW5jdGlvbigpIHtcblx0XHQvLyBhY2NlcHRzIHZhcmlhYmxlIG51bWJlciBvZiBhcmd1bWVudHMsIHdoZXJlIGVhY2ggYXJndW1lbnRcblx0XHQvLyBpcyBhIHN0cmluZyB0aGF0IGJlY29tZXMgYm90aCBub2RlIGlkZW50aWZpZXIgYW5kIGxhYmVsXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBuYW1lID0gYXJndW1lbnRzW2ldO1xuXHRcdFx0dmFyIG5vZGUgPSBuZXcgTm9kZShuYW1lLCB7bGFiZWw6bmFtZX0pO1xuXHRcdFx0dGhpcy5hZGROb2RlKG5vZGUpO1xuXHRcdH1cblx0fTtcblxuXHRHcmFwaC5wcm90b3R5cGUuYWRkRWRnZSA9IGZ1bmN0aW9uKGVkZ2UpIHtcblx0XHR2YXIgZXhpc3RzID0gZmFsc2U7XG5cdFx0dGhpcy5lZGdlcy5mb3JFYWNoKGZ1bmN0aW9uKGUpIHtcblx0XHRcdGlmIChlZGdlLmlkID09PSBlLmlkKSB7IGV4aXN0cyA9IHRydWU7IH1cblx0XHR9KTtcblxuXHRcdGlmICghZXhpc3RzKSB7XG5cdFx0XHR0aGlzLmVkZ2VzLnB1c2goZWRnZSk7XG5cdFx0fVxuXG5cdFx0aWYgKCEoZWRnZS5zb3VyY2UuaWQgaW4gdGhpcy5hZGphY2VuY3kpKSB7XG5cdFx0XHR0aGlzLmFkamFjZW5jeVtlZGdlLnNvdXJjZS5pZF0gPSB7fTtcblx0XHR9XG5cdFx0aWYgKCEoZWRnZS50YXJnZXQuaWQgaW4gdGhpcy5hZGphY2VuY3lbZWRnZS5zb3VyY2UuaWRdKSkge1xuXHRcdFx0dGhpcy5hZGphY2VuY3lbZWRnZS5zb3VyY2UuaWRdW2VkZ2UudGFyZ2V0LmlkXSA9IFtdO1xuXHRcdH1cblxuXHRcdGV4aXN0cyA9IGZhbHNlO1xuXHRcdHRoaXMuYWRqYWNlbmN5W2VkZ2Uuc291cmNlLmlkXVtlZGdlLnRhcmdldC5pZF0uZm9yRWFjaChmdW5jdGlvbihlKSB7XG5cdFx0XHRcdGlmIChlZGdlLmlkID09PSBlLmlkKSB7IGV4aXN0cyA9IHRydWU7IH1cblx0XHR9KTtcblxuXHRcdGlmICghZXhpc3RzKSB7XG5cdFx0XHR0aGlzLmFkamFjZW5jeVtlZGdlLnNvdXJjZS5pZF1bZWRnZS50YXJnZXQuaWRdLnB1c2goZWRnZSk7XG5cdFx0fVxuXG5cdFx0dGhpcy5ub3RpZnkoKTtcblx0XHRyZXR1cm4gZWRnZTtcblx0fTtcblxuXHRHcmFwaC5wcm90b3R5cGUuYWRkRWRnZXMgPSBmdW5jdGlvbigpIHtcblx0XHQvLyBhY2NlcHRzIHZhcmlhYmxlIG51bWJlciBvZiBhcmd1bWVudHMsIHdoZXJlIGVhY2ggYXJndW1lbnRcblx0XHQvLyBpcyBhIHRyaXBsZSBbbm9kZWlkMSwgbm9kZWlkMiwgYXR0cmlidXRlc11cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGUgPSBhcmd1bWVudHNbaV07XG5cdFx0XHR2YXIgbm9kZTEgPSB0aGlzLm5vZGVTZXRbZVswXV07XG5cdFx0XHRpZiAobm9kZTEgPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoXCJpbnZhbGlkIG5vZGUgbmFtZTogXCIgKyBlWzBdKTtcblx0XHRcdH1cblx0XHRcdHZhciBub2RlMiA9IHRoaXMubm9kZVNldFtlWzFdXTtcblx0XHRcdGlmIChub2RlMiA9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcihcImludmFsaWQgbm9kZSBuYW1lOiBcIiArIGVbMV0pO1xuXHRcdFx0fVxuXHRcdFx0dmFyIGF0dHIgPSBlWzJdO1xuXG5cdFx0XHR0aGlzLm5ld0VkZ2Uobm9kZTEsIG5vZGUyLCBhdHRyKTtcblx0XHR9XG5cdH07XG5cblx0R3JhcGgucHJvdG90eXBlLm5ld05vZGUgPSBmdW5jdGlvbihkYXRhKSB7XG5cdFx0dmFyIG5vZGUgPSBuZXcgTm9kZSh0aGlzLm5leHROb2RlSWQrKywgZGF0YSk7XG5cdFx0dGhpcy5hZGROb2RlKG5vZGUpO1xuXHRcdHJldHVybiBub2RlO1xuXHR9O1xuXG5cdEdyYXBoLnByb3RvdHlwZS5uZXdFZGdlID0gZnVuY3Rpb24oc291cmNlLCB0YXJnZXQsIGRhdGEpIHtcblx0XHR2YXIgZWRnZSA9IG5ldyBFZGdlKHRoaXMubmV4dEVkZ2VJZCsrLCBzb3VyY2UsIHRhcmdldCwgZGF0YSk7XG5cdFx0dGhpcy5hZGRFZGdlKGVkZ2UpO1xuXHRcdHJldHVybiBlZGdlO1xuXHR9O1xuXG5cblx0Ly8gYWRkIG5vZGVzIGFuZCBlZGdlcyBmcm9tIEpTT04gb2JqZWN0XG5cdEdyYXBoLnByb3RvdHlwZS5sb2FkSlNPTiA9IGZ1bmN0aW9uKGpzb24pIHtcblx0LyoqXG5cdFNwcmluZ3kncyBzaW1wbGUgSlNPTiBmb3JtYXQgZm9yIGdyYXBocy5cblx0aGlzdG9yaWNhbGx5LCBTcHJpbmd5IHVzZXMgc2VwYXJhdGUgbGlzdHNcblx0b2Ygbm9kZXMgYW5kIGVkZ2VzOlxuXHRcdHtcblx0XHRcdFwibm9kZXNcIjogW1xuXHRcdFx0XHRcImNlbnRlclwiLFxuXHRcdFx0XHRcImxlZnRcIixcblx0XHRcdFx0XCJyaWdodFwiLFxuXHRcdFx0XHRcInVwXCIsXG5cdFx0XHRcdFwic2F0ZWxsaXRlXCJcblx0XHRcdF0sXG5cdFx0XHRcImVkZ2VzXCI6IFtcblx0XHRcdFx0W1wiY2VudGVyXCIsIFwibGVmdFwiXSxcblx0XHRcdFx0W1wiY2VudGVyXCIsIFwicmlnaHRcIl0sXG5cdFx0XHRcdFtcImNlbnRlclwiLCBcInVwXCJdXG5cdFx0XHRdXG5cdFx0fVxuXHQqKi9cblx0XHQvLyBwYXJzZSBpZiBhIHN0cmluZyBpcyBwYXNzZWQgKEVDNSsgYnJvd3NlcnMpXG5cdFx0aWYgKHR5cGVvZiBqc29uID09ICdzdHJpbmcnIHx8IGpzb24gaW5zdGFuY2VvZiBTdHJpbmcpIHtcblx0XHRcdGpzb24gPSBKU09OLnBhcnNlKCBqc29uICk7XG5cdFx0fVxuXG5cdFx0aWYgKCdub2RlcycgaW4ganNvbiB8fCAnZWRnZXMnIGluIGpzb24pIHtcblx0XHRcdHRoaXMuYWRkTm9kZXMuYXBwbHkodGhpcywganNvblsnbm9kZXMnXSk7XG5cdFx0XHR0aGlzLmFkZEVkZ2VzLmFwcGx5KHRoaXMsIGpzb25bJ2VkZ2VzJ10pO1xuXHRcdH1cblx0fVxuXG5cblx0Ly8gZmluZCB0aGUgZWRnZXMgZnJvbSBub2RlMSB0byBub2RlMlxuXHRHcmFwaC5wcm90b3R5cGUuZ2V0RWRnZXMgPSBmdW5jdGlvbihub2RlMSwgbm9kZTIpIHtcblx0XHRpZiAobm9kZTEuaWQgaW4gdGhpcy5hZGphY2VuY3lcblx0XHRcdCYmIG5vZGUyLmlkIGluIHRoaXMuYWRqYWNlbmN5W25vZGUxLmlkXSkge1xuXHRcdFx0cmV0dXJuIHRoaXMuYWRqYWNlbmN5W25vZGUxLmlkXVtub2RlMi5pZF07XG5cdFx0fVxuXG5cdFx0cmV0dXJuIFtdO1xuXHR9O1xuXG5cdC8vIHJlbW92ZSBhIG5vZGUgYW5kIGl0J3MgYXNzb2NpYXRlZCBlZGdlcyBmcm9tIHRoZSBncmFwaFxuXHRHcmFwaC5wcm90b3R5cGUucmVtb3ZlTm9kZSA9IGZ1bmN0aW9uKG5vZGUpIHtcblx0XHRpZiAobm9kZS5pZCBpbiB0aGlzLm5vZGVTZXQpIHtcblx0XHRcdGRlbGV0ZSB0aGlzLm5vZGVTZXRbbm9kZS5pZF07XG5cdFx0fVxuXG5cdFx0Zm9yICh2YXIgaSA9IHRoaXMubm9kZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcblx0XHRcdGlmICh0aGlzLm5vZGVzW2ldLmlkID09PSBub2RlLmlkKSB7XG5cdFx0XHRcdHRoaXMubm9kZXMuc3BsaWNlKGksIDEpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHRoaXMuZGV0YWNoTm9kZShub2RlKTtcblx0fTtcblxuXHQvLyByZW1vdmVzIGVkZ2VzIGFzc29jaWF0ZWQgd2l0aCBhIGdpdmVuIG5vZGVcblx0R3JhcGgucHJvdG90eXBlLmRldGFjaE5vZGUgPSBmdW5jdGlvbihub2RlKSB7XG5cdFx0dmFyIHRtcEVkZ2VzID0gdGhpcy5lZGdlcy5zbGljZSgpO1xuXHRcdHRtcEVkZ2VzLmZvckVhY2goZnVuY3Rpb24oZSkge1xuXHRcdFx0aWYgKGUuc291cmNlLmlkID09PSBub2RlLmlkIHx8IGUudGFyZ2V0LmlkID09PSBub2RlLmlkKSB7XG5cdFx0XHRcdHRoaXMucmVtb3ZlRWRnZShlKTtcblx0XHRcdH1cblx0XHR9LCB0aGlzKTtcblxuXHRcdHRoaXMubm90aWZ5KCk7XG5cdH07XG5cblx0Ly8gcmVtb3ZlIGEgbm9kZSBhbmQgaXQncyBhc3NvY2lhdGVkIGVkZ2VzIGZyb20gdGhlIGdyYXBoXG5cdEdyYXBoLnByb3RvdHlwZS5yZW1vdmVFZGdlID0gZnVuY3Rpb24oZWRnZSkge1xuXHRcdGZvciAodmFyIGkgPSB0aGlzLmVkZ2VzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG5cdFx0XHRpZiAodGhpcy5lZGdlc1tpXS5pZCA9PT0gZWRnZS5pZCkge1xuXHRcdFx0XHR0aGlzLmVkZ2VzLnNwbGljZShpLCAxKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRmb3IgKHZhciB4IGluIHRoaXMuYWRqYWNlbmN5KSB7XG5cdFx0XHRmb3IgKHZhciB5IGluIHRoaXMuYWRqYWNlbmN5W3hdKSB7XG5cdFx0XHRcdHZhciBlZGdlcyA9IHRoaXMuYWRqYWNlbmN5W3hdW3ldO1xuXG5cdFx0XHRcdGZvciAodmFyIGo9ZWRnZXMubGVuZ3RoIC0gMTsgaj49MDsgai0tKSB7XG5cdFx0XHRcdFx0aWYgKHRoaXMuYWRqYWNlbmN5W3hdW3ldW2pdLmlkID09PSBlZGdlLmlkKSB7XG5cdFx0XHRcdFx0XHR0aGlzLmFkamFjZW5jeVt4XVt5XS5zcGxpY2UoaiwgMSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ2xlYW4gdXAgZW1wdHkgZWRnZSBhcnJheXNcblx0XHRcdFx0aWYgKHRoaXMuYWRqYWNlbmN5W3hdW3ldLmxlbmd0aCA9PSAwKSB7XG5cdFx0XHRcdFx0ZGVsZXRlIHRoaXMuYWRqYWNlbmN5W3hdW3ldO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIENsZWFuIHVwIGVtcHR5IG9iamVjdHNcblx0XHRcdGlmIChpc0VtcHR5KHRoaXMuYWRqYWNlbmN5W3hdKSkge1xuXHRcdFx0XHRkZWxldGUgdGhpcy5hZGphY2VuY3lbeF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dGhpcy5ub3RpZnkoKTtcblx0fTtcblxuXHQvKiBNZXJnZSBhIGxpc3Qgb2Ygbm9kZXMgYW5kIGVkZ2VzIGludG8gdGhlIGN1cnJlbnQgZ3JhcGguIGVnLlxuXHR2YXIgbyA9IHtcblx0XHRub2RlczogW1xuXHRcdFx0e2lkOiAxMjMsIGRhdGE6IHt0eXBlOiAndXNlcicsIHVzZXJpZDogMTIzLCBkaXNwbGF5bmFtZTogJ2FhYSd9fSxcblx0XHRcdHtpZDogMjM0LCBkYXRhOiB7dHlwZTogJ3VzZXInLCB1c2VyaWQ6IDIzNCwgZGlzcGxheW5hbWU6ICdiYmInfX1cblx0XHRdLFxuXHRcdGVkZ2VzOiBbXG5cdFx0XHR7ZnJvbTogMCwgdG86IDEsIHR5cGU6ICdzdWJtaXR0ZWRfZGVzaWduJywgZGlyZWN0ZWQ6IHRydWUsIGRhdGE6IHt3ZWlnaHQ6IH19XG5cdFx0XVxuXHR9XG5cdCovXG5cdEdyYXBoLnByb3RvdHlwZS5tZXJnZSA9IGZ1bmN0aW9uKGRhdGEpIHtcblx0XHR2YXIgbm9kZXMgPSBbXTtcblx0XHRkYXRhLm5vZGVzLmZvckVhY2goZnVuY3Rpb24obikge1xuXHRcdFx0bm9kZXMucHVzaCh0aGlzLmFkZE5vZGUobmV3IE5vZGUobi5pZCwgbi5kYXRhKSkpO1xuXHRcdH0sIHRoaXMpO1xuXG5cdFx0ZGF0YS5lZGdlcy5mb3JFYWNoKGZ1bmN0aW9uKGUpIHtcblx0XHRcdHZhciBmcm9tID0gbm9kZXNbZS5mcm9tXTtcblx0XHRcdHZhciB0byA9IG5vZGVzW2UudG9dO1xuXG5cdFx0XHR2YXIgaWQgPSAoZS5kaXJlY3RlZClcblx0XHRcdFx0PyAoaWQgPSBlLnR5cGUgKyBcIi1cIiArIGZyb20uaWQgKyBcIi1cIiArIHRvLmlkKVxuXHRcdFx0XHQ6IChmcm9tLmlkIDwgdG8uaWQpIC8vIG5vcm1hbGlzZSBpZCBmb3Igbm9uLWRpcmVjdGVkIGVkZ2VzXG5cdFx0XHRcdFx0PyBlLnR5cGUgKyBcIi1cIiArIGZyb20uaWQgKyBcIi1cIiArIHRvLmlkXG5cdFx0XHRcdFx0OiBlLnR5cGUgKyBcIi1cIiArIHRvLmlkICsgXCItXCIgKyBmcm9tLmlkO1xuXG5cdFx0XHR2YXIgZWRnZSA9IHRoaXMuYWRkRWRnZShuZXcgRWRnZShpZCwgZnJvbSwgdG8sIGUuZGF0YSkpO1xuXHRcdFx0ZWRnZS5kYXRhLnR5cGUgPSBlLnR5cGU7XG5cdFx0fSwgdGhpcyk7XG5cdH07XG5cblx0R3JhcGgucHJvdG90eXBlLmZpbHRlck5vZGVzID0gZnVuY3Rpb24oZm4pIHtcblx0XHR2YXIgdG1wTm9kZXMgPSB0aGlzLm5vZGVzLnNsaWNlKCk7XG5cdFx0dG1wTm9kZXMuZm9yRWFjaChmdW5jdGlvbihuKSB7XG5cdFx0XHRpZiAoIWZuKG4pKSB7XG5cdFx0XHRcdHRoaXMucmVtb3ZlTm9kZShuKTtcblx0XHRcdH1cblx0XHR9LCB0aGlzKTtcblx0fTtcblxuXHRHcmFwaC5wcm90b3R5cGUuZmlsdGVyRWRnZXMgPSBmdW5jdGlvbihmbikge1xuXHRcdHZhciB0bXBFZGdlcyA9IHRoaXMuZWRnZXMuc2xpY2UoKTtcblx0XHR0bXBFZGdlcy5mb3JFYWNoKGZ1bmN0aW9uKGUpIHtcblx0XHRcdGlmICghZm4oZSkpIHtcblx0XHRcdFx0dGhpcy5yZW1vdmVFZGdlKGUpO1xuXHRcdFx0fVxuXHRcdH0sIHRoaXMpO1xuXHR9O1xuXG5cblx0R3JhcGgucHJvdG90eXBlLmFkZEdyYXBoTGlzdGVuZXIgPSBmdW5jdGlvbihvYmopIHtcblx0XHR0aGlzLmV2ZW50TGlzdGVuZXJzLnB1c2gob2JqKTtcblx0fTtcblxuXHRHcmFwaC5wcm90b3R5cGUubm90aWZ5ID0gZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5ldmVudExpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uKG9iail7XG5cdFx0XHRvYmouZ3JhcGhDaGFuZ2VkKCk7XG5cdFx0fSk7XG5cdH07XG5cblx0Ly8gLS0tLS0tLS0tLS1cblx0dmFyIExheW91dCA9IFNwcmluZ3kuTGF5b3V0ID0ge307XG5cdExheW91dC5Gb3JjZURpcmVjdGVkID0gZnVuY3Rpb24oZ3JhcGgsIHN0aWZmbmVzcywgcmVwdWxzaW9uLCBkYW1waW5nLCBtaW5FbmVyZ3lUaHJlc2hvbGQsIG1heFNwZWVkKSB7XG5cdFx0dGhpcy5ncmFwaCA9IGdyYXBoO1xuXHRcdHRoaXMuc3RpZmZuZXNzID0gc3RpZmZuZXNzOyAvLyBzcHJpbmcgc3RpZmZuZXNzIGNvbnN0YW50XG5cdFx0dGhpcy5yZXB1bHNpb24gPSByZXB1bHNpb247IC8vIHJlcHVsc2lvbiBjb25zdGFudFxuXHRcdHRoaXMuZGFtcGluZyA9IGRhbXBpbmc7IC8vIHZlbG9jaXR5IGRhbXBpbmcgZmFjdG9yXG5cdFx0dGhpcy5taW5FbmVyZ3lUaHJlc2hvbGQgPSBtaW5FbmVyZ3lUaHJlc2hvbGQgfHwgMC4wMTsgLy90aHJlc2hvbGQgdXNlZCB0byBkZXRlcm1pbmUgcmVuZGVyIHN0b3Bcblx0XHR0aGlzLm1heFNwZWVkID0gbWF4U3BlZWQgfHwgSW5maW5pdHk7IC8vIG5vZGVzIGFyZW4ndCBhbGxvd2VkIHRvIGV4Y2VlZCB0aGlzIHNwZWVkXG5cblx0XHR0aGlzLm5vZGVQb2ludHMgPSB7fTsgLy8ga2VlcCB0cmFjayBvZiBwb2ludHMgYXNzb2NpYXRlZCB3aXRoIG5vZGVzXG5cdFx0dGhpcy5lZGdlU3ByaW5ncyA9IHt9OyAvLyBrZWVwIHRyYWNrIG9mIHNwcmluZ3MgYXNzb2NpYXRlZCB3aXRoIGVkZ2VzXG5cdH07XG5cblx0TGF5b3V0LkZvcmNlRGlyZWN0ZWQucHJvdG90eXBlLnBvaW50ID0gZnVuY3Rpb24obm9kZSkge1xuXHRcdGlmICghKG5vZGUuaWQgaW4gdGhpcy5ub2RlUG9pbnRzKSkge1xuXHRcdFx0dmFyIG1hc3MgPSAobm9kZS5kYXRhLm1hc3MgIT09IHVuZGVmaW5lZCkgPyBub2RlLmRhdGEubWFzcyA6IDEuMDtcblx0XHRcdHRoaXMubm9kZVBvaW50c1tub2RlLmlkXSA9IG5ldyBMYXlvdXQuRm9yY2VEaXJlY3RlZC5Qb2ludChWZWN0b3IucmFuZG9tKCksIG1hc3MpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLm5vZGVQb2ludHNbbm9kZS5pZF07XG5cdH07XG5cblx0TGF5b3V0LkZvcmNlRGlyZWN0ZWQucHJvdG90eXBlLnNwcmluZyA9IGZ1bmN0aW9uKGVkZ2UpIHtcblx0XHRpZiAoIShlZGdlLmlkIGluIHRoaXMuZWRnZVNwcmluZ3MpKSB7XG5cdFx0XHR2YXIgbGVuZ3RoID0gKGVkZ2UuZGF0YS5sZW5ndGggIT09IHVuZGVmaW5lZCkgPyBlZGdlLmRhdGEubGVuZ3RoIDogMS4wO1xuXG5cdFx0XHR2YXIgZXhpc3RpbmdTcHJpbmcgPSBmYWxzZTtcblxuXHRcdFx0dmFyIGZyb20gPSB0aGlzLmdyYXBoLmdldEVkZ2VzKGVkZ2Uuc291cmNlLCBlZGdlLnRhcmdldCk7XG5cdFx0XHRmcm9tLmZvckVhY2goZnVuY3Rpb24oZSkge1xuXHRcdFx0XHRpZiAoZXhpc3RpbmdTcHJpbmcgPT09IGZhbHNlICYmIGUuaWQgaW4gdGhpcy5lZGdlU3ByaW5ncykge1xuXHRcdFx0XHRcdGV4aXN0aW5nU3ByaW5nID0gdGhpcy5lZGdlU3ByaW5nc1tlLmlkXTtcblx0XHRcdFx0fVxuXHRcdFx0fSwgdGhpcyk7XG5cblx0XHRcdGlmIChleGlzdGluZ1NwcmluZyAhPT0gZmFsc2UpIHtcblx0XHRcdFx0cmV0dXJuIG5ldyBMYXlvdXQuRm9yY2VEaXJlY3RlZC5TcHJpbmcoZXhpc3RpbmdTcHJpbmcucG9pbnQxLCBleGlzdGluZ1NwcmluZy5wb2ludDIsIDAuMCwgMC4wKTtcblx0XHRcdH1cblxuXHRcdFx0dmFyIHRvID0gdGhpcy5ncmFwaC5nZXRFZGdlcyhlZGdlLnRhcmdldCwgZWRnZS5zb3VyY2UpO1xuXHRcdFx0ZnJvbS5mb3JFYWNoKGZ1bmN0aW9uKGUpe1xuXHRcdFx0XHRpZiAoZXhpc3RpbmdTcHJpbmcgPT09IGZhbHNlICYmIGUuaWQgaW4gdGhpcy5lZGdlU3ByaW5ncykge1xuXHRcdFx0XHRcdGV4aXN0aW5nU3ByaW5nID0gdGhpcy5lZGdlU3ByaW5nc1tlLmlkXTtcblx0XHRcdFx0fVxuXHRcdFx0fSwgdGhpcyk7XG5cblx0XHRcdGlmIChleGlzdGluZ1NwcmluZyAhPT0gZmFsc2UpIHtcblx0XHRcdFx0cmV0dXJuIG5ldyBMYXlvdXQuRm9yY2VEaXJlY3RlZC5TcHJpbmcoZXhpc3RpbmdTcHJpbmcucG9pbnQyLCBleGlzdGluZ1NwcmluZy5wb2ludDEsIDAuMCwgMC4wKTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5lZGdlU3ByaW5nc1tlZGdlLmlkXSA9IG5ldyBMYXlvdXQuRm9yY2VEaXJlY3RlZC5TcHJpbmcoXG5cdFx0XHRcdHRoaXMucG9pbnQoZWRnZS5zb3VyY2UpLCB0aGlzLnBvaW50KGVkZ2UudGFyZ2V0KSwgbGVuZ3RoLCB0aGlzLnN0aWZmbmVzc1xuXHRcdFx0KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lZGdlU3ByaW5nc1tlZGdlLmlkXTtcblx0fTtcblxuXHQvLyBjYWxsYmFjayBzaG91bGQgYWNjZXB0IHR3byBhcmd1bWVudHM6IE5vZGUsIFBvaW50XG5cdExheW91dC5Gb3JjZURpcmVjdGVkLnByb3RvdHlwZS5lYWNoTm9kZSA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG5cdFx0dmFyIHQgPSB0aGlzO1xuXHRcdHRoaXMuZ3JhcGgubm9kZXMuZm9yRWFjaChmdW5jdGlvbihuKXtcblx0XHRcdGNhbGxiYWNrLmNhbGwodCwgbiwgdC5wb2ludChuKSk7XG5cdFx0fSk7XG5cdH07XG5cblx0Ly8gY2FsbGJhY2sgc2hvdWxkIGFjY2VwdCB0d28gYXJndW1lbnRzOiBFZGdlLCBTcHJpbmdcblx0TGF5b3V0LkZvcmNlRGlyZWN0ZWQucHJvdG90eXBlLmVhY2hFZGdlID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcblx0XHR2YXIgdCA9IHRoaXM7XG5cdFx0dGhpcy5ncmFwaC5lZGdlcy5mb3JFYWNoKGZ1bmN0aW9uKGUpe1xuXHRcdFx0Y2FsbGJhY2suY2FsbCh0LCBlLCB0LnNwcmluZyhlKSk7XG5cdFx0fSk7XG5cdH07XG5cblx0Ly8gY2FsbGJhY2sgc2hvdWxkIGFjY2VwdCBvbmUgYXJndW1lbnQ6IFNwcmluZ1xuXHRMYXlvdXQuRm9yY2VEaXJlY3RlZC5wcm90b3R5cGUuZWFjaFNwcmluZyA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG5cdFx0dmFyIHQgPSB0aGlzO1xuXHRcdHRoaXMuZ3JhcGguZWRnZXMuZm9yRWFjaChmdW5jdGlvbihlKXtcblx0XHRcdGNhbGxiYWNrLmNhbGwodCwgdC5zcHJpbmcoZSkpO1xuXHRcdH0pO1xuXHR9O1xuXG5cblx0Ly8gUGh5c2ljcyBzdHVmZlxuXHRMYXlvdXQuRm9yY2VEaXJlY3RlZC5wcm90b3R5cGUuYXBwbHlDb3Vsb21ic0xhdyA9IGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMuZWFjaE5vZGUoZnVuY3Rpb24objEsIHBvaW50MSkge1xuXHRcdFx0dGhpcy5lYWNoTm9kZShmdW5jdGlvbihuMiwgcG9pbnQyKSB7XG5cdFx0XHRcdGlmIChwb2ludDEgIT09IHBvaW50Milcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHZhciBkID0gcG9pbnQxLnAuc3VidHJhY3QocG9pbnQyLnApO1xuXHRcdFx0XHRcdHZhciBkaXN0YW5jZSA9IGQubWFnbml0dWRlKCkgKyAwLjE7IC8vIGF2b2lkIG1hc3NpdmUgZm9yY2VzIGF0IHNtYWxsIGRpc3RhbmNlcyAoYW5kIGRpdmlkZSBieSB6ZXJvKVxuXHRcdFx0XHRcdHZhciBkaXJlY3Rpb24gPSBkLm5vcm1hbGlzZSgpO1xuXG5cdFx0XHRcdFx0Ly8gYXBwbHkgZm9yY2UgdG8gZWFjaCBlbmQgcG9pbnRcblx0XHRcdFx0XHRwb2ludDEuYXBwbHlGb3JjZShkaXJlY3Rpb24ubXVsdGlwbHkodGhpcy5yZXB1bHNpb24pLmRpdmlkZShkaXN0YW5jZSAqIGRpc3RhbmNlICogMC41KSk7XG5cdFx0XHRcdFx0cG9pbnQyLmFwcGx5Rm9yY2UoZGlyZWN0aW9uLm11bHRpcGx5KHRoaXMucmVwdWxzaW9uKS5kaXZpZGUoZGlzdGFuY2UgKiBkaXN0YW5jZSAqIC0wLjUpKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fSk7XG5cdH07XG5cblx0TGF5b3V0LkZvcmNlRGlyZWN0ZWQucHJvdG90eXBlLmFwcGx5SG9va2VzTGF3ID0gZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5lYWNoU3ByaW5nKGZ1bmN0aW9uKHNwcmluZyl7XG5cdFx0XHR2YXIgZCA9IHNwcmluZy5wb2ludDIucC5zdWJ0cmFjdChzcHJpbmcucG9pbnQxLnApOyAvLyB0aGUgZGlyZWN0aW9uIG9mIHRoZSBzcHJpbmdcblx0XHRcdHZhciBkaXNwbGFjZW1lbnQgPSBzcHJpbmcubGVuZ3RoIC0gZC5tYWduaXR1ZGUoKTtcblx0XHRcdHZhciBkaXJlY3Rpb24gPSBkLm5vcm1hbGlzZSgpO1xuXG5cdFx0XHQvLyBhcHBseSBmb3JjZSB0byBlYWNoIGVuZCBwb2ludFxuXHRcdFx0c3ByaW5nLnBvaW50MS5hcHBseUZvcmNlKGRpcmVjdGlvbi5tdWx0aXBseShzcHJpbmcuayAqIGRpc3BsYWNlbWVudCAqIC0wLjUpKTtcblx0XHRcdHNwcmluZy5wb2ludDIuYXBwbHlGb3JjZShkaXJlY3Rpb24ubXVsdGlwbHkoc3ByaW5nLmsgKiBkaXNwbGFjZW1lbnQgKiAwLjUpKTtcblx0XHR9KTtcblx0fTtcblxuXHRMYXlvdXQuRm9yY2VEaXJlY3RlZC5wcm90b3R5cGUuYXR0cmFjdFRvQ2VudHJlID0gZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5lYWNoTm9kZShmdW5jdGlvbihub2RlLCBwb2ludCkge1xuXHRcdFx0dmFyIGRpcmVjdGlvbiA9IHBvaW50LnAubXVsdGlwbHkoLTEuMCk7XG5cdFx0XHRwb2ludC5hcHBseUZvcmNlKGRpcmVjdGlvbi5tdWx0aXBseSh0aGlzLnJlcHVsc2lvbiAvIDUwLjApKTtcblx0XHR9KTtcblx0fTtcblxuXG5cdExheW91dC5Gb3JjZURpcmVjdGVkLnByb3RvdHlwZS51cGRhdGVWZWxvY2l0eSA9IGZ1bmN0aW9uKHRpbWVzdGVwKSB7XG5cdFx0dGhpcy5lYWNoTm9kZShmdW5jdGlvbihub2RlLCBwb2ludCkge1xuXHRcdFx0Ly8gSXMgdGhpcywgYWxvbmcgd2l0aCB1cGRhdGVQb3NpdGlvbiBiZWxvdywgdGhlIG9ubHkgcGxhY2VzIHRoYXQgeW91clxuXHRcdFx0Ly8gaW50ZWdyYXRpb24gY29kZSBleGlzdD9cblx0XHRcdHBvaW50LnYgPSBwb2ludC52LmFkZChwb2ludC5hLm11bHRpcGx5KHRpbWVzdGVwKSkubXVsdGlwbHkodGhpcy5kYW1waW5nKTtcblx0XHRcdGlmIChwb2ludC52Lm1hZ25pdHVkZSgpID4gdGhpcy5tYXhTcGVlZCkge1xuXHRcdFx0ICAgIHBvaW50LnYgPSBwb2ludC52Lm5vcm1hbGlzZSgpLm11bHRpcGx5KHRoaXMubWF4U3BlZWQpO1xuXHRcdFx0fVxuXHRcdFx0cG9pbnQuYSA9IG5ldyBWZWN0b3IoMCwwKTtcblx0XHR9KTtcblx0fTtcblxuXHRMYXlvdXQuRm9yY2VEaXJlY3RlZC5wcm90b3R5cGUudXBkYXRlUG9zaXRpb24gPSBmdW5jdGlvbih0aW1lc3RlcCkge1xuXHRcdHRoaXMuZWFjaE5vZGUoZnVuY3Rpb24obm9kZSwgcG9pbnQpIHtcblx0XHRcdC8vIFNhbWUgcXVlc3Rpb24gYXMgYWJvdmU7IGFsb25nIHdpdGggdXBkYXRlVmVsb2NpdHksIGlzIHRoaXMgYWxsIG9mXG5cdFx0XHQvLyB5b3VyIGludGVncmF0aW9uIGNvZGU/XG5cdFx0XHRwb2ludC5wID0gcG9pbnQucC5hZGQocG9pbnQudi5tdWx0aXBseSh0aW1lc3RlcCkpO1xuXHRcdH0pO1xuXHR9O1xuXG5cdC8vIENhbGN1bGF0ZSB0aGUgdG90YWwga2luZXRpYyBlbmVyZ3kgb2YgdGhlIHN5c3RlbVxuXHRMYXlvdXQuRm9yY2VEaXJlY3RlZC5wcm90b3R5cGUudG90YWxFbmVyZ3kgPSBmdW5jdGlvbih0aW1lc3RlcCkge1xuXHRcdHZhciBlbmVyZ3kgPSAwLjA7XG5cdFx0dGhpcy5lYWNoTm9kZShmdW5jdGlvbihub2RlLCBwb2ludCkge1xuXHRcdFx0dmFyIHNwZWVkID0gcG9pbnQudi5tYWduaXR1ZGUoKTtcblx0XHRcdGVuZXJneSArPSAwLjUgKiBwb2ludC5tICogc3BlZWQgKiBzcGVlZDtcblx0XHR9KTtcblxuXHRcdHJldHVybiBlbmVyZ3k7XG5cdH07XG5cblx0dmFyIF9fYmluZCA9IGZ1bmN0aW9uKGZuLCBtZSl7IHJldHVybiBmdW5jdGlvbigpeyByZXR1cm4gZm4uYXBwbHkobWUsIGFyZ3VtZW50cyk7IH07IH07IC8vIHN0b2xlbiBmcm9tIGNvZmZlZXNjcmlwdCwgdGhhbmtzIGphc2hrZW5hcyEgOy0pXG5cblx0U3ByaW5neS5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSBfX2JpbmQoKHRoaXMgJiYgKHRoaXMucmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XG5cdFx0dGhpcy53ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHxcblx0XHR0aGlzLm1velJlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxuXHRcdHRoaXMub1JlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxuXHRcdHRoaXMubXNSZXF1ZXN0QW5pbWF0aW9uRnJhbWUpKSB8fFxuXHRcdChmdW5jdGlvbihjYWxsYmFjaywgZWxlbWVudCkge1xuXHRcdFx0c2V0VGltZW91dChjYWxsYmFjaywgMTApO1xuXHRcdH0pLCB0aGlzKTtcblxuXG5cdC8qKlxuXHQgKiBTdGFydCBzaW11bGF0aW9uIGlmIGl0J3Mgbm90IHJ1bm5pbmcgYWxyZWFkeS5cblx0ICogSW4gY2FzZSBpdCdzIHJ1bm5pbmcgdGhlbiB0aGUgY2FsbCBpcyBpZ25vcmVkLCBhbmQgbm9uZSBvZiB0aGUgY2FsbGJhY2tzIHBhc3NlZCBpcyBldmVyIGV4ZWN1dGVkLlxuXHQgKi9cblx0TGF5b3V0LkZvcmNlRGlyZWN0ZWQucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24ocmVuZGVyLCBvblJlbmRlclN0b3AsIG9uUmVuZGVyU3RhcnQpIHtcblx0XHR2YXIgdCA9IHRoaXM7XG5cblx0XHRpZiAodGhpcy5fc3RhcnRlZCkgcmV0dXJuO1xuXHRcdHRoaXMuX3N0YXJ0ZWQgPSB0cnVlO1xuXHRcdHRoaXMuX3N0b3AgPSBmYWxzZTtcblxuXHRcdGlmIChvblJlbmRlclN0YXJ0ICE9PSB1bmRlZmluZWQpIHsgb25SZW5kZXJTdGFydCgpOyB9XG5cblx0XHRTcHJpbmd5LnJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiBzdGVwKCkge1xuXHRcdFx0dC50aWNrKDAuMDMpO1xuXG5cdFx0XHRpZiAocmVuZGVyICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0cmVuZGVyKCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIHN0b3Agc2ltdWxhdGlvbiB3aGVuIGVuZXJneSBvZiB0aGUgc3lzdGVtIGdvZXMgYmVsb3cgYSB0aHJlc2hvbGRcblx0XHRcdGlmICh0Ll9zdG9wIHx8IHQudG90YWxFbmVyZ3koKSA8IHQubWluRW5lcmd5VGhyZXNob2xkKSB7XG5cdFx0XHRcdHQuX3N0YXJ0ZWQgPSBmYWxzZTtcblx0XHRcdFx0aWYgKG9uUmVuZGVyU3RvcCAhPT0gdW5kZWZpbmVkKSB7IG9uUmVuZGVyU3RvcCgpOyB9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRTcHJpbmd5LnJlcXVlc3RBbmltYXRpb25GcmFtZShzdGVwKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fTtcblxuXHRMYXlvdXQuRm9yY2VEaXJlY3RlZC5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMuX3N0b3AgPSB0cnVlO1xuXHR9XG5cblx0TGF5b3V0LkZvcmNlRGlyZWN0ZWQucHJvdG90eXBlLnRpY2sgPSBmdW5jdGlvbih0aW1lc3RlcCkge1xuXHRcdHRoaXMuYXBwbHlDb3Vsb21ic0xhdygpO1xuXHRcdHRoaXMuYXBwbHlIb29rZXNMYXcoKTtcblx0XHR0aGlzLmF0dHJhY3RUb0NlbnRyZSgpO1xuXHRcdHRoaXMudXBkYXRlVmVsb2NpdHkodGltZXN0ZXApO1xuXHRcdHRoaXMudXBkYXRlUG9zaXRpb24odGltZXN0ZXApO1xuXHR9O1xuXG5cdC8vIEZpbmQgdGhlIG5lYXJlc3QgcG9pbnQgdG8gYSBwYXJ0aWN1bGFyIHBvc2l0aW9uXG5cdExheW91dC5Gb3JjZURpcmVjdGVkLnByb3RvdHlwZS5uZWFyZXN0ID0gZnVuY3Rpb24ocG9zKSB7XG5cdFx0dmFyIG1pbiA9IHtub2RlOiBudWxsLCBwb2ludDogbnVsbCwgZGlzdGFuY2U6IG51bGx9O1xuXHRcdHZhciB0ID0gdGhpcztcblx0XHR0aGlzLmdyYXBoLm5vZGVzLmZvckVhY2goZnVuY3Rpb24obil7XG5cdFx0XHR2YXIgcG9pbnQgPSB0LnBvaW50KG4pO1xuXHRcdFx0dmFyIGRpc3RhbmNlID0gcG9pbnQucC5zdWJ0cmFjdChwb3MpLm1hZ25pdHVkZSgpO1xuXG5cdFx0XHRpZiAobWluLmRpc3RhbmNlID09PSBudWxsIHx8IGRpc3RhbmNlIDwgbWluLmRpc3RhbmNlKSB7XG5cdFx0XHRcdG1pbiA9IHtub2RlOiBuLCBwb2ludDogcG9pbnQsIGRpc3RhbmNlOiBkaXN0YW5jZX07XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gbWluO1xuXHR9O1xuXG5cdC8vIHJldHVybnMgW2JvdHRvbWxlZnQsIHRvcHJpZ2h0XVxuXHRMYXlvdXQuRm9yY2VEaXJlY3RlZC5wcm90b3R5cGUuZ2V0Qm91bmRpbmdCb3ggPSBmdW5jdGlvbigpIHtcblx0XHR2YXIgYm90dG9tbGVmdCA9IG5ldyBWZWN0b3IoLTIsLTIpO1xuXHRcdHZhciB0b3ByaWdodCA9IG5ldyBWZWN0b3IoMiwyKTtcblxuXHRcdHRoaXMuZWFjaE5vZGUoZnVuY3Rpb24obiwgcG9pbnQpIHtcblx0XHRcdGlmIChwb2ludC5wLnggPCBib3R0b21sZWZ0LngpIHtcblx0XHRcdFx0Ym90dG9tbGVmdC54ID0gcG9pbnQucC54O1xuXHRcdFx0fVxuXHRcdFx0aWYgKHBvaW50LnAueSA8IGJvdHRvbWxlZnQueSkge1xuXHRcdFx0XHRib3R0b21sZWZ0LnkgPSBwb2ludC5wLnk7XG5cdFx0XHR9XG5cdFx0XHRpZiAocG9pbnQucC54ID4gdG9wcmlnaHQueCkge1xuXHRcdFx0XHR0b3ByaWdodC54ID0gcG9pbnQucC54O1xuXHRcdFx0fVxuXHRcdFx0aWYgKHBvaW50LnAueSA+IHRvcHJpZ2h0LnkpIHtcblx0XHRcdFx0dG9wcmlnaHQueSA9IHBvaW50LnAueTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdHZhciBwYWRkaW5nID0gdG9wcmlnaHQuc3VidHJhY3QoYm90dG9tbGVmdCkubXVsdGlwbHkoMC4wNyk7IC8vIH41JSBwYWRkaW5nXG5cblx0XHRyZXR1cm4ge2JvdHRvbWxlZnQ6IGJvdHRvbWxlZnQuc3VidHJhY3QocGFkZGluZyksIHRvcHJpZ2h0OiB0b3ByaWdodC5hZGQocGFkZGluZyl9O1xuXHR9O1xuXG5cblx0Ly8gVmVjdG9yXG5cdHZhciBWZWN0b3IgPSBTcHJpbmd5LlZlY3RvciA9IGZ1bmN0aW9uKHgsIHkpIHtcblx0XHR0aGlzLnggPSB4O1xuXHRcdHRoaXMueSA9IHk7XG5cdH07XG5cblx0VmVjdG9yLnJhbmRvbSA9IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBuZXcgVmVjdG9yKDEwLjAgKiAoTWF0aC5yYW5kb20oKSAtIDAuNSksIDEwLjAgKiAoTWF0aC5yYW5kb20oKSAtIDAuNSkpO1xuXHR9O1xuXG5cdFZlY3Rvci5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24odjIpIHtcblx0XHRyZXR1cm4gbmV3IFZlY3Rvcih0aGlzLnggKyB2Mi54LCB0aGlzLnkgKyB2Mi55KTtcblx0fTtcblxuXHRWZWN0b3IucHJvdG90eXBlLnN1YnRyYWN0ID0gZnVuY3Rpb24odjIpIHtcblx0XHRyZXR1cm4gbmV3IFZlY3Rvcih0aGlzLnggLSB2Mi54LCB0aGlzLnkgLSB2Mi55KTtcblx0fTtcblxuXHRWZWN0b3IucHJvdG90eXBlLm11bHRpcGx5ID0gZnVuY3Rpb24obikge1xuXHRcdHJldHVybiBuZXcgVmVjdG9yKHRoaXMueCAqIG4sIHRoaXMueSAqIG4pO1xuXHR9O1xuXG5cdFZlY3Rvci5wcm90b3R5cGUuZGl2aWRlID0gZnVuY3Rpb24obikge1xuXHRcdHJldHVybiBuZXcgVmVjdG9yKCh0aGlzLnggLyBuKSB8fCAwLCAodGhpcy55IC8gbikgfHwgMCk7IC8vIEF2b2lkIGRpdmlkZSBieSB6ZXJvIGVycm9ycy4uXG5cdH07XG5cblx0VmVjdG9yLnByb3RvdHlwZS5tYWduaXR1ZGUgPSBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gTWF0aC5zcXJ0KHRoaXMueCp0aGlzLnggKyB0aGlzLnkqdGhpcy55KTtcblx0fTtcblxuXHRWZWN0b3IucHJvdG90eXBlLm5vcm1hbCA9IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBuZXcgVmVjdG9yKC10aGlzLnksIHRoaXMueCk7XG5cdH07XG5cblx0VmVjdG9yLnByb3RvdHlwZS5ub3JtYWxpc2UgPSBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5kaXZpZGUodGhpcy5tYWduaXR1ZGUoKSk7XG5cdH07XG5cblx0Ly8gUG9pbnRcblx0TGF5b3V0LkZvcmNlRGlyZWN0ZWQuUG9pbnQgPSBmdW5jdGlvbihwb3NpdGlvbiwgbWFzcykge1xuXHRcdHRoaXMucCA9IHBvc2l0aW9uOyAvLyBwb3NpdGlvblxuXHRcdHRoaXMubSA9IG1hc3M7IC8vIG1hc3Ncblx0XHR0aGlzLnYgPSBuZXcgVmVjdG9yKDAsIDApOyAvLyB2ZWxvY2l0eVxuXHRcdHRoaXMuYSA9IG5ldyBWZWN0b3IoMCwgMCk7IC8vIGFjY2VsZXJhdGlvblxuXHR9O1xuXG5cdExheW91dC5Gb3JjZURpcmVjdGVkLlBvaW50LnByb3RvdHlwZS5hcHBseUZvcmNlID0gZnVuY3Rpb24oZm9yY2UpIHtcblx0XHR0aGlzLmEgPSB0aGlzLmEuYWRkKGZvcmNlLmRpdmlkZSh0aGlzLm0pKTtcblx0fTtcblxuXHQvLyBTcHJpbmdcblx0TGF5b3V0LkZvcmNlRGlyZWN0ZWQuU3ByaW5nID0gZnVuY3Rpb24ocG9pbnQxLCBwb2ludDIsIGxlbmd0aCwgaykge1xuXHRcdHRoaXMucG9pbnQxID0gcG9pbnQxO1xuXHRcdHRoaXMucG9pbnQyID0gcG9pbnQyO1xuXHRcdHRoaXMubGVuZ3RoID0gbGVuZ3RoOyAvLyBzcHJpbmcgbGVuZ3RoIGF0IHJlc3Rcblx0XHR0aGlzLmsgPSBrOyAvLyBzcHJpbmcgY29uc3RhbnQgKFNlZSBIb29rZSdzIGxhdykgLi4gaG93IHN0aWZmIHRoZSBzcHJpbmcgaXNcblx0fTtcblxuXHQvLyBMYXlvdXQuRm9yY2VEaXJlY3RlZC5TcHJpbmcucHJvdG90eXBlLmRpc3RhbmNlVG9Qb2ludCA9IGZ1bmN0aW9uKHBvaW50KVxuXHQvLyB7XG5cdC8vIFx0Ly8gaGFyZGNvcmUgdmVjdG9yIGFyaXRobWV0aWMuLiBvaGggeWVhaCFcblx0Ly8gXHQvLyAuLiBzZWUgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy84NDkyMTEvc2hvcnRlc3QtZGlzdGFuY2UtYmV0d2Vlbi1hLXBvaW50LWFuZC1hLWxpbmUtc2VnbWVudC84NjUwODAjODY1MDgwXG5cdC8vIFx0dmFyIG4gPSB0aGlzLnBvaW50Mi5wLnN1YnRyYWN0KHRoaXMucG9pbnQxLnApLm5vcm1hbGlzZSgpLm5vcm1hbCgpO1xuXHQvLyBcdHZhciBhYyA9IHBvaW50LnAuc3VidHJhY3QodGhpcy5wb2ludDEucCk7XG5cdC8vIFx0cmV0dXJuIE1hdGguYWJzKGFjLnggKiBuLnggKyBhYy55ICogbi55KTtcblx0Ly8gfTtcblxuXHQvKipcblx0ICogUmVuZGVyZXIgaGFuZGxlcyB0aGUgbGF5b3V0IHJlbmRlcmluZyBsb29wXG5cdCAqIEBwYXJhbSBvblJlbmRlclN0b3Agb3B0aW9uYWwgY2FsbGJhY2sgZnVuY3Rpb24gdGhhdCBnZXRzIGV4ZWN1dGVkIHdoZW5ldmVyIHJlbmRlcmluZyBzdG9wcy5cblx0ICogQHBhcmFtIG9uUmVuZGVyU3RhcnQgb3B0aW9uYWwgY2FsbGJhY2sgZnVuY3Rpb24gdGhhdCBnZXRzIGV4ZWN1dGVkIHdoZW5ldmVyIHJlbmRlcmluZyBzdGFydHMuXG5cdCAqIEBwYXJhbSBvblJlbmRlckZyYW1lIG9wdGlvbmFsIGNhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgZ2V0cyBleGVjdXRlZCBhZnRlciBlYWNoIGZyYW1lIGlzIHJlbmRlcmVkLlxuXHQgKi9cblx0dmFyIFJlbmRlcmVyID0gU3ByaW5neS5SZW5kZXJlciA9IGZ1bmN0aW9uKGxheW91dCwgY2xlYXIsIGRyYXdFZGdlLCBkcmF3Tm9kZSwgb25SZW5kZXJTdG9wLCBvblJlbmRlclN0YXJ0LCBvblJlbmRlckZyYW1lKSB7XG5cdFx0dGhpcy5sYXlvdXQgPSBsYXlvdXQ7XG5cdFx0dGhpcy5jbGVhciA9IGNsZWFyO1xuXHRcdHRoaXMuZHJhd0VkZ2UgPSBkcmF3RWRnZTtcblx0XHR0aGlzLmRyYXdOb2RlID0gZHJhd05vZGU7XG5cdFx0dGhpcy5vblJlbmRlclN0b3AgPSBvblJlbmRlclN0b3A7XG5cdFx0dGhpcy5vblJlbmRlclN0YXJ0ID0gb25SZW5kZXJTdGFydDtcblx0XHR0aGlzLm9uUmVuZGVyRnJhbWUgPSBvblJlbmRlckZyYW1lO1xuXG5cdFx0dGhpcy5sYXlvdXQuZ3JhcGguYWRkR3JhcGhMaXN0ZW5lcih0aGlzKTtcblx0fVxuXG5cdFJlbmRlcmVyLnByb3RvdHlwZS5ncmFwaENoYW5nZWQgPSBmdW5jdGlvbihlKSB7XG5cdFx0dGhpcy5zdGFydCgpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBTdGFydHMgdGhlIHNpbXVsYXRpb24gb2YgdGhlIGxheW91dCBpbiB1c2UuXG5cdCAqXG5cdCAqIE5vdGUgdGhhdCBpbiBjYXNlIHRoZSBhbGdvcml0aG0gaXMgc3RpbGwgb3IgYWxyZWFkeSBydW5uaW5nIHRoZW4gdGhlIGxheW91dCB0aGF0J3MgaW4gdXNlXG5cdCAqIG1pZ2h0IHNpbGVudGx5IGlnbm9yZSB0aGUgY2FsbCwgYW5kIHlvdXIgb3B0aW9uYWwgPGNvZGU+ZG9uZTwvY29kZT4gY2FsbGJhY2sgaXMgbmV2ZXIgZXhlY3V0ZWQuXG5cdCAqIEF0IGxlYXN0IHRoZSBidWlsdC1pbiBGb3JjZURpcmVjdGVkIGxheW91dCBiZWhhdmVzIGluIHRoaXMgd2F5LlxuXHQgKlxuXHQgKiBAcGFyYW0gZG9uZSBBbiBvcHRpb25hbCBjYWxsYmFjayBmdW5jdGlvbiB0aGF0IGdldHMgZXhlY3V0ZWQgd2hlbiB0aGUgc3ByaW5neSBhbGdvcml0aG0gc3RvcHMsXG5cdCAqIGVpdGhlciBiZWNhdXNlIGl0IGVuZGVkIG9yIGJlY2F1c2Ugc3RvcCgpIHdhcyBjYWxsZWQuXG5cdCAqL1xuXHRSZW5kZXJlci5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbihkb25lKSB7XG5cdFx0dmFyIHQgPSB0aGlzO1xuXHRcdHRoaXMubGF5b3V0LnN0YXJ0KGZ1bmN0aW9uIHJlbmRlcigpIHtcblx0XHRcdHQuY2xlYXIoKTtcblxuXHRcdFx0dC5sYXlvdXQuZWFjaEVkZ2UoZnVuY3Rpb24oZWRnZSwgc3ByaW5nKSB7XG5cdFx0XHRcdHQuZHJhd0VkZ2UoZWRnZSwgc3ByaW5nLnBvaW50MS5wLCBzcHJpbmcucG9pbnQyLnApO1xuXHRcdFx0fSk7XG5cblx0XHRcdHQubGF5b3V0LmVhY2hOb2RlKGZ1bmN0aW9uKG5vZGUsIHBvaW50KSB7XG5cdFx0XHRcdHQuZHJhd05vZGUobm9kZSwgcG9pbnQucCk7XG5cdFx0XHR9KTtcblx0XHRcdFxuXHRcdFx0aWYgKHQub25SZW5kZXJGcmFtZSAhPT0gdW5kZWZpbmVkKSB7IHQub25SZW5kZXJGcmFtZSgpOyB9XG5cdFx0fSwgdGhpcy5vblJlbmRlclN0b3AsIHRoaXMub25SZW5kZXJTdGFydCk7XG5cdH07XG5cblx0UmVuZGVyZXIucHJvdG90eXBlLnN0b3AgPSBmdW5jdGlvbigpIHtcblx0XHR0aGlzLmxheW91dC5zdG9wKCk7XG5cdH07XG5cblx0Ly8gQXJyYXkuZm9yRWFjaCBpbXBsZW1lbnRhdGlvbiBmb3IgSUUgc3VwcG9ydC4uXG5cdC8vaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvZm9yRWFjaFxuXHRpZiAoICFBcnJheS5wcm90b3R5cGUuZm9yRWFjaCApIHtcblx0XHRBcnJheS5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uKCBjYWxsYmFjaywgdGhpc0FyZyApIHtcblx0XHRcdHZhciBULCBrO1xuXHRcdFx0aWYgKCB0aGlzID09IG51bGwgKSB7XG5cdFx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoIFwiIHRoaXMgaXMgbnVsbCBvciBub3QgZGVmaW5lZFwiICk7XG5cdFx0XHR9XG5cdFx0XHR2YXIgTyA9IE9iamVjdCh0aGlzKTtcblx0XHRcdHZhciBsZW4gPSBPLmxlbmd0aCA+Pj4gMDsgLy8gSGFjayB0byBjb252ZXJ0IE8ubGVuZ3RoIHRvIGEgVUludDMyXG5cdFx0XHRpZiAoIHt9LnRvU3RyaW5nLmNhbGwoY2FsbGJhY2spICE9IFwiW29iamVjdCBGdW5jdGlvbl1cIiApIHtcblx0XHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvciggY2FsbGJhY2sgKyBcIiBpcyBub3QgYSBmdW5jdGlvblwiICk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIHRoaXNBcmcgKSB7XG5cdFx0XHRcdFQgPSB0aGlzQXJnO1xuXHRcdFx0fVxuXHRcdFx0ayA9IDA7XG5cdFx0XHR3aGlsZSggayA8IGxlbiApIHtcblx0XHRcdFx0dmFyIGtWYWx1ZTtcblx0XHRcdFx0aWYgKCBrIGluIE8gKSB7XG5cdFx0XHRcdFx0a1ZhbHVlID0gT1sgayBdO1xuXHRcdFx0XHRcdGNhbGxiYWNrLmNhbGwoIFQsIGtWYWx1ZSwgaywgTyApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGsrKztcblx0XHRcdH1cblx0XHR9O1xuXHR9XG5cblx0dmFyIGlzRW1wdHkgPSBmdW5jdGlvbihvYmopIHtcblx0XHRmb3IgKHZhciBrIGluIG9iaikge1xuXHRcdFx0aWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrKSkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiB0cnVlO1xuXHR9O1xuXG4gIHJldHVybiBTcHJpbmd5O1xufSkoKTtcbiIsIjxzY3JpcHQ+XG5pbXBvcnQgeyBTcHJpbmd5IH0gZnJvbSBcIi4vc3ByaW5neS5qc1wiXG5pbXBvcnQgeyBvbk1vdW50IH0gZnJvbSBcInN2ZWx0ZVwiO1xuXG5jb25zdCBXSURUSCA9IDUxMiwgSEVJR0hUID0gNTEyO1xuXG5leHBvcnQgbGV0IG5vZGVzID0gW107XG5leHBvcnQgbGV0IGVkZ2VzID0gW107XG5leHBvcnQgbGV0IG9ucmVuZGVyZWQgID0gKCk9Pnt9O1xuLypleHBvcnQgbGV0IHdpZHRoID0gNTAwO1xuZXhwb3J0IGxldCBoZWlnaHQgPSA1MDA7Ki9cblxubGV0IGNhbnZhcztcblxubGV0IHJlbmRlcmVyO1xuXG4vLyBub2RlOiB7aWQsIHNyYywgbmFtZX1cbi8vIGVkZ2U6IHtmcm9tLCB0bywgbGFiZWx9XG5cbmZ1bmN0aW9uIHByb2plY3QocCwgd2lkdGgsIGhlaWdodCkge1xuXHRyZXR1cm4geyB4OiAocC54ICsgNSkvMTAgKiB3aWR0aCwgeTogKHAueSArIDUpLzEwICogaGVpZ2h0IH07XG59XG5cbmxldCBsYXN0X25vZGVzO1xubGV0IGxhc3RfZWRnZXM7XG5cbiQ6IGlmKGNhbnZhcyAmJiAobm9kZXMgIT0gbGFzdF9ub2RlcyB8fCBlZGdlcyAhPSBsYXN0X2VkZ2VzKSkge1xuICBsYXN0X25vZGVzID0gbm9kZXM7XG4gIGxhc3RfZWRnZXMgPSBlZGdlcztcblx0bGV0IGdyYXBoID0gbmV3IFNwcmluZ3kuR3JhcGgoKTtcblx0bGV0IGdyYXBoX25vZGVzID0ge307XG4gIGxldCB3aWR0aCA9IGNhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCxcbiAgICAgIGhlaWdodCA9IGNhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQ7XG5cdGxldCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xuXHRjdHguc2V0TGluZURhc2goWzcsIDddKTtcblx0Y3R4Lmdsb2JhbEFscGhhID0gMC41O1xuXHRmb3IobGV0IG5vZGUgb2Ygbm9kZXMpXG5cdFx0Z3JhcGhfbm9kZXNbbm9kZS5pZF0gPSBncmFwaC5uZXdOb2RlKG5vZGUpO1xuXHRmb3IobGV0IGVkZ2Ugb2YgZWRnZXMpXG4gICAgZ3JhcGgubmV3RWRnZShncmFwaF9ub2Rlc1tlZGdlLmZyb21dLCBncmFwaF9ub2Rlc1tlZGdlLnRvXSwgZWRnZSk7XG5cdGxldCBsYXlvdXQgPSBuZXcgU3ByaW5neS5MYXlvdXQuRm9yY2VEaXJlY3RlZChncmFwaCwgNDAwLjAsIDQwMC4wLCAwLjYsIDAuMDAwMSk7XG5cdGlmKHJlbmRlcmVyKSByZW5kZXJlci5zdG9wKCk7XG5cdHJlbmRlcmVyID0gbmV3IFNwcmluZ3kuUmVuZGVyZXIobGF5b3V0LFxuXHRcdGZ1bmN0aW9uIGNsZWFyKCkge1xuXHRcdFx0Y3R4LmNsZWFyUmVjdCgwLCAwLCBXSURUSCwgSEVJR0hUKTtcblx0XHR9LFxuXHRcdGZ1bmN0aW9uIGRyYXdFZGdlKGVkZ2UsIHAxLCBwMikge1xuXHRcdFx0Y3R4LmJlZ2luUGF0aCgpO1xuXHRcdFx0cDEgPSBwcm9qZWN0KHAxLCBXSURUSCwgSEVJR0hUKTtcblx0XHRcdHAyID0gcHJvamVjdChwMiwgV0lEVEgsIEhFSUdIVCk7XG4gICAgICBjdHgubGluZVdpZHRoID0gKGVkZ2UuZGF0YS5zdHJlbmd0aCkgfHwgMS4wO1xuICAgICAgY3R4Lmdsb2JhbEFscGhhID0gKGVkZ2UuZGF0YS5zdHJlbmd0aCkgfHwgMS4wO1xuXHRcdFx0Y3R4Lm1vdmVUbyhwMS54LCBwMS55KTtcblx0XHRcdGN0eC5saW5lVG8ocDIueCwgcDIueSk7XG5cdFx0XHRjdHguc3Ryb2tlKCk7XG5cdFx0fSxcblx0XHRmdW5jdGlvbiBkcmF3Tm9kZShub2RlLCBwKSB7XG5cdFx0XHQvL25vZGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChub2RlLmRhdGEuaWQpO1xuXHRcdFx0bm9kZSA9IG5vZGUuZGF0YS5yZWY7XG5cdFx0XHQvKmlmKG5vZGUuZGF0YS5pbWFnZS5jb21wbGV0ZSkgXG5cdFx0XHRcdGN0eC5kcmF3SW1hZ2Uobm9kZS5kYXRhLmltYWdlLCBwLnggKiB3aWR0aCArIG5vZGUuaW1hZ2Uud2lkdGgsIHAueSAqIGhlaWdodCk7Ki9cblx0XHRcdC8vIGRyYXcgYSBub2RlXG5cdFx0XHRwID0gcHJvamVjdChwLCB3aWR0aCwgaGVpZ2h0KTtcblx0XHRcdGlmKG5vZGUpe1xuICAgICAgICBpZihwYXJzZUludChub2RlLnN0eWxlLmxlZnQpICE9IE1hdGguZmxvb3IocC54KSlcbiAgICAgICAgICBub2RlLnN0eWxlLmxlZnQgPSBwLngqMTAwL3dpZHRoICsgXCIlXCI7XG4gICAgICAgIGlmKHBhcnNlSW50KG5vZGUuc3R5bGUudG9wKSAhPSBNYXRoLmZsb29yKHAueSkpXG4gICAgICAgICAgbm9kZS5zdHlsZS50b3AgPSBwLnkqMTAwL2hlaWdodCArIFwiJVwiO1xuXHRcdFx0fVxuXHRcdH0sXG4gICAgZnVuY3Rpb24gb25SZW5kZXJTdG9wKCkge1xuICAgICAgb25yZW5kZXJlZCgpO1xuICAgIH1cblx0KTtcblx0cmVuZGVyZXIuc3RhcnQoKTtcbn1cbjwvc2NyaXB0PlxuXG48ZGl2IGNsYXNzPVwicmVsYXRpdmUgeyQkcHJvcHMuY2xhc3N9XCI+XG48Y2FudmFzIGJpbmQ6dGhpcz17Y2FudmFzfSB3aWR0aD17V0lEVEh9IGhlaWdodD17SEVJR0hUfSBjbGFzcz1cInctZnVsbFwiPiA8L2NhbnZhcz5cbnsjZWFjaCBub2RlcyBhcyBub2RlfVxuXHQ8ZGl2IGJpbmQ6dGhpcz17bm9kZS5yZWZ9IGlkPVwie25vZGUuaWR9XCIgY2xhc3M9XCJub2RlXCI+XG5cdFx0PHNsb3Qge25vZGV9Pjwvc2xvdD5cblx0PC9kaXY+XG57L2VhY2h9XG48L2Rpdj5cblxuXG48c3R5bGU+XG4ubm9kZSB7XG5cdHBvc2l0aW9uOiBhYnNvbHV0ZTsgXG5cdGRpc3BsYXk6IGlubGluZS1ibG9jaztcblx0dHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XG4gIHdpZHRoOiBmaXQtY29udGVudDtcbiAgdG9wOiA1MCU7XG4gIGxlZnQ6IDUwJTtcbn1cbjwvc3R5bGU+XG4iLCJ7I2lmIGhlYWRlcn1cbjxkaXYgY2xhc3M9XCJ3LWZ1bGwgZmxleCBmbGV4LXJvd1wiPlxuICA8ZGl2IGNsYXNzPVwidy0xLzQgYmctZ3JheS01MDAgdGV4dC1jZW50ZXIgb3ZlcmZsb3ctaGlkZGVuIGZsZXggZmxleC1yb3cganVzdGlmeS1hcm91bmQgaXRlbXMtY2VudGVyXCI+XG4gICAgeyNlYWNoIFtcIm1iLTJcIiwgXCJtYi0xXCIsIFwiLW1iLTJcIiwgXCItbWItOFwiXSBhcyBtYn1cbiAgICA8c3ZnIGFyZWEtaGlkZGVuPVwidHJ1ZVwiIHJvbGU9XCJpbWdcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCB7ZmFNb29uLmljb25bMF19IHtmYU1vb24uaWNvblsxXX1cIiBjbGFzcz1cInttYn0gdy00IGgtNCBvdmVyZmxvdy12aXNpYmxlIGlubGluZS1ibG9jayB0ZXh0LXllbGxvdy00MDBcIj5cbiAgICAgIDxwYXRoIGZpbGw9XCJjdXJyZW50Q29sb3JcIiBkPVwie2ZhTW9vbi5pY29uWzRdfVwiLz5cbiAgICA8L3N2Zz5cbiAgICB7L2VhY2h9XG4gIDwvZGl2PlxuICA8ZGl2IGNsYXNzPVwidy0xLzIgYmctd2hpdGUgdGV4dC1jZW50ZXIgb3ZlcmZsb3ctaGlkZGVuIGZsZXggZmxleC1yb3cganVzdGlmeS1hcm91bmQgaXRlbXMtY2VudGVyXCI+XG4gICAgeyNlYWNoIFtcIi1tYi04XCIsIFwiLW1iLTJcIiwgXCJtYi0xXCIsIFwibWItMlwiLCBcIm1iLTFcIiwgXCItbWItMlwiLCBcIi1tYi04XCJdIGFzIG1ifVxuICAgIDxzdmcgYXJlYS1oaWRkZW49XCJ0cnVlXCIgcm9sZT1cImltZ1wiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIHtmYVN1bi5pY29uWzBdfSB7ZmFTdW4uaWNvblsxXX1cIiBjbGFzcz1cInttYn0gdy00IGgtNCBvdmVyZmxvdy12aXNpYmxlIGlubGluZS1ibG9jayB0ZXh0LXJlZC00MDBcIj5cbiAgICAgIDxwYXRoIGZpbGw9XCJjdXJyZW50Q29sb3JcIiBkPVwie2ZhU3VuLmljb25bNF19XCIvPlxuICAgIDwvc3ZnPlxuICAgIHsvZWFjaH1cbiAgPC9kaXY+XG4gIDxkaXYgY2xhc3M9XCJ3LTEvNCBiZy1ncmF5LTUwMCB0ZXh0LWNlbnRlciBvdmVyZmxvdy1oaWRkZW4gZmxleCBmbGV4LXJvdyBqdXN0aWZ5LWFyb3VuZCBpdGVtcy1jZW50ZXJcIj5cbiAgICB7I2VhY2ggW1wibWItMlwiLCBcIm1iLTFcIiwgXCItbWItMlwiLCBcIi1tYi04XCJdLnJldmVyc2UoKSBhcyBtYn1cbiAgICA8c3ZnIGFyZWEtaGlkZGVuPVwidHJ1ZVwiIHJvbGU9XCJpbWdcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCB7ZmFNb29uLmljb25bMF19IHtmYU1vb24uaWNvblsxXX1cIiBjbGFzcz1cInttYn0gdy00IGgtNCBvdmVyZmxvdy12aXNpYmxlIGlubGluZS1ibG9jayB0ZXh0LXllbGxvdy00MDBcIj5cbiAgICAgIDxwYXRoIGZpbGw9XCJjdXJyZW50Q29sb3JcIiBkPVwie2ZhTW9vbi5pY29uWzRdfVwiLz5cbiAgICA8L3N2Zz5cbiAgICB7L2VhY2h9XG4gIDwvZGl2PlxuPC9kaXY+XG57L2lmfVxuPGRpdiBjbGFzcz1cInctZnVsbCByZWxhdGl2ZSBib3JkZXItdFwiPlxuICA8ZGl2IGNsYXNzPVwidy1mdWxsIGFic29sdXRlIGJnLWdyYXktNTAwXCIgc3R5bGU9XCJoZWlnaHQ6IHtoZWlnaHR9cHhcIj48L2Rpdj5cbiAgPGRpdiBjbGFzcz1cInctMy80IGFic29sdXRlIGJnLXdoaXRlXCIgc3R5bGU9XCJoZWlnaHQ6IHtoZWlnaHR9cHhcIj48L2Rpdj5cbiAgPGRpdiBjbGFzcz1cInctMS8yIGFic29sdXRlIGJnLXdoaXRlXCIgc3R5bGU9XCJoZWlnaHQ6IHtoZWlnaHR9cHhcIj48L2Rpdj5cbiAgPGRpdiBjbGFzcz1cInctMS80IGFic29sdXRlIGJnLWdyYXktNTAwXCIgc3R5bGU9XCJoZWlnaHQ6IHtoZWlnaHR9cHhcIj48L2Rpdj5cbiAgPGRpdiBjbGFzcz1cInctZnVsbFwiPlxuICAgIDxkaXYgY2xhc3M9XCJ3LWZ1bGwgZmxleCBmbGV4LXJvdyBmbGV4LXdyYXAgaXRlbXMtY2VudGVyIHJlbGF0aXZlXCI+XG4gICAgICA8c3ZnIGNsYXNzPVwiZmxleC1ncm93IGJvcmRlci1ncmF5LTkwMFwiIHdpZHRoPXt3aWR0aH0gaGVpZ2h0PXtoZWlnaHR9IGJpbmQ6dGhpcz17c3ZnfT5cblx0XHRcdFx0PGRlZnM+XG5cdFx0XHRcdFx0eyNlYWNoIE9iamVjdC52YWx1ZXMoZ2FtZXMpIGFzIGdhbWV9XG5cdFx0XHRcdFx0PHBhdHRlcm4gaWQ9XCJnYW1lLWJveC1hcnQte2dhbWUuaWR9XCIgd2lkdGg9e2dhbWVfYm94X2FydF93aWR0aH0gaGVpZ2h0PXtnYW1lX2JveF9hcnRfaGVpZ2h0fSBwYXR0ZXJuVW5pdHM9XCJ1c2VyU3BhY2VPblVzZVwiPlxuICAgICAgICAgICAgeyNpZiBnYW1lLmJveF9hcnRfdXJsfVxuICAgICAgICAgICAgICA8aW1hZ2UgeGxpbms6aHJlZj17Z2FtZS5ib3hfYXJ0X3VybC5yZXBsYWNlKFwie3dpZHRofVwiLCBnYW1lX2JveF9hcnRfd2lkdGgpLnJlcGxhY2UoXCJ7aGVpZ2h0fVwiLCBnYW1lX2JveF9hcnRfaGVpZ2h0KX0gd2lkdGg9e2dhbWVfYm94X2FydF93aWR0aH0gaGVpZ2h0PXtnYW1lX2JveF9hcnRfaGVpZ2h0fSB4PTAgeT0wID4gPC9pbWFnZT5cbiAgICAgICAgICAgIHsvaWZ9XG5cdFx0XHRcdFx0PC9wYXR0ZXJuPlxuXHRcdFx0XHRcdHsvZWFjaH1cblx0XHRcdFx0PC9kZWZzPlxuICAgICAgICA8ZyBzaGFwZS1yZW5kZXJpbmc9XCJjcmlzcEVkZ2VzXCI+XG4gICAgICAgICAgPGxpbmUgeDE9XCJ7d2lkdGgqMS84fVwiIHgyPVwie3dpZHRoKjEvOH1cIiB5MT1cIjBcIiB5Mj1cIjEwMFwiIHN0cm9rZS13aWR0aD1cIjEuMFwiIHN0cm9rZT1cIiNlZWVcIj48L2xpbmU+XG4gICAgICAgICAgPHRleHQgeD1cIjBcIiB5PVwiMFwiIGZpbGw9XCIjZWVlXCIgZm9udC1zaXplPVwiMTBcIiBmb250LWZhbWlseT1cIkFyaWFsXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKHt3aWR0aCoxLzggKyAzfSwgMykgcm90YXRlKDkwKVwiPlxuICAgICAgICAgICAgM2FtXG4gICAgICAgICAgPC90ZXh0PlxuICAgICAgICAgIDwhLS08bGluZSB4MT1cInt3aWR0aCoyLzh9XCIgeDI9XCJ7d2lkdGgqMi84fVwiIHkxPVwiMFwiIHkyPVwiMTAwXCIgc3Ryb2tlLXdpZHRoPVwiMS4wXCIgc3Ryb2tlPVwiI2VlZVwiPjwvbGluZT4tLT5cbiAgICAgICAgICA8dGV4dCBmaWxsPVwiI2FhYVwiIGZvbnQtc2l6ZT1cIjEwXCIgZm9udC1mYW1pbHk9XCJBcmlhbFwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSh7d2lkdGgqMi84ICsgM30sIDMpIHJvdGF0ZSg5MClcIj5cbiAgICAgICAgICAgIDZhbVxuICAgICAgICAgIDwvdGV4dD5cbiAgICAgICAgICA8bGluZSB4MT1cInt3aWR0aCozLzh9XCIgeDI9XCJ7d2lkdGgqMy84fVwiIHkxPVwiMFwiIHkyPVwiMTAwXCIgc3Ryb2tlLXdpZHRoPVwiMS4wXCIgc3Ryb2tlPVwiI2FhYVwiPjwvbGluZT5cbiAgICAgICAgICA8dGV4dCBmaWxsPVwiI2FhYVwiIGZvbnQtc2l6ZT1cIjEwXCIgZm9udC1mYW1pbHk9XCJBcmlhbFwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSh7d2lkdGgqMy84ICsgM30sIDMpIHJvdGF0ZSg5MClcIj5cbiAgICAgICAgICAgIDlhbVxuICAgICAgICAgIDwvdGV4dD5cbiAgICAgICAgICA8bGluZSB4MT1cInt3aWR0aCo0Lzh9XCIgeDI9XCJ7d2lkdGgqNC84fVwiIHkxPVwiMFwiIHkyPVwiMTAwXCIgc3Ryb2tlLXdpZHRoPVwiMS4wXCIgc3Ryb2tlPVwiIzc3N1wiPjwvbGluZT5cbiAgICAgICAgICA8dGV4dCBmaWxsPVwiIzc3N1wiIGZvbnQtc2l6ZT1cIjEwXCIgZm9udC1mYW1pbHk9XCJBcmlhbFwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSh7d2lkdGgqNC84ICsgM30sIDMpIHJvdGF0ZSg5MClcIj5cbiAgICAgICAgICAgIOygleyYpFxuICAgICAgICAgIDwvdGV4dD5cbiAgICAgICAgICA8bGluZSB4MT1cInt3aWR0aCo1Lzh9XCIgeDI9XCJ7d2lkdGgqNS84fVwiIHkxPVwiMFwiIHkyPVwiMTAwXCIgc3Ryb2tlLXdpZHRoPVwiMS4wXCIgc3Ryb2tlPVwiI2FhYVwiPjwvbGluZT5cbiAgICAgICAgICA8dGV4dCBmaWxsPVwiI2FhYVwiIGZvbnQtc2l6ZT1cIjEwXCIgZm9udC1mYW1pbHk9XCJBcmlhbFwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSh7d2lkdGgqNS84ICsgM30sIDMpIHJvdGF0ZSg5MClcIj5cbiAgICAgICAgICAgIDNwbVxuICAgICAgICAgIDwvdGV4dD5cbiAgICAgICAgICA8IS0tPGxpbmUgeDE9XCJ7d2lkdGgqNi84fVwiIHgyPVwie3dpZHRoKjYvOH1cIiB5MT1cIjBcIiB5Mj1cIjEwMFwiIHN0cm9rZS13aWR0aD1cIjEuMFwiIHN0cm9rZT1cIiNhYWFcIj48L2xpbmU+LS0+XG4gICAgICAgICAgPHRleHQgZmlsbD1cIiNlZWVcIiBmb250LXNpemU9XCIxMFwiIGZvbnQtZmFtaWx5PVwiQXJpYWxcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoe3dpZHRoKjYvOCArIDN9LCAzKSByb3RhdGUoOTApXCI+XG4gICAgICAgICAgICA2cG1cbiAgICAgICAgICA8L3RleHQ+XG4gICAgICAgICAgPGxpbmUgeDE9XCJ7d2lkdGgqNy84fVwiIHgyPVwie3dpZHRoKjcvOH1cIiB5MT1cIjBcIiB5Mj1cIjEwMFwiIHN0cm9rZS13aWR0aD1cIjEuMFwiIHN0cm9rZT1cIiNlZWVcIj48L2xpbmU+XG4gICAgICAgICAgPHRleHQgZmlsbD1cIiNlZWVcIiBmb250LXNpemU9XCIxMFwiIGZvbnQtZmFtaWx5PVwiQXJpYWxcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoe3dpZHRoKjcvOCArIDN9LCAzKSByb3RhdGUoOTApXCI+XG4gICAgICAgICAgICA5cG1cbiAgICAgICAgICA8L3RleHQ+XG4gICAgICAgICAgeyNpZiBkYXlzX2FnbyA9PSAwICYmIG5vd194fVxuICAgICAgICAgIDxsaW5lIHgxPVwie25vd194fVwiIHgyPXtub3dfeH0geTE9ezB9IHkyPXtoZWlnaHR9IHN0cm9rZT1cIiNGRjQ1NjBcIiBzdHJva2Utd2lkdGg9MC41IFxuICAgICAgICAgICAgc3Ryb2tlLWRhc2hhcnJheT1cIjQgNFwiXG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDx0ZXh0IGZpbGw9XCIjRkY0NTYwXCIgZm9udC1zaXplPVwiMTBcIiBmb250LWZhbWlseT1cIkFyaWFsXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKHtub3dfeCArIDN9LCAzKSByb3RhdGUoOTApXCI+XG4gICAgICAgICAgICDtmITsnqxcbiAgICAgICAgICA8L3RleHQ+XG4gICAgICAgICAgey9pZn1cbiAgICAgICAgPC9nPlxuXHRcdFx0XHQ8Zz5cblx0XHRcdFx0XHR7I2VhY2ggZGF0YV9jaHVua3MgYXMgZGF0YX1cbiAgICAgICAgICAgIDwhLS08cGF0aCBmaWxsPVwiI0NEQThDN1wiIHN0cm9rZT1cIiNCNDk4QUVcIiBzdHJva2Utd2lkdGg9MS4wIGQ9XCJ7ZGF0YS5wYXRoWzBdfVwiIC8+LS0+XG4gICAgICAgICAgICA8cGF0aCBmaWxsPVwiI0NCRDVFMFwiIHN0cm9rZT1cIiNBMEFFQzBcIiBzdHJva2Utd2lkdGg9MS4wIGQ9XCJ7ZGF0YS5wYXRoWzBdfVwiIC8+XG4gICAgICAgICAgICB7I2lmIGRhdGFbMF0gJiYgZGF0YVswXVs1XSAmJiBkYXRhWzBdWzVdLmdhbWUgJiYgZ2FtZXNbZGF0YVswXVs1XS5nYW1lLmlkXSAmJiBkYXRhWzBdWzVdLmdhbWUuYm94X2FydF91cmx9XG4gICAgICAgICAgICAgIDxwYXRoIFxuICAgICAgICAgICAgICAgIHN0eWxlPVwiZmlsbDp1cmwoI2dhbWUtYm94LWFydC17ZGF0YVswXVs1XS5nYW1lLmlkfSlcIlxuICAgICAgICAgICAgICAgIHN0cm9rZT1cIiNBMEFFQzBcIiBzdHJva2Utd2lkdGg9MS4wIGQ9XCJ7ZGF0YS5wYXRoWzFdfVwiIC8+XG4gICAgICAgICAgICB7OmVsc2V9XG4gICAgICAgICAgICAgIDxwYXRoIFxuICAgICAgICAgICAgICAgIGZpbGw9XCIjMDAwMDAwXCIgXG4gICAgICAgICAgICAgICAgc3Ryb2tlPVwiI0I0OThBRVwiIHN0cm9rZS13aWR0aD0xLjAgZD1cIntkYXRhLnBhdGhbMV19XCIgLz5cbiAgICAgICAgICAgIHsvaWZ9XG4gICAgICAgICAgICA8cGF0aCBmaWxsPVwibm9uZVwiIHN0cm9rZT1cIiNGRjQ1NjBcIiBzdHJva2Utd2lkdGg9My4wIGQ9XCJ7ZGF0YS5wYXRoWzJdfVwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2UtZGFzaGFycmF5PVwiMSA2XCIgLz5cbiAgICAgICAgICB7L2VhY2h9XG4gICAgICAgICAgeyNpZiBzdHJlYW1lci5pc19zdHJlYW1pbmcgJiYgZGF5c19hZ28gPT0gMCAmJiBsYXN0X2RhdGF9XG4gICAgICAgICAgICA8Y2lyY2xlIFxuICAgICAgICAgICAgICBjeD17eHNjYWxlKGxhc3RfZGF0YVswXSl9IFxuICAgICAgICAgICAgICBjeT17aGVpZ2h0ICogKCRtYXhfeV9heGlzIC0gKGxhc3RfZGF0YVsxXSkpIC8gJG1heF95X2F4aXN9IFxuICAgICAgICAgICAgICByPTRcbiAgICAgICAgICAgICAgY2xhc3M9XCJpc19zdHJlYW1pbmdfbGFiZWxcIlxuICAgICAgICAgICAgICBmaWxsPVwiI0ZGNDU2MFwiIC8+XG4gICAgICAgICAgICA8dGV4dCBmaWxsPVwiI0ZGNDU2MFwiIGZvbnQtc2l6ZT1cIjEwXCIgZm9udC1mYW1pbHk9XCJBcmlhbFwiIFxuICAgICAgICAgICAgICB4PXt4c2NhbGUobGFzdF9kYXRhWzBdKSArIDZ9XG4gICAgICAgICAgICAgIHk9e2hlaWdodCAqICgkbWF4X3lfYXhpcyAtIChsYXN0X2RhdGFbMV0pKSAvICRtYXhfeV9heGlzfVxuICAgICAgICAgICAgICBjbGFzcz1cImlzX3N0cmVhbWluZ19sYWJlbFwiPlxuICAgICAgICAgICAgICDrsKnshqHspJFcbiAgICAgICAgICAgIDwvdGV4dD5cbiAgICAgICAgICB7L2lmfVxuXHRcdFx0XHQ8L2c+XG4gICAgICAgIDxnIHNoYXBlLXJlbmRlcmluZz1cImNyaXNwRWRnZXNcIj5cbiAgICAgICAgICA8bGluZSBjbGFzczpoaWRkZW49e3Rvb2x0aXBfZGF0YSA9PSBudWxsfSB4MT17dG9vbHRpcF94fSB4Mj17dG9vbHRpcF94fSB5MT17MH0geTI9e2hlaWdodH0gc3Ryb2tlPVwiIzAwMDAwMFwiIHN0cm9rZS13aWR0aD0wLjUgXG4gICAgICAgICAgICBzdHJva2UtZGFzaGFycmF5PVwiNCAxXCJcbiAgICAgICAgICAgIC8+XG4gICAgICAgIDwvZz5cblx0XHRcdDwvc3ZnPlxuICAgICAgPGRpdiBjbGFzcz1cImZsZXgtbm9uZSBtci0yIGFic29sdXRlIGxlZnQtMCB0b3AtMCBwLTEgdGV4dC13aGl0ZSBwb2ludGVyLWV2ZW50cy1ub25lXCI+IHtbXCLsmKTriphcIiwgXCLslrTsoJxcIiwgXCLqt7jsoJxcIiwgXCLsl4rqt7jsoJxcIl1bZGF5c19hZ29dIHx8IGRheXNfYWdvICsgXCLsnbzsoIRcIn0gPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuXHR7I2lmIHRvb2x0aXBfZGF0YX0gXG4gICAgPGRpdiBjbGFzcz1cImFic29sdXRlIGJnLXdoaXRlIG9wYWNpdHktNzUgei01MFwiIHN0eWxlPVwie3Rvb2x0aXBfeCA8IHdpZHRoKjAuNT8gJ2xlZnQ6JyArICh0b29sdGlwX3grNSkgKyAncHgnOiAncmlnaHQ6JyArICgod2lkdGgtdG9vbHRpcF94KSs1KSArICdweCd9OyB0b3A6IHt0b29sdGlwX3kgKyA1fXB4XCI+IFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZsZXggZmxleC1jb2wgZm9udC1zYW5zIGN1c3RvbS10b29sdGlwIHAtMyB3LTQ4IGZsZXgtdW53cmFwXCI+IFxuXHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwidGV4dC1ncmF5LTYwMCB0ZXh0LXhzIGZvbnQtc2VtaWJvbGQgdHJhY2tpbmctd2lkZVwiPlxuXHRcdFx0XHRcdFx0XHRcdHt0b29sdGlwX2RhdGFfdGltZV9mb3JtYXQodG9vbHRpcF9kYXRhKX1cblx0XHRcdFx0XHRcdFx0PC9kaXY+XG4gICAgICAgICAgICAgIDxwIGNsYXNzPVwiYnJlYWstYWxsIG10LTEgdGV4dC1ncmF5IGl0YWxpYyB0cmFja2luZy10aWdodFwiIHN0eWxlPVwiZm9udC1zaXplOiAwLjVyZW1cIj5cblx0XHRcdFx0XHRcdFx0XHR7dG9vbHRpcF9kYXRhWzVdLnRpdGxlfVxuICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm10LTEgZmxleCBmbGV4LXJvdyBmbGV4LXdyYXAgaXRlbXMtY2VudGVyIHRleHQtZ3JheS05MDBcIj5cbiAgICAgICAgICAgICAgICAgIDxzdmcgYXJlYS1oaWRkZW49XCJ0cnVlXCIgcm9sZT1cImltZ1wiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIHtmYVVzZXIuaWNvblswXX0ge2ZhVXNlci5pY29uWzFdfVwiIGNsYXNzPVwidy00IGgtNCBtci0yIG92ZXJmbG93LXZpc2libGUgaW5saW5lLWJsb2NrXCI+XG4gICAgICAgICAgICAgICAgICAgIDxwYXRoIGZpbGw9XCJjdXJyZW50Q29sb3JcIiBkPVwie2ZhVXNlci5pY29uWzRdfVwiLz5cbiAgICAgICAgICAgICAgICAgIDwvc3ZnPlxuICAgICAgICAgICAgICAgICAgPGI+e3Rvb2x0aXBfZGF0YVsxXX3rqoU8L2I+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZsZXggZmxleC1yb3cgZmxleC13cmFwIGl0ZW1zLWNlbnRlciB0ZXh0LWdyYXktNjAwIHRleHQteHNcIj5cbiAgICAgICAgICAgICAgICAgIDxzdmcgYXJlYS1oaWRkZW49XCJ0cnVlXCIgcm9sZT1cImltZ1wiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIHtmYVVzZXJTZWNyZXQuaWNvblswXX0ge2ZhVXNlclNlY3JldC5pY29uWzFdfVwiIGNsYXNzPVwidy0zIGgtMyBtci0yIG92ZXJmbG93LXZpc2libGUgaW5saW5lLWJsb2NrXCI+XG4gICAgICAgICAgICAgICAgICAgIDxwYXRoIGZpbGw9XCJjdXJyZW50Q29sb3JcIiBkPVwie2ZhVXNlclNlY3JldC5pY29uWzRdfVwiLz5cbiAgICAgICAgICAgICAgICAgIDwvc3ZnPlxuICAgICAgICAgICAgICAgICAgPGI+e3Rvb2x0aXBfZGF0YVsxXSAtIHRvb2x0aXBfZGF0YVsyXX3rqoU8L2I+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZsZXggZmxleC1yb3cgZmxleC13cmFwIGl0ZW1zLWNlbnRlciB0ZXh0LXllbGxvdy03MDAgdGV4dC14c1wiPlxuICAgICAgICAgICAgICAgICAgPHN2ZyBhcmVhLWhpZGRlbj1cInRydWVcIiByb2xlPVwiaW1nXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAge2ZhS2V5Lmljb25bMF19IHtmYUtleS5pY29uWzFdfVwiIGNsYXNzPVwidy0zIGgtMyBtci0yIG92ZXJmbG93LXZpc2libGUgaW5saW5lLWJsb2NrXCI+XG4gICAgICAgICAgICAgICAgICAgIDxwYXRoIGZpbGw9XCJjdXJyZW50Q29sb3JcIiBkPVwie2ZhS2V5Lmljb25bNF19XCIvPlxuICAgICAgICAgICAgICAgICAgPC9zdmc+XG4gICAgICAgICAgICAgICAgICA8Yj57dG9vbHRpcF9kYXRhWzJdfeuqhTwvYj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibXQtMSBmbGV4IGZsZXgtcm93IGZsZXgtd3JhcCBpdGVtcy1jZW50ZXJcIiBzdHlsZT1cImNvbG9yOiAjRkY2RjYxXCI+XG4gICAgICAgICAgICAgICAgICA8c3ZnIGFyZWEtaGlkZGVuPVwidHJ1ZVwiIHJvbGU9XCJpbWdcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCB7ZmFDb21tZW50RG90cy5pY29uWzBdfSB7ZmFDb21tZW50RG90cy5pY29uWzFdfVwiIGNsYXNzPVwidy00IGgtNCBtci0yIG92ZXJmbG93LXZpc2libGUgaW5saW5lLWJsb2NrXCI+XG4gICAgICAgICAgICAgICAgICAgIDxwYXRoIGZpbGw9XCJjdXJyZW50Q29sb3JcIiBkPVwie2ZhQ29tbWVudERvdHMuaWNvbls0XX1cIi8+XG4gICAgICAgICAgICAgICAgICA8L3N2Zz5cbiAgICAgICAgICAgICAgICAgIDxiPnt0b29sdGlwX2RhdGFbNF0udG9GaXhlZCgxKX3ssYTtjIUv7LSIPC9iPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtdC0xIGZsZXggZmxleC1yb3cgZmxleC13cmFwIGl0ZW1zLWNlbnRlciB0ZXh0LXB1cnBsZS02MDBcIj5cbiAgICAgICAgICAgICAgICAgIDxzdmcgYXJlYS1oaWRkZW49XCJ0cnVlXCIgcm9sZT1cImltZ1wiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIHtmYUhpc3RvcnkuaWNvblswXX0ge2ZhSGlzdG9yeS5pY29uWzFdfVwiIGNsYXNzPVwidy00IGgtNCBtci0yIG92ZXJmbG93LXZpc2libGUgaW5saW5lLWJsb2NrXCI+XG4gICAgICAgICAgICAgICAgICAgIDxwYXRoIGZpbGw9XCJjdXJyZW50Q29sb3JcIiBkPVwie2ZhSGlzdG9yeS5pY29uWzRdfVwiLz5cbiAgICAgICAgICAgICAgICAgIDwvc3ZnPlxuICAgICAgICAgICAgICAgICAgPGI+7JeF7YOA7J6EIHtNYXRoLmZsb29yKCh0b29sdGlwX2RhdGFbMF0gLSB0b29sdGlwX2RhdGFbNV0uc3RhcnRlZF9hdCkgLyAzNjAwKX3si5zqsIR7TWF0aC5yb3VuZCgodG9vbHRpcF9kYXRhWzBdIC0gdG9vbHRpcF9kYXRhWzVdLnN0YXJ0ZWRfYXQpICUgMzYwMCAvIDYwKX3rtoQ8L2I+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDxwIGNsYXNzPVwibXQtMiB0ZXh0LXhzIHB4LTEgYm9yZGVyIHJvdW5kZWQtZnVsbCB0ZXh0LXdoaXRlIHRleHQtY2VudGVyXCIgc3R5bGU9XCJiYWNrZ3JvdW5kLWNvbG9yOiB7ZGFya19yYW5kb21fY29sb3IodG9vbHRpcF9kYXRhWzVdLmdhbWUgJiYgdG9vbHRpcF9kYXRhWzVdLmdhbWUuaWQgfHwgMCl9XCI+XG4gICAgICAgICAgICAgICAge3Rvb2x0aXBfZGF0YVs1XS5nYW1lICE9IG51bGw/IHRvb2x0aXBfZGF0YVs1XS5nYW1lLm5hbWUgOiBcIlwifVxuICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG5cdHsvaWZ9XG48L2Rpdj5cblxuPHNjcmlwdCBjb250ZXh0PVwibW9kdWxlXCI+XG4gIGltcG9ydCB7IHdyaXRhYmxlIH0gZnJvbSAnc3ZlbHRlL3N0b3JlJztcbiAgbGV0IG1heF95X2F4aXMgPSB3cml0YWJsZSgwKTtcbiAgbGV0IG1heF95X2F4aXNfcmlnaHQgPSB3cml0YWJsZSgwKTtcblxuXHRmdW5jdGlvbiB0b29sdGlwX2RhdGFfdGltZV9mb3JtYXQoZGF0YSkge1xuXHRcdGxldCBkID0gbmV3IERhdGUoZGF0YVswXSoxMDAwKSxcblx0XHRcdFx0aCA9IGQuZ2V0SG91cnMoKSwgbSA9IGQuZ2V0TWludXRlcygpO1xuXHRcdHJldHVybiBgJHtoPDEyPyBcIkFNXCI6IFwiUE1cIn0gJHsoXCIwXCIrKGg+MTI/IGgtMTI6IGgpKS5zbGljZSgtMil9OiR7KFwiMFwiK20pLnNsaWNlKC0yKX1gO1xuXHR9XG48L3NjcmlwdD5cblxuPHNjcmlwdD5cbmltcG9ydCB7IG9uTW91bnQgfSBmcm9tIFwic3ZlbHRlXCI7XG5pbXBvcnQgeyBmYVVzZXIgfSBmcm9tICdAZm9ydGF3ZXNvbWUvZnJlZS1zb2xpZC1zdmctaWNvbnMvZmFVc2VyJ1xuaW1wb3J0IHsgZmFVc2VyTG9jayB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYVVzZXJMb2NrJ1xuaW1wb3J0IHsgZmFVc2VyU2VjcmV0IH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhVXNlclNlY3JldCdcbmltcG9ydCB7IGZhVXNlckNoZWNrIH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhVXNlckNoZWNrJ1xuaW1wb3J0IHsgZmFDb21tZW50RG90cyB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYUNvbW1lbnREb3RzJ1xuaW1wb3J0IHsgZmFLZXkgfSBmcm9tICdAZm9ydGF3ZXNvbWUvZnJlZS1zb2xpZC1zdmctaWNvbnMvZmFLZXknXG5pbXBvcnQgeyBmYVN1biB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYVN1bidcbmltcG9ydCB7IGZhTW9vbiB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYU1vb24nXG5pbXBvcnQgeyBmYUV4dGVybmFsTGlua0FsdCB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYUV4dGVybmFsTGlua0FsdCdcbmltcG9ydCB7IGZhSGlzdG9yeSB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYUhpc3RvcnknO1xuaW1wb3J0IHsgZGFya19yYW5kb21fY29sb3IsIGZpbmRMYXN0SW5kZXggfSBmcm9tIFwiLi4vdXRpbC5qc1wiO1xuaW1wb3J0IHsgQVBJIH0gZnJvbSAnLi4vYXBpLmpzJztcblxuZXhwb3J0IGxldCBkYXlzX2FnbztcbmV4cG9ydCBsZXQgc3RyZWFtZXI7XG5leHBvcnQgbGV0IGhlYWRlciA9IGZhbHNlO1xuXG5sZXQgdG9vbHRpcF94PTAsIFxuXHRcdHRvb2x0aXBfeT0wLCBcblx0XHR0b29sdGlwX2RhdGE9bnVsbDtcblxuXG5pZihkYXlzX2FnbyA9PT0gMCkge1xuICBtYXhfeV9heGlzLnNldCgwKVxuICBtYXhfeV9heGlzX3JpZ2h0LnNldCgwKVxufVxuXG5sZXQgdG9kYXkgPSBuZXcgRGF0ZSgpOyB0b2RheS5zZXRIb3VycygwLDAsMCwwKTtcbmxldCB0byA9IG5ldyBEYXRlKHRvZGF5LmdldFRpbWUoKSAtIDEwMDAqNjAqNjAqMjQqKGRheXNfYWdvLTEpKTtcbmxldCBmcm9tID0gbmV3IERhdGUodG9kYXkuZ2V0VGltZSgpIC0gMTAwMCo2MCo2MCoyNCpkYXlzX2Fnbyk7XG5cbmxldCBoZWlnaHQgPSAxMDA7XG5sZXQgd2lkdGggPSA1MDA7XG5cbmxldCBnYW1lcyA9IHt9O1xubGV0IGRhdGFfY2h1bmtzID0gW107XG5sZXQgbGFzdF9kYXRhID0gbnVsbDtcbiQ6IGdhbWVfYm94X2FydF93aWR0aCA9IGhlaWdodCowLjQ7XG4kOiBnYW1lX2JveF9hcnRfaGVpZ2h0ID0gaGVpZ2h0KjAuNTtcblxubGV0IHN2ZztcblxubGV0IHRvX3RpbWVzdGFtcCA9IHRvLmdldFRpbWUoKS8xMDAwO1xubGV0IGZyb21fdGltZXN0YW1wID0gZnJvbS5nZXRUaW1lKCkvMTAwMDtcbmZ1bmN0aW9uIHhzY2FsZSh4KSB7XG4gIHJldHVybiB3aWR0aCAqICh4IC0gZnJvbV90aW1lc3RhbXApIC8gKDI0KjYwKjYwKTtcbn1cbmZ1bmN0aW9uIGl4c2NhbGUoeCkge1xuICByZXR1cm4geCAvIHdpZHRoICogKDI0KjYwKjYwKSArIGZyb21fdGltZXN0YW1wXG59XG5mdW5jdGlvbiB5c2NhbGUoeCkge1xuICByZXR1cm4gaGVpZ2h0ICogKCRtYXhfeV9heGlzIC0geCkgLyAkbWF4X3lfYXhpcztcbn1cbmZ1bmN0aW9uIHlzY2FsZV9yaWdodCh4KSB7XG4gIHJldHVybiBoZWlnaHQgKiAoJG1heF95X2F4aXNfcmlnaHQgLSB4KSAvICRtYXhfeV9heGlzX3JpZ2h0ICsgMztcbn1cbmZ1bmN0aW9uIHVwZGF0ZV9wYXRoKCkge1xuICBmb3IobGV0IGRhdGEgb2YgZGF0YV9jaHVua3Mpe1xuICAgIGRhdGEucGF0aCA9IFtcbiAgICAgIGBNJHt4c2NhbGUoZGF0YVswXVswXSl9LCR7aGVpZ2h0fWAgK1xuICAgICAgICBkYXRhLm1hcChkPT5cbiAgICAgICAgICBgTCR7eHNjYWxlKGRbMF0pfSwke3lzY2FsZShkWzFdKX1gXG4gICAgICAgICkuam9pbihcIlwiKSArIFxuICAgICAgICBgTCR7eHNjYWxlKGRhdGFbZGF0YS5sZW5ndGgtMV1bMF0pfSwke2hlaWdodH1gICtcbiAgICAgICAgYEwke3hzY2FsZShkYXRhWzBdWzBdKX0sJHtoZWlnaHR9YCxcbiAgICAgIGBNJHt4c2NhbGUoZGF0YVswXVswXSl9LCR7aGVpZ2h0fWAgK1xuICAgICAgICBkYXRhLm1hcChkPT5cbiAgICAgICAgICBgTCR7eHNjYWxlKGRbMF0pfSwke3lzY2FsZShkWzJdKX1gXG4gICAgICAgICkuam9pbihcIlwiKSArIFxuICAgICAgICBgTCR7eHNjYWxlKGRhdGFbZGF0YS5sZW5ndGgtMV1bMF0pfSwke2hlaWdodH1gICtcbiAgICAgICAgYEwke3hzY2FsZShkYXRhWzBdWzBdKX0sJHtoZWlnaHR9YCwgXG4gICAgICBgTSR7eHNjYWxlKGRhdGFbMF1bMF0pfSwke3lzY2FsZV9yaWdodChkYXRhWzBdWzRdKX1gICtcbiAgICAgICAgZGF0YS5tYXAoZD0+XG4gICAgICAgICAgYEwke3hzY2FsZShkWzBdKX0sJHt5c2NhbGVfcmlnaHQoZFs0XSl9YFxuICAgICAgICApLmpvaW4oXCJcIiksXG4gICAgXTtcbiAgfVxuICBkYXRhX2NodW5rcyA9IGRhdGFfY2h1bmtzO1xufVxubGV0IGxhc3RfbWF4X3lfYXhpcyA9ICRtYXhfeV9heGlzO1xubGV0IGxhc3RfbWF4X3lfYXhpc19yaWdodCA9ICRtYXhfeV9heGlzX3JpZ2h0O1xuJDogaWYoZGF0YV9jaHVua3MgJiYgKChsYXN0X21heF95X2F4aXMgIT0gJG1heF95X2F4aXMpIHx8IChsYXN0X21heF95X2F4aXNfcmlnaHQgIT0gJG1heF95X2F4aXNfcmlnaHQpKSkge1xuICBsYXN0X21heF95X2F4aXMgPSAkbWF4X3lfYXhpcztcbiAgbGFzdF9tYXhfeV9heGlzX3JpZ2h0ID0gJG1heF95X2F4aXNfcmlnaHQ7XG4gIHVwZGF0ZV9wYXRoKCk7XG59XG5cbmxldCBub3dfeCA9IG51bGw7XG5cbm9uTW91bnQoYXN5bmMgKCk9PiB7XG5cdHdpZHRoID0gc3ZnLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoO1xuICBub3dfeCA9IHhzY2FsZShuZXcgRGF0ZSgpLmdldFRpbWUoKS8xMDAwKTtcbiAgbGV0IHtzdHJlYW1fY2hhbmdlcywgc3RyZWFtX21ldGFkYXRhX2NoYW5nZXN9ID0gYXdhaXQgQVBJLnRpbWVsaW5lKHN0cmVhbWVyLmlkLCBmcm9tLCB0byk7XG4gIGxhc3RfZGF0YSA9IHN0cmVhbV9jaGFuZ2VzW3N0cmVhbV9jaGFuZ2VzLmxlbmd0aC0xXTtcbiAgbWF4X3lfYXhpcy51cGRhdGUoeCA9PiBNYXRoLm1heCh4LCAuLi5zdHJlYW1fY2hhbmdlcy5tYXAoZD0+TWF0aC5tYXgoZFsyXSwgZFsxXSkpKSk7XG4gIG1heF95X2F4aXNfcmlnaHQudXBkYXRlKHggPT4gTWF0aC5tYXgoeCwgLi4uc3RyZWFtX2NoYW5nZXMubWFwKGQ9PmRbNF0pKSk7XG4gIGxldCBqPTA7XG4gIGxldCBtZXRhZGF0YXMgPSBzdHJlYW1fY2hhbmdlcy5tYXAoeCA9PiB7XG4gICAgd2hpbGUoc3RyZWFtX21ldGFkYXRhX2NoYW5nZXMubGVuZ3RoID4gaiAmJiB4WzBdID49IHN0cmVhbV9tZXRhZGF0YV9jaGFuZ2VzW2pdLnRpbWUpICsrajtcbiAgICBpZih4WzFdID09PSBudWxsKSByZXR1cm4gbnVsbDtcbiAgICBlbHNlIGlmKGo+MCkgcmV0dXJuIHN0cmVhbV9tZXRhZGF0YV9jaGFuZ2VzW2otMV07XG4gICAgZWxzZSByZXR1cm4gbnVsbDtcbiAgfSk7XG4gIHN0cmVhbV9jaGFuZ2VzID0gc3RyZWFtX2NoYW5nZXMubWFwKChkLCBpKT0+Wy4uLmQsIG1ldGFkYXRhc1tpXV0pO1xuICBsZXQgc21fbiA9IDMsIGNoYXR0aW5nX3NwZWVkX3NtID0gW3N0cmVhbV9jaGFuZ2VzLnNsaWNlKDAsIHNtX24pLnJlZHVjZSgoYSxiKT0+YStiWzRdLCAwKS9zbV9uXTtcbiAgZm9yKGxldCBpPXNtX24sIGw9c3RyZWFtX2NoYW5nZXMubGVuZ3RoLCBzbT1jaGF0dGluZ19zcGVlZF9zbVswXTsgaTxsOyArK2kpe1xuICAgIHNtID0gc20gKyAoc3RyZWFtX2NoYW5nZXNbaV1bNF0gLSBzdHJlYW1fY2hhbmdlc1tpLXNtX25dWzRdKS9zbV9uO1xuICAgIGNoYXR0aW5nX3NwZWVkX3NtLnB1c2goc20pO1xuICB9XG4gIGZvcihsZXQgaT0wLCBzbT0wOyBpPE1hdGgubWluKHNtX24sIHN0cmVhbV9jaGFuZ2VzLmxlbmd0aCk7ICsraSl7XG4gICAgc20gPSBzbSppLyhpKzEpICsgc3RyZWFtX2NoYW5nZXNbaV1bNF0vKGkrMSk7XG4gICAgc3RyZWFtX2NoYW5nZXNbaV1bNF0gPSBzbTtcbiAgfVxuICBmb3IobGV0IGk9MCwgbD1jaGF0dGluZ19zcGVlZF9zbS5sZW5ndGg7IGk8bDsgKytpKVxuICAgIHN0cmVhbV9jaGFuZ2VzW01hdGgubWluKHN0cmVhbV9jaGFuZ2VzLmxlbmd0aC0xLCBpICsgc21fbi0xKV1bNF0gPSBjaGF0dGluZ19zcGVlZF9zbVtpXTtcblxuXHRzdmcub25tb3VzZW1vdmUgPSBmdW5jdGlvbihlKXtcblx0XHRsZXQgeCA9IGUuY2xpZW50WCAtIHN2Zy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS54LCBcblx0XHRcdFx0eSA9IGUuY2xpZW50WSAtIHN2Zy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS55O1xuICAgIHRvb2x0aXBfeCA9IHg7IFxuICAgIHRvb2x0aXBfeSA9IHk7XG4gICAgbGV0IHRhcmdldF9kYXRlID0gaXhzY2FsZSh4KTtcbiAgICBsZXQgcmlnaHRfaW5kZXggPSBzdHJlYW1fY2hhbmdlcy5maW5kSW5kZXgoZCA9PiBkWzBdID49IHRhcmdldF9kYXRlKSxcbiAgICAgICAgbGVmdF9pbmRleCA9IGZpbmRMYXN0SW5kZXgoc3RyZWFtX2NoYW5nZXMsIGQgPT4gZFswXSA8PSB0YXJnZXRfZGF0ZSk7XG4gICAgbGV0IG5lYXJlc3RfaW5kZXg7IFxuICAgIGlmKHJpZ2h0X2luZGV4ID49IDAgJiYgbGVmdF9pbmRleCA+PSAwKSBcbiAgICAgIG5lYXJlc3RfaW5kZXggPSBNYXRoLmFicyhzdHJlYW1fY2hhbmdlc1tsZWZ0X2luZGV4XVswXSAtIHRhcmdldF9kYXRlKSA8PSBNYXRoLmFicyhzdHJlYW1fY2hhbmdlc1tyaWdodF9pbmRleF1bMF0gLSB0YXJnZXRfZGF0ZSk/XG4gICAgICAgIGxlZnRfaW5kZXg6IHJpZ2h0X2luZGV4O1xuICAgIGVsc2UgaWYocmlnaHRfaW5kZXggPj0gMClcbiAgICAgIG5lYXJlc3RfaW5kZXggPSByaWdodF9pbmRleDtcbiAgICBlbHNlIGlmKGxlZnRfaW5kZXggPj0gMClcbiAgICAgIG5lYXJlc3RfaW5kZXggPSBsZWZ0X2luZGV4O1xuICAgIGVsc2Uge1xuICAgICAgdG9vbHRpcF9kYXRhID0gbnVsbDtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZihNYXRoLmFicyhzdHJlYW1fY2hhbmdlc1tuZWFyZXN0X2luZGV4XVswXSAtIHRhcmdldF9kYXRlKSA8IDYwKjYwKXsgLy8gfHwgcmlnaHRfaW5kZXggIT0gMCAmJiBtZXRhZGF0YXNbcmlnaHRfaW5kZXhdLnN0YXJ0ZWRfYXQgPT0gbWV0YWRhdGFzW3JpZ2h0X2luZGV4LTFdLnN0YXJ0ZWRfYXQpIHtcbiAgICAgIHRvb2x0aXBfZGF0YSA9IHN0cmVhbV9jaGFuZ2VzW25lYXJlc3RfaW5kZXhdO1xuICAgIH1cbiAgICBlbHNlIFxuICAgICAgdG9vbHRpcF9kYXRhID0gbnVsbDtcbiAgfVxuICBzdmcub25tb3VzZWxlYXZlID0gZnVuY3Rpb24oZSl7XG4gICAgdG9vbHRpcF9kYXRhID0gbnVsbDtcbiAgfVxuICBkYXRhX2NodW5rcy5wdXNoKFtdKTtcblx0Zm9yKGxldCBpPTAsIGw9c3RyZWFtX2NoYW5nZXMubGVuZ3RoLCBqPTA7IGk8bDsgKytpKSB7XG4gICBcdCAgaWYoaT4wICYmIG1ldGFkYXRhc1tpXSAhPSBtZXRhZGF0YXNbaS0xXSAmJiBcbiAgICAgICAgICAoKG1ldGFkYXRhc1tpXSA9PSBudWxsIHx8IG1ldGFkYXRhc1tpLTFdID09IG51bGwpIHx8IFxuICAgICAgICAgICAgbWV0YWRhdGFzW2ldLnN0YXJ0ZWRfYXQgIT0gbWV0YWRhdGFzW2ktMV0uc3RhcnRlZF9hdCB8fCBcbiAgICAgICAgICAgIChtZXRhZGF0YXNbaV0uZ2FtZSAmJiBtZXRhZGF0YXNbaV0uZ2FtZS5pZCkgIT0gKG1ldGFkYXRhc1tpLTFdLmdhbWUgJiYgbWV0YWRhdGFzW2ktMV0uZ2FtZS5pZCkgfHxcbiAgICAgICAgICAgIG1ldGFkYXRhc1tpXS50aXRsZSAhPSBtZXRhZGF0YXNbaS0xXS50aXRsZSkpe1xuICAgICAgICArK2o7XG4gICAgICAgIGRhdGFfY2h1bmtzLnB1c2goW10pO1xuICAgICAgICBpZihtZXRhZGF0YXNbaV0gJiYgbWV0YWRhdGFzW2ktMV0gJiYgbWV0YWRhdGFzW2ldLnN0YXJ0ZWRfYXQgPT0gbWV0YWRhdGFzW2ktMV0uc3RhcnRlZF9hdCl7XG4gICAgICAgICAgbGV0IG1pZCA9IHN0cmVhbV9jaGFuZ2VzW2ldLnNsaWNlKDAsIDUpLm1hcCgoZCwgaikgPT4gTWF0aC5mbG9vcigoZCArIHN0cmVhbV9jaGFuZ2VzW2ktMV1bal0pKjAuNSkpO1xuICAgICAgICAgIGRhdGFfY2h1bmtzW2otMV0ucHVzaChbLi4ubWlkLCBtZXRhZGF0YXNbaS0xXV0pXG4gICAgICAgICAgZGF0YV9jaHVua3Nbal0ucHVzaChbLi4ubWlkLCBtZXRhZGF0YXNbaV1dKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBkYXRhX2NodW5rc1tqXS5wdXNoKHN0cmVhbV9jaGFuZ2VzW2ldKVxuICB9XG4gIHVwZGF0ZV9wYXRoKCk7XG4gIGRhdGFfY2h1bmtzID0gZGF0YV9jaHVua3M7XG4gIGZvcihsZXQgZGF0YSBvZiBkYXRhX2NodW5rcyl7XG4gIFx0aWYoZGF0YVswXSA9PSBudWxsIHx8IGRhdGFbMF1bNV0gPT0gbnVsbCB8fCBkYXRhWzBdWzVdLmdhbWUgPT0gbnVsbCkgY29udGludWU7XG5cdFx0Z2FtZXNbZGF0YVswXVs1XS5nYW1lLmlkXSA9IGRhdGFbMF1bNV0uZ2FtZTtcblx0fVxufSk7XG48L3NjcmlwdD5cblxuPHN0eWxlPlxuLmlzX3N0cmVhbWluZ19sYWJlbCB7XG4gIGFuaW1hdGlvbjogYmxpbmtlciAxcyBsaW5lYXIgaW5maW5pdGU7XG59XG5Aa2V5ZnJhbWVzIGJsaW5rZXIge1xuICA1MCUge1xuICAgIG9wYWNpdHk6IDA7XG4gIH1cbn1cbjwvc3R5bGU+XG4iLCI8ZGl2IGNsYXNzPVwieyQkcHJvcHMuY2xhc3N9IHJlbGF0aXZlXCI+XG48Y2FudmFzIGJpbmQ6dGhpcz17Y2FudmFzfSBjbGFzcz1cInctZnVsbFwiPlxuPC9jYW52YXM+XG48Y2FudmFzIGJpbmQ6dGhpcz17dWlfY2FudmFzfSBjbGFzcz1cImFic29sdXRlIHctZnVsbCBoLWZ1bGxcIiBvbjptb3VzZW1vdmU9e21vdXNlbW92ZX0gb246bW91c2VvdmVyPXttb3VzZW92ZXJ9IG9uOm1vdXNlbGVhdmU9e21vdXNlbGVhdmV9PlxuPC9jYW52YXM+XG48L2Rpdj5cblxuPHNjcmlwdCBjb250ZXh0PVwibW9kdWxlXCI+XG5mdW5jdGlvbiBpc19vdmVybGFwKHJhbmdlcywgcG9pbnQpe1xuICBsZXQgcmVzID0gcmFuZ2VzLnNvbWUocmFuZ2UgPT4gcmFuZ2VbMF0gPD0gcG9pbnQgJiYgcG9pbnQgPD0gcmFuZ2VbMV0pXG4gIHJldHVybiByZXM7XG59XG5mdW5jdGlvbiBmaWxsX2hvbGUocmFuZ2VzLCBpbnRlcnZhbCl7XG4gIGxldCBmaWxsZWQgPSBbcmFuZ2VzWzBdXTtcbiAgZm9yKGxldCBpPTEsIGw9cmFuZ2VzLmxlbmd0aDsgaTxsOyArK2kpe1xuICAgIGxldCBsYXN0ID0gZmlsbGVkLnBvcCgpO1xuICAgIGlmKE1hdGguYWJzKHJhbmdlc1tpXVswXSAtIGxhc3RbMV0pIDwgaW50ZXJ2YWwpXG4gICAgICBmaWxsZWQucHVzaChbbGFzdFswXSwgcmFuZ2VzW2ldWzFdXSk7XG4gICAgZWxzZXtcbiAgICAgIGZpbGxlZC5wdXNoKGxhc3QpO1xuICAgICAgZmlsbGVkLnB1c2gocmFuZ2VzW2ldKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZpbGxlZDtcbn1cbjwvc2NyaXB0PlxuXG48c2NyaXB0PlxuaW1wb3J0IHsgb25Nb3VudCB9IGZyb20gXCJzdmVsdGVcIjtcbmltcG9ydCB7IEFQSSB9IGZyb20gJy4uL2FwaS5qcyc7XG5leHBvcnQgbGV0IHN0cmVhbWVyO1xuZXhwb3J0IGxldCBtZWFuX3N0cmVhbWluZ190aW1lX3JhbmdlcyA9IFtdO1xuZXhwb3J0IGxldCBtZWFuX3N0cmVhbWluZ190aW1lX3JlbGlhYmlsaXR5ID0gMC4wO1xuZXhwb3J0IGxldCBzdHJlYW1pbmdfdGltZV9yYW5nZXNfdmFyaWFuY2UgPSAwLjA7XG5leHBvcnQgbGV0IHRvdGFsX3N0cmVhbWluZ190aW1lX3JhdGlvID0gMC4wO1xuZXhwb3J0IGxldCBzdHJlYW1pbmdfdGltZV9yYW5nZXNfcmVndWxhcml0eSA9IDAuMDsgXG5leHBvcnQgbGV0IHN0cmVhbWluZ19zdGFydF90aW1lID0gMC4wOyBcbmV4cG9ydCBsZXQgc3RyZWFtaW5nX2VuZF90aW1lID0gMC4wOyBcbmV4cG9ydCBsZXQgc3RyZWFtaW5nX3N0YXJ0X3RpbWVfc3RkPSAwLjA7IFxuZXhwb3J0IGxldCBzdHJlYW1pbmdfZW5kX3RpbWVfc3RkPSAwLjA7IFxuY29uc3QgZGF5c19hZ28gPSA3Kjg7XG5jb25zdCBpbnRlcnZhbCA9IDYwKjYwKjI0O1xubGV0IHRvZGF5ID0gbmV3IERhdGUoKTsgdG9kYXkuc2V0SG91cnMoMCwwLDAsMCk7XG5sZXQgdG8gPSBuZXcgRGF0ZSh0b2RheS5nZXRUaW1lKCkgKyAxMDAwKjYwKjYwKjI0KTtcbmxldCBmcm9tID0gbmV3IERhdGUodG9kYXkuZ2V0VGltZSgpIC0gMTAwMCo2MCo2MCoyNCooZGF5c19hZ28tMSkpO1xuXG5sZXQgY2FudmFzO1xubGV0IHVpX2NhbnZhcztcblxubGV0IGxhc3Rfc3RyZWFtZXIgPSBudWxsO1xuXG5sZXQgbW91c2VfaW4gPSBmYWxzZTtcbmxldCBtb3VzZV94ID0gMDsgXG5sZXQgbW91c2VfeSA9IDA7XG5mdW5jdGlvbiBtb3VzZW1vdmUoZSl7XG4gIG1vdXNlX2luID0gdHJ1ZTtcbiAgbW91c2VfeCA9IGUuY2xpZW50WCAtIGNhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS54O1xuICBtb3VzZV95ID0gZS5jbGllbnRZIC0gY2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnk7XG59XG5mdW5jdGlvbiBtb3VzZW92ZXIoKXtcbiAgbW91c2VfaW4gPSB0cnVlO1xufVxuZnVuY3Rpb24gbW91c2VsZWF2ZSgpe1xuICBtb3VzZV9pbiA9IGZhbHNlO1xufVxuXG4kOiBpZihjYW52YXMgJiYgbGFzdF9zdHJlYW1lciAhPSBzdHJlYW1lcikge1xuICBsYXN0X3N0cmVhbWVyID0gc3RyZWFtZXI7XG4gIG1lYW5fc3RyZWFtaW5nX3RpbWVfcmFuZ2VzID0gW107XG4gIHRvdGFsX3N0cmVhbWluZ190aW1lX3JhdGlvID0gMC4wO1xuICBzdHJlYW1pbmdfdGltZV9yYW5nZXNfdmFyaWFuY2UgPSAwLjA7XG4gIG1lYW5fc3RyZWFtaW5nX3RpbWVfcmVsaWFiaWxpdHkgPSAwLjA7XG4gIEFQSS5zdHJlYW1fcmFuZ2VzKHN0cmVhbWVyLmlkLCBmcm9tLCB0bykudGhlbihzdHJlYW1fcmFuZ2VzID0+IHtcbiAgLy9sZXQgc3RyZWFtX3JhbmdlcyA9IGF3YWl0IEFQSS5zdHJlYW1fcmFuZ2VzKHN0cmVhbWVyLmlkLCBmcm9tLCB0byk7XG4gIGlmKCFzdHJlYW1fcmFuZ2VzKVxuICAgIHJldHVybiBudWxsO1xuICBsZXQgdHJpbWVkX2Zyb20gPSBuZXcgRGF0ZShzdHJlYW1fcmFuZ2VzWzBdWzBdKjEwMDApOyB0cmltZWRfZnJvbS5zZXRIb3VycygwLDAsMCwwKTtcbiAgbGV0IGZyb21fdGltZXN0YW1wID0gTWF0aC5yb3VuZCh0cmltZWRfZnJvbS5nZXRUaW1lKCkvMTAwMCksXG4gICAgICB0b190aW1lc3RhbXAgPSBNYXRoLnJvdW5kKHRvLmdldFRpbWUoKS8xMDAwKTtcbiAgbGV0IGNodW5rcyA9IFtbXV07XG4gIGZvcihsZXQgaT0wLCBqPTAsIGw9c3RyZWFtX3Jhbmdlcy5sZW5ndGg7IGk8bDsgKytpKXtcbiAgICB0b3RhbF9zdHJlYW1pbmdfdGltZV9yYXRpbyArPSAoc3RyZWFtX3Jhbmdlc1tpXVsxXSAtIHN0cmVhbV9yYW5nZXNbaV1bMF0pIC8gKHRvX3RpbWVzdGFtcCAtIHN0cmVhbV9yYW5nZXNbMF1bMF0pO1xuICAgIHdoaWxlKHN0cmVhbV9yYW5nZXNbaV1bMV0gPj0gZnJvbV90aW1lc3RhbXAgKyAoaisyKSppbnRlcnZhbCkge1xuICAgICAgY2h1bmtzLnB1c2goW10pO1xuICAgICAgKytqO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmKHN0cmVhbV9yYW5nZXNbaV1bMV0gPj0gZnJvbV90aW1lc3RhbXAgKyAoaisxKSppbnRlcnZhbCkge1xuICAgICAgY2h1bmtzLnB1c2goW10pO1xuICAgICAgaWYoc3RyZWFtX3Jhbmdlc1tpXVswXSA8IGZyb21fdGltZXN0YW1wICsgKGorMSkqaW50ZXJ2YWwpIHtcbiAgICAgICAgY2h1bmtzW2pdLnB1c2goWyhzdHJlYW1fcmFuZ2VzW2ldWzBdIC0gZnJvbV90aW1lc3RhbXApICUgaW50ZXJ2YWwsIGludGVydmFsXSlcbiAgICAgICAgY2h1bmtzW2orMV0ucHVzaChbMCwgKHN0cmVhbV9yYW5nZXNbaV1bMV0gLSBmcm9tX3RpbWVzdGFtcCkgJSBpbnRlcnZhbF0pO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGNodW5rc1tqKzFdLnB1c2goc3RyZWFtX3Jhbmdlc1tpXS5tYXAodiA9PiAodi1mcm9tX3RpbWVzdGFtcCklaW50ZXJ2YWwpKTtcbiAgICAgIH1cbiAgICAgICsrajtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBjaHVua3Nbal0ucHVzaChzdHJlYW1fcmFuZ2VzW2ldLm1hcCh2ID0+ICh2LWZyb21fdGltZXN0YW1wKSVpbnRlcnZhbCkpO1xuICB9XG4gIGxldCBzcGxpdHMgPSBuZXcgU2V0KCk7XG4gIGZvcihsZXQgcmFuZ2VzIG9mIGNodW5rcyl7XG4gICAgZm9yKGxldCByYW5nZSBvZiByYW5nZXMpe1xuICAgICAgc3BsaXRzLmFkZChyYW5nZVswXSk7XG4gICAgICBzcGxpdHMuYWRkKHJhbmdlWzFdKTtcbiAgICB9XG4gIH1cbiAgc3BsaXRzID0gWy4uLnNwbGl0c10uc29ydCgoYSxiKT0+YS1iKTtcbiAgbGV0IG1lYW4gPSBbXSxcbiAgICAgIHRvdGFsID0gMDtcbiAgZm9yKGxldCBpPTAsIGw9c3BsaXRzLmxlbmd0aC0xOyBpPGw7ICsraSkgXG4gICAgbWVhbi5wdXNoKGNodW5rcy5yZWR1Y2UoKHJlcywgcmFuZ2VzKT0+cmVzICsgKGlzX292ZXJsYXAocmFuZ2VzLCAoc3BsaXRzW2ldICsgc3BsaXRzW2krMV0pKjAuNSk/IDE6MCksIDApIC8gY2h1bmtzLmxlbmd0aCk7XG4gIGZvcihsZXQgaT0wLCBsPW1lYW4ubGVuZ3RoOyBpPGw7ICsraSkgXG4gICAgdG90YWwgKz0gbWVhbltpXT4wPyBzcGxpdHNbaSsxXS1zcGxpdHNbaV06IDA7XG4gIHN0cmVhbWluZ190aW1lX3Jhbmdlc192YXJpYW5jZSA9IGNodW5rcy5yZWR1Y2UoKHJlcyxyYW5nZXMpPT57XG4gICAgbGV0IHYgPSBtZWFuLm1hcCgodiwgaSk9Pk1hdGguYWJzKGlzX292ZXJsYXAocmFuZ2VzLCAoc3BsaXRzW2ldICsgc3BsaXRzW2krMV0pKjAuNSkgLSB2KSooc3BsaXRzW2krMV0tc3BsaXRzW2ldKSkucmVkdWNlKChhLGIpPT5hK2IpIC8gdG90YWw7XG4gICAgcmV0dXJuIHJlcyArIHYqdjtcbiAgfSwgMCkgLyBjaHVua3MubGVuZ3RoO1xuICBsZXQgZmlsbGVkX3JhbmdlcyA9IGZpbGxfaG9sZShzdHJlYW1fcmFuZ2VzLCA2MCo2MCkubWFwKHY9PlsodlswXS1mcm9tX3RpbWVzdGFtcCklaW50ZXJ2YWwgLyBpbnRlcnZhbCwgKHZbMV0tZnJvbV90aW1lc3RhbXApJWludGVydmFsIC8gaW50ZXJ2YWxdKTtcbiAgbGV0IG1lYW4yID0gZmlsbGVkX3Jhbmdlcy5yZWR1Y2UoKGEsYik9PlthWzBdK2JbMF0sIGFbMV0rYlsxXV0pLm1hcCh2PT52L2ZpbGxlZF9yYW5nZXMubGVuZ3RoKTtcbiAgbGV0IHZhcjIgPSBmaWxsZWRfcmFuZ2VzLnJlZHVjZSgocmVzLHYpID0+IFtyZXNbMF0gKyAodlswXS1tZWFuMlswXSkqKHZbMF0tbWVhbjJbMF0pLCByZXNbMV0gKyAodlsxXS1tZWFuMlsxXSkqKHZbMV0tbWVhbjJbMV0pXSwgWzAsMF0pLm1hcCh2PT52L2ZpbGxlZF9yYW5nZXMubGVuZ3RoKTtcbiAgc3RyZWFtaW5nX3RpbWVfcmFuZ2VzX3JlZ3VsYXJpdHkgID0gMC4wO1xuICBmb3IobGV0IGk9MCwgbD1jaHVua3MubGVuZ3RoOyBpPGw7ICsraSl7XG4gICAgZm9yKGxldCBqPWkrMTsgajxsOyArK2ope1xuICAgICAgbGV0IGRpZmYgPSAwO1xuICAgICAgZm9yKGxldCBrPTAsIG09c3BsaXRzLmxlbmd0aC0xOyBrPG07ICsraylcbiAgICAgICAgZGlmZiArPSBNYXRoLmFicyhpc19vdmVybGFwKGNodW5rc1tpXSwgKHNwbGl0c1trKzFdICsgc3BsaXRzW2tdKSowLjUpIC0gaXNfb3ZlcmxhcChjaHVua3Nbal0sIChzcGxpdHNbaysxXSArIHNwbGl0c1trXSkqMC41KSkgKiAoc3BsaXRzW2srMV0tc3BsaXRzW2tdKVxuICAgICAgc3RyZWFtaW5nX3RpbWVfcmFuZ2VzX3JlZ3VsYXJpdHkgKz0gZGlmZiAvIHRvdGFsO1xuICAgIH1cbiAgfVxuICBzdHJlYW1pbmdfdGltZV9yYW5nZXNfcmVndWxhcml0eSA9IHN0cmVhbWluZ190aW1lX3Jhbmdlc19yZWd1bGFyaXR5IC8gKChjaHVua3MubGVuZ3RoKSAqIChjaHVua3MubGVuZ3RoLTEpIC8gMilcbiAgbGV0IGEgPSAwLCBiPTA7XG4gIGxldCBtZWFuX29mX21lYW4gPSBtZWFuLm1hcCgodiwgaSkgPT4gKHNwbGl0c1tpKzFdIC0gc3BsaXRzW2ldKSAqIHYpLnJlZHVjZSgoYSxiKT0+YStiKSAvIHRvdGFsO1xuICBtZWFuX29mX21lYW4gPSAwLjU7XG4gIG1lYW5fc3RyZWFtaW5nX3RpbWVfcmVsaWFiaWxpdHkgPSBcbiAgICBtZWFuLm1hcCgodiwgaSkgPT4gdiA+PSBtZWFuX29mX21lYW4/IChzcGxpdHNbaSsxXS1zcGxpdHNbaV0pKnY6IDApLnJlZHVjZSgoYSxiKT0+YStiKSAvIFxuICAgIG1lYW4ubWFwKCh2LCBpKSA9PiB2ID49IG1lYW5fb2ZfbWVhbj8gKHNwbGl0c1tpKzFdLXNwbGl0c1tpXSk6IDApLnJlZHVjZSgoYSxiKT0+YStiKTtcbiAgbGV0IGNpcmNsaW5nID0gKHNwbGl0c1swXSA9PSAwICYmIHNwbGl0c1tzcGxpdHMubGVuZ3RoLTFdID09IGludGVydmFsKSxcbiAgICAgIGlfc3RhcnQgPSAwLCBtZWFuX2xlbmd0aCA9IG1lYW4ubGVuZ3RoO1xuICBpZihjaXJjbGluZyAmJiBtZWFuWzBdID49IG1lYW5fb2ZfbWVhbilcbiAgICB3aGlsZShtZWFuWyhpX3N0YXJ0LTEgKyBtZWFuX2xlbmd0aCkgJSBtZWFuX2xlbmd0aF0gPj0gbWVhbl9vZl9tZWFuICYmIGlfc3RhcnQgPj0gLW1lYW5fbGVuZ3RoKSBcbiAgICAgIGlfc3RhcnQgLT0gMTtcbiAgZm9yKGxldCBpPTAsIGw9bWVhbi5sZW5ndGg7IGk8bDsgKytpKSB7XG4gICAgaWYobWVhblsoaStpX3N0YXJ0K2wpJWxdID49IG1lYW5fb2ZfbWVhbikge1xuICAgICAgbGV0IGxhc3RfcmFuZ2UgPSBtZWFuX3N0cmVhbWluZ190aW1lX3Jhbmdlcy5wb3AoKTtcbiAgICAgIGlmKGxhc3RfcmFuZ2UgJiYgTWF0aC5hYnMobGFzdF9yYW5nZVsxXSAlIGludGVydmFsIC0gc3BsaXRzWyhpK2lfc3RhcnQrbCklbF0gJSBpbnRlcnZhbCkgPD0gNjAqNjApXG4gICAgICAgIG1lYW5fc3RyZWFtaW5nX3RpbWVfcmFuZ2VzLnB1c2goW2xhc3RfcmFuZ2VbMF0sIHNwbGl0c1soaStpX3N0YXJ0K2wpJWwrMV1dKTtcbiAgICAgIGVsc2V7XG4gICAgICAgIGlmKGxhc3RfcmFuZ2UpIG1lYW5fc3RyZWFtaW5nX3RpbWVfcmFuZ2VzLnB1c2gobGFzdF9yYW5nZSk7XG4gICAgICAgIG1lYW5fc3RyZWFtaW5nX3RpbWVfcmFuZ2VzLnB1c2goW3NwbGl0c1soaStpX3N0YXJ0K2wpJWxdLCBzcGxpdHNbKGkraV9zdGFydCtsKSVsKzFdXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmKG1lYW5fc3RyZWFtaW5nX3RpbWVfcmFuZ2VzLmxlbmd0aD4xICYmIE1hdGguYWJzKG1lYW5fc3RyZWFtaW5nX3RpbWVfcmFuZ2VzW21lYW5fc3RyZWFtaW5nX3RpbWVfcmFuZ2VzLmxlbmd0aC0xXVsxXSAtIG1lYW5fc3RyZWFtaW5nX3RpbWVfcmFuZ2VzWzBdWzBdKSA8PSA2MCo2MClcbiAgICBtZWFuX3N0cmVhbWluZ190aW1lX3Jhbmdlc1swXVswXSA9IG1lYW5fc3RyZWFtaW5nX3RpbWVfcmFuZ2VzLnBvcCgpWzBdXG4gIG1lYW5fc3RyZWFtaW5nX3RpbWVfcmFuZ2VzID0gbWVhbl9zdHJlYW1pbmdfdGltZV9yYW5nZXM7XG5cblxuICBsZXQgc3RyZWFtX3Jhbmdlc19wcm9jZXNzZWQgPSBmaWxsX2hvbGUoc3RyZWFtX3JhbmdlcywgNjAqNjApXG4gICAgICAubWFwKHY9PlsodlswXS1mcm9tX3RpbWVzdGFtcCklaW50ZXJ2YWwsICh2WzFdLWZyb21fdGltZXN0YW1wKSVpbnRlcnZhbF0pO1xuICBsZXQgc3RyZWFtX3Jhbmdlc192ZWN0b3IgPSBzdHJlYW1fcmFuZ2VzX3Byb2Nlc3NlZFxuICAgICAgLm1hcCh2PT5bdlswXS9pbnRlcnZhbCpNYXRoLlBJKjIsIHZbMV0vaW50ZXJ2YWwqTWF0aC5QSSoyXSlcbiAgICAgIC5tYXAodj0+W1tNYXRoLnNpbih2WzBdKSwgTWF0aC5jb3ModlswXSldLCBbTWF0aC5zaW4odlsxXSksIE1hdGguY29zKHZbMV0pXV0pO1xuICBzdHJlYW1pbmdfc3RhcnRfdGltZSA9IChNYXRoLmF0YW4yKC4uLnN0cmVhbV9yYW5nZXNfdmVjdG9yLnJlZHVjZSgoYSwgcykgPT4gW2FbMF0rc1swXVswXSwgYVsxXStzWzBdWzFdXSwgWzAsMF0pKSArIE1hdGguUEkqMiklKE1hdGguUEkqMikvKE1hdGguUEkqMikgKiBpbnRlcnZhbDtcbiAgc3RyZWFtaW5nX2VuZF90aW1lID0gKE1hdGguYXRhbjIoLi4uc3RyZWFtX3Jhbmdlc192ZWN0b3IucmVkdWNlKChhLCBzKSA9PiBbYVswXStzWzFdWzBdLCBhWzFdK3NbMV1bMV1dLCBbMCwwXSkpICsgTWF0aC5QSSoyKSUoTWF0aC5QSSoyKS8oTWF0aC5QSSoyKSAqIGludGVydmFsO1xuICAvL3N0cmVhbWluZ19zdGFydF90aW1lID0gc3RyZWFtX3Jhbmdlc19wcm9jZXNzZWQubWFwKHM9PnNbMF0pLnNvcnQoKVtNYXRoLmZsb29yKHN0cmVhbV9yYW5nZXNfcHJvY2Vzc2VkLmxlbmd0aC8yKV07XG4gIC8vc3RyZWFtaW5nX2VuZF90aW1lID0gc3RyZWFtX3Jhbmdlc19wcm9jZXNzZWQubWFwKHM9PnNbMV0pLnNvcnQoKVtNYXRoLmZsb29yKHN0cmVhbV9yYW5nZXNfcHJvY2Vzc2VkLmxlbmd0aC8yKV07XG4gIHN0cmVhbWluZ19zdGFydF90aW1lX3N0ZCA9IE1hdGguc3FydChcbiAgICBzdHJlYW1fcmFuZ2VzX3Byb2Nlc3NlZFxuICAgICAgLm1hcChzID0+IE1hdGguYWJzKHNbMF0tc3RyZWFtaW5nX3N0YXJ0X3RpbWUpKVxuICAgICAgLm1hcCh2ID0+IHYgPCBpbnRlcnZhbCowLjU/IHY6IGludGVydmFsLXYpXG4gICAgICAucmVkdWNlKChhLCBzKSA9PiBhK3MqcywgMCkvKHN0cmVhbV9yYW5nZXNfcHJvY2Vzc2VkLmxlbmd0aC0xKSk7XG4gIHN0cmVhbWluZ19lbmRfdGltZV9zdGQgPSBNYXRoLnNxcnQoXG4gICAgc3RyZWFtX3Jhbmdlc19wcm9jZXNzZWRcbiAgICAgIC5tYXAocyA9PiBNYXRoLmFicyhzWzFdLXN0cmVhbWluZ19lbmRfdGltZSkpXG4gICAgICAubWFwKHYgPT4gdiA8IGludGVydmFsKjAuNT8gdjogaW50ZXJ2YWwtdilcbiAgICAgIC5yZWR1Y2UoKGEsIHMpID0+IGErcypzLCAwKS8oc3RyZWFtX3Jhbmdlc19wcm9jZXNzZWQubGVuZ3RoLTEpKTtcblxuICBsZXQgd2lkdGggPSBjYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGgsXG4gICAgICBoZWlnaHQgPSBjYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGg7XG4gIGNhbnZhcy53aWR0aCA9IHdpZHRoO1xuICBjYW52YXMuaGVpZ2h0ID0gaGVpZ2h0O1xuICB1aV9jYW52YXMud2lkdGggPSB3aWR0aDtcbiAgdWlfY2FudmFzLmhlaWdodCA9IGhlaWdodDtcblxuICBsZXQgY3R4ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcbiAgLy9jdHguZmlsbFN0eWxlID0gXCIjMmQzNzQ4XCI7XG4gIGN0eC5jbGVhclJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcbiAgY3R4LmZpbGxTdHlsZSA9IFwiI0I0OThBRVwiO1xuICBjdHguc3Ryb2tlU3R5bGUgPSBcIiMyZDM3NDhcIjtcbiAgY3R4LnRleHRBbGlnbiA9IFwiY2VudGVyXCI7XG4gIGN0eC50ZXh0QmFzZWxpbmUgPSBcIm1pZGRsZVwiO1xuICBcblxuICBmcm9tX3RpbWVzdGFtcCA9IE1hdGgucm91bmQoZnJvbS5nZXRUaW1lKCkvMTAwMCk7XG4gIHRvX3RpbWVzdGFtcCA9IE1hdGgucm91bmQodG8uZ2V0VGltZSgpLzEwMDApO1xuICBsZXQgZGF5X3RleHQgPSBbXCLsnbxcIiwgXCLsm5RcIiwgXCLtmZRcIiwgXCLsiJhcIiwgXCLrqqlcIiwgXCLquIhcIiwgXCLthqBcIl07XG4gIGxldCB0aWNrcyA9IDcyMCxcbiAgICAgIGZvbnRfc2l6ZSA9IDE1LFxuICAgICAgb3V0ZXJfY2lyY2xlX3dpZHRoID0gNSxcbiAgICAgIGlubmVyX3BhZF9mcm9tX291dGVyX2NpcmNsZSA9IDMwLFxuICAgICAgb3V0ZXJfcGFkID0gMzAsXG4gICAgICBtaW5fciA9IDAuMCxcbiAgICAgIG1heF9yID0gMS4wIC0gKG91dGVyX2NpcmNsZV93aWR0aCArIG91dGVyX3BhZCArIGlubmVyX3BhZF9mcm9tX291dGVyX2NpcmNsZSkvKHdpZHRoKjAuNSksXG4gICAgICBuX3NwaW4gPSBkYXlzX2Fnby83LFxuICAgICAgaCA9IChtYXhfci1taW5fcikgLyAobl9zcGluKzEpLFxuICAgICAgdG90YWxfYW5nbGUgPSBuX3NwaW4gKiBNYXRoLlBJICogMixcbiAgICAgIGFuZ2xlX3N0YXJ0ID0gLU1hdGguUEkqMC41ICsgTWF0aC5QSSoyLzcqZnJvbS5nZXREYXkoKSxcbiAgICAgIGRheV9zdGFydCA9IGZyb20uZ2V0RGF5KCk7XG4gIGN0eC5iZWdpblBhdGgoKTtcbiAgZm9yKGxldCByYW5nZSBvZiBzdHJlYW1fcmFuZ2VzKXtcbiAgICBsZXQgaV9sID0gTWF0aC5yb3VuZCh0aWNrcyAqIChyYW5nZVswXSAtIGZyb21fdGltZXN0YW1wKSAvICh0b190aW1lc3RhbXAgLSBmcm9tX3RpbWVzdGFtcCkpLFxuICAgICAgICBpX3IgPSBNYXRoLnJvdW5kKHRpY2tzICogKHJhbmdlWzFdIC0gZnJvbV90aW1lc3RhbXApIC8gKHRvX3RpbWVzdGFtcCAtIGZyb21fdGltZXN0YW1wKSk7XG4gICAgbGV0IHQgPSBpX2wvdGlja3MsXG4gICAgICAgIGFuZ2xlID0gdG90YWxfYW5nbGUgKiB0ICsgYW5nbGVfc3RhcnQsXG4gICAgICAgIGQgPSAobWF4X3IgLSBtaW5fciAtIGgpKnQgKyBtaW5fcixcbiAgICAgICAgc3g9d2lkdGgqMC41ICsgZCp3aWR0aCowLjUqTWF0aC5jb3MoYW5nbGUpLFxuICAgICAgICBzeT1oZWlnaHQqMC41ICsgZCpoZWlnaHQqMC41Kk1hdGguc2luKGFuZ2xlKTtcbiAgICBjdHgubW92ZVRvKHN4LCBzeSk7XG4gICAgZm9yKGxldCBpPWlfbCsxO2k8PWlfcjsgKytpKXtcbiAgICAgIGxldCB0ID0gaS90aWNrcyxcbiAgICAgICAgICBhbmdsZSA9IHRvdGFsX2FuZ2xlICogdCArIGFuZ2xlX3N0YXJ0LFxuICAgICAgICAgIGQgPSAobWF4X3IgLSBtaW5fciAtIGgpKnQgKyBtaW5fcixcbiAgICAgICAgICB4PXdpZHRoKjAuNSArIGQqd2lkdGgqMC41Kk1hdGguY29zKGFuZ2xlKSxcbiAgICAgICAgICB5PWhlaWdodCowLjUgKyBkKmhlaWdodCowLjUqTWF0aC5zaW4oYW5nbGUpO1xuICAgICAgY3R4LmxpbmVUbyh4LCB5KTtcbiAgICB9XG4gICAgZm9yKGxldCBpPWlfcjsgaT49aV9sOyAtLWkpe1xuICAgICAgbGV0IHQgPSBpL3RpY2tzLFxuICAgICAgICAgIGFuZ2xlID0gdG90YWxfYW5nbGUgKiB0ICsgYW5nbGVfc3RhcnQsXG4gICAgICAgICAgZCA9IChtYXhfciAtIG1pbl9yIC0gaCkqdCArIG1pbl9yICsgaCxcbiAgICAgICAgICB4PXdpZHRoKjAuNSArIGQqd2lkdGgqMC41Kk1hdGguY29zKGFuZ2xlKSxcbiAgICAgICAgICB5PWhlaWdodCowLjUgKyBkKmhlaWdodCowLjUqTWF0aC5zaW4oYW5nbGUpO1xuICAgICAgY3R4LmxpbmVUbyh4LCB5KTtcbiAgICB9XG4gICAgY3R4LmxpbmVUbyhzeCwgc3kpO1xuICB9XG4gIGN0eC5maWxsKCk7XG4gIGN0eC5zYXZlKCk7XG4gIGN0eC5nbG9iYWxBbHBoYSA9IDEvbl9zcGluO1xuICBjdHguYmVnaW5QYXRoKCk7XG4gIGZvcihsZXQgcmFuZ2Ugb2Ygc3RyZWFtX3Jhbmdlcyl7XG4gICAgbGV0IGlfbCA9IE1hdGgucm91bmQodGlja3MgKiAocmFuZ2VbMF0gLSBmcm9tX3RpbWVzdGFtcCkgLyAodG9fdGltZXN0YW1wIC0gZnJvbV90aW1lc3RhbXApKSxcbiAgICAgICAgaV9yID0gTWF0aC5yb3VuZCh0aWNrcyAqIChyYW5nZVsxXSAtIGZyb21fdGltZXN0YW1wKSAvICh0b190aW1lc3RhbXAgLSBmcm9tX3RpbWVzdGFtcCkpO1xuICAgIGxldCB0ID0gaV9sL3RpY2tzLFxuICAgICAgICBhbmdsZSA9IHRvdGFsX2FuZ2xlICogdCArIGFuZ2xlX3N0YXJ0LFxuICAgICAgICBkID0gKDEgLSAob3V0ZXJfcGFkICsgb3V0ZXJfY2lyY2xlX3dpZHRoKS8od2lkdGgqMC41KSksXG4gICAgICAgIHN4PXdpZHRoKjAuNSArIGQqd2lkdGgqMC41Kk1hdGguY29zKGFuZ2xlKSxcbiAgICAgICAgc3k9aGVpZ2h0KjAuNSArIGQqaGVpZ2h0KjAuNSpNYXRoLnNpbihhbmdsZSk7XG4gICAgY3R4Lm1vdmVUbyhzeCwgc3kpO1xuICAgIGZvcihsZXQgaT1pX2wrMTtpPD1pX3I7ICsraSl7XG4gICAgICBsZXQgdCA9IGkvdGlja3MsXG4gICAgICAgICAgYW5nbGUgPSB0b3RhbF9hbmdsZSAqIHQgKyBhbmdsZV9zdGFydCxcbiAgICAgICAgICBkID0gKDEgLSAob3V0ZXJfcGFkICsgb3V0ZXJfY2lyY2xlX3dpZHRoKS8od2lkdGgqMC41KSksXG4gICAgICAgICAgeD13aWR0aCowLjUgKyBkKndpZHRoKjAuNSpNYXRoLmNvcyhhbmdsZSksXG4gICAgICAgICAgeT1oZWlnaHQqMC41ICsgZCpoZWlnaHQqMC41Kk1hdGguc2luKGFuZ2xlKTtcbiAgICAgIGN0eC5saW5lVG8oeCwgeSk7XG4gICAgfVxuICAgIGZvcihsZXQgaT1pX3I7IGk+PWlfbDsgLS1pKXtcbiAgICAgIGxldCB0ID0gaS90aWNrcyxcbiAgICAgICAgICBhbmdsZSA9IHRvdGFsX2FuZ2xlICogdCArIGFuZ2xlX3N0YXJ0LFxuICAgICAgICAgIGQgPSAoMSAtIChvdXRlcl9wYWQpLyh3aWR0aCowLjUpKSxcbiAgICAgICAgICAvL2QgPSAobWF4X3IgLSBtaW5fciAtIGgpKnQgKyBtaW5fciArIGgsXG4gICAgICAgICAgeD13aWR0aCowLjUgKyBkKndpZHRoKjAuNSpNYXRoLmNvcyhhbmdsZSksXG4gICAgICAgICAgeT1oZWlnaHQqMC41ICsgZCpoZWlnaHQqMC41Kk1hdGguc2luKGFuZ2xlKTtcbiAgICAgIGN0eC5saW5lVG8oeCwgeSk7XG4gICAgfVxuICAgIGN0eC5saW5lVG8oc3gsIHN5KTtcbiAgfVxuICBjdHguZmlsbCgpO1xuICBjdHgucmVzdG9yZSgpO1xuICBjdHguYmVnaW5QYXRoKCk7XG4gIGN0eC5tb3ZlVG8od2lkdGgqMC41ICsgKHdpZHRoKjAuNSAtIG91dGVyX3BhZCAtIG91dGVyX2NpcmNsZV93aWR0aCkqTWF0aC5jb3MoYW5nbGVfc3RhcnQpLCBoZWlnaHQqMC41ICsgKGhlaWdodCowLjUgLSBvdXRlcl9wYWQgLSBvdXRlcl9jaXJjbGVfd2lkdGgpKk1hdGguc2luKGFuZ2xlX3N0YXJ0KSk7XG4gIGZvcihsZXQgaT0wOyBpPD1NYXRoLmNlaWwodGlja3Mvbl9zcGluKTsgKytpKXtcbiAgICBsZXQgYW5nbGUgPSBNYXRoLlBJKjIgKiAoaS9NYXRoLmNlaWwodGlja3Mvbl9zcGluKSkgKyBhbmdsZV9zdGFydCxcbiAgICAgICAgeD13aWR0aCowLjUgKyAod2lkdGgqMC41IC0gb3V0ZXJfY2lyY2xlX3dpZHRoIC0gb3V0ZXJfcGFkKSpNYXRoLmNvcyhhbmdsZSksXG4gICAgICAgIHk9aGVpZ2h0KjAuNSArIChoZWlnaHQqMC41IC0gb3V0ZXJfcGFkIC0gb3V0ZXJfY2lyY2xlX3dpZHRoKSpNYXRoLnNpbihhbmdsZSk7XG4gICAgY3R4LmxpbmVUbyh4LCB5KTtcbiAgfVxuICBjdHguc3Ryb2tlKCk7XG4gIGN0eC5iZWdpblBhdGgoKTtcbiAgY3R4Lm1vdmVUbyh3aWR0aCowLjUgKyAod2lkdGgqMC41IC0gb3V0ZXJfcGFkKSpNYXRoLmNvcyhhbmdsZV9zdGFydCksIGhlaWdodCowLjUgKyAoaGVpZ2h0KjAuNSAtIG91dGVyX3BhZCkqTWF0aC5zaW4oYW5nbGVfc3RhcnQpKTtcbiAgZm9yKGxldCBpPTA7IGk8PU1hdGguY2VpbCh0aWNrcy9uX3NwaW4pOyArK2kpe1xuICAgIGxldCBhbmdsZSA9IE1hdGguUEkqMiAqIChpL01hdGguY2VpbCh0aWNrcy9uX3NwaW4pKSArIGFuZ2xlX3N0YXJ0LFxuICAgICAgICB4PXdpZHRoKjAuNSArICh3aWR0aCowLjUgLSBvdXRlcl9wYWQpKk1hdGguY29zKGFuZ2xlKSxcbiAgICAgICAgeT1oZWlnaHQqMC41ICsgKGhlaWdodCowLjUgLSBvdXRlcl9wYWQpKk1hdGguc2luKGFuZ2xlKTtcbiAgICBjdHgubGluZVRvKHgsIHkpO1xuICB9XG4gIGN0eC5zdHJva2UoKTtcbiAgY3R4LmJlZ2luUGF0aCgpO1xuICBmb3IobGV0IGk9MDsgaTw9TWF0aC5jZWlsKHRpY2tzICogKHRvdGFsX2FuZ2xlK01hdGguUEkqMikvdG90YWxfYW5nbGUpOyArK2kpe1xuICAvL2ZvcihsZXQgaT0wOyBpPD10aWNrczsgKytpKXtcbiAgICBsZXQgdCA9IGkvdGlja3MsXG4gICAgICAgIGFuZ2xlID0gdG90YWxfYW5nbGUgKiB0ICsgYW5nbGVfc3RhcnQsXG4gICAgICAgIGQgPSAobWF4X3IgLSBtaW5fciAtIGgpKnQgKyBtaW5fcixcbiAgICAgICAgeD13aWR0aCowLjUgKyBkKndpZHRoKjAuNSpNYXRoLmNvcyhhbmdsZSksXG4gICAgICAgIHk9aGVpZ2h0KjAuNSArIGQqaGVpZ2h0KjAuNSpNYXRoLnNpbihhbmdsZSk7XG4gICAgY3R4LmxpbmVUbyh4LCB5KTtcbiAgfVxuICBjdHgubW92ZVRvKHdpZHRoKjAuNSwgaGVpZ2h0KjAuNSk7XG4gIGZvcihsZXQgaT0wOyBpPDc7ICsraSl7XG4gICAgbGV0IHQgPSAobl9zcGluLTEpL25fc3BpbiArIGkvbl9zcGluLzcsXG4gICAgICAgIGFuZ2xlID0gdG90YWxfYW5nbGUgKiB0ICsgYW5nbGVfc3RhcnQsXG4gICAgICAgIC8vYW5nbGUgPSBNYXRoLlBJKjIgLyA3ICogaSArIGFuZ2xlX3N0YXJ0LFxuICAgICAgICBkMSA9IChtYXhfciAtIG1pbl9yKSoodCArIChpPT0wPyAxL25fc3BpbjowKSkgKyBtaW5fcixcbiAgICAgICAgZDIgPSAobWF4X3IgLSBtaW5fcikqdCArIG1pbl9yLFxuICAgICAgICAvL2QgPSAoMSAtIChvdXRlcl9wYWQgKyBvdXRlcl9jL3dpZHRoKjAuNSkqdCxcbiAgICAgICAgeD13aWR0aCowLjUgKyBkMSp3aWR0aCowLjUqTWF0aC5jb3MoYW5nbGUpLFxuICAgICAgICB5PWhlaWdodCowLjUgKyBkMSpoZWlnaHQqMC41Kk1hdGguc2luKGFuZ2xlKTtcbiAgICAgICAgLy94ID0gd2lkdGgqMC41ICsgbWF4X3Iqd2lkdGgqMC41Kk1hdGguY29zKGFuZ2xlKSxcbiAgICAgICAgLy95ID0gaGVpZ2h0KjAuNSArIG1heF9yKmhlaWdodCowLjUqTWF0aC5zaW4oYW5nbGUpO1xuICAgIGN0eC5tb3ZlVG8od2lkdGgqMC41LCBoZWlnaHQqMC41KTtcbiAgICBjdHgubGluZVRvKHgsIHkpO1xuICAgIGxldCB4MiA9IHdpZHRoKjAuNSArIChkMip3aWR0aCowLjUgKyBmb250X3NpemUpKk1hdGguY29zKGFuZ2xlICsgTWF0aC5QSSoyLzcvMiksXG4gICAgICAgIHkyID0gaGVpZ2h0KjAuNSArIChkMipoZWlnaHQqMC41ICsgZm9udF9zaXplKSpNYXRoLnNpbihhbmdsZSArIE1hdGguUEkqMi83LzIpO1xuICAgIGlmKChpK2RheV9zdGFydCklNyA9PSAwIHx8IChpK2RheV9zdGFydCklNyA9PSA2KSBjdHguZmlsbFN0eWxlID0gXCIjRTUzRTNFXCI7XG4gICAgZWxzZSBjdHguZmlsbFN0eWxlID0gXCIjMmQzNzQ4XCI7XG4gICAgY3R4LmZpbGxUZXh0KGRheV90ZXh0WyhpK2RheV9zdGFydCklN10sIHgyLCB5Mik7XG4gIH1cbiAgY3R4LnN0cm9rZSgpO1xuICBsZXQgZnJhbWU7XG4gIC8qKGZ1bmN0aW9uIGxvb3AoKSB7XG4gICAgZnJhbWUgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUobG9vcCk7XG4gICAgaWYoc2VhcmNoKSBcbiAgICBjdHguY2xlYXJSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XG4gIH0oKSk7XG4gIHJldHVybiAoKT0+e1xuICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKGZyYW1lKTtcbiAgfSovXG59KX07XG48L3NjcmlwdD5cbiIsIid1c2Ugc3RyaWN0Jztcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgcHJlZml4ID0gJ2Zhcyc7XG52YXIgaWNvbk5hbWUgPSAnYXJyb3ctdXAnO1xudmFyIHdpZHRoID0gNDQ4O1xudmFyIGhlaWdodCA9IDUxMjtcbnZhciBsaWdhdHVyZXMgPSBbXTtcbnZhciB1bmljb2RlID0gJ2YwNjInO1xudmFyIHN2Z1BhdGhEYXRhID0gJ00zNC45IDI4OS41bC0yMi4yLTIyLjJjLTkuNC05LjQtOS40LTI0LjYgMC0zMy45TDIwNyAzOWM5LjQtOS40IDI0LjYtOS40IDMzLjkgMGwxOTQuMyAxOTQuM2M5LjQgOS40IDkuNCAyNC42IDAgMzMuOUw0MTMgMjg5LjRjLTkuNSA5LjUtMjUgOS4zLTM0LjMtLjRMMjY0IDE2OC42VjQ1NmMwIDEzLjMtMTAuNyAyNC0yNCAyNGgtMzJjLTEzLjMgMC0yNC0xMC43LTI0LTI0VjE2OC42TDY5LjIgMjg5LjFjLTkuMyA5LjgtMjQuOCAxMC0zNC4zLjR6JztcblxuZXhwb3J0cy5kZWZpbml0aW9uID0ge1xuICBwcmVmaXg6IHByZWZpeCxcbiAgaWNvbk5hbWU6IGljb25OYW1lLFxuICBpY29uOiBbXG4gICAgd2lkdGgsXG4gICAgaGVpZ2h0LFxuICAgIGxpZ2F0dXJlcyxcbiAgICB1bmljb2RlLFxuICAgIHN2Z1BhdGhEYXRhXG4gIF19O1xuXG5leHBvcnRzLmZhQXJyb3dVcCA9IGV4cG9ydHMuZGVmaW5pdGlvbjtcbmV4cG9ydHMucHJlZml4ID0gcHJlZml4O1xuZXhwb3J0cy5pY29uTmFtZSA9IGljb25OYW1lO1xuZXhwb3J0cy53aWR0aCA9IHdpZHRoO1xuZXhwb3J0cy5oZWlnaHQgPSBoZWlnaHQ7XG5leHBvcnRzLmxpZ2F0dXJlcyA9IGxpZ2F0dXJlcztcbmV4cG9ydHMudW5pY29kZSA9IHVuaWNvZGU7XG5leHBvcnRzLnN2Z1BhdGhEYXRhID0gc3ZnUGF0aERhdGE7IiwiJ3VzZSBzdHJpY3QnO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBwcmVmaXggPSAnZmFzJztcbnZhciBpY29uTmFtZSA9ICdhcnJvdy1kb3duJztcbnZhciB3aWR0aCA9IDQ0ODtcbnZhciBoZWlnaHQgPSA1MTI7XG52YXIgbGlnYXR1cmVzID0gW107XG52YXIgdW5pY29kZSA9ICdmMDYzJztcbnZhciBzdmdQYXRoRGF0YSA9ICdNNDEzLjEgMjIyLjVsMjIuMiAyMi4yYzkuNCA5LjQgOS40IDI0LjYgMCAzMy45TDI0MSA0NzNjLTkuNCA5LjQtMjQuNiA5LjQtMzMuOSAwTDEyLjcgMjc4LjZjLTkuNC05LjQtOS40LTI0LjYgMC0zMy45bDIyLjItMjIuMmM5LjUtOS41IDI1LTkuMyAzNC4zLjRMMTg0IDM0My40VjU2YzAtMTMuMyAxMC43LTI0IDI0LTI0aDMyYzEzLjMgMCAyNCAxMC43IDI0IDI0djI4Ny40bDExNC44LTEyMC41YzkuMy05LjggMjQuOC0xMCAzNC4zLS40eic7XG5cbmV4cG9ydHMuZGVmaW5pdGlvbiA9IHtcbiAgcHJlZml4OiBwcmVmaXgsXG4gIGljb25OYW1lOiBpY29uTmFtZSxcbiAgaWNvbjogW1xuICAgIHdpZHRoLFxuICAgIGhlaWdodCxcbiAgICBsaWdhdHVyZXMsXG4gICAgdW5pY29kZSxcbiAgICBzdmdQYXRoRGF0YVxuICBdfTtcblxuZXhwb3J0cy5mYUFycm93RG93biA9IGV4cG9ydHMuZGVmaW5pdGlvbjtcbmV4cG9ydHMucHJlZml4ID0gcHJlZml4O1xuZXhwb3J0cy5pY29uTmFtZSA9IGljb25OYW1lO1xuZXhwb3J0cy53aWR0aCA9IHdpZHRoO1xuZXhwb3J0cy5oZWlnaHQgPSBoZWlnaHQ7XG5leHBvcnRzLmxpZ2F0dXJlcyA9IGxpZ2F0dXJlcztcbmV4cG9ydHMudW5pY29kZSA9IHVuaWNvZGU7XG5leHBvcnRzLnN2Z1BhdGhEYXRhID0gc3ZnUGF0aERhdGE7IiwiPGRpdiBjbGFzcz1cInctZnVsbCBoLWZ1bGwgZmxleCBmbGV4LWNvbCB0ZXh0LXhzXCI+XG4gIDxkaXYgY2xhc3M9XCJmbGV4IGZsZXgtcm93IHAtMiBpdGVtcy1zdHJldGNoXCI+XG4gICAgPCEtLTxpbnB1dCBiaW5kOnZhbHVlPXtuaWNrbmFtZX0gY2xhc3M9XCJ3LTMyIGJvcmRlciBwLTJcIiBwbGFjZWhvbGRlcj1cIuuLieuEpOyehFwiLz4tLT5cbiAgICA8ZGl2IGNsYXNzPVwidy00XCI+XG4gICAgICB7I2lmIHByb2ZpbGVfaW1hZ2VfdXJpfVxuICAgICAgPGltZyBjbGFzcz1cInctZnVsbCBoLWZ1bGxcIiBzcmM9XCJ7cHJvZmlsZV9pbWFnZV91cml9XCIgLz5cbiAgICAgIHs6ZWxzZX1cbiAgICAgIDxkaXYgY2xhc3M9XCJ3LWZ1bGwgaC1mdWxsIHNwaW5uZXJcIj48L2Rpdj5cbiAgICAgIHsvaWZ9XG4gICAgPC9kaXY+XG4gICAgPCEtLTxpbnB1dCB0eXBlPVwicGFzc3dvcmRcIiBiaW5kOnZhbHVlPXtwYXNzd29yZH0gY2xhc3M9XCJ3LTMyIGJvcmRlciBwLTIgbWwtMlwiIHBsYWNlaG9sZGVyPVwi67mE67CA67KI7Zi4XCIvPi0tPlxuICAgIDx0ZXh0YXJlYSBiaW5kOnZhbHVlPXtjb250ZW50c30gY2xhc3M9XCJmbGV4LTEgcC0xIG1sLTQgYm9yZGVyXCIgcm93cz1cIjJcIj48L3RleHRhcmVhPlxuICAgIDxidXR0b24gY2xhc3M9XCJib3JkZXIgdGV4dC1jZW50ZXIgcC0yIHRleHQtd2hpdGUgYmctcHJpbWFyeS02MDBcIiBvbjpjbGljaz17c3VibWl0fT4g65Ox66GdIDwvYnV0dG9uPlxuICA8L2Rpdj5cbiAgPGRpdiBjbGFzcz1cImZsZXgtMVwiPlxuICAgIHsjaWYgY29tbWVudHN9XG4gICAgICB7I2VhY2ggY29tbWVudHMgYXMgY29tbWVudCwgaSAoY29tbWVudC5pZCl9XG4gICAgICAgIDxkaXYgY2xhc3M9XCJib3JkZXItYiBmbGV4IGZsZXgtcm93IHAtMiBpdGVtcy1zdHJldGNoXCIgY2xhc3M6b3BhY2l0eS01MD17IWNvbW1lbnQuYWdyZWVkICYmIGNvbW1lbnQudXB2b3RlIC0gY29tbWVudC5kb3dudm90ZSA8PSAtNX0+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInRleHQtZ3JheS02MDAgbS1hdXRvIHctNCB0ZXh0LXJpZ2h0XCJcbiAgICAgICAgICAgICAgIGNsYXNzOnRleHQteHM9e01hdGguYWJzKGNvbW1lbnQudXB2b3RlIC0gY29tbWVudC5kb3dudm90ZSkgPj0gMTB9XG4gICAgICAgICAgICAgICBjbGFzczp0ZXh0LWxnPXtNYXRoLmFicyhjb21tZW50LnVwdm90ZSAtIGNvbW1lbnQuZG93bnZvdGUpIDwgMTB9PiB7Y29tbWVudC51cHZvdGUgLSBjb21tZW50LmRvd252b3RlfSA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiZmxleCBmbGV4LWNvbCBqdXN0aWZ5LWNlbnRlciBtci0yIG1sLTEgdGV4dC1ncmF5LTYwMFwiPlxuICAgICAgICAgICAgPGJ1dHRvbiBvbjpjbGljaz17ZT0+dm90ZShjb21tZW50LmlkLCB0cnVlLCBpKX0+PEZhSWNvbiBjbGFzcz1cInctNCBoLTRcIiBpY29uPXtmYUFycm93VXB9IC8+PC9idXR0b24+XG4gICAgICAgICAgICA8YnV0dG9uIG9uOmNsaWNrPXtlPT52b3RlKGNvbW1lbnQuaWQsIGZhbHNlLCBpKX0+PEZhSWNvbiBjbGFzcz1cInctNCBoLTRcIiBpY29uPXtmYUFycm93RG93bn0gLz48L2J1dHRvbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwidy00XCI+IFxuICAgICAgICAgICAgPGltZyBjbGFzcz1cInctZnVsbCBoLWZ1bGxcIiBzcmM9XCJ7aGFzaF90b19pbWFnZV91cmkoY29tbWVudC5maW5nZXJwcmludF9oYXNoKX1cIj4gXG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgeyNpZiBjb21tZW50LmFncmVlZCB8fCBjb21tZW50LnVwdm90ZSAtIGNvbW1lbnQuZG93bnZvdGUgPiAtNX1cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtbC00IGZsZXgtMSBmbGV4IGZsZXgtcm93IGl0ZW1zLWNlbnRlclwiPiB7Y29tbWVudC5jb250ZW50c30gPC9kaXY+XG4gICAgICAgICAgezplbHNlfVxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImZsZXgtMSB0ZXh0LWxlZnQgcGwtNFwiIG9uOmNsaWNrPXtlPT4gY29tbWVudHNbaV0uYWdyZWVkID0gdHJ1ZX0+XG4gICAgICAgICAgICAgIH4g7Y687LmY6riwIH5cbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgIHsvaWZ9XG4gICAgICAgICAgPCEtLTxkaXYgY2xhc3M9XCJ0ZXh0LWdyYXktNjAwIG1sLTIgdGV4dC1jZW50ZXJcIj4ge3RpbWVfYWdvKG5ldyBEYXRlKGNvbW1lbnQudGltZSkpfSA8L2Rpdj4tLT5cbiAgICAgICAgPC9kaXY+XG4gICAgICB7OmVsc2V9XG4gICAgICAgIDxkaXYgY2xhc3M9XCJ3LWZ1bGwgaC1mdWxsIGZsZXgganVzdGlmeS1jZW50ZXIgaXRlbXMtY2VudGVyIHRleHQteGwgdGV4dC1ncmF5LTYwMCBwYi0yIHB0LTJcIj5cbiAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAg64yT6riA7J20IOyXhuyWtOyalCDjhZzjhZxcbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICB7L2VhY2h9XG4gICAgICB7I2lmIGxvYWRfbW9yZV9sb2FkaW5nfVxuICAgICAgPGRpdiBvbjpjbGljaz17bG9hZF9tb3JlfSBjbGFzcz1cInctZnVsbCBib3JkZXItdCBwLTIgc3Bpbm5lclwiPjwvZGl2PlxuICAgICAgezplbHNlfVxuICAgICAgPGJ1dHRvbiBvbjpjbGljaz17bG9hZF9tb3JlfSBjbGFzcz1cInctZnVsbCBib3JkZXItdCBweS0zIHRleHQtbm9ybWFsXCI+642UIOuztOq4sDwvYnV0dG9uPlxuICAgICAgey9pZn1cbiAgICB7OmVsc2V9IFxuICAgICAgPGRpdiBjbGFzcz1cInctZnVsbCBoLWZ1bGwgc3Bpbm5lciB0ZXh0LTR4bFwiLz4gXG4gICAgey9pZn1cbiAgPC9kaXY+XG48L2Rpdj5cblxuPHNjcmlwdD5cbmltcG9ydCB7IG9uTW91bnQgfSBmcm9tIFwic3ZlbHRlXCI7XG5pbXBvcnQgeyBBUEkgfSBmcm9tICcuLi9hcGkuanMnO1xuaW1wb3J0IEZhSWNvbiBmcm9tICcuL0ZhSWNvbi5zdmVsdGUnO1xuaW1wb3J0IHsgZmFBcnJvd1VwIH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhQXJyb3dVcCc7XG5pbXBvcnQgeyBmYUFycm93RG93biB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYUFycm93RG93bic7XG5pbXBvcnQgeyB0aW1lX2FnbyB9IGZyb20gXCIuLi91dGlsLmpzXCI7XG5pbXBvcnQgVG9hc3QgZnJvbSAnc3ZlbHRlLXRvYXN0J1xuY29uc3QgdG9hc3QgPSBuZXcgVG9hc3QoKTtcblxuZXhwb3J0IGxldCBzdHJlYW1lcl9pZDtcblxubGV0IG5pY2tuYW1lID0gXCJndWVzdFwiO1xubGV0IHBhc3N3b3JkID0gXCIxMjM0XCI7XG5sZXQgY29udGVudHM7XG5cbmxldCBjb21tZW50cztcblxubGV0IGxvYWRfbW9yZV9sb2FkaW5nID0gZmFsc2U7XG5cbmxldCBwcm9maWxlX2ltYWdlX3VyaTtcblxuZnVuY3Rpb24gcmVmcmVzaF9jb21tZW50cygpe1xuICBBUEkuY29tbWVudHMoc3RyZWFtZXJfaWQpLnRoZW4oX2NvbW1lbnRzID0+IHtcbiAgICBjb21tZW50cyA9IF9jb21tZW50cztcbiAgfSkuY2F0Y2goZSA9PiB7XG4gIH0pO1xufVxuZnVuY3Rpb24gbG9hZF9tb3JlKCl7XG4gIGlmKGNvbW1lbnRzLmxlbmd0aCl7XG4gICAgbG9hZF9tb3JlX2xvYWRpbmcgPSB0cnVlO1xuICAgIEFQSS5jb21tZW50cyhzdHJlYW1lcl9pZCwgY29tbWVudHMubGVuZ3RoKS50aGVuKF9jb21tZW50cyA9PiB7XG4gICAgICBjb21tZW50cyA9IFsuLi5jb21tZW50cywgLi4uX2NvbW1lbnRzXTtcbiAgICAgIGxvYWRfbW9yZV9sb2FkaW5nID0gZmFsc2U7XG4gICAgfSk7XG4gIH1cbn1cblxuY29uc3QgYmFzZTY0YWJjID0gKCgpID0+IHtcblx0bGV0IGFiYyA9IFtdLFxuXHRcdEEgPSBcIkFcIi5jaGFyQ29kZUF0KDApLFxuXHRcdGEgPSBcImFcIi5jaGFyQ29kZUF0KDApLFxuXHRcdG4gPSBcIjBcIi5jaGFyQ29kZUF0KDApO1xuXHRmb3IgKGxldCBpID0gMDsgaSA8IDI2OyArK2kpIHtcblx0XHRhYmMucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKEEgKyBpKSk7XG5cdH1cblx0Zm9yIChsZXQgaSA9IDA7IGkgPCAyNjsgKytpKSB7XG5cdFx0YWJjLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZShhICsgaSkpO1xuXHR9XG5cdGZvciAobGV0IGkgPSAwOyBpIDwgMTA7ICsraSkge1xuXHRcdGFiYy5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUobiArIGkpKTtcblx0fVxuXHRhYmMucHVzaChcIitcIik7XG5cdGFiYy5wdXNoKFwiL1wiKTtcblx0cmV0dXJuIGFiYztcbn0pKCk7XG5cbmZ1bmN0aW9uIGJ5dGVzVG9CYXNlNjQoYnl0ZXMpIHtcblx0bGV0IHJlc3VsdCA9ICcnLCBpLCBsID0gYnl0ZXMubGVuZ3RoO1xuXHRmb3IgKGkgPSAyOyBpIDwgbDsgaSArPSAzKSB7XG5cdFx0cmVzdWx0ICs9IGJhc2U2NGFiY1tieXRlc1tpIC0gMl0gPj4gMl07XG5cdFx0cmVzdWx0ICs9IGJhc2U2NGFiY1soKGJ5dGVzW2kgLSAyXSAmIDB4MDMpIDw8IDQpIHwgKGJ5dGVzW2kgLSAxXSA+PiA0KV07XG5cdFx0cmVzdWx0ICs9IGJhc2U2NGFiY1soKGJ5dGVzW2kgLSAxXSAmIDB4MEYpIDw8IDIpIHwgKGJ5dGVzW2ldID4+IDYpXTtcblx0XHRyZXN1bHQgKz0gYmFzZTY0YWJjW2J5dGVzW2ldICYgMHgzRl07XG5cdH1cblx0aWYgKGkgPT09IGwgKyAxKSB7IC8vIDEgb2N0ZXQgbWlzc2luZ1xuXHRcdHJlc3VsdCArPSBiYXNlNjRhYmNbYnl0ZXNbaSAtIDJdID4+IDJdO1xuXHRcdHJlc3VsdCArPSBiYXNlNjRhYmNbKGJ5dGVzW2kgLSAyXSAmIDB4MDMpIDw8IDRdO1xuXHRcdHJlc3VsdCArPSBcIj09XCI7XG5cdH1cblx0aWYgKGkgPT09IGwpIHsgLy8gMiBvY3RldHMgbWlzc2luZ1xuXHRcdHJlc3VsdCArPSBiYXNlNjRhYmNbYnl0ZXNbaSAtIDJdID4+IDJdO1xuXHRcdHJlc3VsdCArPSBiYXNlNjRhYmNbKChieXRlc1tpIC0gMl0gJiAweDAzKSA8PCA0KSB8IChieXRlc1tpIC0gMV0gPj4gNCldO1xuXHRcdHJlc3VsdCArPSBiYXNlNjRhYmNbKGJ5dGVzW2kgLSAxXSAmIDB4MEYpIDw8IDJdO1xuXHRcdHJlc3VsdCArPSBcIj1cIjtcblx0fVxuXHRyZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBoYXNoX3RvX2ltYWdlX3VyaShoYXNoKXtcbiAgcmV0dXJuIGBodHRwczovL2F2YXRhcnMuZGljZWJlYXIuY29tL3YyL2lkZW50aWNvbi8ke2VzY2FwZShieXRlc1RvQmFzZTY0KGhhc2gpKX0uc3ZnYDtcbn1cblxucmVmcmVzaF9jb21tZW50cygpO1xuXG5BUEkuZmluZ2VycHJpbnRfaGFzaCgpLnRoZW4oaGFzaCA9PiB7XG4gIHByb2ZpbGVfaW1hZ2VfdXJpID0gaGFzaF90b19pbWFnZV91cmkoaGFzaCk7XG59KTtcblxuZnVuY3Rpb24gc3VibWl0KCl7XG4gIEFQSS53cml0ZV9jb21tZW50KHN0cmVhbWVyX2lkLCBuaWNrbmFtZSwgcGFzc3dvcmQsIGNvbnRlbnRzKS50aGVuKHJlcyA9PiB7XG4gICAgcmVmcmVzaF9jb21tZW50cygpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gc2NvcmUoY29tbWVudCl7XG4gIGxldCBuID0gY29tbWVudC51cHZvdGUgKyBjb21tZW50LmRvd252b3RlLFxuICAgICAgcCA9IGNvbW1lbnQudXB2b3RlIC8gbixcbiAgICAgIHogPSAxLjI4MTU1MTU2NTU0NSxcbiAgICAgIGwgPSBwICsgMS8oMipuKSp6KnosXG4gICAgICByID0geipNYXRoLnNxcnQocCooMS1wKS9uICsgeip6Lyg0Km4qbikpLFxuICAgICAgdW5kZXIgPSAxKzEvbip6Kno7XG4gIHJldHVybiAoMSAtIHIpIC8gdW5kZXI7XG59XG5mdW5jdGlvbiB2b3RlKGlkLCB1cHZvdGUsIGlkeCl7XG4gIEFQSS52b3RlX2NvbW1lbnQoc3RyZWFtZXJfaWQsIGlkLCB1cHZvdGUpLnRoZW4ocmVzID0+IHtcbiAgICBpZih1cHZvdGUpXG4gICAgICBjb21tZW50c1tpZHhdLnVwdm90ZSA9IGNvbW1lbnRzW2lkeF0udXB2b3RlICsgMTtcbiAgICBlbHNlXG4gICAgICBjb21tZW50c1tpZHhdLmRvd252b3RlID0gY29tbWVudHNbaWR4XS5kb3dudm90ZSArIDE7XG4gICAgY29tbWVudHNbaWR4XS5zY29yZSA9IHNjb3JlKGNvbW1lbnRzW2lkeF0pO1xuICAgIGNvbW1lbnRzID0gY29tbWVudHMuc29ydCgoYSwgYikgPT4gYi5zY29yZSAtIGEuc2NvcmUgfHwgYi5wYXJlbnRfaWQgLSBhLnBhcmVudF9pZCB8fCBiLmlkIC0gYS5pZClcbiAgfSkuY2F0Y2goZSA9PiB7XG4gICAgaWYoZSA9PSA0MDApIHtcbiAgICAgIHRvYXN0LnNob3coJ+ykkeuztSDtj4nqsIDripQg7JWI64+87JqUIScpO1xuICAgIH1cbiAgfSk7XG59XG5cbmxldCBsYXN0X3N0cmVhbWVyX2lkO1xuJDogaWYobGFzdF9zdHJlYW1lcl9pZCAhPSBzdHJlYW1lcl9pZCkge1xuICBsYXN0X3N0cmVhbWVyX2lkID0gc3RyZWFtZXJfaWQ7XG4gIHJlZnJlc2hfY29tbWVudHMoKTtcbn1cbjwvc2NyaXB0PlxuIiwiPGNhbnZhcyBjbGFzcz1cInctZnVsbFwiIGJpbmQ6dGhpcz17Y2FudmFzfT5cbjwvY2FudmFzPlxuPHNjcmlwdD5cbmltcG9ydCB7IG9uTW91bnQgfSBmcm9tIFwic3ZlbHRlXCI7XG5pbXBvcnQgeyBBUEkgfSBmcm9tIFwiLi4vYXBpLmpzXCJcbmV4cG9ydCBsZXQgc3RyZWFtZXJfaWQ7XG5sZXQgY2FudmFzO1xubGV0IFdvcmRDbG91ZDtcbmxldCB3aWR0aDtcbmxldCBoZWlnaHQ7XG5cbmxldCBsYXN0X3N0cmVhbWVyX2lkID0gbnVsbDtcblxuJDogaWYoV29yZENsb3VkICYmIGxhc3Rfc3RyZWFtZXJfaWQgIT0gc3RyZWFtZXJfaWQpIHtcbiAgbGFzdF9zdHJlYW1lcl9pZCA9IHN0cmVhbWVyX2lkO1xuICBBUEkua2V5d29yZHMoc3RyZWFtZXJfaWQpLnRoZW4oa2V5d29yZHMgPT4ge1xuICAgIGtleXdvcmRzID0ga2V5d29yZHMuZmlsdGVyKHggPT4geFswXSAhPSBcIuOFi+OFi1wiICYmIHhbMF0gIT0gXCLjhLfjhLdcIik7XG4gICAgbGV0IG1heF9mcmFjdGlvbiA9IE1hdGgubWF4KC4uLmtleXdvcmRzLm1hcCh4ID0+IHhbMV0pKSxcbiAgICAgICAgbWluX2ZyYWN0aW9uID0gTWF0aC5taW4oLi4ua2V5d29yZHMubWFwKHggPT4geFsxXSkpO1xuICAgIC8va2V5d29yZHMgPSBrZXl3b3Jkcy5tYXAoeCA9PiBbeFswXSwgKHhbMV0gLSBtaW5fZnJhY3Rpb24pLyhtYXhfZnJhY3Rpb24tbWluX2ZyYWN0aW9uKSoxMjAgKyA5XSk7XG4gICAga2V5d29yZHMgPSBrZXl3b3Jkcy5tYXAoeCA9PiBbeFswXSwgKHhbMV0gLSBtaW5fZnJhY3Rpb24pLyhtYXhfZnJhY3Rpb24tbWluX2ZyYWN0aW9uKSo5LjIgKyAwLjhdKTtcbiAgICBsZXQgYXJlYSA9IGtleXdvcmRzLnJlZHVjZSgocmVzLGIpID0+IHJlcyArIGJbMF0ubGVuZ3RoKmJbMV0sIDApO1xuICAgIFdvcmRDbG91ZChjYW52YXMsIHtcbiAgICAgIGxpc3Q6IGtleXdvcmRzLFxuICAgICAgZ3JpZFNpemU6IE1hdGgucm91bmQoMTYgKiB3aWR0aCAvIDEwMjQpLFxuICAgICAgd2VpZ2h0RmFjdG9yOiB3aWR0aCAvIDEwMjQgKiAzMiAqIDM4MC9hcmVhLFxuICAgICAgZm9udEZhbWlseTogJy1hcHBsZS1zeXN0ZW0sIEJsaW5rTWFjU3lzdGVtRm9udCwgU2Vnb2UgVUksIFJvYm90bywgSGVsdmV0aWNhIE5ldWUsIEFyaWFsLCBOb3RvIFNhbnMsIHNhbnMtc2VyaWYsIEFwcGxlIENvbG9yIEVtb2ppLCBTZWdvZSBVSSBFbW9qaSwgU2Vnb2UgVUkgU3ltYm9sLCBOb3RvIENvbG9yIEVtb2ppJyxcbiAgICAgIGZvbnRXZWlnaHQ6IFwiYm9sZFwiLFxuICAgICAgY29sb3I6ICdyYW5kb20tZGFyaycsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCcsXG4gICAgICByb3RhdGVSYXRpbzogMCxcbiAgICAgIHJvdGF0aW9uU3RlcHM6IDFcbiAgICAgICwgIGVsbGlwdGljaXR5OiAxLFxuICAgICAgLypzaGFwZTogZnVuY3Rpb24odGhldGEpIHtcbiAgICAgICAgdmFyIG1heCA9IDE5NTtcbiAgICAgICAgdmFyIGxlbmcgPSBbMTM0LDEzNSwxMzUsMTM1LDEzNSwxMzUsMTM1LDEzNSwxMzUsMTM1LDEzNSwxMzUsMTM1LDEzNiwxMzYsMTM2LDEzNiwxMzYsMTM3LDEzNywxMzcsMTM4LDEzOCwxMzgsMTM4LDEzOSwxMzksMTQwLDE0MCwxNDAsMTQxLDE0MSwxNDIsMTQyLDE0MywxNDMsMTQ0LDE0NCwxNDUsMTQ1LDE0NiwxNDcsMTQ3LDE0OCwxNDksMTQ5LDE1MCwxNTEsMTUyLDE1MywxNTMsMTU0LDE1NSwxNTYsMTU3LDE1OCwxNTksMTYwLDE2MSwxNjIsMTYzLDE2NCwxNjUsMTY3LDE2OCwxNjksMTcwLDE3MiwxNzMsMTc1LDE3NiwxNzgsMTc5LDE4MSwxODIsMTg0LDE4NiwxODgsMTg5LDE5MSwxOTMsMTk1LDE5NSwxOTMsMTkyLDE5MCwxODgsMTg3LDE4NSwxODQsMTgyLDE4MSwxNzksMTc4LDE3NywxNzUsMTc0LDE3MywxNzIsMTcxLDE2OSwxNjgsMTY3LDE2NiwxNjUsMTY0LDE2MywxNjMsMTYyLDE2MSwxNjAsMTU5LDE1OCwxNTgsMTU3LDE1NiwxNTUsMTU1LDE1NCwxNTQsMTUzLDE1MiwxNTIsMTUxLDE1MSwxNTAsMTUwLDE0OSwxNDksMTQ4LDE0OCwxNDgsMTQ3LDE0NywxNDYsMTQ2LDE0NiwxNDUsMTQ1LDE0NSwxNDUsMTQ0LDE0NCwxNDQsMTQ0LDE0NCwxNDMsMTQzLDE0MywxNDMsMTQzLDE0MywxNDMsMTQzLDE0MywxNDMsMTQzLDE0MywxNDMsMTQzLDE0MywxNDMsMTQzLDE0MywxNDMsMTQzLDE0MywxNDMsMTQzLDE0NCwxNDQsMTQ0LDE0NCwxNDQsMTQ1LDE0NSwxNDUsMTQ1LDE0NiwxNDYsMTQ2LDE0NywxNDcsMTQ3LDE0OCwxNDgsMTQ5LDE0OSwxNTAsMTUwLDE1MSwxNTEsMTUyLDE1MiwxNTMsMTUzLDE1NCwxNTUsMTU1LDE1NiwxNTcsMTU3LDE1OCwxNTksMTYwLDE2MSwxNjIsMTYyLDE2MywxNjQsMTY1LDE2NiwxNjcsMTY4LDE2OSwxNzAsMTcyLDE3MywxNzQsMTc1LDE3NiwxNzgsMTc5LDE4MCwxODIsMTgzLDE4NSwxODYsMTg4LDE5MCwxOTEsMTkzLDE5NSwxOTMsMTkxLDE4OSwxODcsMTg1LDE4MywxODIsMTgwLDE3OCwxNzcsMTc1LDE3NCwxNzIsMTcxLDE2OSwxNjgsMTY3LDE2NiwxNjQsMTYzLDE2MiwxNjEsMTYwLDE1OSwxNTgsMTU3LDE1NiwxNTUsMTU0LDE1MywxNTIsMTUxLDE1MCwxNTAsMTQ5LDE0OCwxNDcsMTQ3LDE0NiwxNDUsMTQ1LDE0NCwxNDMsMTQzLDE0MiwxNDIsMTQxLDE0MSwxNDAsMTQwLDEzOSwxMzksMTM4LDEzOCwxMzgsMTM3LDEzNywxMzYsMTM2LDEzNiwxMzYsMTM1LDEzNSwxMzUsMTM0LDEzNCwxMzQsMTM0LDEzNCwxMzMsMTMzLDEzMywxMzMsMTMzLDEzMywxMzMsMTMzLDEzMywxMzMsMTMzLDEzMywxMzMsMTMzLDEzMywxMzMsMTMzLDEzMywxMzMsMTMzLDEzMywxMzMsMTMzLDEzMywxMzMsMTM0LDEzNCwxMzQsMTM0LDEzNCwxMzUsMTM1LDEzNSwxMzUsMTM2LDEzNiwxMzYsMTM3LDEzNywxMzcsMTM4LDEzOCwxMzksMTM5LDE0MCwxNDAsMTQwLDE0MSwxNDIsMTQyLDE0MywxNDMsMTQ0LDE0NCwxNDUsMTQ2LDE0NiwxNDcsMTQ4LDE0OSwxNDksMTUwLDE1MSwxNTIsMTUzLDE1NCwxNTQsMTU1LDE1NiwxNTcsMTU4LDE1OSwxNjAsMTYwLDE1OCwxNTYsMTU0LDE1MiwxNTAsMTQ4LDE0NiwxNDQsMTQzLDE0MSwxMzksMTM4LDEzNiwxMzUsMTMzLDEzMiwxMzEsMTI5LDEyOCwxMjcsMTI2LDEyNCwxMjMsMTIyLDEyMSwxMjAsMTE5LDExOCwxMTcsMTE2LDExNSwxMTQsMTE0LDExMywxMTIsMTExLDExMCwxMTEsMTA5LDEwOCwxMDgsMTEwLDExMiwxMTQsMTE2LDExOCwxMjAsMTIyLDEyNSwxMjcsMTMwLDEzMywxMzYsMTM5LDE0MiwxNDUsMTQ5LDE0OSwxNDcsMTQ0LDE0MCwxMzYsMTM1LDEzMSwxMjksMTI2LDEyNSwxMjEsMTIwLDExOCwxMTUsMTE0LDExMywxMTAsMTA4LDEwNywxMDUsMTAzLDEwMiwxMDEsMTAwLDk3LDk2LDk1LDk0LDkzLDkyLDkyLDkyLDkyLDkyLDkyLDkzLDkyLDkyLDkyLDkyLDkyLDkyLDkyLDkyLDkyLDkyLDkyLDkyLDkyLDkzLDkyLDkyLDkyLDkzLDkzLDkzLDkzLDkzLDkzLDk0LDk0LDk0LDk0LDk0LDk1LDk1LDk1LDk1LDk2LDk2LDk2LDk3LDk3LDk3LDk4LDk4LDk4LDk5LDk5LDEwMCwxMDEsMTAxLDEwMSwxMDIsMTAyLDEwMywxMDMsMTA0LDEwNCwxMDUsMTA1LDEwNiwxMDcsMTA3LDEwOCwxMDksMTA5LDExMCwxMTEsMTEyLDExMiwxMTMsMTE0LDExNSwxMTYsMTE3LDExOCwxMTksMTIwLDEyMSwxMjEsMTIxLDEyMSwxMjIsMTIyLDEyMiwxMjIsMTIxLDEyMSwxMjEsMTIxLDEyMiwxMjIsMTIyLDEyMiwxMjIsMTIyLDEyMiwxMjIsMTIzLDEyMywxMjMsMTIzLDEyMywxMjMsMTIzLDEyNCwxMjQsMTI0LDEyNSwxMjUsMTI1LDEyNSwxMjYsMTI2LDEyNiwxMjcsMTI3LDEyOCwxMjgsMTI5LDEyOSwxMzAsMTMwLDEzMSwxMzEsMTMyLDEzMiwxMzMsMTMzLDEzNCwxMzQsMTM1LDEzNiwxMzYsMTM3LDEzOCwxMzksMTQwLDEzOSwxMzksMTM5LDEzOCwxMzgsMTM4LDEzNywxMzcsMTM3LDEzNywxMzYsMTM2LDEzNiwxMzYsMTM2LDEzNSwxMzUsMTM1LDEzNSwxMzUsMTM1LDEzNSwxMzUsMTM1LDEzNSwxMzUsMTM2XTtcblxuICAgICAgICByZXR1cm4gbGVuZ1sodGhldGEgLyAoMiAqIE1hdGguUEkpKSAqIGxlbmcubGVuZ3RoIHwgMF0gLyBtYXg7XG4gICAgICB9Ki9cbiAgICB9KTtcblxuICB9KTtcbn1cbm9uTW91bnQoYXN5bmMgKCk9PntcbiAgd2lkdGggPSBjYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGgsXG4gIGhlaWdodCA9IGNhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQ7XG4gIGNhbnZhcy53aWR0aCA9IHdpZHRoO1xuICBjYW52YXMuaGVpZ2h0ID0gd2lkdGg7XG4gIGxldCB7IFdvcmRDbG91ZDp3IH0gPSBhd2FpdCBpbXBvcnQoJy4vd29yZGNsb3VkMi5qcycpO1xuICBXb3JkQ2xvdWQgPSB3O1xufSk7XG48L3NjcmlwdD5cbiIsIjxkaXYgY2xhc3M9XCJ3LWZ1bGwgdGV4dC14cyBwLTIgb3ZlcmZsb3ctaGlkZGVuIGZsZXggZmxleC1jb2wgaXRlbXMtc3RhcnQganVzdGlmeS1lbmQgd2hpdGVzcGFjZS1uby13cmFwXCIgYmluZDp0aGlzPXtjb250YWluZXJ9PlxuICB7I2VhY2ggZGlzdHJpYnV0aW9uIGFzIGR9XG4gICAgPGRpdiBjbGFzcz1cImZsZXggZmxleC1yb3cgdy1mdWxsIGl0ZW1zLWNlbnRlclwiPlxuICAgICAgPGRpdiBjbGFzcz1cInctMTYgdGV4dC1jZW50ZXIgcHItMlwiPnsgZFswXSA+PSAwPyBkWzBdICsgXCLqsJzsm5RcIiA6IFwi67mE6rWs64+FXCIgfTwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImJnLXByaW1hcnktNjAwIGZsZXggaXRlbXMtY2VudGVyIGgtZnVsbCB0ZXh0LWdyYXktNjAwIHB0LXB4XCIgc3R5bGU9XCJ3aWR0aDoge2RbMV0vbWF4X3JhdGlvKjUwfSU7IG1pbi13aWR0aDogMXB4XCI+IFxuICAgICAgICA8c3BhbiBjbGFzcz1cInBsLTJcIiBzdHlsZT1cIm1hcmdpbi1sZWZ0OiAxMDAlO1wiPlxuICAgICAgICB7KGRbMV0qMTAwKS50b0ZpeGVkKDEpfSVcbiAgICAgICAgPC9zcGFuPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIHsvZWFjaH1cbiAgICA8ZGl2IGNsYXNzPVwiZmxleCBmbGV4LXJvdyBwdC0yIHctZnVsbCBmb250LWJvbGRcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJ3LTE2IHRleHQtY2VudGVyIHByLTJcIj7qtazrj4Xsm5TsiJg8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJmbGV4LTEgdGV4dC1jZW50ZXJcIj7ruYTsnKg8L2Rpdj5cbiAgICA8L2Rpdj5cbjwvZGl2PlxuXG48c2NyaXB0PlxuaW1wb3J0IHsgb25Nb3VudCB9IGZyb20gXCJzdmVsdGVcIjtcbmltcG9ydCB7IEFQSSB9IGZyb20gXCIuLi9hcGkuanNcIlxuZXhwb3J0IGxldCBzdHJlYW1lcl9pZDtcbmxldCBjb250YWluZXI7XG5sZXQgV29yZENsb3VkXztcblxubGV0IGxhc3Rfc3RyZWFtZXJfaWQgPSBudWxsO1xubGV0IGRpc3RyaWJ1dGlvbiA9IFtdO1xubGV0IG1heF9yYXRpbyA9IDA7XG5cbiQ6IGlmKGxhc3Rfc3RyZWFtZXJfaWQgIT0gc3RyZWFtZXJfaWQpIHtcbiAgbGFzdF9zdHJlYW1lcl9pZCA9IHN0cmVhbWVyX2lkO1xuICBBUEkuYXZlcmFnZV9zdWJzY3JpYmVyX2Rpc3RyaWJ1dGlvbihzdHJlYW1lcl9pZCkudGhlbihfZGlzdHJpYnV0aW9uID0+IHtcbiAgICBsZXQgc3VtID0gX2Rpc3RyaWJ1dGlvbi5yZWR1Y2UoKGEsYikgPT4gYSArIGJbMV0sIDApO1xuICAgIF9kaXN0cmlidXRpb24gPSBfZGlzdHJpYnV0aW9uLm1hcCh4ID0+IFt4WzBdLCB4WzFdL3N1bV0pO1xuICAgIG1heF9yYXRpbyA9IE1hdGgubWF4KC4uLl9kaXN0cmlidXRpb24ubWFwKHggPT4geFsxXSkpO1xuICAgIGRpc3RyaWJ1dGlvbiA9IF9kaXN0cmlidXRpb24ucmV2ZXJzZSgpO1xuICB9KTtcbn1cblxub25Nb3VudCgoKT0+e1xuICBsZXQgd2lkdGggPSBjb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGgsXG4gICAgaGVpZ2h0ID0gY29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodDtcbiAgLy9jb250YWluZXIuc3R5bGUubWluSGVpZ2h0ID0gd2lkdGggKyBcInB4XCI7XG59KTtcbjwvc2NyaXB0PlxuIiwiPGRpdiBjbGFzcz1cInskJHByb3BzLmNsYXNzfSByZWxhdGl2ZSBmbGV4IGZsZXgtcm93IGl0ZW1zLWNlbnRlclwiIGNsYXNzOnB0LTQ9e2lzX2hlYWR9PlxuICA8ZGl2IGNsYXNzPVwidGV4dC1jZW50ZXIgdGV4dC1tZCB3LTE2XCI+XG4gICAge21vbnRofeyblFxuICA8L2Rpdj5cbiAgPGRpdiBjbGFzcz1cInJlbGF0aXZlIHByLTIgZmxleC0xXCI+XG4gICAgPHN2ZyBcbiAgICAgICBjbGFzcz1cIm92ZXJmbG93LXZpc2libGVcIlxuICAgICAgIHZpZXdCb3g9XCIwLHtpc19oZWFkPyAwOjF9LDcse01hdGguZmxvb3IoKGNhbGVuZGFyX3ZhbHVlcy5sZW5ndGggKyBzdGFydF9kYXkpLzcpICsgMSArIGlzX2hlYWQgLSAhaXNfaGVhZH1cIlxuICAgICAgIG9uOm1vdXNlb3Zlcj17aGFuZGxlTW91c2Vtb3ZlfVxuICAgICAgIG9uOm1vdXNlbW92ZT17aGFuZGxlTW91c2Vtb3ZlfSA+XG4gICAgICA8Zz5cbiAgICAgICAgeyNpZiBpc19oZWFkfVxuICAgICAgICB7I2VhY2ggW1wi7J28XCIsIFwi7JuUXCIsIFwi7ZmUXCIsIFwi7IiYXCIsIFwi66qpXCIsIFwi6riIXCIsIFwi7YagXCJdIGFzIGRheSwgaX1cbiAgICAgICAgICA8dGV4dCBcbiAgICAgICAgICAgeD1cIntpKzAuNX1cIiBcbiAgICAgICAgICAgeT1cIjAuNVwiXG4gICAgICAgICAgIHRleHQtYW5jaG9yPVwibWlkZGxlXCJcbiAgICAgICAgICAgYWxpZ25tZW50LWJhc2VsaW5lPVwibWlkZGxlXCJcbiAgICAgICAgICAge2RheX1cbiAgICAgICAgICAgc3R5bGU9XCJmaWxsOiB7aT09MCB8fCBpPT02PyAnI0ZGNDU2MCc6ICcjNDQ0NDQ0J307IGZvbnQtc2l6ZTogMC41cHhcIlxuICAgICAgICAgICA+XG4gICAgICAgICAgIHtkYXl9XG4gICAgICAgICAgPC90ZXh0PlxuICAgICAgICB7L2VhY2h9XG4gICAgICAgIHsvaWZ9XG4gICAgICAgIHsjZWFjaCBjYWxlbmRhcl92YWx1ZXMgYXMgdiwgaX1cbiAgICAgICAgPHJlY3QgXG4gICAgICAgICAgIHg9XCJ7KGkrc3RhcnRfZGF5KSU3fVwiIFxuICAgICAgICAgICB5PVwie01hdGguZmxvb3IoKGkrc3RhcnRfZGF5KS83ICsgaXNfaGVhZCl9XCIgXG4gICAgICAgICAgIHdpZHRoPVwiezF9XCIgXG4gICAgICAgICAgIGhlaWdodD1cInsxfVwiIFxuICAgICAgICAgICBzdHJva2U9XCIjNDQ0NDQ0XCJcbiAgICAgICAgICAgc3Ryb2tlLXdpZHRoPVwiMC4wMVwiXG4gICAgICAgICAgIGZpbGw9XCJyZ2Ioe3J9LCB7Z30sIHtifSwge3Y/IE1hdGgubWluKHYvKG1heF92YWwqMC41KSwgMSk6IDB9KVwiXG4gICAgICAgICAgIG9uOm1vdXNlb3Zlcj17ZSA9PiBob3ZlcmVkX3JlY3QgPSBbaSwgdiwgZS50YXJnZXRdfVxuICAgICAgICAgICBvbjptb3VzZW91dD17ZSA9PiB7IGlmKGhvdmVyZWRfcmVjdFswXSA9PSBpKSBob3ZlcmVkX3JlY3QgPSBudWxsO319XG4gICAgICAgICAgIC8+XG4gICAgICAgIDx0ZXh0XG4gICAgICAgICAgIHg9XCJ7KGkrc3RhcnRfZGF5KSU3ICsgMC41fVwiIFxuICAgICAgICAgICB5PVwie01hdGguZmxvb3IoKGkrc3RhcnRfZGF5KS83ICsgaXNfaGVhZCkgKyAwLjV9XCJcbiAgICAgICAgICAgdGV4dC1hbmNob3I9XCJtaWRkbGVcIlxuICAgICAgICAgICBhbGlnbm1lbnQtYmFzZWxpbmU9XCJtaWRkbGVcIlxuICAgICAgICAgICBzdHlsZT1cIm9wYWNpdHk6IDAuMjU7IGZpbGw6IHsoaStzdGFydF9kYXkpJTc9PTAgfHwgKGkrc3RhcnRfZGF5KSU3PT02PyAnI0ZGNDU2MCc6ICcjNDQ0NDQ0J307IGZvbnQtc2l6ZTogMC41cHg7IGZvbnQtd2VpZ2h0OiBib2xkOyBwb2ludGVyLWV2ZW50czpub25lO1wiXG4gICAgICAgICAgID5cbiAgICAgICAgICB7aSsxfVxuICAgICAgICA8L3RleHQ+XG4gICAgICAgIHsvZWFjaH1cbiAgICAgICAgeyNpZiAhaXNfaGVhZH1cbiAgICAgICAgICB7I2VhY2ggWzAsMSwyLDMsNCw1LDZdIGFzIGl9XG4gICAgICAgICAgICA8bGluZSBcbiAgICAgICAgICAgICAgIHgxPVwieyhpICsgc3RhcnRfZGF5KSU3fVwiIFxuICAgICAgICAgICAgICAgeTE9XCJ7TWF0aC5mbG9vcigoaStzdGFydF9kYXkpLzcgKyBpc19oZWFkKX1cIlxuICAgICAgICAgICAgICAgeDI9XCJ7KGkgKyBzdGFydF9kYXkpJTcrMX1cIlxuICAgICAgICAgICAgICAgeTI9XCJ7TWF0aC5mbG9vcigoaStzdGFydF9kYXkpLzcgKyBpc19oZWFkKX1cIlxuICAgICAgICAgICAgICAgc3Ryb2tlLXdpZHRoPVwiMC4wNVwiXG4gICAgICAgICAgICAgICBzdHJva2U9XCIjMjIyMjIyXCJcbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICB7L2VhY2h9XG4gICAgICAgICAgeyNpZiBzdGFydF9kYXl9XG4gICAgICAgICAgICA8bGluZSBcbiAgICAgICAgICAgICAgIHgxPVwie3N0YXJ0X2RheSU3fVwiIFxuICAgICAgICAgICAgICAgeTE9XCJ7TWF0aC5mbG9vcigoc3RhcnRfZGF5KS83ICsgaXNfaGVhZCl9XCJcbiAgICAgICAgICAgICAgIHgyPVwie3N0YXJ0X2RheSU3fVwiXG4gICAgICAgICAgICAgICB5Mj1cIntNYXRoLmZsb29yKChzdGFydF9kYXkpLzcgKyBpc19oZWFkICsgMSl9XCJcbiAgICAgICAgICAgICAgIHN0cm9rZS13aWR0aD1cIjAuMDVcIlxuICAgICAgICAgICAgICAgc3Ryb2tlPVwiIzIyMjIyMlwiXG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgey9pZn1cbiAgICAgICAgey9pZn1cbiAgICAgIDwvZz5cbiAgICA8L3N2Zz5cbiAgICB7I2lmIGhvdmVyZWRfcmVjdH1cbiAgICAgIDxkaXYgXG4gICAgICAgICBjbGFzcz1cImZpeGVkIHRleHQtd2hpdGUgei01MCBiZy1ncmF5LTkwMCBvcGFjaXR5LTc1IHAtMiB0ZXh0LXhzIHRleHQtY2VudGVyXCIgXG4gICAgICAgICBzdHlsZT1cInRvcDoge20ueSArIDEwfXB4OyBsZWZ0OiB7bS54fXB4OyB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAwKTtcIj5cbiAgICAgICAgPHNwYW4+PHNwYW4gY2xhc3M9XCJ0ZXh0LXNtXCI+e21vbnRofTwvc3Bhbj7sm5Q8c3BhbiBjbGFzcz1cInRleHQtc21cIj57aG92ZXJlZF9yZWN0WzBdKzF9PC9zcGFuPuydvDwvc3Bhbj48YnI+XG4gICAgICAgIDxzcGFuPjxzcGFuIGNsYXNzPVwidGV4dC1ub3JtYWxcIj57aG92ZXJlZF9yZWN0WzFdLnRvRml4ZWQoMSl9PC9zcGFuPuyLnOqwhCDrsKnshqHtlag8L3NwYW4+XG4gICAgICA8L2Rpdj5cbiAgICB7L2lmfVxuICA8L2Rpdj5cbjwvZGl2PlxuXG48c2NyaXB0IGNvbnRleHQ9XCJtb2R1bGVcIj5cbjwvc2NyaXB0PlxuXG48c2NyaXB0PlxuaW1wb3J0IHsgb25Nb3VudCB9IGZyb20gXCJzdmVsdGVcIjtcbmltcG9ydCB7IEFQSSB9IGZyb20gJy4uL2FwaS5qcyc7XG5leHBvcnQgbGV0IHN0cmVhbWVyO1xuZXhwb3J0IGxldCBtb250aF9vZmZzZXQgPSAwXG5leHBvcnQgbGV0IGlzX2hlYWQgPSB0cnVlO1xubGV0IG5vdyA9IG5ldyBEYXRlKCk7IFxubGV0IGhvdmVyZWRfcmVjdCA9IG51bGw7XG4kOiB0byA9IG5ldyBEYXRlKG5vdy5nZXRGdWxsWWVhcigpLCBub3cuZ2V0TW9udGgoKSsxICsgbW9udGhfb2Zmc2V0LCAxKTtcbiQ6IGZyb20gPSBuZXcgRGF0ZShub3cuZ2V0RnVsbFllYXIoKSwgbm93LmdldE1vbnRoKCkgKyBtb250aF9vZmZzZXQsIDEpO1xuJDogbW9udGggPSBmcm9tLmdldE1vbnRoKCkrMTtcbiQ6IHN0YXJ0X2RheSA9IGZyb20uZ2V0RGF5KCk7XG4kOiBtYXhfdmFsID0gTWF0aC5tYXgoLi4uY2FsZW5kYXJfdmFsdWVzKTtcblxubGV0IGNhbGVuZGFyX3ZhbHVlcyA9IG5ldyBBcnJheShuZXcgRGF0ZShub3cuZ2V0RnVsbFllYXIoKSwgbm93LmdldE1vbnRoKCkrbW9udGhfb2Zmc2V0KzEsIDApLmdldERhdGUoKSkuZmlsbCgwKTtcbmxldCBsYXN0X3N0cmVhbWVyO1xuJDogaWYobGFzdF9zdHJlYW1lciAhPSBzdHJlYW1lcikge1xuICBsYXN0X3N0cmVhbWVyID0gc3RyZWFtZXI7XG4gIEFQSS5zdHJlYW1fcmFuZ2VzKHN0cmVhbWVyLmlkLCBmcm9tLCB0bykudGhlbihzdHJlYW1fcmFuZ2VzID0+IHtcbiAgICBzdHJlYW1fcmFuZ2VzID0gc3RyZWFtX3Jhbmdlcy5maWx0ZXIociA9PiByWzBdID49IGZyb20uZ2V0VGltZSgpLzEwMDAgJiYgclswXSA8IHRvLmdldFRpbWUoKS8xMDAwKVxuICAgIGlmKCFzdHJlYW1fcmFuZ2VzKVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgbGV0IGRhdGVfdG9fc3RyZWFtX3RpbWUgPSB7fTtcbiAgICBsZXQgdmFsdWVzID0gbmV3IEFycmF5KG5ldyBEYXRlKG5vdy5nZXRGdWxsWWVhcigpLCBub3cuZ2V0TW9udGgoKSttb250aF9vZmZzZXQrMSwgMCkuZ2V0RGF0ZSgpKS5maWxsKDApO1xuICAgIGZvcihsZXQgciBvZiBzdHJlYW1fcmFuZ2VzKSB7XG4gICAgICBsZXQgZGF0ZSA9IG5ldyBEYXRlKHJbMF0qMTAwMCk7XG4gICAgICB2YWx1ZXNbZGF0ZS5nZXREYXRlKCktMV0gKz0gKHJbMV0gLSByWzBdKS8zNjAwO1xuICAgIH1cbiAgICBjYWxlbmRhcl92YWx1ZXMgPSB2YWx1ZXM7XG4gIH0pO1xufTtcblxuY29uc3QgciA9IDIwNTtcbmNvbnN0IGcgPSAxNjg7XG5jb25zdCBiID0gMTk5O1xuZnVuY3Rpb24gdmFsdWVfdG9fY29sb3Iodikge1xuICBsZXQgbiA9IHY/IE1hdGgubWluKHYvKG1heF92YWwqMC41KSwgMSk6IDA7XG4gIHJldHVybiBgcmdiKCR7cn0sICR7Z30sICR7Yn0sICR7bn0pYDtcbn1cblxubGV0IG0gPSB7IHg6IDAsIHk6IDAgfTtcblxuZnVuY3Rpb24gaGFuZGxlTW91c2Vtb3ZlKGV2ZW50KSB7XG4gIG0ueCA9IGV2ZW50LmNsaWVudFg7XG4gIG0ueSA9IGV2ZW50LmNsaWVudFk7XG59XG48L3NjcmlwdD5cbiIsIjxzdmVsdGU6aGVhZD5cblx0PHRpdGxlPiDtirjsiJhnZyAtIHtzdHJlYW1lci5uYW1lfSA8L3RpdGxlPlxuPC9zdmVsdGU6aGVhZD5cblxuPHNjcmlwdCBjb250ZXh0PVwibW9kdWxlXCI+XG5cdGltcG9ydCB7IEFQSSB9IGZyb20gJy4uLy4uL2FwaS5qcyc7XG4gIGV4cG9ydCBhc3luYyBmdW5jdGlvbiBwcmVsb2FkKHBhZ2UsIHNlc3Npb24pIHtcbiAgICBjb25zdCB7IGlkIH0gPSBwYWdlLnBhcmFtcztcbiAgICBsZXQgc3RyZWFtZXIgPSBhd2FpdCBBUEkuc3RyZWFtZXIuY2FsbCh0aGlzLCBpZCk7XG4gICAgbGV0IHNpbWlsYXJfc3RyZWFtZXJzID0gYXdhaXQgQVBJLnNpbWlsYXJfc3RyZWFtZXJzLmNhbGwodGhpcywgaWQpO1xuICAgIGxldCBzaW1pbGFyX3N0cmVhbWVyc190b3AxMCA9IHNpbWlsYXJfc3RyZWFtZXJzLnNsaWNlKDAsIDEwKTtcbiAgICByZXR1cm4geyBzdHJlYW1lciwgc2ltaWxhcl9zdHJlYW1lcnMsIHNpbWlsYXJfc3RyZWFtZXJzX3RvcDEwIH07XG4gIH1cbjwvc2NyaXB0PlxuXG5cbjxkaXYgY2xhc3M9XCJ3LWZ1bGwgbWQ6aC00OCBoLTQwIGJnLXByaW1hcnktNjAwXCI+XG48L2Rpdj5cblxuXG48ZGl2IGNsYXNzPVwiY29udGFpbmVyIG0tYXV0byBmbGV4IGZsZXgtY29sIG1kOml0ZW1zLXN0YXJ0IGl0ZW1zLWNlbnRlciBweC00XCI+XG4gIDxpbWdcbiAgICBjbGFzcz1cInJvdW5kZWQtbGcgdy02NCBoLTY0IG1kOnctYXV0byBtZDpzZWxmLXN0YXJ0IHNlbGYtY2VudGVyIG1kOmgtYXV0byBtZDotbXQtNDAgLW10LTMyIHotNSBib3JkZXItNCBib3JkZXItZ3JheS0yMDAgYmctZ3JheS0yMDBcIlxuICAgIHNyYz1cIntzdHJlYW1lci5wcm9maWxlX2ltYWdlX3VybH1cIlxuICAgIGFsdD1cIu2UhOuhnO2VhCDsnbTrr7jsp4BcIlxuICAvPlxuICA8ZGl2IGNsYXNzPVwibXQtOFwiPlxuICAgIDxoMSBjbGFzcz1cInRleHQtNHhsIHRyYWNraW5nLXdpZGVyIGlubGluZVwiPntzdHJlYW1lci5uYW1lfTwvaDE+XG4gICAgPEJhZGdlcyBzdHJlYW1lcj17c3RyZWFtZXJ9IGNsYXNzPVwibWwtMlwiPiA8L0JhZGdlcz5cbiAgICA8R2FtZUJhZGdlcyBzdHJlYW1lcj17c3RyZWFtZXJ9IGNsYXNzPVwiZmxleCBmbGV4LXJvdyBwdC0yIGZsZXgtd3JhcFwiPiA8L0dhbWVCYWRnZXM+XG4gIDwvZGl2PlxuICA8ZGl2IGNsYXNzPVwibXQtMTJcIj5cbiAgICB7c3RyZWFtZXIuZGVzY3JpcHRpb259XG4gIDwvZGl2PlxuICA8ZGl2IGNsYXNzPVwibXQtOCBmbGV4IGZsZXgtcm93XCI+XG4gICAgPGEgY2xhc3M9XCJ0ZXh0LXhzIHRleHQtYmx1ZS01MDAgZmxleCBmbGV4LXJvdyBpdGVtcy1jZW50ZXJcIiBocmVmPVwiaHR0cHM6Ly93d3cudHdpdGNoLnR2L3tzdHJlYW1lci5sb2dpbn1cIj5cbiAgICAgIDxzdmcgYXJlYS1oaWRkZW49XCJ0cnVlXCIgcm9sZT1cImltZ1wiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIHtmYUV4dGVybmFsTGlua0FsdC5pY29uWzBdfSB7ZmFFeHRlcm5hbExpbmtBbHQuaWNvblsxXX1cIiBjbGFzcz1cInctMyBoLTMgbXItMSBvdmVyZmxvdy12aXNpYmxlIGlubGluZS1ibG9ja1wiPlxuICAgICAgICA8cGF0aCBmaWxsPVwiY3VycmVudENvbG9yXCIgZD1cIntmYUV4dGVybmFsTGlua0FsdC5pY29uWzRdfVwiLz5cbiAgICAgIDwvc3ZnPlxuICAgICAgPHNwYW4+7Yq47JyE7LmYIOyxhOuEkDwvc3Bhbj5cbiAgICA8L2E+XG4gICAgPGEgY2xhc3M9XCJ0ZXh0LXhzIHRleHQtYmx1ZS01MDAgZmxleCBmbGV4LXJvdyBpdGVtcy1jZW50ZXIgbWwtNFwiIGhyZWY9XCIvbWFwP2ludGVyZXN0X3N0cmVhbWVyX2lkPXtzdHJlYW1lci5pZH1cIj5cbiAgICAgIDxzdmcgYXJlYS1oaWRkZW49XCJ0cnVlXCIgcm9sZT1cImltZ1wiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIHtmYUV4dGVybmFsTGlua0FsdC5pY29uWzBdfSB7ZmFFeHRlcm5hbExpbmtBbHQuaWNvblsxXX1cIiBjbGFzcz1cInctMyBoLTMgbXItMSBvdmVyZmxvdy12aXNpYmxlIGlubGluZS1ibG9ja1wiPlxuICAgICAgICA8cGF0aCBmaWxsPVwiY3VycmVudENvbG9yXCIgZD1cIntmYUV4dGVybmFsTGlua0FsdC5pY29uWzRdfVwiLz5cbiAgICAgIDwvc3ZnPlxuICAgICAgPHNwYW4+7KeA64+E7JeQ7IScIOywvuq4sDwvc3Bhbj5cbiAgICA8L2E+XG4gIDwvZGl2PlxuICA8dGFibGUgY2xhc3M9XCJtdC02IHRleHQteHNcIj5cbiAgICA8dHI+XG4gICAgICAgIDx0ZCBjbGFzcz1cInctMSBiZy1vcmFuZ2UtNDAwXCI+IDwvdGQ+XG4gICAgICAgIDx0ZCBjbGFzcz1cInRleHQtbGVmdCBwLTFcIj7tj4nssq3snpA8L3RkPlxuICAgICAgICA8dGQgY2xhc3M9XCJwbC02IHRleHQtb3JhbmdlLTQwMFwiPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZm9udC1ib2xkIHRleHQtYmFzZVwiPntzdHJlYW1lci5hdmVyYWdlX3ZpZXdlcl9jb3VudC50b0xvY2FsZVN0cmluZygna28nLCB7dXNlR3JvdXBpbmc6dHJ1ZX0pfTwvc3Bhbj5cbiAgICAgICAgICDrqoVcbiAgICAgICAgPC90ZD5cbiAgICA8L3RyPlxuICAgIDx0cj5cbiAgICAgICAgPHRkIGNsYXNzPVwidy0xIGJnLXB1cnBsZS00MDBcIj4gPC90ZD5cbiAgICAgICAgPHRkIGNsYXNzPVwidGV4dC1sZWZ0IHAtMVwiPu2MlOuhnOybjDwvdGQ+XG4gICAgICAgIDx0ZCBjbGFzcz1cInBsLTYgdGV4dC1wdXJwbGUtNDAwXCI+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJmb250LWJvbGQgdGV4dC1iYXNlXCI+e3N0cmVhbWVyLmZvbGxvd2VyX2NvdW50LnRvTG9jYWxlU3RyaW5nKCdrbycsIHt1c2VHcm91cGluZzp0cnVlfSl9PC9zcGFuPlxuICAgICAgICAgIOuqhVxuICAgICAgICA8L3RkPlxuICAgIDwvdHI+XG4gICAgPHRyPlxuICAgICAgICA8dGQgY2xhc3M9XCJ3LTEgYmctYmx1ZS00MDBcIj4gPC90ZD5cbiAgICAgICAgPHRkIGNsYXNzPVwidGV4dC1sZWZ0IHAtMVwiPuuwqeyGoeufiTwvdGQ+XG4gICAgICAgIDx0ZCBjbGFzcz1cInBsLTYgdGV4dC1ibHVlLTQwMFwiPlxuICAgICAgICAgIOyjvCBcbiAgICAgICAgICA8c3BhbiBjbGFzcz1cImZvbnQtYm9sZCB0ZXh0LWJhc2VcIj57KHN0cmVhbWVyLnN0cmVhbWluZ19ob3Vyc19wZXJfd2VlayB8fCAwKS50b0ZpeGVkKDEpfTwvc3Bhbj4g7Iuc6rCEPC90ZD5cbiAgICA8L3RyPlxuICAgIDx0cj5cbiAgICAgICAgPHRkIGNsYXNzPVwidy0xIGJnLWdyZWVuLTQwMFwiPiA8L3RkPlxuICAgICAgICA8dGQgY2xhc3M9XCJ0ZXh0LWxlZnQgcC0xXCI+67Cp7Iah7Iuc6rCE64yAPC90ZD5cbiAgICAgICAgPHRkIGNsYXNzPVwicGwtNiB0ZXh0LWdyZWVuLTQwMFwiPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwicHItMlwiPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJmb250LWJvbGQgdGV4dC1iYXNlXCI+e01hdGguZmxvb3Ioc3RyZWFtaW5nX3N0YXJ0X3RpbWUvMzYwMCl9PC9zcGFuPuyLnCBcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZm9udC1ib2xkIHRleHQtYmFzZVwiPntNYXRoLmZsb29yKHN0cmVhbWluZ19zdGFydF90aW1lJTM2MDAvNjApfTwvc3Bhbj7rtoQgXG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cInRleHQtZ3JheS02MDBcIj4gKMKxeyhzdHJlYW1pbmdfc3RhcnRfdGltZV9zdGQvMzYwMCkudG9GaXhlZCgxKX3si5zqsIQpIDwvc3Bhbj4gXG4gICAgICAgICAgICB+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cImZvbnQtYm9sZCB0ZXh0LWJhc2VcIj57TWF0aC5mbG9vcihzdHJlYW1pbmdfZW5kX3RpbWUvMzYwMCl9PC9zcGFuPuyLnCBcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZm9udC1ib2xkIHRleHQtYmFzZVwiPntNYXRoLmZsb29yKHN0cmVhbWluZ19lbmRfdGltZSUzNjAwLzYwKX08L3NwYW4+67aEXG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cInRleHQtZ3JheS02MDBcIj4gKMKxeyhzdHJlYW1pbmdfZW5kX3RpbWVfc3RkLzM2MDApLnRvRml4ZWQoMSl97Iuc6rCEKSA8L3NwYW4+IFxuICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgPC90ZD5cbiAgICA8L3RyPlxuICAgIDx0cj5cbiAgICAgICAgPHRkIGNsYXNzPVwidy0xIGJnLXRlYWwtNDAwXCI+IDwvdGQ+XG4gICAgICAgIDx0ZCBjbGFzcz1cInRleHQtbGVmdCBwLTFcIj7so7zrsKnshqHsi5zqsIQ8L3RkPlxuICAgICAgICA8dGQgY2xhc3M9XCJwbC02IHRleHQtdGVhbC00MDBcIj5cbiAgICAgICAgICB7I2VhY2ggbWVhbl9zdHJlYW1pbmdfdGltZV9yYW5nZXMgYXMgcmFuZ2V9XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cInByLTJcIj5cbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJmb250LWJvbGQgdGV4dC1iYXNlXCI+e01hdGguZmxvb3IocmFuZ2VbMF0vMzYwMCl9PC9zcGFuPuyLnCBcbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJmb250LWJvbGQgdGV4dC1iYXNlXCI+e01hdGguZmxvb3IocmFuZ2VbMF0lMzYwMC82MCl9PC9zcGFuPuu2hCB+IFxuICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImZvbnQtYm9sZCB0ZXh0LWJhc2VcIj57TWF0aC5mbG9vcihyYW5nZVsxXS8zNjAwKX08L3NwYW4+7IucIFxuICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImZvbnQtYm9sZCB0ZXh0LWJhc2VcIj57TWF0aC5mbG9vcihyYW5nZVsxXSUzNjAwLzYwKX08L3NwYW4+67aEXG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgey9lYWNofVxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwidGV4dC1ncmF5LTYwMFwiPiBcbiAgICAgICAgICAgICh7KG1lYW5fc3RyZWFtaW5nX3RpbWVfcmVsaWFiaWxpdHkgKiAxMDApLnRvRml4ZWQoMCl9JSDtmZXrpaApXG4gICAgICAgICAgPC9zcGFuPiBcbiAgICAgICAgPC90ZD5cbiAgICA8L3RyPlxuICAgIDwhLS08dHI+XG4gICAgICAgIDx0ZCBjbGFzcz1cInRleHQtcmlnaHRcIj7rsKnshqHrtoTsgrDrj4Q8L3RkPlxuICAgICAgICA8dGQgY2xhc3M9XCJwbC02IGZvbnQtYm9sZCB0ZXh0LWJhc2VcIj57KHN0cmVhbWluZ190aW1lX3Jhbmdlc192YXJpYW5jZSAqIDEwMCkudG9GaXhlZCgxKX0lPC90ZD5cbiAgICA8L3RyPi0tPlxuICA8L3RhYmxlPlxuPC9kaXY+XG5cbjxkaXYgY2xhc3M9XCJmbGV4IGZsZXgtY29sIGl0ZW1zLWNlbnRlciBtLWF1dG8gY29udGFpbmVyXCI+XG4gIDxkaXYgY2xhc3M9XCJmbGV4IG1kOmZsZXgtcm93IGZsZXgtY29sIHctZnVsbCBpdGVtcy1zdHJldGNoIGZsZXgtd3JhcCBtdC04XCI+XG4gICAgPGRpdiBjbGFzcz1cImZsZXggZmxleC1jb2wgbWQ6dy0xLzIgdy1mdWxsIG1kOnByLTJcIj5cbiAgICAgIDxQYW5lbCBjbGFzcz1cInctZnVsbFwiPlxuICAgICAgICA8aDIgc2xvdD1cInRpdGxlXCIgY2xhc3M9XCJpbmxpbmUtYmxvY2sgbWQ6Zm9udC1iYXNlIGZvbnQtMnhsXCI+IOyLnOyyreyekCDsnKDsgqzrj4Q8L2gyPlxuICAgICAgICA8ZGl2IHNsb3Q9XCJjb250ZW50c1wiIGNsYXNzPVwiXCI+XG4gICAgICAgICAgPE5ldHdvcmsgXG4gICAgICAgICAgICB7c3RyZWFtZXJ9XG4gICAgICAgICAgICBub2Rlcz17Wy4uLnNpbWlsYXJfc3RyZWFtZXJzX3RvcDEwLCBzdHJlYW1lcl19IFxuICAgICAgICAgICAgZWRnZXM9e3NpbWlsYXJfc3RyZWFtZXJzX3RvcDEwLm1hcChzID0+ICh7ZnJvbTogc3RyZWFtZXIuaWQsIHRvOiBzLmlkLCBsZW5ndGg6IE1hdGgubWF4KDAuMSwgMS0ocy5zaW1pbGFyaXR5KnMuc2ltaWxhcml0eSoxMCkpLCBzdHJlbmd0aDogcy5zaW1pbGFyaXR5KnMuc2ltaWxhcml0eSoxMDB9KSl9XG4gICAgICAgICAgICBjbGFzcz1cInctZnVsbCBwLTZcIlxuICAgICAgICAgICAgb25yZW5kZXJlZD17KCk9PnswICYmIGxvYWRfdGltZWxpbmUoKX19XG4gICAgICAgICAgICBsZXQ6bm9kZT17bm9kZX0+XG4gICAgICAgICAgICA8YSBjbGFzcz1cImZsZXggZmxleC1jb2wgdy0xMCBtZDp3LTE2IGZsZXgtd3JhcCBpdGVtcy1jZW50ZXJcIiBocmVmPVwiL3N0cmVhbWVyL3tub2RlLmlkfVwiPlxuICAgICAgICAgICAgICA8aW1nIGNsYXNzPVwidy0xMCBoLTEwIG1kOnctMTYgbWQ6aC0xNiByb3VuZGVkLWZ1bGwgYmctd2hpdGUgYm9yZGVyIGJvcmRlci1ncmF5LTYwMFwiIHNyYz1cIntub2RlLnByb2ZpbGVfaW1hZ2VfdXJsfVwiIGFydD1cIu2UhOuhnO2VhCDsgqzsp4RcIiAvPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZmxleCBmbGV4LWNvbCBmbGV4LXdyYXAgaXRlbXMtY2VudGVyXCI+IFxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibWQ6dGV4dC1zbSB0ZXh0LXhzXCI+IHtub2RlLm5hbWV9IDwvc3Bhbj5cbiAgICAgICAgICAgICAgICB7I2lmIG5vZGUuc2ltaWxhcml0eX0gPHNwYW4gY2xhc3M9XCJ0ZXh0LXhzIHRleHQtZ3JheS02MDAgdHJhY2tpbmctd2lkZXJcIj4gKHsobm9kZS5zaW1pbGFyaXR5KjEwMCkudG9GaXhlZCgxKX0lKSA8L3NwYW4+IHsvaWZ9XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9hPlxuICAgICAgICAgIDwvTmV0d29yaz5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiZmxleCBmbGV4LXJvdyBmbGV4LXdyYXAgdy1mdWxsXCI+XG4gICAgICAgICAgeyNlYWNoIHNpbWlsYXJfc3RyZWFtZXJzLnNsaWNlKDEwKSBhcyBub2RlfVxuICAgICAgICAgICAgPGEgY2xhc3M9XCJmbGV4IGZsZXgtY29sIHctMS81IGZsZXgtd3JhcCBpdGVtcy1jZW50ZXIgbXktMlwiIGhyZWY9XCIvc3RyZWFtZXIve25vZGUuaWR9XCI+XG4gICAgICAgICAgICAgIDxpbWcgY2xhc3M9XCJ3LTEwIGgtMTAgbWQ6dy0xNiBtZDpoLTE2IHJvdW5kZWQtZnVsbCBiZy13aGl0ZSBib3JkZXIgYm9yZGVyLWdyYXktNjAwXCIgc3JjPVwie25vZGUucHJvZmlsZV9pbWFnZV91cmx9XCIgYXJ0PVwi7ZSE66Gc7ZWEIOyCrOynhFwiIC8+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmbGV4IGZsZXgtY29sIGZsZXgtd3JhcCBpdGVtcy1jZW50ZXJcIj4gXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJtZDp0ZXh0LXNtIHRleHQteHNcIj4ge25vZGUubmFtZX0gPC9zcGFuPlxuICAgICAgICAgICAgICAgIHsjaWYgbm9kZS5zaW1pbGFyaXR5fSA8c3BhbiBjbGFzcz1cInRleHQteHMgdGV4dC1ncmF5LTYwMCB0cmFja2luZy13aWRlclwiPiAoeyhub2RlLnNpbWlsYXJpdHkqMTAwKS50b0ZpeGVkKDEpfSUpIDwvc3Bhbj4gey9pZn1cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2E+XG4gICAgICAgICAgey9lYWNofVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJ3LWZ1bGwgcHktMyBib3JkZXItdFwiIG9uOmNsaWNrPXtlPT5BUEkuc2ltaWxhcl9zdHJlYW1lcnMoc3RyZWFtZXIuaWQsIHNpbWlsYXJfc3RyZWFtZXJzLmxlbmd0aCkudGhlbihyZXMgPT4gc2ltaWxhcl9zdHJlYW1lcnMgPSBbLi4uc2ltaWxhcl9zdHJlYW1lcnMsIC4uLnJlc10pfT5cbiAgICAgICAgICAgIOuNlCDrs7TquLBcbiAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L1BhbmVsPlxuICAgICAgPGRpdiBjbGFzcz1cImZsZXggbWQ6ZmxleC1yb3cgZmxleC1jb2xcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImZsZXggZmxleC1jb2wgdy1mdWxsIG1kOnctMS8yXCI+XG4gICAgICAgICAgPFBhbmVsIGNsYXNzPVwidy1mdWxsXCI+XG4gICAgICAgICAgICA8aDIgc2xvdD1cInRpdGxlXCIgY2xhc3M9XCJpbmxpbmUtYmxvY2sgbWQ6Zm9udC1iYXNlIGZvbnQtMnhsXCI+IOuwqeyGoSDri6zroKU8L2gyPlxuICAgICAgICAgICAgPGRpdiBzbG90PVwiY29udGVudHNcIiBjbGFzcz1cImgtZnVsbFwiPlxuICAgICAgICAgICAgICB7I2VhY2ggbW9udGhfb2Zmc2V0cyBhcyBtb250aF9vZmZzZXQsIGkgKG1vbnRoX29mZnNldCl9XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwci00XCI+XG4gICAgICAgICAgICAgICAgPFN0cmVhbUNhbGVuZGFySGVhdG1hcCBcbiAgICAgICAgICAgICAgICAgIGNsYXNzPVwidy1mdWxsIGgtZnVsbFwiIFxuICAgICAgICAgICAgICAgICAge21vbnRoX29mZnNldH1cbiAgICAgICAgICAgICAgICAgIGlzX2hlYWQ9e2k9PTB9XG4gICAgICAgICAgICAgICAgICBzdHJlYW1lcj17c3RyZWFtZXJ9IC8+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICB7L2VhY2h9XG4gICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJ3LWZ1bGwgcHktMyBib3JkZXItdCBtdC0yXCIgb246Y2xpY2s9e2U9Pm1vbnRoX29mZnNldHMgPSBbbW9udGhfb2Zmc2V0c1swXS0xLCAuLi5tb250aF9vZmZzZXRzXX0+IOuNlCDrs7TquLAgPC9idXR0b24+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L1BhbmVsPlxuICAgICAgICAgIDxQYW5lbCBjbGFzcz1cInctZnVsbFwiPlxuICAgICAgICAgICAgPGgyIHNsb3Q9XCJ0aXRsZVwiIGNsYXNzPVwiaW5saW5lLWJsb2NrIG1kOmZvbnQtYmFzZSBmb250LTJ4bFwiPiDrsKnshqEg7KO86riwIDwvaDI+XG4gICAgICAgICAgICA8ZGl2IHNsb3Q9XCJjb250ZW50c1wiIGNsYXNzPVwiaC1mdWxsXCI+XG4gICAgICAgICAgICAgIDxTdHJlYW1TcGlyYWwgXG4gICAgICAgICAgICAgICAgYmluZDptZWFuX3N0cmVhbWluZ190aW1lX3Jhbmdlcz17bWVhbl9zdHJlYW1pbmdfdGltZV9yYW5nZXN9XG4gICAgICAgICAgICAgICAgYmluZDptZWFuX3N0cmVhbWluZ190aW1lX3JlbGlhYmlsaXR5PXttZWFuX3N0cmVhbWluZ190aW1lX3JlbGlhYmlsaXR5fVxuICAgICAgICAgICAgICAgIGJpbmQ6c3RyZWFtaW5nX3RpbWVfcmFuZ2VzX3ZhcmlhbmNlPXtzdHJlYW1pbmdfdGltZV9yYW5nZXNfdmFyaWFuY2V9XG4gICAgICAgICAgICAgICAgYmluZDp0b3RhbF9zdHJlYW1pbmdfdGltZV9yYXRpbz17dG90YWxfc3RyZWFtaW5nX3RpbWVfcmF0aW99XG4gICAgICAgICAgICAgICAgYmluZDpzdHJlYW1pbmdfc3RhcnRfdGltZT17c3RyZWFtaW5nX3N0YXJ0X3RpbWV9XG4gICAgICAgICAgICAgICAgYmluZDpzdHJlYW1pbmdfc3RhcnRfdGltZV9zdGQ9e3N0cmVhbWluZ19zdGFydF90aW1lX3N0ZH1cbiAgICAgICAgICAgICAgICBiaW5kOnN0cmVhbWluZ19lbmRfdGltZT17c3RyZWFtaW5nX2VuZF90aW1lfVxuICAgICAgICAgICAgICAgIGJpbmQ6c3RyZWFtaW5nX2VuZF90aW1lX3N0ZD17c3RyZWFtaW5nX2VuZF90aW1lX3N0ZH1cbiAgICAgICAgICAgICAgICBjbGFzcz1cInctZnVsbCBoLWZ1bGwgLW10LTRcIiBcbiAgICAgICAgICAgICAgICBzdHJlYW1lcj17c3RyZWFtZXJ9Lz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvUGFuZWw+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiZmxleCBmbGV4LWNvbCB3LWZ1bGwgbWQ6dy0xLzJcIj5cbiAgICAgICAgICA8UGFuZWwgY2xhc3M9XCJ3LWZ1bGxcIj5cbiAgICAgICAgICAgIDxoMiBzbG90PVwidGl0bGVcIiBjbGFzcz1cImlubGluZS1ibG9ja1wiPiDqtazrj4XsnpAg67mE7JyoIDwvaDI+XG4gICAgICAgICAgICA8ZGl2IHNsb3Q9XCJjb250ZW50c1wiIGNsYXNzPVwidy1mdWxsIHAtMiBoLWZ1bGxcIj5cbiAgICAgICAgICAgICAgPFN1YnNjcmliZXJEaXN0cmlidXRpb24gc3RyZWFtZXJfaWQ9e3N0cmVhbWVyLmlkfS8+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L1BhbmVsPlxuICAgICAgICAgIDxQYW5lbCBjbGFzcz1cInctZnVsbFwiPlxuICAgICAgICAgICAgPGgyIHNsb3Q9XCJ0aXRsZVwiIGNsYXNzPVwiaW5saW5lLWJsb2NrXCI+IOq1rOuPheyekCDssYTtjIUg67mE7JyoIDwvaDI+XG4gICAgICAgICAgICA8ZGl2IHNsb3Q9XCJjb250ZW50c1wiIGNsYXNzPVwibWQ6dy1mdWxsIHctNDggcC00IGgtZnVsbCBtLWF1dG9cIj5cbiAgICAgICAgICAgICAgPGRpdiBcbiAgICAgICAgICAgICAgICBjbGFzcz1cInJvdW5kZWQtZnVsbCBpbmxpbmUtYmxvY2sgdy1mdWxsXCJcbiAgICAgICAgICAgICAgICBzdHlsZT1cImJhY2tncm91bmQ6IHJhZGlhbC1ncmFkaWVudCh3aGl0ZSA2MCUsIHRyYW5zcGFyZW50IDYxJSksIGNvbmljLWdyYWRpZW50KCNDREE4QzcgMCUge3N0cmVhbWVyLmF2ZXJhZ2Vfc3Vic2NyaWJlcl9jaGF0X3JhdGlvKjEwMH0lLCAjZTJlOGYwIHtzdHJlYW1lci5hdmVyYWdlX3N1YnNjcmliZXJfY2hhdF9yYXRpbyoxMDB9JSAxMDAlKTsgcGFkZGluZy1ib3R0b206IDEwMCU7XCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImFic29sdXRlIHRleHQtM3hsIGZvbnQtYm9sZCB0ZXh0LXByaW1hcnktNjAwXCIgc3R5bGU9XCJsZWZ0OiA1MCU7IHRvcDogNTAlOyB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTtcIj4gXG4gICAgICAgICAgICAgICAgICB7KHN0cmVhbWVyLmF2ZXJhZ2Vfc3Vic2NyaWJlcl9jaGF0X3JhdGlvKjEwMCkudG9GaXhlZCgwKX0lXG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9QYW5lbD5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiZmxleCBmbGV4LWNvbCB3LWZ1bGwgbWQ6dy0xLzIgbWQ6cGwtMlwiPlxuICAgICAgPFBhbmVsIGNsYXNzPVwidy1mdWxsXCI+XG4gICAgICAgIDxoMiBzbG90PVwidGl0bGVcIiBjbGFzcz1cImlubGluZS1ibG9ja1wiPiDstZzqt7wg67Cp7IahIOyxhO2MhSDtgqTsm4zrk5wgPC9oMj5cbiAgICAgICAgPGRpdiBzbG90PVwiY29udGVudHNcIiBjbGFzcz1cInctZnVsbCBwLTIgaC1mdWxsXCI+XG4gICAgICAgICAgPEtleXdvcmRDbG91ZCBzdHJlYW1lcl9pZD17c3RyZWFtZXIuaWR9Lz5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L1BhbmVsPlxuICAgICAgPFBhbmVsIGNsYXNzPVwidy1mdWxsXCI+XG4gICAgICAgIDxoMiBzbG90PVwidGl0bGVcIiBjbGFzcz1cImlubGluZS1ibG9ja1wiPiDrjJPquIAgPC9oMj5cbiAgICAgICAgPGRpdiBzbG90PVwiY29udGVudHNcIiBjbGFzcz1cInctZnVsbCBwLTJcIj5cbiAgICAgICAgICA8Q29tbWVudHMgc3RyZWFtZXJfaWQ9e3N0cmVhbWVyLmlkfS8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9QYW5lbD5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG5cbiAgPFBhbmVsIGNsYXNzPVwidy1mdWxsXCI+XG4gICAgPGgyIHNsb3Q9XCJ0aXRsZVwiIGNsYXNzPVwiaW5saW5lLWJsb2NrIG1kOmZvbnQtYmFzZSBmb250LTJ4bFwiPiDrsKnshqEg7YOA7J6E65287J24IDwvaDI+XG4gICAgPGRpdiBzbG90PVwiY29udGVudHNcIiBjbGFzcz1cInctZnVsbFwiPlxuICAgICAgeyNlYWNoIHRpbWVsaW5lcyBhcyBkYXlzX2FnbyAoXCJcIiArIHN0cmVhbWVyLmlkICsgXCItXCIgKyBkYXlzX2Fnbyl9XG4gICAgICAgIDxUaW1lbGluZTIge3N0cmVhbWVyfSB7ZGF5c19hZ299IGhlYWRlcj17ZGF5c19hZ289PT0wfS8+XG4gICAgICB7OmVsc2V9IFxuICAgICAgICA8ZGl2IGNsYXNzPVwidy1mdWxsIGgtNjQgc3Bpbm5lclwiLz4gXG4gICAgICB7L2VhY2h9XG4gICAgICA8YnV0dG9uIG9uOmNsaWNrPXtsb2FkX3RpbWVsaW5lfSBjbGFzcz1cInctZnVsbCBib3JkZXItdCBwLTJcIj7rjZQg67O06riwPC9idXR0b24+XG4gICAgPC9kaXY+XG4gIDwvUGFuZWw+XG48L2Rpdj5cblxuXG48c2NyaXB0PlxuICBpbXBvcnQgeyBvbk1vdW50IH0gZnJvbSBcInN2ZWx0ZVwiO1xuICBpbXBvcnQgeyBmYUV4dGVybmFsTGlua0FsdCB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYUV4dGVybmFsTGlua0FsdCdcblx0aW1wb3J0IFBhbmVsIGZyb20gXCIuLi8uLi9jb21wb25lbnRzL1BhbmVsLnN2ZWx0ZVwiOyBcblx0aW1wb3J0IE5ldHdvcmsgZnJvbSBcIi4uLy4uL2NvbXBvbmVudHMvTmV0d29yay5zdmVsdGVcIjsgXG5cdGltcG9ydCBUaW1lbGluZTIgZnJvbSBcIi4uLy4uL2NvbXBvbmVudHMvVGltZWxpbmUyLnN2ZWx0ZVwiOyBcblx0aW1wb3J0IFN0cmVhbVNwaXJhbCBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy9TdHJlYW1TcGlyYWwuc3ZlbHRlXCI7IFxuXHRpbXBvcnQgQ29tbWVudHMgZnJvbSBcIi4uLy4uL2NvbXBvbmVudHMvQ29tbWVudHMuc3ZlbHRlXCI7IFxuXHRpbXBvcnQgS2V5d29yZENsb3VkIGZyb20gXCIuLi8uLi9jb21wb25lbnRzL0tleXdvcmRDbG91ZC5zdmVsdGVcIjsgXG5cdGltcG9ydCBTdWJzY3JpYmVyRGlzdHJpYnV0aW9uIGZyb20gXCIuLi8uLi9jb21wb25lbnRzL1N1YnNjcmliZXJEaXN0cmlidXRpb24uc3ZlbHRlXCI7IFxuXHRpbXBvcnQgQmFkZ2VzIGZyb20gXCIuLi8uLi9jb21wb25lbnRzL0JhZGdlcy5zdmVsdGVcIjsgXG5cdGltcG9ydCBHYW1lQmFkZ2VzIGZyb20gXCIuLi8uLi9jb21wb25lbnRzL0dhbWVCYWRnZXMuc3ZlbHRlXCI7IFxuXHRpbXBvcnQgU3RyZWFtQ2FsZW5kYXJIZWF0bWFwIGZyb20gXCIuLi8uLi9jb21wb25lbnRzL1N0cmVhbUNhbGVuZGFySGVhdG1hcC5zdmVsdGVcIjsgXG4gIGltcG9ydCB7IGZsaXAgfSBmcm9tIFwic3ZlbHRlL2FuaW1hdGVcIjtcblxuICBleHBvcnQgbGV0IHN0cmVhbWVyO1xuICBleHBvcnQgbGV0IHNpbWlsYXJfc3RyZWFtZXJzO1xuICBleHBvcnQgbGV0IHNpbWlsYXJfc3RyZWFtZXJzX3RvcDEwO1xuICBleHBvcnQgbGV0IG1lYW5fc3RyZWFtaW5nX3RpbWVfcmFuZ2VzID0gW107XG4gIGV4cG9ydCBsZXQgbWVhbl9zdHJlYW1pbmdfdGltZV9yZWxpYWJpbGl0eSA9IDAuMDtcbiAgZXhwb3J0IGxldCBzdHJlYW1pbmdfdGltZV9yYW5nZXNfdmFyaWFuY2UgPSAwLjA7XG4gIGV4cG9ydCBsZXQgdG90YWxfc3RyZWFtaW5nX3RpbWVfcmF0aW8gPSAwLjA7XG4gIGV4cG9ydCBsZXQgc3RyZWFtaW5nX3N0YXJ0X3RpbWUgPSAwLjA7XG4gIGV4cG9ydCBsZXQgc3RyZWFtaW5nX3N0YXJ0X3RpbWVfc3RkID0gMC4wO1xuICBleHBvcnQgbGV0IHN0cmVhbWluZ19lbmRfdGltZSA9IDAuMDtcbiAgZXhwb3J0IGxldCBzdHJlYW1pbmdfZW5kX3RpbWVfc3RkID0gMC4wO1xuXG4gIGxldCB0aW1lbGluZXMgPSBbXTtcbiAgbGV0IGxhc3Rfc3RyZWFtZXIgPSBzdHJlYW1lcjtcbiAgJDoge1xuICAgIGlmKGxhc3Rfc3RyZWFtZXIgIT0gc3RyZWFtZXIpe1xuICAgICAgdGltZWxpbmVzICA9IFtdO1xuICAgICAgbGFzdF9zdHJlYW1lciA9IHN0cmVhbWVyO1xuICAgICAgbG9hZF90aW1lbGluZSgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGxvYWRfdGltZWxpbmUoKSB7XG4gICAgaWYodGltZWxpbmVzLmxlbmd0aCl7XG4gICAgICBmb3IobGV0IGk9MDsgaTw3OyArK2kpXG4gICAgICAgIHRpbWVsaW5lcy5wdXNoKHRpbWVsaW5lc1t0aW1lbGluZXMubGVuZ3RoLTFdKzEpXG4gICAgICB0aW1lbGluZXMgPSB0aW1lbGluZXM7XG4gICAgfVxuICAgIGVsc2VcbiAgICAgIHRpbWVsaW5lcyA9IFswLDEsMiwzLDQsNSw2XVxuICB9XG4gIGxvYWRfdGltZWxpbmUoKTtcblxuXG4gIGxldCBtb250aF9vZmZzZXRzID0gWy0xLCAwXTtcbjwvc2NyaXB0PlxuIiwiPGRpdiBjbGFzcz1cIm1vZGFsXCIgYmluZDp0aGlzPXtlbH0gb246a2V5ZG93bj17b25rZXlkb3dufSBvbjptb3VzZWRvd249e29ubW91c2Vkb3dufSBvbjp0b3VjaHN0YXJ0PXtvbnRvdWNoc3RhcnR9PlxuICA8ZGl2IGNsYXNzPVwicmVsYXRpdmUgY29udGFpbmVyXCIgYmluZDp0aGlzPXtpbm5lcl9lbH0+XG4gICAgPGJ1dHRvbiBjbGFzcz1cImFic29sdXRlIHJpZ2h0LTAgdG9wLTAgYmctYmxhY2sgdGV4dC13aGl0ZSBvcGFjaXR5LTc1IHctNlwiIG9uOmNsaWNrPXtvbmNsaWNrfT5YPC9idXR0b24+XG4gICAgPHNsb3Q+PC9zbG90PlxuICA8L2Rpdj5cbjwvZGl2PlxuXG48c3R5bGU+XG4gIC5tb2RhbCB7XG4gICAgcG9zaXRpb246IGZpeGVkO1xuICAgIHotaW5kZXg6IDUwMDA7XG4gICAgdG9wOiAwO1xuICAgIGhlaWdodDogMTAwdmg7XG4gICAgd2lkdGg6IDEwMHZ3O1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBvcGFjaXR5OiAwO1xuICAgIGJhY2tncm91bmQtY29sb3I6ICMwMDAwMDBkZDtcbiAgICB2aXNpYmlsaXR5OiBoaWRkZW47XG4gICAgdHJhbnNpdGlvbjogdmlzaWJpbGl0eSAwcywgb3BhY2l0eSAwLjI1cyBlYXNlLW91dDtcbiAgfVxuICA6Z2xvYmFsKC5tb2RhbC5zaG93KSB7XG4gICAgdmlzaWJpbGl0eTogdmlzaWJsZTtcbiAgICBvcGFjaXR5OiAxLjA7XG4gIH1cbiAgLmNvbnRhaW5lciB7XG4gICAgd2lkdGg6IG1heC1jb250ZW50O1xuICAgIG1heC13aWR0aDogMTAwdnc7XG4gIH1cbjwvc3R5bGU+XG5cbjxzY3JpcHQgY29udGV4dD1cIm1vZHVsZVwiPlxuICBsZXQgZWxlbWVudHMgPSB7fSxcbiAgICAgIG5leHRfaWQgPSAwO1xuICBleHBvcnQgZnVuY3Rpb24gc2hvdyhpZCkge1xuICAgIGVsZW1lbnRzW2lkXS5jbGFzc0xpc3QuYWRkKFwic2hvd1wiKTtcbiAgfVxuICBleHBvcnQgZnVuY3Rpb24gaGlkZShpZCkge1xuICAgIGVsZW1lbnRzW2lkXS5jbGFzc0xpc3QucmVtb3ZlKFwic2hvd1wiKTtcbiAgfVxuPC9zY3JpcHQ+XG5cbjxzY3JpcHQ+XG5cdGltcG9ydCB7IG9uTW91bnQsIG9uRGVzdHJveSB9IGZyb20gJ3N2ZWx0ZSc7XG4gIGxldCBpZCA9IG5leHRfaWQrKztcbiAgbGV0IGVsLCBpbm5lcl9lbDtcbiAgZnVuY3Rpb24gb250b3VjaHN0YXJ0KGUpe1xuICAgIGUucGFnZVggPSBlLnRvdWNoZXNbMF0ucGFnZVg7XG4gICAgZS5wYWdlWSA9IGUudG91Y2hlc1swXS5wYWdlWTtcbiAgICByZXR1cm4gb25tb3VzZWRvd24oZSk7XG4gIH1cbiAgZnVuY3Rpb24gb25tb3VzZWRvd24oZSl7XG4gICAgbGV0IHggPSBlLnBhZ2VYLFxuICAgICAgeSA9IGUucGFnZVksXG4gICAgICByID0gaW5uZXJfZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgY29uc29sZS5sb2coeCwgci54LCByLndpZHRoKVxuICAgIGlmKHggPCByLnggfHwgeCA+IHIueCArIHIud2lkdGggfHwgeSA8IHIueSB8fCB5ID4gci55K3IuaGVpZ2h0KVxuICAgICAgaGlkZShpZCk7XG4gIH1cbiAgZnVuY3Rpb24gb25jbGljayhlKXtcbiAgICBoaWRlKGlkKTtcbiAgfVxuICBmdW5jdGlvbiBvbmtleWRvd24oZSl7XG4gICAgaWYoZS5rZXlDb2RlID09IDI3KXtcbiAgICAgIGhpZGUoaWQpO1xuICAgIH1cbiAgfVxuICBvbk1vdW50KGFzeW5jICgpPT57XG4gICAgZWxlbWVudHNbaWRdID0gZWw7XG4gIH0pO1xuICBvbkRlc3Ryb3koKCk9PntcbiAgICBlbGVtZW50c1tpZF0gPSB1bmRlZmluZWQ7XG4gIH0pO1xuPC9zY3JpcHQ+XG4iLCIndXNlIHN0cmljdCc7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHByZWZpeCA9ICdmYXMnO1xudmFyIGljb25OYW1lID0gJ21vdXNlJztcbnZhciB3aWR0aCA9IDM4NDtcbnZhciBoZWlnaHQgPSA1MTI7XG52YXIgbGlnYXR1cmVzID0gW107XG52YXIgdW5pY29kZSA9ICdmOGNjJztcbnZhciBzdmdQYXRoRGF0YSA9ICdNMCAzNTJhMTYwIDE2MCAwIDAgMCAxNjAgMTYwaDY0YTE2MCAxNjAgMCAwIDAgMTYwLTE2MFYyMjRIMHpNMTc2IDBoLTE2QTE2MCAxNjAgMCAwIDAgMCAxNjB2MzJoMTc2em00OCAwaC0xNnYxOTJoMTc2di0zMkExNjAgMTYwIDAgMCAwIDIyNCAweic7XG5cbmV4cG9ydHMuZGVmaW5pdGlvbiA9IHtcbiAgcHJlZml4OiBwcmVmaXgsXG4gIGljb25OYW1lOiBpY29uTmFtZSxcbiAgaWNvbjogW1xuICAgIHdpZHRoLFxuICAgIGhlaWdodCxcbiAgICBsaWdhdHVyZXMsXG4gICAgdW5pY29kZSxcbiAgICBzdmdQYXRoRGF0YVxuICBdfTtcblxuZXhwb3J0cy5mYU1vdXNlID0gZXhwb3J0cy5kZWZpbml0aW9uO1xuZXhwb3J0cy5wcmVmaXggPSBwcmVmaXg7XG5leHBvcnRzLmljb25OYW1lID0gaWNvbk5hbWU7XG5leHBvcnRzLndpZHRoID0gd2lkdGg7XG5leHBvcnRzLmhlaWdodCA9IGhlaWdodDtcbmV4cG9ydHMubGlnYXR1cmVzID0gbGlnYXR1cmVzO1xuZXhwb3J0cy51bmljb2RlID0gdW5pY29kZTtcbmV4cG9ydHMuc3ZnUGF0aERhdGEgPSBzdmdQYXRoRGF0YTsiLCIndXNlIHN0cmljdCc7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHByZWZpeCA9ICdmYXMnO1xudmFyIGljb25OYW1lID0gJ21vYmlsZS1hbHQnO1xudmFyIHdpZHRoID0gMzIwO1xudmFyIGhlaWdodCA9IDUxMjtcbnZhciBsaWdhdHVyZXMgPSBbXTtcbnZhciB1bmljb2RlID0gJ2YzY2QnO1xudmFyIHN2Z1BhdGhEYXRhID0gJ00yNzIgMEg0OEMyMS41IDAgMCAyMS41IDAgNDh2NDE2YzAgMjYuNSAyMS41IDQ4IDQ4IDQ4aDIyNGMyNi41IDAgNDgtMjEuNSA0OC00OFY0OGMwLTI2LjUtMjEuNS00OC00OC00OHpNMTYwIDQ4MGMtMTcuNyAwLTMyLTE0LjMtMzItMzJzMTQuMy0zMiAzMi0zMiAzMiAxNC4zIDMyIDMyLTE0LjMgMzItMzIgMzJ6bTExMi0xMDhjMCA2LjYtNS40IDEyLTEyIDEySDYwYy02LjYgMC0xMi01LjQtMTItMTJWNjBjMC02LjYgNS40LTEyIDEyLTEyaDIwMGM2LjYgMCAxMiA1LjQgMTIgMTJ2MzEyeic7XG5cbmV4cG9ydHMuZGVmaW5pdGlvbiA9IHtcbiAgcHJlZml4OiBwcmVmaXgsXG4gIGljb25OYW1lOiBpY29uTmFtZSxcbiAgaWNvbjogW1xuICAgIHdpZHRoLFxuICAgIGhlaWdodCxcbiAgICBsaWdhdHVyZXMsXG4gICAgdW5pY29kZSxcbiAgICBzdmdQYXRoRGF0YVxuICBdfTtcblxuZXhwb3J0cy5mYU1vYmlsZUFsdCA9IGV4cG9ydHMuZGVmaW5pdGlvbjtcbmV4cG9ydHMucHJlZml4ID0gcHJlZml4O1xuZXhwb3J0cy5pY29uTmFtZSA9IGljb25OYW1lO1xuZXhwb3J0cy53aWR0aCA9IHdpZHRoO1xuZXhwb3J0cy5oZWlnaHQgPSBoZWlnaHQ7XG5leHBvcnRzLmxpZ2F0dXJlcyA9IGxpZ2F0dXJlcztcbmV4cG9ydHMudW5pY29kZSA9IHVuaWNvZGU7XG5leHBvcnRzLnN2Z1BhdGhEYXRhID0gc3ZnUGF0aERhdGE7IiwiPHN2ZWx0ZTpoZWFkPlxuXHQ8dGl0bGU+7Yq47IiYZ2cgLSDsiqTtirjrpqzrqLgg7KeA64+EPC90aXRsZT5cbjwvc3ZlbHRlOmhlYWQ+XG5cbjxNb2RhbD5cbiAgPGRpdiBjbGFzcz1cInAtNiBmbGV4IGZsZXgtY29sIGJnLWdyYXktMjAwIHRleHQtZ3JheS02MDBcIj5cbiAgICA8ZGl2IGNsYXNzPVwicHQtMlwiPiDsobDsnpHrspUgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cInRleHQtc20gcGwtMlwiPlxuICAgICAgPGRpdj5cbiAgICAgICAgPHN2ZyBhcmVhLWhpZGRlbj1cInRydWVcIiByb2xlPVwiaW1nXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAge2ZhTW91c2UuaWNvblswXX0ge2ZhTW91c2UuaWNvblsxXX1cIiBjbGFzcz1cInctMyBoLTMgbXItMSBvdmVyZmxvdy12aXNpYmxlIGlubGluZS1ibG9ja1wiPlxuICAgICAgICAgIDxwYXRoIGZpbGw9XCJjdXJyZW50Q29sb3JcIiBkPVwie2ZhTW91c2UuaWNvbls0XX1cIi8+XG4gICAgICAgIDwvc3ZnPlxuICAgICAgICDtnKAv65Oc656Y6re4L+uNlOu4lO2BtOumrVxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2PlxuICAgICAgICA8c3ZnIGFyZWEtaGlkZGVuPVwidHJ1ZVwiIHJvbGU9XCJpbWdcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCB7ZmFNb2JpbGVBbHQuaWNvblswXX0ge2ZhTW9iaWxlQWx0Lmljb25bMV19XCIgY2xhc3M9XCJ3LTMgaC0zIG1yLTEgb3ZlcmZsb3ctdmlzaWJsZSBpbmxpbmUtYmxvY2tcIj5cbiAgICAgICAgICA8cGF0aCBmaWxsPVwiY3VycmVudENvbG9yXCIgZD1cIntmYU1vYmlsZUFsdC5pY29uWzRdfVwiLz5cbiAgICAgICAgPC9zdmc+XG4gICAgICAgIO2ZleuMgCzrk5zrnpjqt7jsoJzsiqTsspgv642U67iU7YOtXG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwicHQtMlwiPiDqsJzsmpQgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cInRleHQtc20gcGwtMlwiPlxuICAgICAgPGRpdj5cbiAgICAgICAgLSDtg4Dsnbwg7ZWcIOy5uOydgCDsiqTtirjrpqzrqLgg7ZWcIOuqheydhCDsnZjrr7jtlanri4jri6QuXG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXY+XG4gICAgICAgIC0g6rGw66as6rCAIOqwgOq5jOyatCDsiqTtirjrpqzrqLjripQg7ISc66GcIOu5hOyKt+2VoCDtmZXrpaDsnbQg64aS7Iq164uI64ukLlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2PlxuICAgICAgICAtIOycoOydmOuvuO2VmOqyjCDruYTsirftlZwg7Iqk7Yq466as66i4IOynkeuLqOydgCDqta3qsIDroZwg6rWs67aE7KeA7Ja0IO2RnOyLnOuQqeuLiOuLpC5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdj5cbiAgICAgICAgLSDqta3qsIDsnZgg7J2066aE7J2AIOq1reqwgCDsoITssrTsnZgg7ISx6rKp7J2EIOqwgOyepSDsnpgg64KY7YOA64K064qUIOyKpO2KuOumrOuouOydmCDsnbTrpoTsnLzroZwg7ZGc7Iuc65Cp64uI64ukLlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2PlxuICAgICAgICAtIOq1reqwgOyXkCDtj6ztlajrkJjsp4Ag7JWK7J2AIOyKpO2KuOumrOuouOuKlCDrtoTsn4Hsp4Dsl63snbTqsbDrgpgg64+E7Iuc6rWt6rCA7J6F64uI64ukLlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2PlxuICAgICAgICAtIOyngOuPhOydmCDtmJXtg5zsmYAg7Iqk7Yq466as66i465Ok7J2YIOychOy5mOuKlCDqs4TsgrAg6rKw6rO87JeQIOuUsOudvCDsiJjsi5zroZwg67CU64CU7IiY7J6I7Iq164uI64ukLlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cInB0LTJcIj4g67KU66GAIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJ0ZXh0LXNtIHBsLTJcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJhbGlnbi1taWRkbGUgbWItMVwiPlxuICAgICAgICB7I2lmIHNwcml0ZXMudG93bl9uaWdodH0gXG4gICAgICAgICAgPGltZyBzcmM9XCJ7c3ByaXRlcy50b3duX25pZ2h0LnNyY31cIiBjbGFzcz1cInctNiBoLTYgaW5saW5lXCIvPlxuICAgICAgICB7L2lmfVxuICAgICAgICAxMDDrlLDrpqxcbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImFsaWduLW1pZGRsZSBtYi0xXCI+XG4gICAgICAgIHsjaWYgc3ByaXRlcy5jYXN0bGVfbmlnaHR9IFxuICAgICAgICAgIDxpbWcgc3JjPVwie3Nwcml0ZXMuY2FzdGxlX25pZ2h0LnNyY31cIiBjbGFzcz1cInctNiBoLTYgaW5saW5lXCIvPlxuICAgICAgICB7L2lmfVxuICAgICAgICAxMDAw65Sw66asXG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJhbGlnbi1taWRkbGUgbWItMVwiPlxuICAgICAgICB7I2lmIHNwcml0ZXMuY2l0eV9uaWdodH0gXG4gICAgICAgICAgPGltZyBzcmM9XCJ7c3ByaXRlcy5jaXR5X25pZ2h0LnNyY31cIiBjbGFzcz1cInctNiBoLTYgaW5saW5lXCIvPlxuICAgICAgICB7L2lmfVxuICAgICAgICAxMDAwMOuUsOumrFxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwibWItMVwiPlxuICAgICAgICB7I2lmIHNwcml0ZXMudG93biAmJiBzcHJpdGVzLmNhc3RsZSAmJiBzcHJpdGVzLmNpdHl9IFxuICAgICAgICAgIDxpbWcgc3JjPVwie3Nwcml0ZXMudG93bi5zcmN9XCIgY2xhc3M9XCJ3LTYgaC02IGlubGluZVwiLz5cbiAgICAgICAgICA8aW1nIHNyYz1cIntzcHJpdGVzLmNhc3RsZS5zcmN9XCIgY2xhc3M9XCJ3LTYgaC02IGlubGluZVwiLz5cbiAgICAgICAgICA8aW1nIHNyYz1cIntzcHJpdGVzLmNpdHkuc3JjfVwiIGNsYXNzPVwidy02IGgtNiBpbmxpbmVcIi8+XG4gICAgICAgIHsvaWZ9XG4gICAgICAgIOuwqeyGoeykkVxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiYWxpZ24tbWlkZGxlIG1iLTFcIj5cbiAgICAgICAgeyNpZiBzcHJpdGVzLmZpcmV9IFxuICAgICAgICAgIDxpbWcgc3JjPVwie3Nwcml0ZXMuZmlyZS5zcmN9XCIgY2xhc3M9XCJ3LTYgaC02IGlubGluZVwiLz5cbiAgICAgICAgey9pZn1cbiAgICAgICAg7LGE7YyF7LC9IOu2iOuCqFxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuICBcbjwvTW9kYWw+XG5cbjxkaXZcbiAgICBvbjptb3VzZWRvd249e2NhbnZhc19tb3VzZV9kb3dufVxuICAgIG9uOm1vdXNldXA9e2NhbnZhc19tb3VzZV91cH1cbiAgICBvbjptb3VzZW1vdmU9e2NhbnZhc19tb3VzZV9tb3ZlfVxuICAgIG9uOm1vdXNlbGVhdmU9e2NhbnZhc19tb3VzZV9vdXR9XG4gICAgb246d2hlZWw9e2NhbnZhc19zY3JvbGx9XG4gICAgb246dG91Y2hzdGFydD17Y2FudmFzX3RvdWNoX3N0YXJ0fVxuICAgIG9uOnRvdWNobW92ZT17Y2FudmFzX3RvdWNoX21vdmV9XG4gID5cbjxkaXYgY2xhc3M9XCJmaXhlZCBwLTYgdGV4dC13aGl0ZSBtZDpibG9jayBmbGV4IGZsZXgtcm93IGp1c3RpZnktYmV0d2VlbiB3LWZ1bGwgbWQ6dy1hdXRvXCI+XG4gIDxkaXY+XG4gICAgPGgyIGNsYXNzPVwiaW5saW5lLWJsb2NrIHRleHQtMnhsIG1kOnRleHQtM3hsXCI+XG4gICAgICDsiqTtirjrpqzrqLgg7KeA64+EXG4gICAgPC9oMj5cbiAgICA8VGlwIGNsaWNrPXt0aXBfY2xpY2t9PlxuICAgICAgPHNwYW4gc2xvdD1cInRpcFwiPiDtgbTrpq3tlZjsl6wg7ISk66qF7Je06riwPC9zcGFuPlxuICAgIDwvVGlwPlxuICA8L2Rpdj4gXG4gIDxTdHJlYW1lckF1dG9Db21wbGV0ZSBzdHJlYW1lcnM9e3N0cmVhbWVyc30gYmluZDpzZWxlY3RlZD17c2VhcmNofSBwbGFjZWhvbGRlcj1cIuyngOuPhOyXkOyEnCDssL7quLBcIiBpbnB1dF9jbGFzcz1cImJnLXRyYW5zcGFyZW50IGJvcmRlciBib3JkZXItd2hpdGUgdGV4dC1zbSBtZDp3LTQwIHctMzIgcC0yIG1kOm10LTQgcGxhY2Vob2xkZXItd2hpdGUgZm9jdXM6YmctZ3JheS02MDAgdHJhbnNpdGlvbi1hbGwgdHJhbnNpdGlvbi0xMDBcIiBpY29uPWZhbHNlIGlkPVwic3RyZWFtZXItbWFwXCIvPlxuPC9kaXY+XG48ZGl2IGNsYXNzPVwib3ZlcmZsb3cteC1hdXRvIGNhbnZhcy1jb250YWluZXJcIj5cbiAgPGNhbnZhcyBiaW5kOnRoaXM9e2NhbnZhc30gY2xhc3M9XCJ3LWZ1bGwgaC1mdWxsIGNhbnZhc1wiXG4gID4gPC9jYW52YXM+XG48L2Rpdj5cbjwvZGl2PlxuPCEtLVxuPGRpdiBjbGFzcz1cInctZnVsbCBmbGV4IGZsZXgtcm93IGZsZXgtd3JhcCBpdGVtcy1jZW50ZXJcIj5cbiAgPGRpdiBjbGFzcz1cInAtMiBmbGV4IGZsZXgtcm93IGZsZXgtd3JhcCBpdGVtcy1jZW50ZXJcIj5cbiAgICA8ZGl2IGNsYXNzPVwicHgtMlwiPjxpbnB1dCB0eXBlPWNoZWNrYm94IGJpbmQ6Y2hlY2tlZD17Y2x1c3RlcmluZ19zaG93fSBpZD1cImJvcmRlclwiIG5hbWU9XCJib3JkZXJcIj4gPGxhYmVsIGZvcj1cImJvcmRlclwiPuq1reqyvTwvbGFiZWw+PC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cInB4LTJcIj48aW5wdXQgdHlwZT1jaGVja2JveCBiaW5kOmNoZWNrZWQ9e3BvdHJhaXRfc2hvd30gaWQ9XCJwb3RyYWl0XCIgbmFtZT1cInBvdHJhaXRcIj4gPGxhYmVsIGZvcj1cInBvdHJhaXRcIj7stIjsg4HtmZQ8L2xhYmVsPjwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJweC0yXCI+PGlucHV0IHR5cGU9Y2hlY2tib3ggYmluZDpjaGVja2VkPXtuYW1lX3Nob3d9IGlkPVwibmFtZVwiIG5hbWU9XCJuYW1lXCI+IDxsYWJlbCBmb3I9XCJuYW1lXCI+7J2066aEPC9sYWJlbD48L2Rpdj5cbiAgPC9kaXY+XG48L2Rpdj4tLT5cblxuPHN0eWxlPlxuLmNhbnZhcy1jb250YWluZXIge1xuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiBjYWxjKDEwMHZoIC0gMi44NXJlbSk7XG4gIG92ZXJmbG93LXk6IGhpZGRlbjtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzJEMzM0MztcbiAgLypib3gtc2hhZG93OiAwcHggMHB4IDFyZW0gIzAwMDsqL1xufVxuLmNhbnZhcyB7XG4gIC8qYmFja2dyb3VuZDogdXJsKC93YXRlcnBhdHRlcm4uanBnKTtcbiAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcbiAgYmFja2dyb3VuZC1zaXplOiAxMDAlIDEwMCU7Ki9cbn1cbjwvc3R5bGU+XG5cbjxzY3JpcHQgY29udGV4dD1cIm1vZHVsZVwiPlxuXHRpbXBvcnQgeyBBUEkgfSBmcm9tICcuLi8uLi9hcGkuanMnO1xuICBleHBvcnQgYXN5bmMgZnVuY3Rpb24gcHJlbG9hZChwYWdlLCBzZXNzaW9uKSB7XG4gICAgbGV0IHN0cmVhbWVycyA9IGF3YWl0IEFQSS5zdHJlYW1lcl9tYXAuY2FsbCh0aGlzKTtcbiAgICBsZXQgaW50ZXJlc3Rfc3RyZWFtZXIgPSBzdHJlYW1lcnMuZmluZChzID0+IHMuaWQgPT0gcGFnZS5xdWVyeS5pbnRlcmVzdF9zdHJlYW1lcl9pZCk7XG4gICAgcmV0dXJuIHsgc3RyZWFtZXJzLCBpbnRlcmVzdF9zdHJlYW1lciB9O1xuICB9XG48L3NjcmlwdD5cblxuPHNjcmlwdD5cbmltcG9ydCB7IG9uTW91bnQsIG9uRGVzdHJveSB9IGZyb20gXCJzdmVsdGVcIjtcbmltcG9ydCBTdHJlYW1lckF1dG9Db21wbGV0ZSBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy9TdHJlYW1lckF1dG9Db21wbGV0ZS5zdmVsdGVcIjtcbmltcG9ydCBQYW5lbCBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy9QYW5lbC5zdmVsdGVcIjtcbmltcG9ydCBNb2RhbCwgeyBzaG93LCBoaWRlIH0gZnJvbSBcIi4uLy4uL2NvbXBvbmVudHMvTW9kYWwuc3ZlbHRlXCI7IFxuaW1wb3J0IHsgZmFNb3VzZSB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYU1vdXNlJ1xuaW1wb3J0IHsgZmFNb2JpbGVBbHQgfSBmcm9tICdAZm9ydGF3ZXNvbWUvZnJlZS1zb2xpZC1zdmctaWNvbnMvZmFNb2JpbGVBbHQnXG5pbXBvcnQgVGlwIGZyb20gJy4uLy4uL2NvbXBvbmVudHMvVGlwLnN2ZWx0ZSc7XG5cbmV4cG9ydCBsZXQgc3RyZWFtZXJzO1xuZXhwb3J0IGxldCBpbnRlcmVzdF9zdHJlYW1lcjtcblxuZnVuY3Rpb24gdGlwX2NsaWNrKCkge1xuICBzaG93KDApO1xufVxuXG5jb25zdCBDT0xPUlMgPSB7XG4gIHNlYTogXCIjMkQzMzQzXCIsXG4gIGxhbmQ6IFwiIzgwNkE1Q1wiLFxuICBsb2FkOiBcIiMzYzNjMzNcIixcbiAgaGlnaGxpZ2h0OiBcIiNkNGFmMzdcIixcbn1cblxubGV0IGNhbnZhcztcblxubGV0IHNlYXJjaCA9IGludGVyZXN0X3N0cmVhbWVyO1xubGV0IGNsdXN0ZXJpbmdfc2hvdyA9IHRydWU7XG5sZXQgcG90cmFpdF9zaG93ID0gdHJ1ZTtcbmxldCBuYW1lX3Nob3cgPSB0cnVlO1xuXG5sZXQgbiA9IE1hdGgubWF4KC4uLnN0cmVhbWVycy5tYXAocz0+cy54KSwgLi4uc3RyZWFtZXJzLm1hcChzPT5zLnkpKSArIDE7XG5sZXQgY2FtZXJhID0gaW50ZXJlc3Rfc3RyZWFtZXI/IFxuICBbaW50ZXJlc3Rfc3RyZWFtZXIueC9uLCBpbnRlcmVzdF9zdHJlYW1lci55L24sIDEuNV0gOiBcbiAgWzAuNSwgMC40NSwgMC44NV07XG5sZXQgcGllY2Vfc2l6ZSA9IFs2NCwgNjRdO1xuXG5sZXQgbGFzdF9wb2ludGVyX3g9bnVsbCwgbGFzdF9wb2ludGVyX3k9bnVsbCwgY2xpY2tpbmcgPSBmYWxzZTtcbmZ1bmN0aW9uIGNhbnZhc19tb3VzZV9kb3duKGUpIHtcbiAgbGFzdF9wb2ludGVyX3ggPSBlLnBhZ2VYIC0gY2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLng7XG4gIGxhc3RfcG9pbnRlcl95ID0gZS5wYWdlWSAtIGNhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS55O1xuICBjbGlja2luZyA9IHRydWU7XG4gIC8vcmV0dXJuIGUucHJldmVudERlZmF1bHQoKSAmJiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGNhbnZhc19tb3VzZV91cChlKSB7XG4gIGNsaWNraW5nID0gZmFsc2U7XG4gIC8vcmV0dXJuIGUucHJldmVudERlZmF1bHQoKSAmJiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGNhbnZhc19tb3VzZV9vdXQoZSkge1xuICBjbGlja2luZyA9IGZhbHNlO1xufVxuZnVuY3Rpb24gY2FudmFzX21vdXNlX21vdmUoZSkge1xuICBsZXQgZHggPSAoZS5wYWdlWCAtIGNhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS54KSAtIGxhc3RfcG9pbnRlcl94LFxuICAgICAgZHkgPSAoZS5wYWdlWSAtIGNhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS55KSAtIGxhc3RfcG9pbnRlcl95O1xuICBsYXN0X3BvaW50ZXJfeCArPSBkeDtcbiAgbGFzdF9wb2ludGVyX3kgKz0gZHk7XG4gIGlmKCFjbGlja2luZykgcmV0dXJuO1xuICBjYW1lcmFbMF0gLT0gZHggLyAobiAqIHBpZWNlX3NpemVbMF0qY2FtZXJhWzJdKTtcbiAgY2FtZXJhWzFdIC09IGR5IC8gKG4gKiBwaWVjZV9zaXplWzFdKmNhbWVyYVsyXSk7XG59XG5mdW5jdGlvbiBjYW52YXNfc2Nyb2xsKGUpIHtcbiAgbGV0IGRlbHRhID0gZS53aGVlbERlbHRhID8gZS53aGVlbERlbHRhIDogZS5kZXRhaWwgPyAtIGUuZGV0YWlsIDogMDtcbiAgY2FtZXJhWzJdICs9IGRlbHRhIC8gY2FudmFzLndpZHRoO1xuICByZXR1cm4gZS5wcmV2ZW50RGVmYXVsdCgpICYmIGZhbHNlO1xufVxuZnVuY3Rpb24gZ2V0X2Rpc3RhbmNlKGUpIHtcbiAgdmFyIGRpZmZYID0gZS50b3VjaGVzWzBdLmNsaWVudFggLSBlLnRvdWNoZXNbMV0uY2xpZW50WDtcbiAgdmFyIGRpZmZZID0gZS50b3VjaGVzWzBdLmNsaWVudFkgLSBlLnRvdWNoZXNbMV0uY2xpZW50WTtcbiAgcmV0dXJuIE1hdGguc3FydChkaWZmWCAqIGRpZmZYICsgZGlmZlkgKiBkaWZmWSk7IC8vIFB5dGhhZ29yZWFuIHRoZW9yZW1cbn1cblxuZnVuY3Rpb24gY2FudmFzX3RvdWNoX3N0YXJ0KGUpIHtcbiAgbGV0IHJlY3QgPSBjYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIGlmIChlLnRvdWNoZXMubGVuZ3RoID4gMSkgeyAvLyBpZiBtdWx0aXBsZSB0b3VjaGVzIChwaW5jaCB6b29taW5nKVxuICAgIGZpbmdlcl9kaXN0ID0gZ2V0X2Rpc3RhbmNlKGUpOyAvLyBTYXZlIGN1cnJlbnQgZmluZ2VyIGRpc3RhbmNlXG4gIH0gLy8gRWxzZSBqdXN0IG1vdmluZyBhcm91bmRcbiAgbGFzdF9wb2ludGVyX3ggPSBlLnRvdWNoZXNbMF0uY2xpZW50WCAtIHJlY3QueDsgLy8gU2F2ZSBmaW5nZXIgcG9zaXRpb25cbiAgbGFzdF9wb2ludGVyX3kgPSBlLnRvdWNoZXNbMF0uY2xpZW50WSAtIHJlY3QueTsgLy9cbiAgaWYgKFwiYWN0aXZlRWxlbWVudFwiIGluIGRvY3VtZW50KVxuICAgIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQuYmx1cigpO1xufTtcblxubGV0IGZpbmdlcl9kaXN0PTA7XG5mdW5jdGlvbiBjYW52YXNfdG91Y2hfbW92ZShlKSB7XG4gIGUucHJldmVudERlZmF1bHQoKTsgLy8gU3RvcCB0aGUgd2luZG93IGZyb20gbW92aW5nXG4gIGxldCByZWN0ID0gY2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICBpZiAoZmluZ2VyX2Rpc3QgJiYgZS50b3VjaGVzLmxlbmd0aCA+IDEpIHsgLy8gSWYgcGluY2gtem9vbWluZ1xuICAgIGxldCBuZXdfZmluZ2VyX2Rpc3QgPSBnZXRfZGlzdGFuY2UoZSk7IC8vIEdldCBjdXJyZW50IGRpc3RhbmNlIGJldHdlZW4gZmluZ2Vyc1xuICAgIGlmKGZpbmdlcl9kaXN0KSBjYW1lcmFbMl0gPSBjYW1lcmFbMl0gKiBNYXRoLmFicyhuZXdfZmluZ2VyX2Rpc3QgLyBmaW5nZXJfZGlzdCk7IC8vIFpvb20gaXMgcHJvcG9ydGlvbmFsIHRvIGNoYW5nZVxuICAgIGZpbmdlcl9kaXN0ID0gbmV3X2Zpbmdlcl9kaXN0OyAvLyBTYXZlIGN1cnJlbnQgZGlzdGFuY2UgZm9yIG5leHQgdGltZVxuICB9IGVsc2UgaWYoIWZpbmdlcl9kaXN0KXsgXG4gICAgbGV0IGR4ID0gZS50b3VjaGVzWzBdLmNsaWVudFggLSBsYXN0X3BvaW50ZXJfeCAtIHJlY3QueCxcbiAgICAgICAgZHkgPSBlLnRvdWNoZXNbMF0uY2xpZW50WSAtIGxhc3RfcG9pbnRlcl95IC0gcmVjdC55O1xuICAgIGxhc3RfcG9pbnRlcl94ICs9IGR4O1xuICAgIGxhc3RfcG9pbnRlcl95ICs9IGR5O1xuICAgIGNhbWVyYVswXSAtPSBkeCAvIChuICogcGllY2Vfc2l6ZVswXSpjYW1lcmFbMl0pO1xuICAgIGNhbWVyYVsxXSAtPSBkeSAvIChuICogcGllY2Vfc2l6ZVsxXSpjYW1lcmFbMl0pO1xuICB9XG4gIHJldHVybiBlLnByZXZlbnREZWZhdWx0KCkgJiYgZmFsc2U7XG59O1xuXG5cbmxldCBzcHJpdGVzID0geyB9O1xuXG5sZXQgZnJhbWU7XG5cbm9uTW91bnQoYXN5bmMgKCk9PntcbiAgY29uc3QgeyBQYXR0ZXJucyB9ID0gKGF3YWl0IGltcG9ydChcIi4uLy4uL2NvbXBvbmVudHMvQ2FudmFzUGF0dGVybnMuanNcIikpO1xuICBzcHJpdGVzLmNpdHkgPSBuZXcgSW1hZ2UoKTtcbiAgc3ByaXRlcy5jaXR5LnNyYyA9IFwiL2NpdHlfb24ucG5nXCI7XG4gIHNwcml0ZXMuY2FzdGxlID0gbmV3IEltYWdlKCk7XG4gIHNwcml0ZXMuY2FzdGxlLnNyYyA9IFwiL2Nhc3RsZV9vbi5wbmdcIjtcbiAgc3ByaXRlcy50b3duID0gbmV3IEltYWdlKCk7XG4gIHNwcml0ZXMudG93bi5zcmMgPSBcIi90b3duX29uLnBuZ1wiO1xuICBzcHJpdGVzLmNpdHlfbmlnaHQgPSBuZXcgSW1hZ2UoKTtcbiAgc3ByaXRlcy5jaXR5X25pZ2h0LnNyYyA9IFwiL2NpdHlfb2ZmLnBuZ1wiO1xuICBzcHJpdGVzLmNhc3RsZV9uaWdodCA9IG5ldyBJbWFnZSgpO1xuICBzcHJpdGVzLmNhc3RsZV9uaWdodC5zcmMgPSBcIi9jYXN0bGVfb2ZmLnBuZ1wiO1xuICBzcHJpdGVzLnRvd25fbmlnaHQgPSBuZXcgSW1hZ2UoKTtcbiAgc3ByaXRlcy50b3duX25pZ2h0LnNyYyA9IFwiL3Rvd25fb2ZmLnBuZ1wiO1xuICBzcHJpdGVzLmZpcmUgPSBuZXcgSW1hZ2UoKTtcbiAgc3ByaXRlcy5maXJlLnNyYyA9IFwiL2ZpcmUucG5nXCI7XG4gIGxldCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xuICBjYW52YXMud2lkdGggPSBjYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGg7XG4gIGNhbnZhcy5oZWlnaHQgPSBjYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xuICAvL2NhbnZhcy5oZWlnaHQgPSBjYW52YXMud2lkdGg7Ly9jYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xuICBwaWVjZV9zaXplID0gW01hdGgubWluKGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCkgLyBuLCBNYXRoLm1pbihjYW52YXMuaGVpZ2h0LCBjYW52YXMud2lkdGgpIC8gbl07XG4gIGxldCBib3JkZXJfd2lkdGggPSA2O1xuICBsZXQgcmVwcmVzZW50b3Jfb2ZfY2x1c3RlciA9IFtdO1xuICBsZXQgY2x1c3Rlcl90b19zdHJlYW1lcnMgPSBbXTtcbiAgbGV0IHN0cmVhbWVyX21hdHJpeCA9IEFycmF5KG4pLmZpbGwoKS5tYXAoKCk9PkFycmF5KG4pLmZpbGwobnVsbCkpO1xuICBmb3IobGV0IHMgb2Ygc3RyZWFtZXJzKSB7XG4gICAgcy5pbWFnZSA9IG5ldyBJbWFnZSgpO1xuICAgIHN0cmVhbWVyX21hdHJpeFtzLnhdW3MueV0gPSBzO1xuICAgIGlmKHMuY2x1c3RlciA+PSAwKSB7XG4gICAgICBpZihjbHVzdGVyX3RvX3N0cmVhbWVyc1tzLmNsdXN0ZXJdID09IG51bGwpIFxuICAgICAgICBjbHVzdGVyX3RvX3N0cmVhbWVyc1tzLmNsdXN0ZXJdID0gW107XG4gICAgICBjbHVzdGVyX3RvX3N0cmVhbWVyc1tzLmNsdXN0ZXJdLnB1c2gocyk7XG4gICAgfVxuICB9XG4gIGZvcihsZXQgaSBpbiBjbHVzdGVyX3RvX3N0cmVhbWVycykge1xuICAgIGNsdXN0ZXJfdG9fc3RyZWFtZXJzW2ldLnNvcnQoKGEsIGIpID0+IGIucHJvYmFiaWxpdHkgLSBhLnByb2JhYmlsaXR5KTtcbiAgICByZXByZXNlbnRvcl9vZl9jbHVzdGVyW2ldID0gY2x1c3Rlcl90b19zdHJlYW1lcnNbaV1bMF07XG4gICAgcmVwcmVzZW50b3Jfb2ZfY2x1c3RlcltpXS5yZXByZXNlbnRhdGlvbl94ID0gY2x1c3Rlcl90b19zdHJlYW1lcnNbaV0ucmVkdWNlKChhLCBiKSA9PiBhICsgYi54LCAwKSAvIGNsdXN0ZXJfdG9fc3RyZWFtZXJzW2ldLmxlbmd0aDtcbiAgICByZXByZXNlbnRvcl9vZl9jbHVzdGVyW2ldLnJlcHJlc2VudGF0aW9uX3kgPSBjbHVzdGVyX3RvX3N0cmVhbWVyc1tpXS5yZWR1Y2UoKGEsIGIpID0+IGEgKyBiLnksIDApIC8gY2x1c3Rlcl90b19zdHJlYW1lcnNbaV0ubGVuZ3RoO1xuICB9XG4gIGZvcihsZXQgcyBvZiBzdHJlYW1lcnMpIHtcbiAgICBpZihzLmNsdXN0ZXIgPj0gMCAmJiAocy54LTEgPCAwIHx8IHN0cmVhbWVyX21hdHJpeFtzLngtMV1bcy55XSA9PSBudWxsIHx8IHN0cmVhbWVyX21hdHJpeFtzLngtMV1bcy55XS5jbHVzdGVyICE9IHMuY2x1c3RlcikpXG4gICAgICBzLmxlZnRfZWRnZSA9IHRydWU7XG4gICAgaWYocy5jbHVzdGVyID49IDAgJiYgKHMueCsxID49IHN0cmVhbWVyX21hdHJpeC5sZW5ndGggfHwgc3RyZWFtZXJfbWF0cml4W3MueCsxXVtzLnldID09IG51bGwgfHwgc3RyZWFtZXJfbWF0cml4W3MueCsxXVtzLnldLmNsdXN0ZXIgIT0gcy5jbHVzdGVyKSlcbiAgICAgIHMucmlnaHRfZWRnZSA9IHRydWU7XG4gICAgaWYocy5jbHVzdGVyID49IDAgJiYgKHMueS0xIDwgMCB8fCBzdHJlYW1lcl9tYXRyaXhbcy54XVtzLnktMV0gPT0gbnVsbCB8fCBzdHJlYW1lcl9tYXRyaXhbcy54XVtzLnktMV0uY2x1c3RlciAhPSBzLmNsdXN0ZXIpKVxuICAgICAgcy50b3BfZWRnZSA9IHRydWU7XG4gICAgaWYocy5jbHVzdGVyID49IDAgJiYgKHMueSsxID49IHN0cmVhbWVyX21hdHJpeC5sZW5ndGggfHwgc3RyZWFtZXJfbWF0cml4W3MueF1bcy55KzFdID09IG51bGwgfHwgc3RyZWFtZXJfbWF0cml4W3MueF1bcy55KzFdLmNsdXN0ZXIgIT0gcy5jbHVzdGVyKSlcbiAgICAgIHMuYm90dG9tX2VkZ2UgPSB0cnVlO1xuICB9XG4gIGxldCBmcmFtZV9pbmRleCA9IDA7XG4gIGN0eC50ZXh0QmFzZWxpbmUgPSBcInRvcFwiO1xuICBjdHgudGV4dEFsaWduID0gXCJjZW50ZXJcIjtcbiAgY3R4LmZvbnQgPSBcIjEycHggQXJpYWxcIjtcblxuICBsZXQgcHcsIHBoO1xuICBsZXQgdmlldztcblxuICBjYW52YXMub25kYmxjbGljayA9IGZ1bmN0aW9uKGUpe1xuICAgIGxldCB0YXJnZXQgPSAoc3RyZWFtZXJfbWF0cml4W01hdGguZmxvb3IoKGUucGFnZVggLSBjYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkueCArIHZpZXdbMF0pIC8gcHcpXSB8fCBbXSlbTWF0aC5mbG9vcigoZS5wYWdlWSAtIGNhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS55ICsgdmlld1sxXSkgLyBwaCldO1xuICAgIGlmKHRhcmdldClcbiAgICAgIGxvY2F0aW9uID0gYC9zdHJlYW1lci8ke3RhcmdldC5pZH1gO1xuICAgIHJldHVybiBlLnByZXZlbnREZWZhdWx0KCkgJiYgZmFsc2U7XG4gIH1cbiAgbGV0IHRpbWVyID0gbnVsbCwgbGFzdF90YXJnZXQ7XG4gIGxldCBjYW52YXNfdG91Y2hfZW5kID0gZnVuY3Rpb24oZSkge1xuICAgIGlmIChlLnRvdWNoZXMubGVuZ3RoID49IDEpIHJldHVybjtcbiAgICBmaW5nZXJfZGlzdCA9IDA7XG4gICAgbGV0IHRhcmdldCA9IChzdHJlYW1lcl9tYXRyaXhbTWF0aC5mbG9vcigobGFzdF9wb2ludGVyX3ggKyB2aWV3WzBdKSAvIHB3KV0gfHwgW10pW01hdGguZmxvb3IoKGxhc3RfcG9pbnRlcl95ICsgdmlld1sxXSkgLyBwaCldO1xuICAgIGlmKHRpbWVyID09IG51bGwpe1xuICAgICAgbGFzdF90YXJnZXQgPSB0YXJnZXQ7XG4gICAgICB0aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHRpbWVyID0gbnVsbDtcbiAgICAgICAgICBsYXN0X3RhcmdldCA9IG51bGw7XG4gICAgICB9LCAzMDApO1xuICAgIH1lbHNlIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgICB0aW1lciA9IG51bGw7XG4gICAgICBpZih0YXJnZXQgJiYgdGFyZ2V0ID09IGxhc3RfdGFyZ2V0KVxuICAgICAgICBsb2NhdGlvbiA9IGAvc3RyZWFtZXIvJHt0YXJnZXQuaWR9YDtcbiAgICAgIGVsc2Uge1xuICAgICAgICBsYXN0X3RhcmdldCA9IHRhcmdldDtcbiAgICAgICAgdGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRpbWVyID0gbnVsbDtcbiAgICAgICAgICAgIGxhc3RfdGFyZ2V0ID0gbnVsbDtcbiAgICAgICAgfSwgMzAwKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIGxldCBzZWFyY2hlZCA9IFtdO1xuICBjYW52YXMuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoZW5kXCIsIGNhbnZhc190b3VjaF9lbmQpO1xuICBjYW52YXMuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoY2FuY2VsXCIsIGNhbnZhc190b3VjaF9lbmQpO1xuICAoZnVuY3Rpb24gbG9vcCgpIHtcbiAgICBmcmFtZSA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShsb29wKTtcbiAgICBpZihzZWFyY2gpIHtcbiAgICAgIGNhbWVyYVswXSA9IHNlYXJjaC54L247XG4gICAgICBjYW1lcmFbMV0gPSBzZWFyY2gueS9uO1xuICAgICAgc2VhcmNoLmhpZ2hsaWdodCA9IHRydWU7XG4gICAgICBzZWFyY2hlZC5wdXNoKHNlYXJjaCk7XG4gICAgICBzZWFyY2ggPSBudWxsO1xuICAgIH1cbiAgICBjdHguY2xlYXJSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XG4gICAgcHcgPSBNYXRoLmNlaWwocGllY2Vfc2l6ZVswXSpjYW1lcmFbMl0pO1xuICAgIHBoID0gTWF0aC5jZWlsKHBpZWNlX3NpemVbMV0qY2FtZXJhWzJdKTtcbiAgICB2aWV3ID0gW3B3Km4qY2FtZXJhWzBdIC0gY2FudmFzLndpZHRoKjAuNSwgcGgqbipjYW1lcmFbMV0gLSBjYW52YXMuaGVpZ2h0KjAuNSwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0XTtcbiAgICBsZXQgdmlld194ID0gTWF0aC5mbG9vcih2aWV3WzBdL3B3KSwgXG4gICAgICAgIHZpZXdfeSA9IE1hdGguZmxvb3Iodmlld1sxXS9waCksXG4gICAgICAgIHZpZXdfeDIgPSBNYXRoLmNlaWwoKHZpZXdbMF0rdmlld1syXSkgLyBwdyksXG4gICAgICAgIHZpZXdfeTIgPSBNYXRoLmNlaWwoKHZpZXdbMV0rdmlld1szXSkgLyBwaCk7XG4gICAgYm9yZGVyX3dpZHRoID0gcHcvMTA7XG4gICAgY3R4LmZvbnQgPSBNYXRoLm1heChNYXRoLmZsb29yKHB3LzUpLCAxMikgKyBcInB4IEFyaWFsXCI7XG4gICAgbGV0IGhvdmVyZWQgPSAoc3RyZWFtZXJfbWF0cml4W01hdGguZmxvb3IoKGxhc3RfcG9pbnRlcl94ICsgdmlld1swXSkgLyBwdyldIHx8IFtdKVtNYXRoLmZsb29yKChsYXN0X3BvaW50ZXJfeSArIHZpZXdbMV0pIC8gcGgpXTtcbiAgICAvLyBab29tZWQgZW5vdWdoOiBwcmVzZW50IGFsbCBzdHJlYW1lcnNcbiAgICBjdHguc2F2ZSgpO1xuICAgIC8vY3R4LmZpbGxTdHlsZSA9IENPTE9SUy5zZWE7XG4gICAgLy9jdHguZmlsbFJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcbiAgICBjdHgucmVzdG9yZSgpO1xuICBcbiAgICBmb3IobGV0IHg9dmlld194OyB4PD12aWV3X3gyOyArK3gpe1xuICAgICAgZm9yKGxldCB5PXZpZXdfeTsgeTw9dmlld195MjsgKyt5KXtcbiAgICAgICAgbGV0IHB4ID0gTWF0aC5mbG9vcihwdyp4IC0gdmlld1swXSksIFxuICAgICAgICAgICAgcHkgPSBNYXRoLmZsb29yKHBoKnkgLSB2aWV3WzFdKTtcbiAgICAgICAgaWYoc3RyZWFtZXJfbWF0cml4W3hdID09IG51bGwgfHwgc3RyZWFtZXJfbWF0cml4W3hdW3ldID09IG51bGwpIHtcbiAgICAgICAgICBjdHguc2F2ZSgpXG4gICAgICAgICAgLy9jdHguZmlsbFN0eWxlID0gXCIjNzE4MDk2XCJcbiAgICAgICAgICAvL2N0eC5maWxsU3R5bGUgPSBcIiM0MTRhNGNcIlxuICAgICAgICAgIC8vY3R4LmZpbGxTdHlsZSA9IENPTE9SUy5zZWE7XG4gICAgICAgICAgLy9jdHguZmlsbFJlY3QocHgsIHB5LCBwdywgcGgpO1xuICAgICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHMgPSBzdHJlYW1lcl9tYXRyaXhbeF1beV07XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBDT0xPUlMubGFuZDtcbiAgICAgICAgY3R4LmZpbGxSZWN0KHB4LCBweSwgcHcsIHBoKTtcbiAgICAgICAgaWYocy5jbHVzdGVyID49IDApIHtcbiAgICAgICAgICBjdHguc2F2ZSgpXG4gICAgICAgICAgY3R4Lmdsb2JhbEFscGhhID0gMC41O1xuICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBQYXR0ZXJuc1tzLmNsdXN0ZXJdO1xuICAgICAgICAgIGN0eC5maWxsUmVjdChweCwgcHksIHB3LCBwaCk7XG4gICAgICAgICAgY3R4LnJlc3RvcmUoKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmKHB3ID49IDY0ICYmIHBoID49IDY0KSB7XG4gICAgICBmb3IobGV0IHg9dmlld194OyB4PD12aWV3X3gyOyArK3gpe1xuICAgICAgICBmb3IobGV0IHk9dmlld195OyB5PD12aWV3X3kyOyArK3kpe1xuICAgICAgICAgIGxldCBweCA9IE1hdGguZmxvb3IocHcqeCAtIHZpZXdbMF0pLCBcbiAgICAgICAgICAgICAgcHkgPSBNYXRoLmZsb29yKHBoKnkgLSB2aWV3WzFdKTtcbiAgICAgICAgICBpZihzdHJlYW1lcl9tYXRyaXhbeF0gPT0gbnVsbCB8fCBzdHJlYW1lcl9tYXRyaXhbeF1beV0gPT0gbnVsbCl7XG4gICAgICAgICAgICBjdHguc2F2ZSgpXG4gICAgICAgICAgICAvL2N0eC5maWxsU3R5bGUgPSBcIiM3MTgwOTZcIlxuICAgICAgICAgICAgLy9jdHguZmlsbFN0eWxlID0gQ09MT1JTLnNlYTtcbiAgICAgICAgICAgIC8vICBjdHguZmlsbFJlY3QocHgsIHB5LCBwdywgcGgpO1xuICAgICAgICAgICAgY3R4LnJlc3RvcmUoKVxuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbGV0IHMgPSBzdHJlYW1lcl9tYXRyaXhbeF1beV07XG4gICAgICAgICAgaWYocG90cmFpdF9zaG93KXtcbiAgICAgICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgICAgICBpZihzLmltYWdlLnNyYyAmJiBzLmltYWdlLmNvbXBsZXRlICYmIHMuaW1hZ2UubmF0dXJhbFdpZHRoID4gMClcbiAgICAgICAgICAgICAgY3R4LmRyYXdJbWFnZShzLmltYWdlLCBweCwgcHksIHB3LCBwaCk7XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgaWYoIXMuaW1hZ2Uuc3JjKSBcbiAgICAgICAgICAgICAgICBzLmltYWdlLnNyYyA9IHMucHJvZmlsZV9pbWFnZV91cmw7XG4gICAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBcIiNDREE4QzdcIjtcbiAgICAgICAgICAgICAgY3R4LmZpbGxUZXh0KFwi66Gc65Sp7KSRXCIsIHB4ICsgcHcqMC41LCBweSk7IFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3R4LnJlc3RvcmUoKVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZihzLmhpZ2hsaWdodCkge1xuICAgICAgICAgICAgaWYocyA9PSBob3ZlcmVkKVxuICAgICAgICAgICAgICBzLmhpZ2hsaWdodCA9IGZhbHNlO1xuICAgICAgICAgICAgaWYoZnJhbWVfaW5kZXglMTAgPiA1KXtcbiAgICAgICAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgICAgICAgY3R4Lmdsb2JhbEFscGhhID0gMC41O1xuICAgICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gQ09MT1JTLmhpZ2hsaWdodDtcbiAgICAgICAgICAgICAgY3R4LmZpbGxSZWN0KHB4ICsgYm9yZGVyX3dpZHRoLCBweStib3JkZXJfd2lkdGgsIHB3IC0gMipib3JkZXJfd2lkdGgsIHBoIC0gMipib3JkZXJfd2lkdGgpO1xuICAgICAgICAgICAgICBjdHguZ2xvYmFsQWxwaGEgPSAxLjA7XG4gICAgICAgICAgICAgIGN0eC5yZXN0b3JlKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYobmFtZV9zaG93IHx8IGhvdmVyZWQgPT0gcyl7XG4gICAgICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICAgICAgbGV0IGZoID0gcGFyc2VJbnQoY3R4LmZvbnQpLFxuICAgICAgICAgICAgICAgIGZ3ID0gY3R4Lm1lYXN1cmVUZXh0KHMubmFtZSkud2lkdGgsXG4gICAgICAgICAgICAgICAgbCA9IE1hdGguY2VpbChmdy8ocHcgLSAyKmJvcmRlcl93aWR0aCkpLFxuICAgICAgICAgICAgICAgIHRleHRfcGllY2VfbGVuZ3RoID0gTWF0aC5mbG9vcihzLm5hbWUubGVuZ3RoIC8gbCk7XG4gICAgICAgICAgICBjdHguZ2xvYmFsQWxwaGEgPSAwLjc7XG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gXCIjZmZmXCI7XG4gICAgICAgICAgICBjdHguZmlsbFJlY3QocHggKyBib3JkZXJfd2lkdGgsIHB5K3BoIC0gYm9yZGVyX3dpZHRoIC0gZmgqbCwgcHcgLSAyKmJvcmRlcl93aWR0aCwgZmgqbCk7XG4gICAgICAgICAgICBjdHguZ2xvYmFsQWxwaGEgPSAxLjA7XG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gXCIjMDAwXCI7XG4gICAgICAgICAgICBmb3IobGV0IGk9MDsgaTxsLTE7ICsraSlcbiAgICAgICAgICAgICAgY3R4LmZpbGxUZXh0KHMubmFtZS5zdWJzdHIoaSp0ZXh0X3BpZWNlX2xlbmd0aCwgdGV4dF9waWVjZV9sZW5ndGgpLCBweCArIHB3KjAuNSwgcHkgKyBwaCAtIGJvcmRlcl93aWR0aCAtIGZoKmwgKyBpKmZoKTtcbiAgICAgICAgICAgIGN0eC5maWxsVGV4dChzLm5hbWUuc2xpY2UoKGwtMSkqdGV4dF9waWVjZV9sZW5ndGgpLCBweCtwdyowLjUsIHB5ICsgcGggLSBib3JkZXJfd2lkdGggLSBmaCk7XG4gICAgICAgICAgICAvL2N0eC5maWxsVGV4dChzLm5hbWUsIHB4ICsgcHcqMC41LCBweSArIHBoIC0gYm9yZGVyX3dpZHRoIC0gZmgpO1xuICAgICAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYocy5pc19zdHJlYW1pbmcpe1xuICAgICAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgIGN0eC5nbG9iYWxBbHBoYSA9IE1hdGguYWJzKE1hdGguc2luKGZyYW1lX2luZGV4LzIwKSk7XG4gICAgICAgICAgICBjdHguYXJjKHB4ICsgYm9yZGVyX3dpZHRoICsgcHcvMTUsIHB5ICsgYm9yZGVyX3dpZHRoICsgcGgvMTUsIHB3LzE1LTEsIDAsIDIgKiBNYXRoLlBJLCBmYWxzZSk7XG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gXCIjRkY0NTYwXCI7XG4gICAgICAgICAgICBjdHguZmlsbCgpO1xuICAgICAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZXtcbiAgICAgIGlmKHB3ID4gMzIgJiYgcGggPiAzMil7XG4gICAgICAgIGZvcihsZXQgcyBvZiByZXByZXNlbnRvcl9vZl9jbHVzdGVyKSB7XG4gICAgICAgICAgICBsZXQgcnggPSBwdypzLnJlcHJlc2VudGF0aW9uX3ggLSB2aWV3WzBdICsgcHcqMC41ICsgKGNhbWVyYVswXSAtIDAuNSkqcHcsXG4gICAgICAgICAgICAgICAgcnkgPSBwaCpzLnJlcHJlc2VudGF0aW9uX3kgLSB2aWV3WzFdICsgcGgqMC41ICsgKGNhbWVyYVsxXSAtIDAuNSkqcGg7XG4gICAgICAgICAgICBsZXQgcHggPSBwdypzLnggLSB2aWV3WzBdLCBcbiAgICAgICAgICAgICAgICBweSA9IHBoKnMueSAtIHZpZXdbMV07XG4gICAgICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICAgICAgY3R4Lmdsb2JhbEFscGhhID0gMS4wO1xuICAgICAgICAgICAgY3R4LnRleHRCYXNlbGluZSA9IFwibWlkZGxlXCI7XG4gICAgICAgICAgICBjdHgudGV4dEFsaWduID0gXCJjZW50ZXJcIjtcbiAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBcIndoaXRlXCI7XG4gICAgICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSBcImJsYWNrXCI7XG4gICAgICAgICAgICBjdHguZm9udCA9IFwiaXRhbGljIFwiICsgTWF0aC5tYXgoTWF0aC5mbG9vcihwdy8xLjUpLCAxMikgKyBcInB4IEFyaWFsXCI7XG4gICAgICAgICAgICBsZXQgZncgPSBjdHgubWVhc3VyZVRleHQocy5uYW1lKS53aWR0aCxcbiAgICAgICAgICAgICAgICBmaCA9IHBhcnNlSW50KGN0eC5mb250KTtcbiAgICAgICAgICAgIGN0eC5maWxsVGV4dChzLm5hbWUsIHJ4LCByeSk7XG4gICAgICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgICAgICB9XG4gICAgICAgIGZvcihsZXQgeD12aWV3X3g7IHg8PXZpZXdfeDI7ICsreCl7XG4gICAgICAgICAgZm9yKGxldCB5PXZpZXdfeTsgeTw9dmlld195MjsgKyt5KXtcbiAgICAgICAgICAgIGxldCBweCA9IE1hdGguZmxvb3IocHcqeCAtIHZpZXdbMF0pLCBcbiAgICAgICAgICAgICAgICBweSA9IE1hdGguZmxvb3IocGgqeSAtIHZpZXdbMV0pO1xuICAgICAgICAgICAgaWYoc3RyZWFtZXJfbWF0cml4W3hdID09IG51bGwgfHwgc3RyZWFtZXJfbWF0cml4W3hdW3ldID09IG51bGwpXG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgbGV0IHMgPSBzdHJlYW1lcl9tYXRyaXhbeF1beV07XG4gICAgICAgICAgICBpZighKHMgPT0gaG92ZXJlZCB8fCBzLmhpZ2hsaWdodCkpIHtcbiAgICAgICAgICAgICAgaWYocy5hdmVyYWdlX3ZpZXdlcl9jb3VudCA+PSAxMDAwMCkge1xuICAgICAgICAgICAgICAgIGlmKHMuaXNfc3RyZWFtaW5nKXtcbiAgICAgICAgICAgICAgICAgIGlmKHNwcml0ZXMuY2l0eS5jb21wbGV0ZSlcbiAgICAgICAgICAgICAgICAgICAgY3R4LmRyYXdJbWFnZShzcHJpdGVzLmNpdHksIHB4LCBweSwgcHcsIHBoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICBpZihzcHJpdGVzLmNpdHlfbmlnaHQuY29tcGxldGUpXG4gICAgICAgICAgICAgICAgICAgIGN0eC5kcmF3SW1hZ2Uoc3ByaXRlcy5jaXR5X25pZ2h0LCBweCwgcHksIHB3LCBwaCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGVsc2UgaWYocy5hdmVyYWdlX3ZpZXdlcl9jb3VudCA+PSAxMDAwKSB7XG4gICAgICAgICAgICAgICAgaWYocy5pc19zdHJlYW1pbmcpe1xuICAgICAgICAgICAgICAgICAgaWYoc3ByaXRlcy5jYXN0bGUuY29tcGxldGUpXG4gICAgICAgICAgICAgICAgICAgIGN0eC5kcmF3SW1hZ2Uoc3ByaXRlcy5jYXN0bGUsIHB4K3B3KjAuMiwgcHkrcGgqMC4yLCBwdyowLjYsIHBoKjAuNik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgaWYoc3ByaXRlcy5jYXN0bGVfbmlnaHQuY29tcGxldGUpXG4gICAgICAgICAgICAgICAgICAgIGN0eC5kcmF3SW1hZ2Uoc3ByaXRlcy5jYXN0bGVfbmlnaHQsIHB4K3B3KjAuMiwgcHkrcGgqMC4yLCBwdyowLjYsIHBoKjAuNik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGVsc2UgaWYocy5hdmVyYWdlX3ZpZXdlcl9jb3VudCA+PSAxMDApIHtcbiAgICAgICAgICAgICAgICBpZihzLmlzX3N0cmVhbWluZyl7XG4gICAgICAgICAgICAgICAgICBpZihzcHJpdGVzLnRvd24uY29tcGxldGUpXG4gICAgICAgICAgICAgICAgICAgIGN0eC5kcmF3SW1hZ2Uoc3ByaXRlcy50b3duLCBweCtwdyowLjIsIHB5K3BoKjAuMiwgcHcqMC42LCBwaCowLjYpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGlmKHNwcml0ZXMudG93bl9uaWdodC5jb21wbGV0ZSlcbiAgICAgICAgICAgICAgICAgICAgY3R4LmRyYXdJbWFnZShzcHJpdGVzLnRvd25fbmlnaHQsIHB4K3B3KjAuMiwgcHkrcGgqMC4yLCBwdyowLjYsIHBoKjAuNik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIC8qZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYocy5pc19zdHJlYW1pbmcpIHtcbiAgICAgICAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBcIiNmZmZlMDBcIjtcbiAgICAgICAgICAgICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgICAgICAgIGN0eC5hcmMocHggKyBwdyowLjUsIHB5ICsgcGgqMC41LCBwdyowLjA1LCAwLCBNYXRoLlBJKjIpO1xuICAgICAgICAgICAgICAgICAgY3R4LmZpbGwoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0qL1xuICAgICAgICAgICAgICBpZihzLmlzX3N0cmVhbWluZyAmJiBzLmNoYXR0aW5nX3NwZWVkID49IDUpe1xuICAgICAgICAgICAgICAgIGlmKHNwcml0ZXMuZmlyZS5jb21wbGV0ZSl7XG4gICAgICAgICAgICAgICAgICBjdHguZ2xvYmFsQWxwaGEgPSAwLjU7XG4gICAgICAgICAgICAgICAgICBjdHguZHJhd0ltYWdlKHNwcml0ZXMuZmlyZSwgcHggKyBwdyowLjIsIHB5K3BoKjAuMiwgcHcqMC42LCBwaCowLjYpO1xuICAgICAgICAgICAgICAgICAgY3R4Lmdsb2JhbEFscGhhID0gMS4wO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZighcy5pc19zdHJlYW1pbmcpe1xuICAgICAgICAgICAgICAgIGN0eC5nbG9iYWxBbHBoYSA9IDAuMztcbiAgICAgICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gXCIjMDAwXCI7XG4gICAgICAgICAgICAgICAgY3R4LmZpbGxSZWN0KHB4LCBweSwgcHcsIHBoKTtcbiAgICAgICAgICAgICAgICBjdHguZ2xvYmFsQWxwaGEgPSAxLjA7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmKGhvdmVyZWQpIHtcbiAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgbGV0IHMgPSBob3ZlcmVkO1xuICAgICAgICBsZXQgcHggPSBwdypzLnggLSB2aWV3WzBdLCBcbiAgICAgICAgICBweSA9IHBoKnMueSAtIHZpZXdbMV07XG4gICAgICAgIGlmKHMuaW1hZ2Uuc3JjICYmIHMuaW1hZ2UuY29tcGxldGUgJiYgcy5pbWFnZS5uYXR1cmFsV2lkdGggPiAwKVxuICAgICAgICAgIGN0eC5kcmF3SW1hZ2Uocy5pbWFnZSwgcHgsIHB5LCBwdywgcGgpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBpZighcy5pbWFnZS5zcmMpIFxuICAgICAgICAgICAgcy5pbWFnZS5zcmMgPSBzLnByb2ZpbGVfaW1hZ2VfdXJsO1xuICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBcIiNDREE4QzdcIjtcbiAgICAgICAgICBjdHguZmlsbFRleHQoXCLroZzrlKnspJFcIiwgcHggKyBwdyowLjUsIHB5KTsgXG4gICAgICAgIH1cbiAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgIH1cbiAgICAgIGZvcihsZXQgaT0wLCBsPXNlYXJjaGVkLmxlbmd0aDsgaTxsOyArK2kpIHtcbiAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgbGV0IHMgPSBzZWFyY2hlZFtpXTtcbiAgICAgICAgbGV0IHB4ID0gcHcqcy54IC0gdmlld1swXSwgXG4gICAgICAgICAgcHkgPSBwaCpzLnkgLSB2aWV3WzFdO1xuICAgICAgICBpZihzLmltYWdlLnNyYyAmJiBzLmltYWdlLmNvbXBsZXRlICYmIHMuaW1hZ2UubmF0dXJhbFdpZHRoID4gMClcbiAgICAgICAgICBjdHguZHJhd0ltYWdlKHMuaW1hZ2UsIHB4LCBweSwgcHcsIHBoKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgaWYoIXMuaW1hZ2Uuc3JjKSBcbiAgICAgICAgICAgIHMuaW1hZ2Uuc3JjID0gcy5wcm9maWxlX2ltYWdlX3VybDtcbiAgICAgICAgICBjdHguZmlsbFN0eWxlID0gXCIjQ0RBOEM3XCI7XG4gICAgICAgICAgY3R4LmZpbGxUZXh0KFwi66Gc65Sp7KSRXCIsIHB4ICsgcHcqMC41LCBweSk7IFxuICAgICAgICB9XG4gICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICAgIGlmKHMgPT0gaG92ZXJlZCl7XG4gICAgICAgICAgc2VhcmNoZWQuc3BsaWNlKGksIDEpO1xuICAgICAgICAgIGkgLT0gMTtcbiAgICAgICAgICBsIC09IDE7XG4gICAgICAgICAgcy5oaWdobGlnaHQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZihmcmFtZV9pbmRleCUxMCA+IDUpe1xuICAgICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgICAgY3R4Lmdsb2JhbEFscGhhID0gMC41O1xuICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBcIiNkNGFmMzdcIjtcbiAgICAgICAgICBjdHguZmlsbFJlY3QocHggKyBib3JkZXJfd2lkdGgsIHB5K2JvcmRlcl93aWR0aCwgcHcgLSAyKmJvcmRlcl93aWR0aCwgcGggLSAyKmJvcmRlcl93aWR0aCk7XG4gICAgICAgICAgY3R4Lmdsb2JhbEFscGhhID0gMS4wO1xuICAgICAgICAgIGN0eC5yZXN0b3JlKClcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IobGV0IHg9dmlld194OyB4PD12aWV3X3gyOyArK3gpe1xuICAgICAgZm9yKGxldCB5PXZpZXdfeTsgeTw9dmlld195MjsgKyt5KXtcbiAgICAgICAgbGV0IHB4ID0gTWF0aC5mbG9vcihwdyp4IC0gdmlld1swXSksIFxuICAgICAgICAgICAgcHkgPSBNYXRoLmZsb29yKHBoKnkgLSB2aWV3WzFdKTtcbiAgICAgICAgaWYoc3RyZWFtZXJfbWF0cml4W3hdID09IG51bGwgfHwgc3RyZWFtZXJfbWF0cml4W3hdW3ldID09IG51bGwpXG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIGxldCBzID0gc3RyZWFtZXJfbWF0cml4W3hdW3ldO1xuICAgICAgICAvKlxuICAgICAgICBpZighcy5pc19zdHJlYW1pbmcpe1xuICAgICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgICAgY3R4Lmdsb2JhbEFscGhhID0gMC4yO1xuICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBcIiMwMDBcIjtcbiAgICAgICAgICBjdHguZmlsbFJlY3QocHgsIHB5LCBwdywgcGgpO1xuICAgICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICAgIH0gZWxzZXtcbiAgICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICAgIGN0eC5nbG9iYWxBbHBoYSA9IDAuMjtcbiAgICAgICAgICBjdHguZmlsbFN0eWxlID0gXCIjZmZmXCI7XG4gICAgICAgICAgY3R4LmZpbGxSZWN0KHB4LCBweSwgcHcsIHBoKTtcbiAgICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgICAgICB9Ki9cbiAgICAgICAgaWYoY2x1c3RlcmluZ19zaG93KSB7XG4gICAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgICBpZihob3ZlcmVkICYmIGhvdmVyZWQuY2x1c3RlciA9PSBzLmNsdXN0ZXIpIFxuICAgICAgICAgICAgY3R4Lmdsb2JhbEFscGhhID0gTWF0aC5hYnMoTWF0aC5zaW4oZnJhbWVfaW5kZXgvMjApKTtcbiAgICAgICAgICBjdHguZmlsbFN0eWxlID0gUGF0dGVybnNbcy5jbHVzdGVyXTtcbiAgICAgICAgICBpZihzLmxlZnRfZWRnZSl7XG4gICAgICAgICAgICBsZXQgeT1weSwgeTI9cHkrcGg7XG4gICAgICAgICAgICBpZighcy5ib3R0b21fZWRnZSlcbiAgICAgICAgICAgICAgeTIgKz0gYm9yZGVyX3dpZHRoO1xuICAgICAgICAgICAgaWYoIXMudG9wX2VkZ2UpXG4gICAgICAgICAgICAgIHkgLT0gYm9yZGVyX3dpZHRoO1xuICAgICAgICAgICAgY3R4LmZpbGxSZWN0KFxuICAgICAgICAgICAgICAgIHB4LFxuICAgICAgICAgICAgICAgIHksXG4gICAgICAgICAgICAgICAgYm9yZGVyX3dpZHRoLCB5Mi15KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYocy5yaWdodF9lZGdlKXtcbiAgICAgICAgICAgIGxldCB5PXB5LCB5Mj1weStwaDtcbiAgICAgICAgICAgIGlmKCFzLmJvdHRvbV9lZGdlKVxuICAgICAgICAgICAgICB5MiArPSBib3JkZXJfd2lkdGg7XG4gICAgICAgICAgICBpZighcy50b3BfZWRnZSlcbiAgICAgICAgICAgICAgeSAtPSBib3JkZXJfd2lkdGg7XG4gICAgICAgICAgICBjdHguZmlsbFJlY3QoXG4gICAgICAgICAgICAgICAgcHggKyBwdyAtIGJvcmRlcl93aWR0aCxcbiAgICAgICAgICAgICAgICB5LCBcbiAgICAgICAgICAgICAgICBib3JkZXJfd2lkdGgsIHkyLXkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZihzLnRvcF9lZGdlKXtcbiAgICAgICAgICAgIGxldCB4PXB4LCB4Mj1weCArIHB3O1xuICAgICAgICAgICAgaWYoIXMucmlnaHRfZWRnZSlcbiAgICAgICAgICAgICAgeDIgKz0gYm9yZGVyX3dpZHRoO1xuICAgICAgICAgICAgaWYoIXMubGVmdF9lZGdlKVxuICAgICAgICAgICAgICB4IC09IGJvcmRlcl93aWR0aDtcbiAgICAgICAgICAgIGN0eC5maWxsUmVjdChcbiAgICAgICAgICAgICAgICB4LCBcbiAgICAgICAgICAgICAgICBweSxcbiAgICAgICAgICAgICAgICB4Mi14LCBib3JkZXJfd2lkdGgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZihzLmJvdHRvbV9lZGdlKXtcbiAgICAgICAgICAgIGxldCB4PXB4LCB4Mj1weCtwdztcbiAgICAgICAgICAgIGlmKCFzLnJpZ2h0X2VkZ2UpXG4gICAgICAgICAgICAgIHgyICs9IGJvcmRlcl93aWR0aDtcbiAgICAgICAgICAgIGlmKCFzLmxlZnRfZWRnZSlcbiAgICAgICAgICAgICAgeCAtPSBib3JkZXJfd2lkdGg7XG4gICAgICAgICAgICBjdHguZmlsbFJlY3QoXG4gICAgICAgICAgICAgICAgeCwgXG4gICAgICAgICAgICAgICAgcHkgKyBwaCAtIGJvcmRlcl93aWR0aCxcbiAgICAgICAgICAgICAgICB4Mi14LCBib3JkZXJfd2lkdGgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmKHB3IDwgNjQgfHwgcGggPCA2NCkge1xuICAgICAgZm9yKGxldCB4PXZpZXdfeDsgeDw9dmlld194MjsgKyt4KXtcbiAgICAgICAgZm9yKGxldCB5PXZpZXdfeTsgeTw9dmlld195MjsgKyt5KXtcbiAgICAgICAgICBsZXQgcHggPSBNYXRoLmZsb29yKHB3KnggLSB2aWV3WzBdKSwgXG4gICAgICAgICAgICAgIHB5ID0gTWF0aC5mbG9vcihwaCp5IC0gdmlld1sxXSk7XG4gICAgICAgICAgaWYoc3RyZWFtZXJfbWF0cml4W3hdID09IG51bGwgfHwgc3RyZWFtZXJfbWF0cml4W3hdW3ldID09IG51bGwpXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICBsZXQgcyA9IHN0cmVhbWVyX21hdHJpeFt4XVt5XTtcbiAgICAgICAgICBpZihob3ZlcmVkID09IHMpIHtcbiAgICAgICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgICAgICBjdHguZ2xvYmFsQWxwaGEgPSAwLjc7XG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gXCIjZmZmXCI7XG4gICAgICAgICAgICBsZXQgZmggPSBwYXJzZUludChjdHguZm9udCksXG4gICAgICAgICAgICAgICAgZncgPSBjdHgubWVhc3VyZVRleHQocy5uYW1lKS53aWR0aDtcbiAgICAgICAgICAgIGN0eC5maWxsUmVjdChweCArIHB3KjAuNSAtIGZ3KjAuNSwgcHkrcGgsIGZ3LCBmaCk7XG4gICAgICAgICAgICBjdHguZ2xvYmFsQWxwaGEgPSAxLjA7XG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gXCIjMDAwXCI7XG4gICAgICAgICAgICBjdHguZmlsbFRleHQocy5uYW1lLCBweCtwdyowLjUsIHB5K3BoKTtcbiAgICAgICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmb3IobGV0IHMgb2YgcmVwcmVzZW50b3Jfb2ZfY2x1c3Rlcikge1xuICAgICAgICAgIGxldCByeCA9IHB3KnMucmVwcmVzZW50YXRpb25feCAtIHZpZXdbMF0gKyBwdyowLjUgKyAoY2FtZXJhWzBdIC0gMC41KSpwdyxcbiAgICAgICAgICAgICAgcnkgPSBwaCpzLnJlcHJlc2VudGF0aW9uX3kgLSB2aWV3WzFdICsgcGgqMC41ICsgKGNhbWVyYVsxXSAtIDAuNSkqcGg7XG4gICAgICAgICAgbGV0IHB4ID0gcHcqcy54IC0gdmlld1swXSwgXG4gICAgICAgICAgICAgIHB5ID0gcGgqcy55IC0gdmlld1sxXTtcbiAgICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICAgIGN0eC5nbG9iYWxBbHBoYSA9IDAuNztcbiAgICAgICAgICBjdHgudGV4dEJhc2VsaW5lID0gXCJtaWRkbGVcIjtcbiAgICAgICAgICBjdHgudGV4dEFsaWduID0gXCJjZW50ZXJcIjtcbiAgICAgICAgICBjdHguZmlsbFN0eWxlID0gXCJ3aGl0ZVwiO1xuICAgICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IFwiYmxhY2tcIjtcbiAgICAgICAgICAvL2N0eC5mb250ID0gXCJpdGFsaWMgMTRweCBBcmlhbFwiO1xuICAgICAgICAgIC8vY3R4LmZvbnQgPSBcIml0YWxpYyBcIiArIE1hdGgubWF4KE1hdGguZmxvb3IocHcvMiksIDEyKSArIFwicHggQXJpYWxcIjtcbiAgICAgICAgICBjdHguZm9udCA9IFwiaXRhbGljIFwiICsgTWF0aC5tYXgoTWF0aC5mbG9vcihwdy8xLjUpLCAxMikgKyBcInB4IEFyaWFsXCI7XG4gICAgICAgICAgbGV0IGZ3ID0gY3R4Lm1lYXN1cmVUZXh0KHMubmFtZSkud2lkdGgsXG4gICAgICAgICAgICAgIGZoID0gcGFyc2VJbnQoY3R4LmZvbnQpO1xuICAgICAgICAgIC8qcnggPSByeCAtIGZ3KjAuNSA8IDA/IGZ3KjAuNTogXG4gICAgICAgICAgICAgICAocnggKyBmdyowLjUgPj0gY2FudmFzLndpZHRoPyBjYW52YXMud2lkdGggLSBmdyowLjUgOiByeCksXG4gICAgICAgICAgcnkgPSByeSAtIGZoKjAuNSA8IDA/IGZoKjAuNTogXG4gICAgICAgICAgICAgICAocnkgKyBmaCowLjUgPj0gY2FudmFzLmhlaWdodD8gY2FudmFzLmhlaWdodCAtIGZoKjAuNSA6IHJ5KTsqL1xuICAgICAgICAgIC8vY3R4LmxpbmVXaWR0aCA9IDU7XG4gICAgICAgICAgLy9jdHguc3Ryb2tlVGV4dChzLm5hbWUsIHJ4LCByeSk7XG4gICAgICAgICAgY3R4LmZpbGxUZXh0KHMubmFtZSwgcngsIHJ5KTtcbiAgICAgICAgICBjdHguZ2xvYmFsQWxwaGEgPSAwLjU7XG4gICAgICAgICAgY3R4LmZpbGxUZXh0KHMubmFtZSwgcngsIHJ5KTtcbiAgICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgICAgfVxuICAgIH1cbiAgICBmcmFtZV9pbmRleCArPSAxO1xuICB9KCkpO1xuICByZXR1cm4gKCk9PntcbiAgICBjYW5jZWxBbmltYXRpb25GcmFtZShmcmFtZSk7XG4gIH1cbn0pO1xub25EZXN0cm95KCgpPT57XG4gIGlmKGZyYW1lKSB7XG4gICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUoZnJhbWUpO1xuICAgIGZyYW1lID0gbnVsbDtcbiAgfVxufSk7XG4vKlxuICAgICAgICBsZXQgZmggPSBwYXJzZUludChjdHguZm9udCk7XG4gICAgICAgIGN0eC5nbG9iYWxBbHBoYSA9IDAuNztcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IFwiI2ZmZlwiO1xuICAgICAgICBjdHguZmlsbFJlY3QocHggKyBib3JkZXJfd2lkdGgsIHB5K3BoIC0gYm9yZGVyX3dpZHRoIC0gZmgsIHB3IC0gMipib3JkZXJfd2lkdGgsIGZoKTtcbiAgICAgICAgY3R4Lmdsb2JhbEFscGhhID0gMS4wO1xuICAgICAgICBjdHguZmlsbFN0eWxlID0gXCIjMDAwXCI7XG4gICAgICAgIGN0eC5maWxsVGV4dChzLm5hbWUsIHB4ICsgYm9yZGVyX3dpZHRoKjAuNSwgcHkgKyBwaCAtIGJvcmRlcl93aWR0aCAtIGZoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0oKSk7XG4gIHJldHVybiAoKT0+e1xuICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKGZyYW1lKTtcbiAgfVxufSk7XG4qL1xuPC9zY3JpcHQ+XG4iLCIndXNlIHN0cmljdCc7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHByZWZpeCA9ICdmYXMnO1xudmFyIGljb25OYW1lID0gJ21hcCc7XG52YXIgd2lkdGggPSA1NzY7XG52YXIgaGVpZ2h0ID0gNTEyO1xudmFyIGxpZ2F0dXJlcyA9IFtdO1xudmFyIHVuaWNvZGUgPSAnZjI3OSc7XG52YXIgc3ZnUGF0aERhdGEgPSAnTTAgMTE3LjY2djM0Ni4zMmMwIDExLjMyIDExLjQzIDE5LjA2IDIxLjk0IDE0Ljg2TDE2MCA0MTZWMzJMMjAuMTIgODcuOTVBMzIuMDA2IDMyLjAwNiAwIDAgMCAwIDExNy42NnpNMTkyIDQxNmwxOTIgNjRWOTZMMTkyIDMydjM4NHpNNTU0LjA2IDMzLjE2TDQxNiA5NnYzODRsMTM5Ljg4LTU1Ljk1QTMxLjk5NiAzMS45OTYgMCAwIDAgNTc2IDM5NC4zNFY0OC4wMmMwLTExLjMyLTExLjQzLTE5LjA2LTIxLjk0LTE0Ljg2eic7XG5cbmV4cG9ydHMuZGVmaW5pdGlvbiA9IHtcbiAgcHJlZml4OiBwcmVmaXgsXG4gIGljb25OYW1lOiBpY29uTmFtZSxcbiAgaWNvbjogW1xuICAgIHdpZHRoLFxuICAgIGhlaWdodCxcbiAgICBsaWdhdHVyZXMsXG4gICAgdW5pY29kZSxcbiAgICBzdmdQYXRoRGF0YVxuICBdfTtcblxuZXhwb3J0cy5mYU1hcCA9IGV4cG9ydHMuZGVmaW5pdGlvbjtcbmV4cG9ydHMucHJlZml4ID0gcHJlZml4O1xuZXhwb3J0cy5pY29uTmFtZSA9IGljb25OYW1lO1xuZXhwb3J0cy53aWR0aCA9IHdpZHRoO1xuZXhwb3J0cy5oZWlnaHQgPSBoZWlnaHQ7XG5leHBvcnRzLmxpZ2F0dXJlcyA9IGxpZ2F0dXJlcztcbmV4cG9ydHMudW5pY29kZSA9IHVuaWNvZGU7XG5leHBvcnRzLnN2Z1BhdGhEYXRhID0gc3ZnUGF0aERhdGE7IiwiPHNjcmlwdD5cbmltcG9ydCBTdHJlYW1lckF1dG9Db21wbGV0ZSBmcm9tIFwiLi9TdHJlYW1lckF1dG9Db21wbGV0ZS5zdmVsdGVcIjtcbmltcG9ydCB7IGZhTWFwIH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhTWFwJ1xuaW1wb3J0IHsgZmFFeGNoYW5nZUFsdCB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYUV4Y2hhbmdlQWx0J1xuY29uc3QgcGFnZXMgPSBbXG4gICAge3NlZ21lbnQ6IFwibWFwXCIsIG5hbWU6IFwi7KeA64+EXCIsIGljb246IGZhTWFwfSxcbiAgICB7c2VnbWVudDogXCJtaWdyYXRpb25cIiwgbmFtZTogXCLsi5zssq3snpAg7J2064+ZXCIsIGljb246IGZhRXhjaGFuZ2VBbHR9LFxuICAgIC8qe3NlZ21lbnQ6IFwic3RyYXdcIiwgbmFtZTogXCLruajrjIBcIn0sKi9cbiAgXTtcblxuZXhwb3J0IGxldCBzZWdtZW50O1xuXG5mdW5jdGlvbiBvbl9zdHJlYW1lcl9zZWFyY2godGFyZ2V0KSB7XG4gIHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSA9IFwiL3N0cmVhbWVyL1wiICsgdGFyZ2V0LmlkO1xufVxuY29uc29sZS5sb2coXCJzZWdtZW50XCIsIHNlZ21lbnQpO1xuPC9zY3JpcHQ+XG5cbjxuYXYgY2xhc3M9XCJiZy13aGl0ZSB3LWZ1bGwgcmVsYXRpdmUgei00MCBzaGFkb3dcIiByb2xlPVwibmF2aWdhdGlvblwiPlxuICA8ZGl2IGNsYXNzPVwiY29udGFpbmVyIGZsZXggZmxleC1yb3cgZmxleC13cmFwIGp1c3RpZnktYmV0d2VlbiBpdGVtcy1jZW50ZXIgbS1hdXRvXCI+XG4gICAgPGRpdiBjbGFzcz1cImZsZXggZmxleC1yb3cgaXRlbXMtY2VudGVyIGZsZXgtd3JhcCBtZDpqdXN0aWZ5LXN0YXJ0IGp1c3RpZnktYmV0d2VlbiB3LWZ1bGxcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJmbGV4IGZsZXgtcm93IGl0ZW1zLWNlbnRlclwiPlxuICAgICAgICA8YSBocmVmPVwiL1wiIGNsYXNzPVwidGl0bGUtY29udGFpbmVyIHRyYW5zaXRpb24tYWxsIHRyYW5zaXRpb24tMTAwIHRleHQteGwgZm9udC1ib2xkIHRyYWNraW5nLXdpZGVyXCI+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJwbC0yXCI+7Yq47IiYIGdnIDwvc3Bhbj5cbiAgICAgICAgPC9hPiBcbiAgICAgICAgPGRpdiBjbGFzcz1cImZsZXggb3ZlcmZsb3ctaGlkZGVuXCI+XG4gICAgICAgICAgeyNlYWNoIHBhZ2VzIGFzIHBhZ2V9XG4gICAgICAgICAgICA8YSBjbGFzcz1cImhpZGRlbiBtZDppbmxpbmUtYmxvY2sgcHktMyBtbC04IC1tYi1weCBuby11bmRlcmxpbmUgYm9yZGVyLTMgdGV4dC1sZyBib3JkZXItdHJhbnNwYXJlbnRcIiBocmVmPVwiL3twYWdlLnNlZ21lbnR9XCIgXG4gICAgICAgICAgICAgIGNsYXNzOmN1cnJlbnQtbGluaz1cIntzZWdtZW50ID09PSBwYWdlLnNlZ21lbnR9XCI+XG4gICAgICAgICAgICAgIHtwYWdlLm5hbWV9PC9hPiBcbiAgICAgICAgICAgIDxhIGNsYXNzPVwibWQ6aGlkZGVuIGlubGluZS1ibG9jayBweS0zIG1sLTggLW1iLXB4IG5vLXVuZGVybGluZSBib3JkZXItMyB0ZXh0LWdyYXktNjAwIHRleHQtc20gYm9yZGVyLXRyYW5zcGFyZW50XCIgaHJlZj1cIi97cGFnZS5zZWdtZW50fVwiXG4gICAgICAgICAgICAgIGNsYXNzOmN1cnJlbnQtbGluaz1cIntzZWdtZW50ID09PSBwYWdlLnNlZ21lbnR9XCI+IFxuICAgICAgICAgICAgICA8c3ZnIGFyZWEtaGlkZGVuPVwidHJ1ZVwiIHJvbGU9XCJpbWdcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCB7cGFnZS5pY29uLmljb25bMF19IHtwYWdlLmljb24uaWNvblsxXX1cIiBjbGFzcz1cInctNiBoLTYgb3ZlcmZsb3ctdmlzaWJsZSBpbmxpbmUtYmxvY2tcIj5cbiAgICAgICAgICAgICAgICA8cGF0aCBmaWxsPVwiY3VycmVudENvbG9yXCIgZD1cIntwYWdlLmljb24uaWNvbls0XX1cIi8+XG4gICAgICAgICAgICAgIDwvc3ZnPlxuICAgICAgICAgICAgPC9hPiBcbiAgICAgICAgICB7L2VhY2h9XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICB7I2lmIHNlZ21lbnQgIT0gbnVsbH1cbiAgICAgICAgPGRpdiBjbGFzcz1cImZsZXggaXRlbXMtY2VudGVyIC1tYi1weCBib3JkZXItMyBib3JkZXItdHJhbnNwYXJlbnQge1wic3RyZWFtZXJcIiA9PT0gc2VnbWVudD8gJ2JvcmRlci1iLXByaW1hcnktNjAwIHRleHQtcHJpbWFyeS02MDAnIDogJyd9XCI+XG4gICAgICAgICAgPGxhYmVsIFxuICAgICAgICAgICAgY2xhc3M9XCJweS0zIG1sLTYgdGV4dC1sZyBoaWRkZW4gbWQ6aW5saW5lXCJcbiAgICAgICAgICAgIGZvcj1cInN0cmVhbWVyLXNlYXJjaC1pbnB1dFwiPiBcbiAgICAgICAgICAgIOyKpO2KuOumrOuouCBcbiAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgIDxTdHJlYW1lckF1dG9Db21wbGV0ZSBiaW5kOm9uc2VsZWN0PXtvbl9zdHJlYW1lcl9zZWFyY2h9IHBsYWNlaG9sZGVyPVwi6rKA7IOJXCIgaW5wdXRpZD1cInN0cmVhbWVyLXNlYXJjaC1pbnB1dFwiIGNsYXNzPVwibWwtNFwiIGlkPVwibmF2aWdhdGlvbi1zdHJlYW1lci1zZWFyY2hcIi8+XG4gICAgICAgIDwvZGl2PiBcbiAgICAgIHsvaWZ9XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC9uYXY+XG5cbjxzdHlsZT5cbiAgLmN1cnJlbnQtbGluayB7XG4gICAgYm9yZGVyLWJvdHRvbS1jb2xvcjogI0NEQThDNztcbiAgICBjb2xvcjogI0NEQThDNztcbiAgfVxuICAudGl0bGUge1xuICB9XG4gIC50aXRsZS1jb250YWluZXIge1xuICAgIG1hcmdpbi10b3A6IDA7XG4gICAgbWFyZ2luLWJvdHRvbTogMDtcbiAgICBtYXJnaW4tbGVmdDogMC41cmVtO1xuICAgIG1hcmdpbi1yaWdodDogMDtcbiAgICB0ZXh0LXNoYWRvdzogM3B4IDNweCAwICNDREE4QzcsIC0xcHggLTFweCAwICNDREE4QzcsIDFweCAtMXB4IDAgI0NEQThDNywgLTFweCAxcHggMCAjQ0RBOEM3LCAxcHggMXB4IDAgI0NEQThDNztcbiAgICBjb2xvcjogd2hpdGU7XG4gIH1cbiAgLnRpdGxlLWNvbnRhaW5lcjpob3ZlciB7XG4gICAgbWFyZ2luLXRvcDogLTNweDtcbiAgICBtYXJnaW4tbGVmdDogY2FsYygwLjVyZW0gLSAzcHgpO1xuICAgIG1hcmdpbi1yaWdodDogM3B4O1xuICAgIG1hcmdpbi1ib3R0b206IDNweDtcbiAgICB0ZXh0LXNoYWRvdzogNnB4IDZweCAxcHggI0NEQThDNywgLTFweCAtMXB4IDAgI0NEQThDNywgMXB4IC0xcHggMCAjQ0RBOEM3LCAtMXB4IDFweCAwICNDREE4QzcsIDFweCAxcHggMCAjQ0RBOEM3O1xuICB9XG4gIC50aXRsZTpob3ZlciB7XG4gIH1cbjwvc3R5bGU+XG4iLCI8c2NyaXB0PlxuICBpbXBvcnQgTmF2aWdhdGlvbiBmcm9tIFwiLi4vY29tcG9uZW50cy9OYXZpZ2F0aW9uLnN2ZWx0ZVwiO1xuXG5cdGV4cG9ydCBsZXQgc2VnbWVudDtcbjwvc2NyaXB0PlxuXG48aGVhZGVyPlxuICA8TmF2aWdhdGlvbiB7c2VnbWVudH0gLz5cbjwvaGVhZGVyPlxuXG48bWFpbiBjbGFzcz1cImZsZXgtZ3Jvd1wiPlxuICA8c2xvdD48L3Nsb3Q+XG48L21haW4+XG5cbjxmb290ZXIgY2xhc3M9XCJ3LWZ1bGwgYmctcHJpbWFyeS02MDAgdGV4dC14cyB0ZXh0LXdoaXRlIHB5LTYgcHgtMlwiPlxuICA8ZGl2IGNsYXNzPVwiY29udGFpbmVyIG0tYXV0byBmbGV4IGZsZXgtY29sXCI+XG4gICAgPGRpdj5cbiAgICAgIDxhIGhyZWY9XCIvdGVybXNcIj4g6rCc7J247KCV67O0IOyymOumrOuwqey5qCA8L2E+XG4gICAgICA8c3BhbiBjbGFzcz1cIm1sLTJcIj4g7Jew65297LKYOiBldW5jaHVsLmRldkBnbWFpbC5jb20gPC9zcGFuPlxuICAgIDwvZGl2PlxuICAgIDxzcGFuIGNsYXNzPVwibXQtMlwiPlxuICAgICAgVFNVLkdHIGlzbuKAmXQgZW5kb3JzZWQgYnkgb2ZmaWNpYWwgVHdpdGNoIHR2IGFuZCBkb2VzbuKAmXQgcmVmbGVjdCB0aGUgdmlld3Mgb3Igb3BpbmlvbnMgb2YgVHd0aWNoIHR2IG9yIGFueW9uZSBvZmZpY2lhbGx5IGludm9sdmVkIGluIHByb2R1Y2luZyBvciBtYW5hZ2luZyBUd2l0Y2ggdHYuIFxuICAgIDwvc3Bhbj5cbiAgPC9kaXY+XG48L2Zvb3Rlcj5cbiIsIjxzY3JpcHQ+XG5cdGV4cG9ydCBsZXQgc3RhdHVzO1xuXHRleHBvcnQgbGV0IGVycm9yO1xuXG5cdGNvbnN0IGRldiA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnO1xuPC9zY3JpcHQ+XG5cbjxzdHlsZT5cblx0aDEsIHAge1xuXHRcdG1hcmdpbjogMCBhdXRvO1xuXHR9XG5cblx0aDEge1xuXHRcdGZvbnQtc2l6ZTogMi44ZW07XG5cdFx0Zm9udC13ZWlnaHQ6IDcwMDtcblx0XHRtYXJnaW46IDAgMCAwLjVlbSAwO1xuXHR9XG5cblx0cCB7XG5cdFx0bWFyZ2luOiAxZW0gYXV0bztcblx0fVxuXG5cdEBtZWRpYSAobWluLXdpZHRoOiA0ODBweCkge1xuXHRcdGgxIHtcblx0XHRcdGZvbnQtc2l6ZTogNGVtO1xuXHRcdH1cblx0fVxuPC9zdHlsZT5cblxuPHN2ZWx0ZTpoZWFkPlxuXHQ8dGl0bGU+e3N0YXR1c308L3RpdGxlPlxuPC9zdmVsdGU6aGVhZD5cblxuPGgxPntzdGF0dXN9PC9oMT5cblxuPHA+e2Vycm9yLm1lc3NhZ2V9PC9wPlxuXG57I2lmIGRldiAmJiBlcnJvci5zdGFja31cblx0PHByZT57ZXJyb3Iuc3RhY2t9PC9wcmU+XG57L2lmfVxuIiwiLy8gVGhpcyBmaWxlIGlzIGdlbmVyYXRlZCBieSBTYXBwZXIg4oCUIGRvIG5vdCBlZGl0IGl0IVxuaW1wb3J0IGNvbXBvbmVudF8wIGZyb20gXCIuLi8uLi8uLi9yb3V0ZXMvaW5kZXguc3ZlbHRlXCI7XG5pbXBvcnQgY29tcG9uZW50XzEgZnJvbSBcIi4uLy4uLy4uL3JvdXRlcy9oaWRkZW4tbGlua3Muc3ZlbHRlXCI7XG5pbXBvcnQgY29tcG9uZW50XzIsIHsgcHJlbG9hZCBhcyBwcmVsb2FkXzIgfSBmcm9tIFwiLi4vLi4vLi4vcm91dGVzL21pZ3JhdGlvbi9pbmRleC5zdmVsdGVcIjtcbmltcG9ydCBjb21wb25lbnRfMywgeyBwcmVsb2FkIGFzIHByZWxvYWRfMyB9IGZyb20gXCIuLi8uLi8uLi9yb3V0ZXMvc3RyZWFtZXIvW2lkXS5zdmVsdGVcIjtcbmltcG9ydCBjb21wb25lbnRfNCBmcm9tIFwiLi4vLi4vLi4vcm91dGVzL3Rlcm1zLnN2ZWx0ZVwiO1xuaW1wb3J0IGNvbXBvbmVudF81LCB7IHByZWxvYWQgYXMgcHJlbG9hZF81IH0gZnJvbSBcIi4uLy4uLy4uL3JvdXRlcy9tYXAvaW5kZXguc3ZlbHRlXCI7XG5pbXBvcnQgcm9vdCBmcm9tIFwiLi4vLi4vLi4vcm91dGVzL19sYXlvdXQuc3ZlbHRlXCI7XG5pbXBvcnQgZXJyb3IgZnJvbSBcIi4uLy4uLy4uL3JvdXRlcy9fZXJyb3Iuc3ZlbHRlXCI7XG5cbmNvbnN0IGQgPSBkZWNvZGVVUklDb21wb25lbnQ7XG5cbmV4cG9ydCBjb25zdCBtYW5pZmVzdCA9IHtcblx0c2VydmVyX3JvdXRlczogW1xuXHRcdFxuXHRdLFxuXG5cdHBhZ2VzOiBbXG5cdFx0e1xuXHRcdFx0Ly8gaW5kZXguc3ZlbHRlXG5cdFx0XHRwYXR0ZXJuOiAvXlxcLyQvLFxuXHRcdFx0cGFydHM6IFtcblx0XHRcdFx0eyBuYW1lOiBcImluZGV4XCIsIGZpbGU6IFwiaW5kZXguc3ZlbHRlXCIsIGNvbXBvbmVudDogY29tcG9uZW50XzAgfVxuXHRcdFx0XVxuXHRcdH0sXG5cblx0XHR7XG5cdFx0XHQvLyBoaWRkZW4tbGlua3Muc3ZlbHRlXG5cdFx0XHRwYXR0ZXJuOiAvXlxcL2hpZGRlbi1saW5rc1xcLz8kLyxcblx0XHRcdHBhcnRzOiBbXG5cdFx0XHRcdHsgbmFtZTogXCJoaWRkZW4kNDVsaW5rc1wiLCBmaWxlOiBcImhpZGRlbi1saW5rcy5zdmVsdGVcIiwgY29tcG9uZW50OiBjb21wb25lbnRfMSB9XG5cdFx0XHRdXG5cdFx0fSxcblxuXHRcdHtcblx0XHRcdC8vIG1pZ3JhdGlvbi9pbmRleC5zdmVsdGVcblx0XHRcdHBhdHRlcm46IC9eXFwvbWlncmF0aW9uXFwvPyQvLFxuXHRcdFx0cGFydHM6IFtcblx0XHRcdFx0eyBuYW1lOiBcIm1pZ3JhdGlvblwiLCBmaWxlOiBcIm1pZ3JhdGlvbi9pbmRleC5zdmVsdGVcIiwgY29tcG9uZW50OiBjb21wb25lbnRfMiwgcHJlbG9hZDogcHJlbG9hZF8yIH1cblx0XHRcdF1cblx0XHR9LFxuXG5cdFx0e1xuXHRcdFx0Ly8gc3RyZWFtZXIvW2lkXS5zdmVsdGVcblx0XHRcdHBhdHRlcm46IC9eXFwvc3RyZWFtZXJcXC8oW15cXC9dKz8pXFwvPyQvLFxuXHRcdFx0cGFydHM6IFtcblx0XHRcdFx0bnVsbCxcblx0XHRcdFx0eyBuYW1lOiBcInN0cmVhbWVyXyRpZFwiLCBmaWxlOiBcInN0cmVhbWVyL1tpZF0uc3ZlbHRlXCIsIGNvbXBvbmVudDogY29tcG9uZW50XzMsIHByZWxvYWQ6IHByZWxvYWRfMywgcGFyYW1zOiBtYXRjaCA9PiAoeyBpZDogZChtYXRjaFsxXSkgfSkgfVxuXHRcdFx0XVxuXHRcdH0sXG5cblx0XHR7XG5cdFx0XHQvLyB0ZXJtcy5zdmVsdGVcblx0XHRcdHBhdHRlcm46IC9eXFwvdGVybXNcXC8/JC8sXG5cdFx0XHRwYXJ0czogW1xuXHRcdFx0XHR7IG5hbWU6IFwidGVybXNcIiwgZmlsZTogXCJ0ZXJtcy5zdmVsdGVcIiwgY29tcG9uZW50OiBjb21wb25lbnRfNCB9XG5cdFx0XHRdXG5cdFx0fSxcblxuXHRcdHtcblx0XHRcdC8vIG1hcC9pbmRleC5zdmVsdGVcblx0XHRcdHBhdHRlcm46IC9eXFwvbWFwXFwvPyQvLFxuXHRcdFx0cGFydHM6IFtcblx0XHRcdFx0eyBuYW1lOiBcIm1hcFwiLCBmaWxlOiBcIm1hcC9pbmRleC5zdmVsdGVcIiwgY29tcG9uZW50OiBjb21wb25lbnRfNSwgcHJlbG9hZDogcHJlbG9hZF81IH1cblx0XHRcdF1cblx0XHR9XG5cdF0sXG5cblx0cm9vdCxcblx0cm9vdF9wcmVsb2FkOiAoKSA9PiB7fSxcblx0ZXJyb3Jcbn07XG5cbmV4cG9ydCBjb25zdCBidWlsZF9kaXIgPSBcIl9fc2FwcGVyX18vZGV2XCI7XG5cbmV4cG9ydCBjb25zdCBzcmNfZGlyID0gXCJzcmNcIjtcblxuZXhwb3J0IGNvbnN0IGRldiA9IHRydWU7IiwiaW1wb3J0IHsgd3JpdGFibGUgfSBmcm9tICdzdmVsdGUvc3RvcmUnO1xuXG5leHBvcnQgY29uc3QgQ09OVEVYVF9LRVkgPSB7fTtcblxuZXhwb3J0IGNvbnN0IHByZWxvYWQgPSAoKSA9PiAoe30pOyIsIjwhLS0gVGhpcyBmaWxlIGlzIGdlbmVyYXRlZCBieSBTYXBwZXIg4oCUIGRvIG5vdCBlZGl0IGl0ISAtLT5cbjxzY3JpcHQ+XG5cdGltcG9ydCB7IHNldENvbnRleHQgfSBmcm9tICdzdmVsdGUnO1xuXHRpbXBvcnQgeyBDT05URVhUX0tFWSB9IGZyb20gJy4vc2hhcmVkJztcblx0aW1wb3J0IExheW91dCBmcm9tICcuLi8uLi8uLi9yb3V0ZXMvX2xheW91dC5zdmVsdGUnO1xuXHRpbXBvcnQgRXJyb3IgZnJvbSAnLi4vLi4vLi4vcm91dGVzL19lcnJvci5zdmVsdGUnO1xuXG5cdGV4cG9ydCBsZXQgc3RvcmVzO1xuXHRleHBvcnQgbGV0IGVycm9yO1xuXHRleHBvcnQgbGV0IHN0YXR1cztcblx0ZXhwb3J0IGxldCBzZWdtZW50cztcblx0ZXhwb3J0IGxldCBsZXZlbDA7XG5cdGV4cG9ydCBsZXQgbGV2ZWwxID0gbnVsbDtcblxuXHRzZXRDb250ZXh0KENPTlRFWFRfS0VZLCBzdG9yZXMpO1xuPC9zY3JpcHQ+XG5cbjxMYXlvdXQgc2VnbWVudD1cIntzZWdtZW50c1swXX1cIiB7Li4ubGV2ZWwwLnByb3BzfT5cblx0eyNpZiBlcnJvcn1cblx0XHQ8RXJyb3Ige2Vycm9yfSB7c3RhdHVzfS8+XG5cdHs6ZWxzZX1cblx0XHQ8c3ZlbHRlOmNvbXBvbmVudCB0aGlzPVwie2xldmVsMS5jb21wb25lbnR9XCIgey4uLmxldmVsMS5wcm9wc30vPlxuXHR7L2lmfVxuPC9MYXlvdXQ+IiwiaW1wb3J0IGZzIGZyb20gJ2ZzJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgZGV2LCBidWlsZF9kaXIsIHNyY19kaXIsIG1hbmlmZXN0IH0gZnJvbSAnLi9pbnRlcm5hbC9tYW5pZmVzdC1zZXJ2ZXInO1xuaW1wb3J0IHsgd3JpdGFibGUgfSBmcm9tICdzdmVsdGUvc3RvcmUnO1xuaW1wb3J0IFN0cmVhbSBmcm9tICdzdHJlYW0nO1xuaW1wb3J0IGh0dHAgZnJvbSAnaHR0cCc7XG5pbXBvcnQgVXJsIGZyb20gJ3VybCc7XG5pbXBvcnQgaHR0cHMgZnJvbSAnaHR0cHMnO1xuaW1wb3J0IHpsaWIgZnJvbSAnemxpYic7XG5pbXBvcnQgQXBwIGZyb20gJy4vaW50ZXJuYWwvQXBwLnN2ZWx0ZSc7XG5cbmZ1bmN0aW9uIGdldF9zZXJ2ZXJfcm91dGVfaGFuZGxlcihyb3V0ZXMpIHtcblx0YXN5bmMgZnVuY3Rpb24gaGFuZGxlX3JvdXRlKHJvdXRlLCByZXEsIHJlcywgbmV4dCkge1xuXHRcdHJlcS5wYXJhbXMgPSByb3V0ZS5wYXJhbXMocm91dGUucGF0dGVybi5leGVjKHJlcS5wYXRoKSk7XG5cblx0XHRjb25zdCBtZXRob2QgPSByZXEubWV0aG9kLnRvTG93ZXJDYXNlKCk7XG5cdFx0Ly8gJ2RlbGV0ZScgY2Fubm90IGJlIGV4cG9ydGVkIGZyb20gYSBtb2R1bGUgYmVjYXVzZSBpdCBpcyBhIGtleXdvcmQsXG5cdFx0Ly8gc28gY2hlY2sgZm9yICdkZWwnIGluc3RlYWRcblx0XHRjb25zdCBtZXRob2RfZXhwb3J0ID0gbWV0aG9kID09PSAnZGVsZXRlJyA/ICdkZWwnIDogbWV0aG9kO1xuXHRcdGNvbnN0IGhhbmRsZV9tZXRob2QgPSByb3V0ZS5oYW5kbGVyc1ttZXRob2RfZXhwb3J0XTtcblx0XHRpZiAoaGFuZGxlX21ldGhvZCkge1xuXHRcdFx0aWYgKHByb2Nlc3MuZW52LlNBUFBFUl9FWFBPUlQpIHtcblx0XHRcdFx0Y29uc3QgeyB3cml0ZSwgZW5kLCBzZXRIZWFkZXIgfSA9IHJlcztcblx0XHRcdFx0Y29uc3QgY2h1bmtzID0gW107XG5cdFx0XHRcdGNvbnN0IGhlYWRlcnMgPSB7fTtcblxuXHRcdFx0XHQvLyBpbnRlcmNlcHQgZGF0YSBzbyB0aGF0IGl0IGNhbiBiZSBleHBvcnRlZFxuXHRcdFx0XHRyZXMud3JpdGUgPSBmdW5jdGlvbihjaHVuaykge1xuXHRcdFx0XHRcdGNodW5rcy5wdXNoKEJ1ZmZlci5mcm9tKGNodW5rKSk7XG5cdFx0XHRcdFx0d3JpdGUuYXBwbHkocmVzLCBhcmd1bWVudHMpO1xuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdHJlcy5zZXRIZWFkZXIgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuXHRcdFx0XHRcdGhlYWRlcnNbbmFtZS50b0xvd2VyQ2FzZSgpXSA9IHZhbHVlO1xuXHRcdFx0XHRcdHNldEhlYWRlci5hcHBseShyZXMsIGFyZ3VtZW50cyk7XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0cmVzLmVuZCA9IGZ1bmN0aW9uKGNodW5rKSB7XG5cdFx0XHRcdFx0aWYgKGNodW5rKSBjaHVua3MucHVzaChCdWZmZXIuZnJvbShjaHVuaykpO1xuXHRcdFx0XHRcdGVuZC5hcHBseShyZXMsIGFyZ3VtZW50cyk7XG5cblx0XHRcdFx0XHRwcm9jZXNzLnNlbmQoe1xuXHRcdFx0XHRcdFx0X19zYXBwZXJfXzogdHJ1ZSxcblx0XHRcdFx0XHRcdGV2ZW50OiAnZmlsZScsXG5cdFx0XHRcdFx0XHR1cmw6IHJlcS51cmwsXG5cdFx0XHRcdFx0XHRtZXRob2Q6IHJlcS5tZXRob2QsXG5cdFx0XHRcdFx0XHRzdGF0dXM6IHJlcy5zdGF0dXNDb2RlLFxuXHRcdFx0XHRcdFx0dHlwZTogaGVhZGVyc1snY29udGVudC10eXBlJ10sXG5cdFx0XHRcdFx0XHRib2R5OiBCdWZmZXIuY29uY2F0KGNodW5rcykudG9TdHJpbmcoKVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBoYW5kbGVfbmV4dCA9IChlcnIpID0+IHtcblx0XHRcdFx0aWYgKGVycikge1xuXHRcdFx0XHRcdHJlcy5zdGF0dXNDb2RlID0gNTAwO1xuXHRcdFx0XHRcdHJlcy5lbmQoZXJyLm1lc3NhZ2UpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHByb2Nlc3MubmV4dFRpY2sobmV4dCk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHRcdHRyeSB7XG5cdFx0XHRcdGF3YWl0IGhhbmRsZV9tZXRob2QocmVxLCByZXMsIGhhbmRsZV9uZXh0KTtcblx0XHRcdH0gY2F0Y2ggKGVycikge1xuXHRcdFx0XHRjb25zb2xlLmVycm9yKGVycik7XG5cdFx0XHRcdGhhbmRsZV9uZXh0KGVycik7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIG5vIG1hdGNoaW5nIGhhbmRsZXIgZm9yIG1ldGhvZFxuXHRcdFx0cHJvY2Vzcy5uZXh0VGljayhuZXh0KTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZnVuY3Rpb24gZmluZF9yb3V0ZShyZXEsIHJlcywgbmV4dCkge1xuXHRcdGZvciAoY29uc3Qgcm91dGUgb2Ygcm91dGVzKSB7XG5cdFx0XHRpZiAocm91dGUucGF0dGVybi50ZXN0KHJlcS5wYXRoKSkge1xuXHRcdFx0XHRoYW5kbGVfcm91dGUocm91dGUsIHJlcSwgcmVzLCBuZXh0KTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdG5leHQoKTtcblx0fTtcbn1cblxuLyohXG4gKiBjb29raWVcbiAqIENvcHlyaWdodChjKSAyMDEyLTIwMTQgUm9tYW4gU2h0eWxtYW5cbiAqIENvcHlyaWdodChjKSAyMDE1IERvdWdsYXMgQ2hyaXN0b3BoZXIgV2lsc29uXG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICogQHB1YmxpY1xuICovXG5cbnZhciBwYXJzZV8xID0gcGFyc2U7XG52YXIgc2VyaWFsaXplXzEgPSBzZXJpYWxpemU7XG5cbi8qKlxuICogTW9kdWxlIHZhcmlhYmxlcy5cbiAqIEBwcml2YXRlXG4gKi9cblxudmFyIGRlY29kZSA9IGRlY29kZVVSSUNvbXBvbmVudDtcbnZhciBlbmNvZGUgPSBlbmNvZGVVUklDb21wb25lbnQ7XG52YXIgcGFpclNwbGl0UmVnRXhwID0gLzsgKi87XG5cbi8qKlxuICogUmVnRXhwIHRvIG1hdGNoIGZpZWxkLWNvbnRlbnQgaW4gUkZDIDcyMzAgc2VjIDMuMlxuICpcbiAqIGZpZWxkLWNvbnRlbnQgPSBmaWVsZC12Y2hhciBbIDEqKCBTUCAvIEhUQUIgKSBmaWVsZC12Y2hhciBdXG4gKiBmaWVsZC12Y2hhciAgID0gVkNIQVIgLyBvYnMtdGV4dFxuICogb2JzLXRleHQgICAgICA9ICV4ODAtRkZcbiAqL1xuXG52YXIgZmllbGRDb250ZW50UmVnRXhwID0gL15bXFx1MDAwOVxcdTAwMjAtXFx1MDA3ZVxcdTAwODAtXFx1MDBmZl0rJC87XG5cbi8qKlxuICogUGFyc2UgYSBjb29raWUgaGVhZGVyLlxuICpcbiAqIFBhcnNlIHRoZSBnaXZlbiBjb29raWUgaGVhZGVyIHN0cmluZyBpbnRvIGFuIG9iamVjdFxuICogVGhlIG9iamVjdCBoYXMgdGhlIHZhcmlvdXMgY29va2llcyBhcyBrZXlzKG5hbWVzKSA9PiB2YWx1ZXNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdXG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKiBAcHVibGljXG4gKi9cblxuZnVuY3Rpb24gcGFyc2Uoc3RyLCBvcHRpb25zKSB7XG4gIGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2FyZ3VtZW50IHN0ciBtdXN0IGJlIGEgc3RyaW5nJyk7XG4gIH1cblxuICB2YXIgb2JqID0ge307XG4gIHZhciBvcHQgPSBvcHRpb25zIHx8IHt9O1xuICB2YXIgcGFpcnMgPSBzdHIuc3BsaXQocGFpclNwbGl0UmVnRXhwKTtcbiAgdmFyIGRlYyA9IG9wdC5kZWNvZGUgfHwgZGVjb2RlO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGFpcnMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcGFpciA9IHBhaXJzW2ldO1xuICAgIHZhciBlcV9pZHggPSBwYWlyLmluZGV4T2YoJz0nKTtcblxuICAgIC8vIHNraXAgdGhpbmdzIHRoYXQgZG9uJ3QgbG9vayBsaWtlIGtleT12YWx1ZVxuICAgIGlmIChlcV9pZHggPCAwKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICB2YXIga2V5ID0gcGFpci5zdWJzdHIoMCwgZXFfaWR4KS50cmltKCk7XG4gICAgdmFyIHZhbCA9IHBhaXIuc3Vic3RyKCsrZXFfaWR4LCBwYWlyLmxlbmd0aCkudHJpbSgpO1xuXG4gICAgLy8gcXVvdGVkIHZhbHVlc1xuICAgIGlmICgnXCInID09IHZhbFswXSkge1xuICAgICAgdmFsID0gdmFsLnNsaWNlKDEsIC0xKTtcbiAgICB9XG5cbiAgICAvLyBvbmx5IGFzc2lnbiBvbmNlXG4gICAgaWYgKHVuZGVmaW5lZCA9PSBvYmpba2V5XSkge1xuICAgICAgb2JqW2tleV0gPSB0cnlEZWNvZGUodmFsLCBkZWMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbi8qKlxuICogU2VyaWFsaXplIGRhdGEgaW50byBhIGNvb2tpZSBoZWFkZXIuXG4gKlxuICogU2VyaWFsaXplIHRoZSBhIG5hbWUgdmFsdWUgcGFpciBpbnRvIGEgY29va2llIHN0cmluZyBzdWl0YWJsZSBmb3JcbiAqIGh0dHAgaGVhZGVycy4gQW4gb3B0aW9uYWwgb3B0aW9ucyBvYmplY3Qgc3BlY2lmaWVkIGNvb2tpZSBwYXJhbWV0ZXJzLlxuICpcbiAqIHNlcmlhbGl6ZSgnZm9vJywgJ2JhcicsIHsgaHR0cE9ubHk6IHRydWUgfSlcbiAqICAgPT4gXCJmb289YmFyOyBodHRwT25seVwiXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWxcbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc11cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqIEBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBzZXJpYWxpemUobmFtZSwgdmFsLCBvcHRpb25zKSB7XG4gIHZhciBvcHQgPSBvcHRpb25zIHx8IHt9O1xuICB2YXIgZW5jID0gb3B0LmVuY29kZSB8fCBlbmNvZGU7XG5cbiAgaWYgKHR5cGVvZiBlbmMgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvcHRpb24gZW5jb2RlIGlzIGludmFsaWQnKTtcbiAgfVxuXG4gIGlmICghZmllbGRDb250ZW50UmVnRXhwLnRlc3QobmFtZSkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdhcmd1bWVudCBuYW1lIGlzIGludmFsaWQnKTtcbiAgfVxuXG4gIHZhciB2YWx1ZSA9IGVuYyh2YWwpO1xuXG4gIGlmICh2YWx1ZSAmJiAhZmllbGRDb250ZW50UmVnRXhwLnRlc3QodmFsdWUpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYXJndW1lbnQgdmFsIGlzIGludmFsaWQnKTtcbiAgfVxuXG4gIHZhciBzdHIgPSBuYW1lICsgJz0nICsgdmFsdWU7XG5cbiAgaWYgKG51bGwgIT0gb3B0Lm1heEFnZSkge1xuICAgIHZhciBtYXhBZ2UgPSBvcHQubWF4QWdlIC0gMDtcbiAgICBpZiAoaXNOYU4obWF4QWdlKSkgdGhyb3cgbmV3IEVycm9yKCdtYXhBZ2Ugc2hvdWxkIGJlIGEgTnVtYmVyJyk7XG4gICAgc3RyICs9ICc7IE1heC1BZ2U9JyArIE1hdGguZmxvb3IobWF4QWdlKTtcbiAgfVxuXG4gIGlmIChvcHQuZG9tYWluKSB7XG4gICAgaWYgKCFmaWVsZENvbnRlbnRSZWdFeHAudGVzdChvcHQuZG9tYWluKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9uIGRvbWFpbiBpcyBpbnZhbGlkJyk7XG4gICAgfVxuXG4gICAgc3RyICs9ICc7IERvbWFpbj0nICsgb3B0LmRvbWFpbjtcbiAgfVxuXG4gIGlmIChvcHQucGF0aCkge1xuICAgIGlmICghZmllbGRDb250ZW50UmVnRXhwLnRlc3Qob3B0LnBhdGgpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvcHRpb24gcGF0aCBpcyBpbnZhbGlkJyk7XG4gICAgfVxuXG4gICAgc3RyICs9ICc7IFBhdGg9JyArIG9wdC5wYXRoO1xuICB9XG5cbiAgaWYgKG9wdC5leHBpcmVzKSB7XG4gICAgaWYgKHR5cGVvZiBvcHQuZXhwaXJlcy50b1VUQ1N0cmluZyAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9uIGV4cGlyZXMgaXMgaW52YWxpZCcpO1xuICAgIH1cblxuICAgIHN0ciArPSAnOyBFeHBpcmVzPScgKyBvcHQuZXhwaXJlcy50b1VUQ1N0cmluZygpO1xuICB9XG5cbiAgaWYgKG9wdC5odHRwT25seSkge1xuICAgIHN0ciArPSAnOyBIdHRwT25seSc7XG4gIH1cblxuICBpZiAob3B0LnNlY3VyZSkge1xuICAgIHN0ciArPSAnOyBTZWN1cmUnO1xuICB9XG5cbiAgaWYgKG9wdC5zYW1lU2l0ZSkge1xuICAgIHZhciBzYW1lU2l0ZSA9IHR5cGVvZiBvcHQuc2FtZVNpdGUgPT09ICdzdHJpbmcnXG4gICAgICA/IG9wdC5zYW1lU2l0ZS50b0xvd2VyQ2FzZSgpIDogb3B0LnNhbWVTaXRlO1xuXG4gICAgc3dpdGNoIChzYW1lU2l0ZSkge1xuICAgICAgY2FzZSB0cnVlOlxuICAgICAgICBzdHIgKz0gJzsgU2FtZVNpdGU9U3RyaWN0JztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdsYXgnOlxuICAgICAgICBzdHIgKz0gJzsgU2FtZVNpdGU9TGF4JztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdzdHJpY3QnOlxuICAgICAgICBzdHIgKz0gJzsgU2FtZVNpdGU9U3RyaWN0JztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdub25lJzpcbiAgICAgICAgc3RyICs9ICc7IFNhbWVTaXRlPU5vbmUnO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ29wdGlvbiBzYW1lU2l0ZSBpcyBpbnZhbGlkJyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHN0cjtcbn1cblxuLyoqXG4gKiBUcnkgZGVjb2RpbmcgYSBzdHJpbmcgdXNpbmcgYSBkZWNvZGluZyBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBkZWNvZGVcbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gdHJ5RGVjb2RlKHN0ciwgZGVjb2RlKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRlY29kZShzdHIpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxufVxuXG52YXIgY29va2llID0ge1xuXHRwYXJzZTogcGFyc2VfMSxcblx0c2VyaWFsaXplOiBzZXJpYWxpemVfMVxufTtcblxudmFyIGNoYXJzID0gJ2FiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpfJCc7XG52YXIgdW5zYWZlQ2hhcnMgPSAvWzw+XFxiXFxmXFxuXFxyXFx0XFwwXFx1MjAyOFxcdTIwMjldL2c7XG52YXIgcmVzZXJ2ZWQgPSAvXig/OmRvfGlmfGlufGZvcnxpbnR8bGV0fG5ld3x0cnl8dmFyfGJ5dGV8Y2FzZXxjaGFyfGVsc2V8ZW51bXxnb3RvfGxvbmd8dGhpc3x2b2lkfHdpdGh8YXdhaXR8YnJlYWt8Y2F0Y2h8Y2xhc3N8Y29uc3R8ZmluYWx8ZmxvYXR8c2hvcnR8c3VwZXJ8dGhyb3d8d2hpbGV8eWllbGR8ZGVsZXRlfGRvdWJsZXxleHBvcnR8aW1wb3J0fG5hdGl2ZXxyZXR1cm58c3dpdGNofHRocm93c3x0eXBlb2Z8Ym9vbGVhbnxkZWZhdWx0fGV4dGVuZHN8ZmluYWxseXxwYWNrYWdlfHByaXZhdGV8YWJzdHJhY3R8Y29udGludWV8ZGVidWdnZXJ8ZnVuY3Rpb258dm9sYXRpbGV8aW50ZXJmYWNlfHByb3RlY3RlZHx0cmFuc2llbnR8aW1wbGVtZW50c3xpbnN0YW5jZW9mfHN5bmNocm9uaXplZCkkLztcbnZhciBlc2NhcGVkID0ge1xuICAgICc8JzogJ1xcXFx1MDAzQycsXG4gICAgJz4nOiAnXFxcXHUwMDNFJyxcbiAgICAnLyc6ICdcXFxcdTAwMkYnLFxuICAgICdcXFxcJzogJ1xcXFxcXFxcJyxcbiAgICAnXFxiJzogJ1xcXFxiJyxcbiAgICAnXFxmJzogJ1xcXFxmJyxcbiAgICAnXFxuJzogJ1xcXFxuJyxcbiAgICAnXFxyJzogJ1xcXFxyJyxcbiAgICAnXFx0JzogJ1xcXFx0JyxcbiAgICAnXFwwJzogJ1xcXFwwJyxcbiAgICAnXFx1MjAyOCc6ICdcXFxcdTIwMjgnLFxuICAgICdcXHUyMDI5JzogJ1xcXFx1MjAyOSdcbn07XG52YXIgb2JqZWN0UHJvdG9Pd25Qcm9wZXJ0eU5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoT2JqZWN0LnByb3RvdHlwZSkuc29ydCgpLmpvaW4oJ1xcMCcpO1xuZnVuY3Rpb24gZGV2YWx1ZSh2YWx1ZSkge1xuICAgIHZhciBjb3VudHMgPSBuZXcgTWFwKCk7XG4gICAgZnVuY3Rpb24gd2Fsayh0aGluZykge1xuICAgICAgICBpZiAodHlwZW9mIHRoaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3Qgc3RyaW5naWZ5IGEgZnVuY3Rpb25cIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvdW50cy5oYXModGhpbmcpKSB7XG4gICAgICAgICAgICBjb3VudHMuc2V0KHRoaW5nLCBjb3VudHMuZ2V0KHRoaW5nKSArIDEpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvdW50cy5zZXQodGhpbmcsIDEpO1xuICAgICAgICBpZiAoIWlzUHJpbWl0aXZlKHRoaW5nKSkge1xuICAgICAgICAgICAgdmFyIHR5cGUgPSBnZXRUeXBlKHRoaW5nKTtcbiAgICAgICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ051bWJlcic6XG4gICAgICAgICAgICAgICAgY2FzZSAnU3RyaW5nJzpcbiAgICAgICAgICAgICAgICBjYXNlICdCb29sZWFuJzpcbiAgICAgICAgICAgICAgICBjYXNlICdEYXRlJzpcbiAgICAgICAgICAgICAgICBjYXNlICdSZWdFeHAnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgY2FzZSAnQXJyYXknOlxuICAgICAgICAgICAgICAgICAgICB0aGluZy5mb3JFYWNoKHdhbGspO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdTZXQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ01hcCc6XG4gICAgICAgICAgICAgICAgICAgIEFycmF5LmZyb20odGhpbmcpLmZvckVhY2god2Fsayk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHZhciBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGluZyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwcm90byAhPT0gT2JqZWN0LnByb3RvdHlwZSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvdG8gIT09IG51bGwgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHByb3RvKS5zb3J0KCkuam9pbignXFwwJykgIT09IG9iamVjdFByb3RvT3duUHJvcGVydHlOYW1lcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IHN0cmluZ2lmeSBhcmJpdHJhcnkgbm9uLVBPSk9zXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHRoaW5nKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3Qgc3RyaW5naWZ5IFBPSk9zIHdpdGggc3ltYm9saWMga2V5c1wiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyh0aGluZykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IHJldHVybiB3YWxrKHRoaW5nW2tleV0pOyB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICB3YWxrKHZhbHVlKTtcbiAgICB2YXIgbmFtZXMgPSBuZXcgTWFwKCk7XG4gICAgQXJyYXkuZnJvbShjb3VudHMpXG4gICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKGVudHJ5KSB7IHJldHVybiBlbnRyeVsxXSA+IDE7IH0pXG4gICAgICAgIC5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBiWzFdIC0gYVsxXTsgfSlcbiAgICAgICAgLmZvckVhY2goZnVuY3Rpb24gKGVudHJ5LCBpKSB7XG4gICAgICAgIG5hbWVzLnNldChlbnRyeVswXSwgZ2V0TmFtZShpKSk7XG4gICAgfSk7XG4gICAgZnVuY3Rpb24gc3RyaW5naWZ5KHRoaW5nKSB7XG4gICAgICAgIGlmIChuYW1lcy5oYXModGhpbmcpKSB7XG4gICAgICAgICAgICByZXR1cm4gbmFtZXMuZ2V0KHRoaW5nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNQcmltaXRpdmUodGhpbmcpKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5naWZ5UHJpbWl0aXZlKHRoaW5nKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdHlwZSA9IGdldFR5cGUodGhpbmcpO1xuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ051bWJlcic6XG4gICAgICAgICAgICBjYXNlICdTdHJpbmcnOlxuICAgICAgICAgICAgY2FzZSAnQm9vbGVhbic6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiT2JqZWN0KFwiICsgc3RyaW5naWZ5KHRoaW5nLnZhbHVlT2YoKSkgKyBcIilcIjtcbiAgICAgICAgICAgIGNhc2UgJ1JlZ0V4cCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaW5nLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICBjYXNlICdEYXRlJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJuZXcgRGF0ZShcIiArIHRoaW5nLmdldFRpbWUoKSArIFwiKVwiO1xuICAgICAgICAgICAgY2FzZSAnQXJyYXknOlxuICAgICAgICAgICAgICAgIHZhciBtZW1iZXJzID0gdGhpbmcubWFwKGZ1bmN0aW9uICh2LCBpKSB7IHJldHVybiBpIGluIHRoaW5nID8gc3RyaW5naWZ5KHYpIDogJyc7IH0pO1xuICAgICAgICAgICAgICAgIHZhciB0YWlsID0gdGhpbmcubGVuZ3RoID09PSAwIHx8ICh0aGluZy5sZW5ndGggLSAxIGluIHRoaW5nKSA/ICcnIDogJywnO1xuICAgICAgICAgICAgICAgIHJldHVybiBcIltcIiArIG1lbWJlcnMuam9pbignLCcpICsgdGFpbCArIFwiXVwiO1xuICAgICAgICAgICAgY2FzZSAnU2V0JzpcbiAgICAgICAgICAgIGNhc2UgJ01hcCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwibmV3IFwiICsgdHlwZSArIFwiKFtcIiArIEFycmF5LmZyb20odGhpbmcpLm1hcChzdHJpbmdpZnkpLmpvaW4oJywnKSArIFwiXSlcIjtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdmFyIG9iaiA9IFwie1wiICsgT2JqZWN0LmtleXModGhpbmcpLm1hcChmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBzYWZlS2V5KGtleSkgKyBcIjpcIiArIHN0cmluZ2lmeSh0aGluZ1trZXldKTsgfSkuam9pbignLCcpICsgXCJ9XCI7XG4gICAgICAgICAgICAgICAgdmFyIHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaW5nKTtcbiAgICAgICAgICAgICAgICBpZiAocHJvdG8gPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaW5nKS5sZW5ndGggPiAwXG4gICAgICAgICAgICAgICAgICAgICAgICA/IFwiT2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKG51bGwpLFwiICsgb2JqICsgXCIpXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIDogXCJPYmplY3QuY3JlYXRlKG51bGwpXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFyIHN0ciA9IHN0cmluZ2lmeSh2YWx1ZSk7XG4gICAgaWYgKG5hbWVzLnNpemUpIHtcbiAgICAgICAgdmFyIHBhcmFtc18xID0gW107XG4gICAgICAgIHZhciBzdGF0ZW1lbnRzXzEgPSBbXTtcbiAgICAgICAgdmFyIHZhbHVlc18xID0gW107XG4gICAgICAgIG5hbWVzLmZvckVhY2goZnVuY3Rpb24gKG5hbWUsIHRoaW5nKSB7XG4gICAgICAgICAgICBwYXJhbXNfMS5wdXNoKG5hbWUpO1xuICAgICAgICAgICAgaWYgKGlzUHJpbWl0aXZlKHRoaW5nKSkge1xuICAgICAgICAgICAgICAgIHZhbHVlc18xLnB1c2goc3RyaW5naWZ5UHJpbWl0aXZlKHRoaW5nKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHR5cGUgPSBnZXRUeXBlKHRoaW5nKTtcbiAgICAgICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ051bWJlcic6XG4gICAgICAgICAgICAgICAgY2FzZSAnU3RyaW5nJzpcbiAgICAgICAgICAgICAgICBjYXNlICdCb29sZWFuJzpcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVzXzEucHVzaChcIk9iamVjdChcIiArIHN0cmluZ2lmeSh0aGluZy52YWx1ZU9mKCkpICsgXCIpXCIpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdSZWdFeHAnOlxuICAgICAgICAgICAgICAgICAgICB2YWx1ZXNfMS5wdXNoKHRoaW5nLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdEYXRlJzpcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVzXzEucHVzaChcIm5ldyBEYXRlKFwiICsgdGhpbmcuZ2V0VGltZSgpICsgXCIpXCIpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdBcnJheSc6XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlc18xLnB1c2goXCJBcnJheShcIiArIHRoaW5nLmxlbmd0aCArIFwiKVwiKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpbmcuZm9yRWFjaChmdW5jdGlvbiAodiwgaSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGVtZW50c18xLnB1c2gobmFtZSArIFwiW1wiICsgaSArIFwiXT1cIiArIHN0cmluZ2lmeSh2KSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdTZXQnOlxuICAgICAgICAgICAgICAgICAgICB2YWx1ZXNfMS5wdXNoKFwibmV3IFNldFwiKTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGVtZW50c18xLnB1c2gobmFtZSArIFwiLlwiICsgQXJyYXkuZnJvbSh0aGluZykubWFwKGZ1bmN0aW9uICh2KSB7IHJldHVybiBcImFkZChcIiArIHN0cmluZ2lmeSh2KSArIFwiKVwiOyB9KS5qb2luKCcuJykpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdNYXAnOlxuICAgICAgICAgICAgICAgICAgICB2YWx1ZXNfMS5wdXNoKFwibmV3IE1hcFwiKTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGVtZW50c18xLnB1c2gobmFtZSArIFwiLlwiICsgQXJyYXkuZnJvbSh0aGluZykubWFwKGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGsgPSBfYVswXSwgdiA9IF9hWzFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwic2V0KFwiICsgc3RyaW5naWZ5KGspICsgXCIsIFwiICsgc3RyaW5naWZ5KHYpICsgXCIpXCI7XG4gICAgICAgICAgICAgICAgICAgIH0pLmpvaW4oJy4nKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlc18xLnB1c2goT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaW5nKSA9PT0gbnVsbCA/ICdPYmplY3QuY3JlYXRlKG51bGwpJyA6ICd7fScpO1xuICAgICAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyh0aGluZykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZW1lbnRzXzEucHVzaChcIlwiICsgbmFtZSArIHNhZmVQcm9wKGtleSkgKyBcIj1cIiArIHN0cmluZ2lmeSh0aGluZ1trZXldKSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgc3RhdGVtZW50c18xLnB1c2goXCJyZXR1cm4gXCIgKyBzdHIpO1xuICAgICAgICByZXR1cm4gXCIoZnVuY3Rpb24oXCIgKyBwYXJhbXNfMS5qb2luKCcsJykgKyBcIil7XCIgKyBzdGF0ZW1lbnRzXzEuam9pbignOycpICsgXCJ9KFwiICsgdmFsdWVzXzEuam9pbignLCcpICsgXCIpKVwiO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG59XG5mdW5jdGlvbiBnZXROYW1lKG51bSkge1xuICAgIHZhciBuYW1lID0gJyc7XG4gICAgZG8ge1xuICAgICAgICBuYW1lID0gY2hhcnNbbnVtICUgY2hhcnMubGVuZ3RoXSArIG5hbWU7XG4gICAgICAgIG51bSA9IH5+KG51bSAvIGNoYXJzLmxlbmd0aCkgLSAxO1xuICAgIH0gd2hpbGUgKG51bSA+PSAwKTtcbiAgICByZXR1cm4gcmVzZXJ2ZWQudGVzdChuYW1lKSA/IG5hbWUgKyBcIl9cIiA6IG5hbWU7XG59XG5mdW5jdGlvbiBpc1ByaW1pdGl2ZSh0aGluZykge1xuICAgIHJldHVybiBPYmplY3QodGhpbmcpICE9PSB0aGluZztcbn1cbmZ1bmN0aW9uIHN0cmluZ2lmeVByaW1pdGl2ZSh0aGluZykge1xuICAgIGlmICh0eXBlb2YgdGhpbmcgPT09ICdzdHJpbmcnKVxuICAgICAgICByZXR1cm4gc3RyaW5naWZ5U3RyaW5nKHRoaW5nKTtcbiAgICBpZiAodGhpbmcgPT09IHZvaWQgMClcbiAgICAgICAgcmV0dXJuICd2b2lkIDAnO1xuICAgIGlmICh0aGluZyA9PT0gMCAmJiAxIC8gdGhpbmcgPCAwKVxuICAgICAgICByZXR1cm4gJy0wJztcbiAgICB2YXIgc3RyID0gU3RyaW5nKHRoaW5nKTtcbiAgICBpZiAodHlwZW9mIHRoaW5nID09PSAnbnVtYmVyJylcbiAgICAgICAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eKC0pPzBcXC4vLCAnJDEuJyk7XG4gICAgcmV0dXJuIHN0cjtcbn1cbmZ1bmN0aW9uIGdldFR5cGUodGhpbmcpIHtcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHRoaW5nKS5zbGljZSg4LCAtMSk7XG59XG5mdW5jdGlvbiBlc2NhcGVVbnNhZmVDaGFyKGMpIHtcbiAgICByZXR1cm4gZXNjYXBlZFtjXSB8fCBjO1xufVxuZnVuY3Rpb24gZXNjYXBlVW5zYWZlQ2hhcnMoc3RyKSB7XG4gICAgcmV0dXJuIHN0ci5yZXBsYWNlKHVuc2FmZUNoYXJzLCBlc2NhcGVVbnNhZmVDaGFyKTtcbn1cbmZ1bmN0aW9uIHNhZmVLZXkoa2V5KSB7XG4gICAgcmV0dXJuIC9eW18kYS16QS1aXVtfJGEtekEtWjAtOV0qJC8udGVzdChrZXkpID8ga2V5IDogZXNjYXBlVW5zYWZlQ2hhcnMoSlNPTi5zdHJpbmdpZnkoa2V5KSk7XG59XG5mdW5jdGlvbiBzYWZlUHJvcChrZXkpIHtcbiAgICByZXR1cm4gL15bXyRhLXpBLVpdW18kYS16QS1aMC05XSokLy50ZXN0KGtleSkgPyBcIi5cIiArIGtleSA6IFwiW1wiICsgZXNjYXBlVW5zYWZlQ2hhcnMoSlNPTi5zdHJpbmdpZnkoa2V5KSkgKyBcIl1cIjtcbn1cbmZ1bmN0aW9uIHN0cmluZ2lmeVN0cmluZyhzdHIpIHtcbiAgICB2YXIgcmVzdWx0ID0gJ1wiJztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB2YXIgY2hhciA9IHN0ci5jaGFyQXQoaSk7XG4gICAgICAgIHZhciBjb2RlID0gY2hhci5jaGFyQ29kZUF0KDApO1xuICAgICAgICBpZiAoY2hhciA9PT0gJ1wiJykge1xuICAgICAgICAgICAgcmVzdWx0ICs9ICdcXFxcXCInO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGNoYXIgaW4gZXNjYXBlZCkge1xuICAgICAgICAgICAgcmVzdWx0ICs9IGVzY2FwZWRbY2hhcl07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoY29kZSA+PSAweGQ4MDAgJiYgY29kZSA8PSAweGRmZmYpIHtcbiAgICAgICAgICAgIHZhciBuZXh0ID0gc3RyLmNoYXJDb2RlQXQoaSArIDEpO1xuICAgICAgICAgICAgLy8gSWYgdGhpcyBpcyB0aGUgYmVnaW5uaW5nIG9mIGEgW2hpZ2gsIGxvd10gc3Vycm9nYXRlIHBhaXIsXG4gICAgICAgICAgICAvLyBhZGQgdGhlIG5leHQgdHdvIGNoYXJhY3RlcnMsIG90aGVyd2lzZSBlc2NhcGVcbiAgICAgICAgICAgIGlmIChjb2RlIDw9IDB4ZGJmZiAmJiAobmV4dCA+PSAweGRjMDAgJiYgbmV4dCA8PSAweGRmZmYpKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IGNoYXIgKyBzdHJbKytpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSBcIlxcXFx1XCIgKyBjb2RlLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0ICs9IGNoYXI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVzdWx0ICs9ICdcIic7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLy8gQmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL3RtcHZhci9qc2RvbS9ibG9iL2FhODViMmFiZjA3NzY2ZmY3YmY1YzFmNmRhYWZiMzcyNmYyZjJkYjUvbGliL2pzZG9tL2xpdmluZy9ibG9iLmpzXG5cbi8vIGZpeCBmb3IgXCJSZWFkYWJsZVwiIGlzbid0IGEgbmFtZWQgZXhwb3J0IGlzc3VlXG5jb25zdCBSZWFkYWJsZSA9IFN0cmVhbS5SZWFkYWJsZTtcblxuY29uc3QgQlVGRkVSID0gU3ltYm9sKCdidWZmZXInKTtcbmNvbnN0IFRZUEUgPSBTeW1ib2woJ3R5cGUnKTtcblxuY2xhc3MgQmxvYiB7XG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdHRoaXNbVFlQRV0gPSAnJztcblxuXHRcdGNvbnN0IGJsb2JQYXJ0cyA9IGFyZ3VtZW50c1swXTtcblx0XHRjb25zdCBvcHRpb25zID0gYXJndW1lbnRzWzFdO1xuXG5cdFx0Y29uc3QgYnVmZmVycyA9IFtdO1xuXHRcdGxldCBzaXplID0gMDtcblxuXHRcdGlmIChibG9iUGFydHMpIHtcblx0XHRcdGNvbnN0IGEgPSBibG9iUGFydHM7XG5cdFx0XHRjb25zdCBsZW5ndGggPSBOdW1iZXIoYS5sZW5ndGgpO1xuXHRcdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuXHRcdFx0XHRjb25zdCBlbGVtZW50ID0gYVtpXTtcblx0XHRcdFx0bGV0IGJ1ZmZlcjtcblx0XHRcdFx0aWYgKGVsZW1lbnQgaW5zdGFuY2VvZiBCdWZmZXIpIHtcblx0XHRcdFx0XHRidWZmZXIgPSBlbGVtZW50O1xuXHRcdFx0XHR9IGVsc2UgaWYgKEFycmF5QnVmZmVyLmlzVmlldyhlbGVtZW50KSkge1xuXHRcdFx0XHRcdGJ1ZmZlciA9IEJ1ZmZlci5mcm9tKGVsZW1lbnQuYnVmZmVyLCBlbGVtZW50LmJ5dGVPZmZzZXQsIGVsZW1lbnQuYnl0ZUxlbmd0aCk7XG5cdFx0XHRcdH0gZWxzZSBpZiAoZWxlbWVudCBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG5cdFx0XHRcdFx0YnVmZmVyID0gQnVmZmVyLmZyb20oZWxlbWVudCk7XG5cdFx0XHRcdH0gZWxzZSBpZiAoZWxlbWVudCBpbnN0YW5jZW9mIEJsb2IpIHtcblx0XHRcdFx0XHRidWZmZXIgPSBlbGVtZW50W0JVRkZFUl07XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0YnVmZmVyID0gQnVmZmVyLmZyb20odHlwZW9mIGVsZW1lbnQgPT09ICdzdHJpbmcnID8gZWxlbWVudCA6IFN0cmluZyhlbGVtZW50KSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0c2l6ZSArPSBidWZmZXIubGVuZ3RoO1xuXHRcdFx0XHRidWZmZXJzLnB1c2goYnVmZmVyKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHR0aGlzW0JVRkZFUl0gPSBCdWZmZXIuY29uY2F0KGJ1ZmZlcnMpO1xuXG5cdFx0bGV0IHR5cGUgPSBvcHRpb25zICYmIG9wdGlvbnMudHlwZSAhPT0gdW5kZWZpbmVkICYmIFN0cmluZyhvcHRpb25zLnR5cGUpLnRvTG93ZXJDYXNlKCk7XG5cdFx0aWYgKHR5cGUgJiYgIS9bXlxcdTAwMjAtXFx1MDA3RV0vLnRlc3QodHlwZSkpIHtcblx0XHRcdHRoaXNbVFlQRV0gPSB0eXBlO1xuXHRcdH1cblx0fVxuXHRnZXQgc2l6ZSgpIHtcblx0XHRyZXR1cm4gdGhpc1tCVUZGRVJdLmxlbmd0aDtcblx0fVxuXHRnZXQgdHlwZSgpIHtcblx0XHRyZXR1cm4gdGhpc1tUWVBFXTtcblx0fVxuXHR0ZXh0KCkge1xuXHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpc1tCVUZGRVJdLnRvU3RyaW5nKCkpO1xuXHR9XG5cdGFycmF5QnVmZmVyKCkge1xuXHRcdGNvbnN0IGJ1ZiA9IHRoaXNbQlVGRkVSXTtcblx0XHRjb25zdCBhYiA9IGJ1Zi5idWZmZXIuc2xpY2UoYnVmLmJ5dGVPZmZzZXQsIGJ1Zi5ieXRlT2Zmc2V0ICsgYnVmLmJ5dGVMZW5ndGgpO1xuXHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUoYWIpO1xuXHR9XG5cdHN0cmVhbSgpIHtcblx0XHRjb25zdCByZWFkYWJsZSA9IG5ldyBSZWFkYWJsZSgpO1xuXHRcdHJlYWRhYmxlLl9yZWFkID0gZnVuY3Rpb24gKCkge307XG5cdFx0cmVhZGFibGUucHVzaCh0aGlzW0JVRkZFUl0pO1xuXHRcdHJlYWRhYmxlLnB1c2gobnVsbCk7XG5cdFx0cmV0dXJuIHJlYWRhYmxlO1xuXHR9XG5cdHRvU3RyaW5nKCkge1xuXHRcdHJldHVybiAnW29iamVjdCBCbG9iXSc7XG5cdH1cblx0c2xpY2UoKSB7XG5cdFx0Y29uc3Qgc2l6ZSA9IHRoaXMuc2l6ZTtcblxuXHRcdGNvbnN0IHN0YXJ0ID0gYXJndW1lbnRzWzBdO1xuXHRcdGNvbnN0IGVuZCA9IGFyZ3VtZW50c1sxXTtcblx0XHRsZXQgcmVsYXRpdmVTdGFydCwgcmVsYXRpdmVFbmQ7XG5cdFx0aWYgKHN0YXJ0ID09PSB1bmRlZmluZWQpIHtcblx0XHRcdHJlbGF0aXZlU3RhcnQgPSAwO1xuXHRcdH0gZWxzZSBpZiAoc3RhcnQgPCAwKSB7XG5cdFx0XHRyZWxhdGl2ZVN0YXJ0ID0gTWF0aC5tYXgoc2l6ZSArIHN0YXJ0LCAwKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmVsYXRpdmVTdGFydCA9IE1hdGgubWluKHN0YXJ0LCBzaXplKTtcblx0XHR9XG5cdFx0aWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRyZWxhdGl2ZUVuZCA9IHNpemU7XG5cdFx0fSBlbHNlIGlmIChlbmQgPCAwKSB7XG5cdFx0XHRyZWxhdGl2ZUVuZCA9IE1hdGgubWF4KHNpemUgKyBlbmQsIDApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZWxhdGl2ZUVuZCA9IE1hdGgubWluKGVuZCwgc2l6ZSk7XG5cdFx0fVxuXHRcdGNvbnN0IHNwYW4gPSBNYXRoLm1heChyZWxhdGl2ZUVuZCAtIHJlbGF0aXZlU3RhcnQsIDApO1xuXG5cdFx0Y29uc3QgYnVmZmVyID0gdGhpc1tCVUZGRVJdO1xuXHRcdGNvbnN0IHNsaWNlZEJ1ZmZlciA9IGJ1ZmZlci5zbGljZShyZWxhdGl2ZVN0YXJ0LCByZWxhdGl2ZVN0YXJ0ICsgc3Bhbik7XG5cdFx0Y29uc3QgYmxvYiA9IG5ldyBCbG9iKFtdLCB7IHR5cGU6IGFyZ3VtZW50c1syXSB9KTtcblx0XHRibG9iW0JVRkZFUl0gPSBzbGljZWRCdWZmZXI7XG5cdFx0cmV0dXJuIGJsb2I7XG5cdH1cbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoQmxvYi5wcm90b3R5cGUsIHtcblx0c2l6ZTogeyBlbnVtZXJhYmxlOiB0cnVlIH0sXG5cdHR5cGU6IHsgZW51bWVyYWJsZTogdHJ1ZSB9LFxuXHRzbGljZTogeyBlbnVtZXJhYmxlOiB0cnVlIH1cbn0pO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoQmxvYi5wcm90b3R5cGUsIFN5bWJvbC50b1N0cmluZ1RhZywge1xuXHR2YWx1ZTogJ0Jsb2InLFxuXHR3cml0YWJsZTogZmFsc2UsXG5cdGVudW1lcmFibGU6IGZhbHNlLFxuXHRjb25maWd1cmFibGU6IHRydWVcbn0pO1xuXG4vKipcbiAqIGZldGNoLWVycm9yLmpzXG4gKlxuICogRmV0Y2hFcnJvciBpbnRlcmZhY2UgZm9yIG9wZXJhdGlvbmFsIGVycm9yc1xuICovXG5cbi8qKlxuICogQ3JlYXRlIEZldGNoRXJyb3IgaW5zdGFuY2VcbiAqXG4gKiBAcGFyYW0gICBTdHJpbmcgICAgICBtZXNzYWdlICAgICAgRXJyb3IgbWVzc2FnZSBmb3IgaHVtYW5cbiAqIEBwYXJhbSAgIFN0cmluZyAgICAgIHR5cGUgICAgICAgICBFcnJvciB0eXBlIGZvciBtYWNoaW5lXG4gKiBAcGFyYW0gICBTdHJpbmcgICAgICBzeXN0ZW1FcnJvciAgRm9yIE5vZGUuanMgc3lzdGVtIGVycm9yXG4gKiBAcmV0dXJuICBGZXRjaEVycm9yXG4gKi9cbmZ1bmN0aW9uIEZldGNoRXJyb3IobWVzc2FnZSwgdHlwZSwgc3lzdGVtRXJyb3IpIHtcbiAgRXJyb3IuY2FsbCh0aGlzLCBtZXNzYWdlKTtcblxuICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICB0aGlzLnR5cGUgPSB0eXBlO1xuXG4gIC8vIHdoZW4gZXJyLnR5cGUgaXMgYHN5c3RlbWAsIGVyci5jb2RlIGNvbnRhaW5zIHN5c3RlbSBlcnJvciBjb2RlXG4gIGlmIChzeXN0ZW1FcnJvcikge1xuICAgIHRoaXMuY29kZSA9IHRoaXMuZXJybm8gPSBzeXN0ZW1FcnJvci5jb2RlO1xuICB9XG5cbiAgLy8gaGlkZSBjdXN0b20gZXJyb3IgaW1wbGVtZW50YXRpb24gZGV0YWlscyBmcm9tIGVuZC11c2Vyc1xuICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCB0aGlzLmNvbnN0cnVjdG9yKTtcbn1cblxuRmV0Y2hFcnJvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEVycm9yLnByb3RvdHlwZSk7XG5GZXRjaEVycm9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEZldGNoRXJyb3I7XG5GZXRjaEVycm9yLnByb3RvdHlwZS5uYW1lID0gJ0ZldGNoRXJyb3InO1xuXG5sZXQgY29udmVydDtcbnRyeSB7XG5cdGNvbnZlcnQgPSByZXF1aXJlKCdlbmNvZGluZycpLmNvbnZlcnQ7XG59IGNhdGNoIChlKSB7fVxuXG5jb25zdCBJTlRFUk5BTFMgPSBTeW1ib2woJ0JvZHkgaW50ZXJuYWxzJyk7XG5cbi8vIGZpeCBhbiBpc3N1ZSB3aGVyZSBcIlBhc3NUaHJvdWdoXCIgaXNuJ3QgYSBuYW1lZCBleHBvcnQgZm9yIG5vZGUgPDEwXG5jb25zdCBQYXNzVGhyb3VnaCA9IFN0cmVhbS5QYXNzVGhyb3VnaDtcblxuLyoqXG4gKiBCb2R5IG1peGluXG4gKlxuICogUmVmOiBodHRwczovL2ZldGNoLnNwZWMud2hhdHdnLm9yZy8jYm9keVxuICpcbiAqIEBwYXJhbSAgIFN0cmVhbSAgYm9keSAgUmVhZGFibGUgc3RyZWFtXG4gKiBAcGFyYW0gICBPYmplY3QgIG9wdHMgIFJlc3BvbnNlIG9wdGlvbnNcbiAqIEByZXR1cm4gIFZvaWRcbiAqL1xuZnVuY3Rpb24gQm9keShib2R5KSB7XG5cdHZhciBfdGhpcyA9IHRoaXM7XG5cblx0dmFyIF9yZWYgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9LFxuXHQgICAgX3JlZiRzaXplID0gX3JlZi5zaXplO1xuXG5cdGxldCBzaXplID0gX3JlZiRzaXplID09PSB1bmRlZmluZWQgPyAwIDogX3JlZiRzaXplO1xuXHR2YXIgX3JlZiR0aW1lb3V0ID0gX3JlZi50aW1lb3V0O1xuXHRsZXQgdGltZW91dCA9IF9yZWYkdGltZW91dCA9PT0gdW5kZWZpbmVkID8gMCA6IF9yZWYkdGltZW91dDtcblxuXHRpZiAoYm9keSA9PSBudWxsKSB7XG5cdFx0Ly8gYm9keSBpcyB1bmRlZmluZWQgb3IgbnVsbFxuXHRcdGJvZHkgPSBudWxsO1xuXHR9IGVsc2UgaWYgKGlzVVJMU2VhcmNoUGFyYW1zKGJvZHkpKSB7XG5cdFx0Ly8gYm9keSBpcyBhIFVSTFNlYXJjaFBhcmFtc1xuXHRcdGJvZHkgPSBCdWZmZXIuZnJvbShib2R5LnRvU3RyaW5nKCkpO1xuXHR9IGVsc2UgaWYgKGlzQmxvYihib2R5KSkgOyBlbHNlIGlmIChCdWZmZXIuaXNCdWZmZXIoYm9keSkpIDsgZWxzZSBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGJvZHkpID09PSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nKSB7XG5cdFx0Ly8gYm9keSBpcyBBcnJheUJ1ZmZlclxuXHRcdGJvZHkgPSBCdWZmZXIuZnJvbShib2R5KTtcblx0fSBlbHNlIGlmIChBcnJheUJ1ZmZlci5pc1ZpZXcoYm9keSkpIHtcblx0XHQvLyBib2R5IGlzIEFycmF5QnVmZmVyVmlld1xuXHRcdGJvZHkgPSBCdWZmZXIuZnJvbShib2R5LmJ1ZmZlciwgYm9keS5ieXRlT2Zmc2V0LCBib2R5LmJ5dGVMZW5ndGgpO1xuXHR9IGVsc2UgaWYgKGJvZHkgaW5zdGFuY2VvZiBTdHJlYW0pIDsgZWxzZSB7XG5cdFx0Ly8gbm9uZSBvZiB0aGUgYWJvdmVcblx0XHQvLyBjb2VyY2UgdG8gc3RyaW5nIHRoZW4gYnVmZmVyXG5cdFx0Ym9keSA9IEJ1ZmZlci5mcm9tKFN0cmluZyhib2R5KSk7XG5cdH1cblx0dGhpc1tJTlRFUk5BTFNdID0ge1xuXHRcdGJvZHksXG5cdFx0ZGlzdHVyYmVkOiBmYWxzZSxcblx0XHRlcnJvcjogbnVsbFxuXHR9O1xuXHR0aGlzLnNpemUgPSBzaXplO1xuXHR0aGlzLnRpbWVvdXQgPSB0aW1lb3V0O1xuXG5cdGlmIChib2R5IGluc3RhbmNlb2YgU3RyZWFtKSB7XG5cdFx0Ym9keS5vbignZXJyb3InLCBmdW5jdGlvbiAoZXJyKSB7XG5cdFx0XHRjb25zdCBlcnJvciA9IGVyci5uYW1lID09PSAnQWJvcnRFcnJvcicgPyBlcnIgOiBuZXcgRmV0Y2hFcnJvcihgSW52YWxpZCByZXNwb25zZSBib2R5IHdoaWxlIHRyeWluZyB0byBmZXRjaCAke190aGlzLnVybH06ICR7ZXJyLm1lc3NhZ2V9YCwgJ3N5c3RlbScsIGVycik7XG5cdFx0XHRfdGhpc1tJTlRFUk5BTFNdLmVycm9yID0gZXJyb3I7XG5cdFx0fSk7XG5cdH1cbn1cblxuQm9keS5wcm90b3R5cGUgPSB7XG5cdGdldCBib2R5KCkge1xuXHRcdHJldHVybiB0aGlzW0lOVEVSTkFMU10uYm9keTtcblx0fSxcblxuXHRnZXQgYm9keVVzZWQoKSB7XG5cdFx0cmV0dXJuIHRoaXNbSU5URVJOQUxTXS5kaXN0dXJiZWQ7XG5cdH0sXG5cblx0LyoqXG4gICogRGVjb2RlIHJlc3BvbnNlIGFzIEFycmF5QnVmZmVyXG4gICpcbiAgKiBAcmV0dXJuICBQcm9taXNlXG4gICovXG5cdGFycmF5QnVmZmVyKCkge1xuXHRcdHJldHVybiBjb25zdW1lQm9keS5jYWxsKHRoaXMpLnRoZW4oZnVuY3Rpb24gKGJ1Zikge1xuXHRcdFx0cmV0dXJuIGJ1Zi5idWZmZXIuc2xpY2UoYnVmLmJ5dGVPZmZzZXQsIGJ1Zi5ieXRlT2Zmc2V0ICsgYnVmLmJ5dGVMZW5ndGgpO1xuXHRcdH0pO1xuXHR9LFxuXG5cdC8qKlxuICAqIFJldHVybiByYXcgcmVzcG9uc2UgYXMgQmxvYlxuICAqXG4gICogQHJldHVybiBQcm9taXNlXG4gICovXG5cdGJsb2IoKSB7XG5cdFx0bGV0IGN0ID0gdGhpcy5oZWFkZXJzICYmIHRoaXMuaGVhZGVycy5nZXQoJ2NvbnRlbnQtdHlwZScpIHx8ICcnO1xuXHRcdHJldHVybiBjb25zdW1lQm9keS5jYWxsKHRoaXMpLnRoZW4oZnVuY3Rpb24gKGJ1Zikge1xuXHRcdFx0cmV0dXJuIE9iamVjdC5hc3NpZ24oXG5cdFx0XHQvLyBQcmV2ZW50IGNvcHlpbmdcblx0XHRcdG5ldyBCbG9iKFtdLCB7XG5cdFx0XHRcdHR5cGU6IGN0LnRvTG93ZXJDYXNlKClcblx0XHRcdH0pLCB7XG5cdFx0XHRcdFtCVUZGRVJdOiBidWZcblx0XHRcdH0pO1xuXHRcdH0pO1xuXHR9LFxuXG5cdC8qKlxuICAqIERlY29kZSByZXNwb25zZSBhcyBqc29uXG4gICpcbiAgKiBAcmV0dXJuICBQcm9taXNlXG4gICovXG5cdGpzb24oKSB7XG5cdFx0dmFyIF90aGlzMiA9IHRoaXM7XG5cblx0XHRyZXR1cm4gY29uc3VtZUJvZHkuY2FsbCh0aGlzKS50aGVuKGZ1bmN0aW9uIChidWZmZXIpIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdHJldHVybiBKU09OLnBhcnNlKGJ1ZmZlci50b1N0cmluZygpKTtcblx0XHRcdH0gY2F0Y2ggKGVycikge1xuXHRcdFx0XHRyZXR1cm4gQm9keS5Qcm9taXNlLnJlamVjdChuZXcgRmV0Y2hFcnJvcihgaW52YWxpZCBqc29uIHJlc3BvbnNlIGJvZHkgYXQgJHtfdGhpczIudXJsfSByZWFzb246ICR7ZXJyLm1lc3NhZ2V9YCwgJ2ludmFsaWQtanNvbicpKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fSxcblxuXHQvKipcbiAgKiBEZWNvZGUgcmVzcG9uc2UgYXMgdGV4dFxuICAqXG4gICogQHJldHVybiAgUHJvbWlzZVxuICAqL1xuXHR0ZXh0KCkge1xuXHRcdHJldHVybiBjb25zdW1lQm9keS5jYWxsKHRoaXMpLnRoZW4oZnVuY3Rpb24gKGJ1ZmZlcikge1xuXHRcdFx0cmV0dXJuIGJ1ZmZlci50b1N0cmluZygpO1xuXHRcdH0pO1xuXHR9LFxuXG5cdC8qKlxuICAqIERlY29kZSByZXNwb25zZSBhcyBidWZmZXIgKG5vbi1zcGVjIGFwaSlcbiAgKlxuICAqIEByZXR1cm4gIFByb21pc2VcbiAgKi9cblx0YnVmZmVyKCkge1xuXHRcdHJldHVybiBjb25zdW1lQm9keS5jYWxsKHRoaXMpO1xuXHR9LFxuXG5cdC8qKlxuICAqIERlY29kZSByZXNwb25zZSBhcyB0ZXh0LCB3aGlsZSBhdXRvbWF0aWNhbGx5IGRldGVjdGluZyB0aGUgZW5jb2RpbmcgYW5kXG4gICogdHJ5aW5nIHRvIGRlY29kZSB0byBVVEYtOCAobm9uLXNwZWMgYXBpKVxuICAqXG4gICogQHJldHVybiAgUHJvbWlzZVxuICAqL1xuXHR0ZXh0Q29udmVydGVkKCkge1xuXHRcdHZhciBfdGhpczMgPSB0aGlzO1xuXG5cdFx0cmV0dXJuIGNvbnN1bWVCb2R5LmNhbGwodGhpcykudGhlbihmdW5jdGlvbiAoYnVmZmVyKSB7XG5cdFx0XHRyZXR1cm4gY29udmVydEJvZHkoYnVmZmVyLCBfdGhpczMuaGVhZGVycyk7XG5cdFx0fSk7XG5cdH1cbn07XG5cbi8vIEluIGJyb3dzZXJzLCBhbGwgcHJvcGVydGllcyBhcmUgZW51bWVyYWJsZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKEJvZHkucHJvdG90eXBlLCB7XG5cdGJvZHk6IHsgZW51bWVyYWJsZTogdHJ1ZSB9LFxuXHRib2R5VXNlZDogeyBlbnVtZXJhYmxlOiB0cnVlIH0sXG5cdGFycmF5QnVmZmVyOiB7IGVudW1lcmFibGU6IHRydWUgfSxcblx0YmxvYjogeyBlbnVtZXJhYmxlOiB0cnVlIH0sXG5cdGpzb246IHsgZW51bWVyYWJsZTogdHJ1ZSB9LFxuXHR0ZXh0OiB7IGVudW1lcmFibGU6IHRydWUgfVxufSk7XG5cbkJvZHkubWl4SW4gPSBmdW5jdGlvbiAocHJvdG8pIHtcblx0Zm9yIChjb25zdCBuYW1lIG9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKEJvZHkucHJvdG90eXBlKSkge1xuXHRcdC8vIGlzdGFuYnVsIGlnbm9yZSBlbHNlOiBmdXR1cmUgcHJvb2Zcblx0XHRpZiAoIShuYW1lIGluIHByb3RvKSkge1xuXHRcdFx0Y29uc3QgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoQm9keS5wcm90b3R5cGUsIG5hbWUpO1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3RvLCBuYW1lLCBkZXNjKTtcblx0XHR9XG5cdH1cbn07XG5cbi8qKlxuICogQ29uc3VtZSBhbmQgY29udmVydCBhbiBlbnRpcmUgQm9keSB0byBhIEJ1ZmZlci5cbiAqXG4gKiBSZWY6IGh0dHBzOi8vZmV0Y2guc3BlYy53aGF0d2cub3JnLyNjb25jZXB0LWJvZHktY29uc3VtZS1ib2R5XG4gKlxuICogQHJldHVybiAgUHJvbWlzZVxuICovXG5mdW5jdGlvbiBjb25zdW1lQm9keSgpIHtcblx0dmFyIF90aGlzNCA9IHRoaXM7XG5cblx0aWYgKHRoaXNbSU5URVJOQUxTXS5kaXN0dXJiZWQpIHtcblx0XHRyZXR1cm4gQm9keS5Qcm9taXNlLnJlamVjdChuZXcgVHlwZUVycm9yKGBib2R5IHVzZWQgYWxyZWFkeSBmb3I6ICR7dGhpcy51cmx9YCkpO1xuXHR9XG5cblx0dGhpc1tJTlRFUk5BTFNdLmRpc3R1cmJlZCA9IHRydWU7XG5cblx0aWYgKHRoaXNbSU5URVJOQUxTXS5lcnJvcikge1xuXHRcdHJldHVybiBCb2R5LlByb21pc2UucmVqZWN0KHRoaXNbSU5URVJOQUxTXS5lcnJvcik7XG5cdH1cblxuXHRsZXQgYm9keSA9IHRoaXMuYm9keTtcblxuXHQvLyBib2R5IGlzIG51bGxcblx0aWYgKGJvZHkgPT09IG51bGwpIHtcblx0XHRyZXR1cm4gQm9keS5Qcm9taXNlLnJlc29sdmUoQnVmZmVyLmFsbG9jKDApKTtcblx0fVxuXG5cdC8vIGJvZHkgaXMgYmxvYlxuXHRpZiAoaXNCbG9iKGJvZHkpKSB7XG5cdFx0Ym9keSA9IGJvZHkuc3RyZWFtKCk7XG5cdH1cblxuXHQvLyBib2R5IGlzIGJ1ZmZlclxuXHRpZiAoQnVmZmVyLmlzQnVmZmVyKGJvZHkpKSB7XG5cdFx0cmV0dXJuIEJvZHkuUHJvbWlzZS5yZXNvbHZlKGJvZHkpO1xuXHR9XG5cblx0Ly8gaXN0YW5idWwgaWdub3JlIGlmOiBzaG91bGQgbmV2ZXIgaGFwcGVuXG5cdGlmICghKGJvZHkgaW5zdGFuY2VvZiBTdHJlYW0pKSB7XG5cdFx0cmV0dXJuIEJvZHkuUHJvbWlzZS5yZXNvbHZlKEJ1ZmZlci5hbGxvYygwKSk7XG5cdH1cblxuXHQvLyBib2R5IGlzIHN0cmVhbVxuXHQvLyBnZXQgcmVhZHkgdG8gYWN0dWFsbHkgY29uc3VtZSB0aGUgYm9keVxuXHRsZXQgYWNjdW0gPSBbXTtcblx0bGV0IGFjY3VtQnl0ZXMgPSAwO1xuXHRsZXQgYWJvcnQgPSBmYWxzZTtcblxuXHRyZXR1cm4gbmV3IEJvZHkuUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG5cdFx0bGV0IHJlc1RpbWVvdXQ7XG5cblx0XHQvLyBhbGxvdyB0aW1lb3V0IG9uIHNsb3cgcmVzcG9uc2UgYm9keVxuXHRcdGlmIChfdGhpczQudGltZW91dCkge1xuXHRcdFx0cmVzVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRhYm9ydCA9IHRydWU7XG5cdFx0XHRcdHJlamVjdChuZXcgRmV0Y2hFcnJvcihgUmVzcG9uc2UgdGltZW91dCB3aGlsZSB0cnlpbmcgdG8gZmV0Y2ggJHtfdGhpczQudXJsfSAob3ZlciAke190aGlzNC50aW1lb3V0fW1zKWAsICdib2R5LXRpbWVvdXQnKSk7XG5cdFx0XHR9LCBfdGhpczQudGltZW91dCk7XG5cdFx0fVxuXG5cdFx0Ly8gaGFuZGxlIHN0cmVhbSBlcnJvcnNcblx0XHRib2R5Lm9uKCdlcnJvcicsIGZ1bmN0aW9uIChlcnIpIHtcblx0XHRcdGlmIChlcnIubmFtZSA9PT0gJ0Fib3J0RXJyb3InKSB7XG5cdFx0XHRcdC8vIGlmIHRoZSByZXF1ZXN0IHdhcyBhYm9ydGVkLCByZWplY3Qgd2l0aCB0aGlzIEVycm9yXG5cdFx0XHRcdGFib3J0ID0gdHJ1ZTtcblx0XHRcdFx0cmVqZWN0KGVycik7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyBvdGhlciBlcnJvcnMsIHN1Y2ggYXMgaW5jb3JyZWN0IGNvbnRlbnQtZW5jb2Rpbmdcblx0XHRcdFx0cmVqZWN0KG5ldyBGZXRjaEVycm9yKGBJbnZhbGlkIHJlc3BvbnNlIGJvZHkgd2hpbGUgdHJ5aW5nIHRvIGZldGNoICR7X3RoaXM0LnVybH06ICR7ZXJyLm1lc3NhZ2V9YCwgJ3N5c3RlbScsIGVycikpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0Ym9keS5vbignZGF0YScsIGZ1bmN0aW9uIChjaHVuaykge1xuXHRcdFx0aWYgKGFib3J0IHx8IGNodW5rID09PSBudWxsKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKF90aGlzNC5zaXplICYmIGFjY3VtQnl0ZXMgKyBjaHVuay5sZW5ndGggPiBfdGhpczQuc2l6ZSkge1xuXHRcdFx0XHRhYm9ydCA9IHRydWU7XG5cdFx0XHRcdHJlamVjdChuZXcgRmV0Y2hFcnJvcihgY29udGVudCBzaXplIGF0ICR7X3RoaXM0LnVybH0gb3ZlciBsaW1pdDogJHtfdGhpczQuc2l6ZX1gLCAnbWF4LXNpemUnKSk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0YWNjdW1CeXRlcyArPSBjaHVuay5sZW5ndGg7XG5cdFx0XHRhY2N1bS5wdXNoKGNodW5rKTtcblx0XHR9KTtcblxuXHRcdGJvZHkub24oJ2VuZCcsIGZ1bmN0aW9uICgpIHtcblx0XHRcdGlmIChhYm9ydCkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGNsZWFyVGltZW91dChyZXNUaW1lb3V0KTtcblxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0cmVzb2x2ZShCdWZmZXIuY29uY2F0KGFjY3VtLCBhY2N1bUJ5dGVzKSk7XG5cdFx0XHR9IGNhdGNoIChlcnIpIHtcblx0XHRcdFx0Ly8gaGFuZGxlIHN0cmVhbXMgdGhhdCBoYXZlIGFjY3VtdWxhdGVkIHRvbyBtdWNoIGRhdGEgKGlzc3VlICM0MTQpXG5cdFx0XHRcdHJlamVjdChuZXcgRmV0Y2hFcnJvcihgQ291bGQgbm90IGNyZWF0ZSBCdWZmZXIgZnJvbSByZXNwb25zZSBib2R5IGZvciAke190aGlzNC51cmx9OiAke2Vyci5tZXNzYWdlfWAsICdzeXN0ZW0nLCBlcnIpKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fSk7XG59XG5cbi8qKlxuICogRGV0ZWN0IGJ1ZmZlciBlbmNvZGluZyBhbmQgY29udmVydCB0byB0YXJnZXQgZW5jb2RpbmdcbiAqIHJlZjogaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9XRC1odG1sNS0yMDExMDExMy9wYXJzaW5nLmh0bWwjZGV0ZXJtaW5pbmctdGhlLWNoYXJhY3Rlci1lbmNvZGluZ1xuICpcbiAqIEBwYXJhbSAgIEJ1ZmZlciAgYnVmZmVyICAgIEluY29taW5nIGJ1ZmZlclxuICogQHBhcmFtICAgU3RyaW5nICBlbmNvZGluZyAgVGFyZ2V0IGVuY29kaW5nXG4gKiBAcmV0dXJuICBTdHJpbmdcbiAqL1xuZnVuY3Rpb24gY29udmVydEJvZHkoYnVmZmVyLCBoZWFkZXJzKSB7XG5cdGlmICh0eXBlb2YgY29udmVydCAhPT0gJ2Z1bmN0aW9uJykge1xuXHRcdHRocm93IG5ldyBFcnJvcignVGhlIHBhY2thZ2UgYGVuY29kaW5nYCBtdXN0IGJlIGluc3RhbGxlZCB0byB1c2UgdGhlIHRleHRDb252ZXJ0ZWQoKSBmdW5jdGlvbicpO1xuXHR9XG5cblx0Y29uc3QgY3QgPSBoZWFkZXJzLmdldCgnY29udGVudC10eXBlJyk7XG5cdGxldCBjaGFyc2V0ID0gJ3V0Zi04Jztcblx0bGV0IHJlcywgc3RyO1xuXG5cdC8vIGhlYWRlclxuXHRpZiAoY3QpIHtcblx0XHRyZXMgPSAvY2hhcnNldD0oW147XSopL2kuZXhlYyhjdCk7XG5cdH1cblxuXHQvLyBubyBjaGFyc2V0IGluIGNvbnRlbnQgdHlwZSwgcGVlayBhdCByZXNwb25zZSBib2R5IGZvciBhdCBtb3N0IDEwMjQgYnl0ZXNcblx0c3RyID0gYnVmZmVyLnNsaWNlKDAsIDEwMjQpLnRvU3RyaW5nKCk7XG5cblx0Ly8gaHRtbDVcblx0aWYgKCFyZXMgJiYgc3RyKSB7XG5cdFx0cmVzID0gLzxtZXRhLis/Y2hhcnNldD0oWydcIl0pKC4rPylcXDEvaS5leGVjKHN0cik7XG5cdH1cblxuXHQvLyBodG1sNFxuXHRpZiAoIXJlcyAmJiBzdHIpIHtcblx0XHRyZXMgPSAvPG1ldGFbXFxzXSs/aHR0cC1lcXVpdj0oWydcIl0pY29udGVudC10eXBlXFwxW1xcc10rP2NvbnRlbnQ9KFsnXCJdKSguKz8pXFwyL2kuZXhlYyhzdHIpO1xuXG5cdFx0aWYgKHJlcykge1xuXHRcdFx0cmVzID0gL2NoYXJzZXQ9KC4qKS9pLmV4ZWMocmVzLnBvcCgpKTtcblx0XHR9XG5cdH1cblxuXHQvLyB4bWxcblx0aWYgKCFyZXMgJiYgc3RyKSB7XG5cdFx0cmVzID0gLzxcXD94bWwuKz9lbmNvZGluZz0oWydcIl0pKC4rPylcXDEvaS5leGVjKHN0cik7XG5cdH1cblxuXHQvLyBmb3VuZCBjaGFyc2V0XG5cdGlmIChyZXMpIHtcblx0XHRjaGFyc2V0ID0gcmVzLnBvcCgpO1xuXG5cdFx0Ly8gcHJldmVudCBkZWNvZGUgaXNzdWVzIHdoZW4gc2l0ZXMgdXNlIGluY29ycmVjdCBlbmNvZGluZ1xuXHRcdC8vIHJlZjogaHR0cHM6Ly9oc2l2b25lbi5maS9lbmNvZGluZy1tZW51L1xuXHRcdGlmIChjaGFyc2V0ID09PSAnZ2IyMzEyJyB8fCBjaGFyc2V0ID09PSAnZ2JrJykge1xuXHRcdFx0Y2hhcnNldCA9ICdnYjE4MDMwJztcblx0XHR9XG5cdH1cblxuXHQvLyB0dXJuIHJhdyBidWZmZXJzIGludG8gYSBzaW5nbGUgdXRmLTggYnVmZmVyXG5cdHJldHVybiBjb252ZXJ0KGJ1ZmZlciwgJ1VURi04JywgY2hhcnNldCkudG9TdHJpbmcoKTtcbn1cblxuLyoqXG4gKiBEZXRlY3QgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0XG4gKiByZWY6IGh0dHBzOi8vZ2l0aHViLmNvbS9iaXRpbm4vbm9kZS1mZXRjaC9pc3N1ZXMvMjk2I2lzc3VlY29tbWVudC0zMDc1OTgxNDNcbiAqXG4gKiBAcGFyYW0gICBPYmplY3QgIG9iaiAgICAgT2JqZWN0IHRvIGRldGVjdCBieSB0eXBlIG9yIGJyYW5kXG4gKiBAcmV0dXJuICBTdHJpbmdcbiAqL1xuZnVuY3Rpb24gaXNVUkxTZWFyY2hQYXJhbXMob2JqKSB7XG5cdC8vIER1Y2stdHlwaW5nIGFzIGEgbmVjZXNzYXJ5IGNvbmRpdGlvbi5cblx0aWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnIHx8IHR5cGVvZiBvYmouYXBwZW5kICE9PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBvYmouZGVsZXRlICE9PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBvYmouZ2V0ICE9PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBvYmouZ2V0QWxsICE9PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBvYmouaGFzICE9PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBvYmouc2V0ICE9PSAnZnVuY3Rpb24nKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0Ly8gQnJhbmQtY2hlY2tpbmcgYW5kIG1vcmUgZHVjay10eXBpbmcgYXMgb3B0aW9uYWwgY29uZGl0aW9uLlxuXHRyZXR1cm4gb2JqLmNvbnN0cnVjdG9yLm5hbWUgPT09ICdVUkxTZWFyY2hQYXJhbXMnIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBVUkxTZWFyY2hQYXJhbXNdJyB8fCB0eXBlb2Ygb2JqLnNvcnQgPT09ICdmdW5jdGlvbic7XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgYG9iamAgaXMgYSBXM0MgYEJsb2JgIG9iamVjdCAod2hpY2ggYEZpbGVgIGluaGVyaXRzIGZyb20pXG4gKiBAcGFyYW0gIHsqfSBvYmpcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzQmxvYihvYmopIHtcblx0cmV0dXJuIHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmIHR5cGVvZiBvYmouYXJyYXlCdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIG9iai50eXBlID09PSAnc3RyaW5nJyAmJiB0eXBlb2Ygb2JqLnN0cmVhbSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2Ygb2JqLmNvbnN0cnVjdG9yID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBvYmouY29uc3RydWN0b3IubmFtZSA9PT0gJ3N0cmluZycgJiYgL14oQmxvYnxGaWxlKSQvLnRlc3Qob2JqLmNvbnN0cnVjdG9yLm5hbWUpICYmIC9eKEJsb2J8RmlsZSkkLy50ZXN0KG9ialtTeW1ib2wudG9TdHJpbmdUYWddKTtcbn1cblxuLyoqXG4gKiBDbG9uZSBib2R5IGdpdmVuIFJlcy9SZXEgaW5zdGFuY2VcbiAqXG4gKiBAcGFyYW0gICBNaXhlZCAgaW5zdGFuY2UgIFJlc3BvbnNlIG9yIFJlcXVlc3QgaW5zdGFuY2VcbiAqIEByZXR1cm4gIE1peGVkXG4gKi9cbmZ1bmN0aW9uIGNsb25lKGluc3RhbmNlKSB7XG5cdGxldCBwMSwgcDI7XG5cdGxldCBib2R5ID0gaW5zdGFuY2UuYm9keTtcblxuXHQvLyBkb24ndCBhbGxvdyBjbG9uaW5nIGEgdXNlZCBib2R5XG5cdGlmIChpbnN0YW5jZS5ib2R5VXNlZCkge1xuXHRcdHRocm93IG5ldyBFcnJvcignY2Fubm90IGNsb25lIGJvZHkgYWZ0ZXIgaXQgaXMgdXNlZCcpO1xuXHR9XG5cblx0Ly8gY2hlY2sgdGhhdCBib2R5IGlzIGEgc3RyZWFtIGFuZCBub3QgZm9ybS1kYXRhIG9iamVjdFxuXHQvLyBub3RlOiB3ZSBjYW4ndCBjbG9uZSB0aGUgZm9ybS1kYXRhIG9iamVjdCB3aXRob3V0IGhhdmluZyBpdCBhcyBhIGRlcGVuZGVuY3lcblx0aWYgKGJvZHkgaW5zdGFuY2VvZiBTdHJlYW0gJiYgdHlwZW9mIGJvZHkuZ2V0Qm91bmRhcnkgIT09ICdmdW5jdGlvbicpIHtcblx0XHQvLyB0ZWUgaW5zdGFuY2UgYm9keVxuXHRcdHAxID0gbmV3IFBhc3NUaHJvdWdoKCk7XG5cdFx0cDIgPSBuZXcgUGFzc1Rocm91Z2goKTtcblx0XHRib2R5LnBpcGUocDEpO1xuXHRcdGJvZHkucGlwZShwMik7XG5cdFx0Ly8gc2V0IGluc3RhbmNlIGJvZHkgdG8gdGVlZCBib2R5IGFuZCByZXR1cm4gdGhlIG90aGVyIHRlZWQgYm9keVxuXHRcdGluc3RhbmNlW0lOVEVSTkFMU10uYm9keSA9IHAxO1xuXHRcdGJvZHkgPSBwMjtcblx0fVxuXG5cdHJldHVybiBib2R5O1xufVxuXG4vKipcbiAqIFBlcmZvcm1zIHRoZSBvcGVyYXRpb24gXCJleHRyYWN0IGEgYENvbnRlbnQtVHlwZWAgdmFsdWUgZnJvbSB8b2JqZWN0fFwiIGFzXG4gKiBzcGVjaWZpZWQgaW4gdGhlIHNwZWNpZmljYXRpb246XG4gKiBodHRwczovL2ZldGNoLnNwZWMud2hhdHdnLm9yZy8jY29uY2VwdC1ib2R5aW5pdC1leHRyYWN0XG4gKlxuICogVGhpcyBmdW5jdGlvbiBhc3N1bWVzIHRoYXQgaW5zdGFuY2UuYm9keSBpcyBwcmVzZW50LlxuICpcbiAqIEBwYXJhbSAgIE1peGVkICBpbnN0YW5jZSAgQW55IG9wdGlvbnMuYm9keSBpbnB1dFxuICovXG5mdW5jdGlvbiBleHRyYWN0Q29udGVudFR5cGUoYm9keSkge1xuXHRpZiAoYm9keSA9PT0gbnVsbCkge1xuXHRcdC8vIGJvZHkgaXMgbnVsbFxuXHRcdHJldHVybiBudWxsO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBib2R5ID09PSAnc3RyaW5nJykge1xuXHRcdC8vIGJvZHkgaXMgc3RyaW5nXG5cdFx0cmV0dXJuICd0ZXh0L3BsYWluO2NoYXJzZXQ9VVRGLTgnO1xuXHR9IGVsc2UgaWYgKGlzVVJMU2VhcmNoUGFyYW1zKGJvZHkpKSB7XG5cdFx0Ly8gYm9keSBpcyBhIFVSTFNlYXJjaFBhcmFtc1xuXHRcdHJldHVybiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9VVRGLTgnO1xuXHR9IGVsc2UgaWYgKGlzQmxvYihib2R5KSkge1xuXHRcdC8vIGJvZHkgaXMgYmxvYlxuXHRcdHJldHVybiBib2R5LnR5cGUgfHwgbnVsbDtcblx0fSBlbHNlIGlmIChCdWZmZXIuaXNCdWZmZXIoYm9keSkpIHtcblx0XHQvLyBib2R5IGlzIGJ1ZmZlclxuXHRcdHJldHVybiBudWxsO1xuXHR9IGVsc2UgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChib2R5KSA9PT0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJykge1xuXHRcdC8vIGJvZHkgaXMgQXJyYXlCdWZmZXJcblx0XHRyZXR1cm4gbnVsbDtcblx0fSBlbHNlIGlmIChBcnJheUJ1ZmZlci5pc1ZpZXcoYm9keSkpIHtcblx0XHQvLyBib2R5IGlzIEFycmF5QnVmZmVyVmlld1xuXHRcdHJldHVybiBudWxsO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBib2R5LmdldEJvdW5kYXJ5ID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0Ly8gZGV0ZWN0IGZvcm0gZGF0YSBpbnB1dCBmcm9tIGZvcm0tZGF0YSBtb2R1bGVcblx0XHRyZXR1cm4gYG11bHRpcGFydC9mb3JtLWRhdGE7Ym91bmRhcnk9JHtib2R5LmdldEJvdW5kYXJ5KCl9YDtcblx0fSBlbHNlIGlmIChib2R5IGluc3RhbmNlb2YgU3RyZWFtKSB7XG5cdFx0Ly8gYm9keSBpcyBzdHJlYW1cblx0XHQvLyBjYW4ndCByZWFsbHkgZG8gbXVjaCBhYm91dCB0aGlzXG5cdFx0cmV0dXJuIG51bGw7XG5cdH0gZWxzZSB7XG5cdFx0Ly8gQm9keSBjb25zdHJ1Y3RvciBkZWZhdWx0cyBvdGhlciB0aGluZ3MgdG8gc3RyaW5nXG5cdFx0cmV0dXJuICd0ZXh0L3BsYWluO2NoYXJzZXQ9VVRGLTgnO1xuXHR9XG59XG5cbi8qKlxuICogVGhlIEZldGNoIFN0YW5kYXJkIHRyZWF0cyB0aGlzIGFzIGlmIFwidG90YWwgYnl0ZXNcIiBpcyBhIHByb3BlcnR5IG9uIHRoZSBib2R5LlxuICogRm9yIHVzLCB3ZSBoYXZlIHRvIGV4cGxpY2l0bHkgZ2V0IGl0IHdpdGggYSBmdW5jdGlvbi5cbiAqXG4gKiByZWY6IGh0dHBzOi8vZmV0Y2guc3BlYy53aGF0d2cub3JnLyNjb25jZXB0LWJvZHktdG90YWwtYnl0ZXNcbiAqXG4gKiBAcGFyYW0gICBCb2R5ICAgIGluc3RhbmNlICAgSW5zdGFuY2Ugb2YgQm9keVxuICogQHJldHVybiAgTnVtYmVyPyAgICAgICAgICAgIE51bWJlciBvZiBieXRlcywgb3IgbnVsbCBpZiBub3QgcG9zc2libGVcbiAqL1xuZnVuY3Rpb24gZ2V0VG90YWxCeXRlcyhpbnN0YW5jZSkge1xuXHRjb25zdCBib2R5ID0gaW5zdGFuY2UuYm9keTtcblxuXG5cdGlmIChib2R5ID09PSBudWxsKSB7XG5cdFx0Ly8gYm9keSBpcyBudWxsXG5cdFx0cmV0dXJuIDA7XG5cdH0gZWxzZSBpZiAoaXNCbG9iKGJvZHkpKSB7XG5cdFx0cmV0dXJuIGJvZHkuc2l6ZTtcblx0fSBlbHNlIGlmIChCdWZmZXIuaXNCdWZmZXIoYm9keSkpIHtcblx0XHQvLyBib2R5IGlzIGJ1ZmZlclxuXHRcdHJldHVybiBib2R5Lmxlbmd0aDtcblx0fSBlbHNlIGlmIChib2R5ICYmIHR5cGVvZiBib2R5LmdldExlbmd0aFN5bmMgPT09ICdmdW5jdGlvbicpIHtcblx0XHQvLyBkZXRlY3QgZm9ybSBkYXRhIGlucHV0IGZyb20gZm9ybS1kYXRhIG1vZHVsZVxuXHRcdGlmIChib2R5Ll9sZW5ndGhSZXRyaWV2ZXJzICYmIGJvZHkuX2xlbmd0aFJldHJpZXZlcnMubGVuZ3RoID09IDAgfHwgLy8gMS54XG5cdFx0Ym9keS5oYXNLbm93bkxlbmd0aCAmJiBib2R5Lmhhc0tub3duTGVuZ3RoKCkpIHtcblx0XHRcdC8vIDIueFxuXHRcdFx0cmV0dXJuIGJvZHkuZ2V0TGVuZ3RoU3luYygpO1xuXHRcdH1cblx0XHRyZXR1cm4gbnVsbDtcblx0fSBlbHNlIHtcblx0XHQvLyBib2R5IGlzIHN0cmVhbVxuXHRcdHJldHVybiBudWxsO1xuXHR9XG59XG5cbi8qKlxuICogV3JpdGUgYSBCb2R5IHRvIGEgTm9kZS5qcyBXcml0YWJsZVN0cmVhbSAoZS5nLiBodHRwLlJlcXVlc3QpIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0gICBCb2R5ICAgIGluc3RhbmNlICAgSW5zdGFuY2Ugb2YgQm9keVxuICogQHJldHVybiAgVm9pZFxuICovXG5mdW5jdGlvbiB3cml0ZVRvU3RyZWFtKGRlc3QsIGluc3RhbmNlKSB7XG5cdGNvbnN0IGJvZHkgPSBpbnN0YW5jZS5ib2R5O1xuXG5cblx0aWYgKGJvZHkgPT09IG51bGwpIHtcblx0XHQvLyBib2R5IGlzIG51bGxcblx0XHRkZXN0LmVuZCgpO1xuXHR9IGVsc2UgaWYgKGlzQmxvYihib2R5KSkge1xuXHRcdGJvZHkuc3RyZWFtKCkucGlwZShkZXN0KTtcblx0fSBlbHNlIGlmIChCdWZmZXIuaXNCdWZmZXIoYm9keSkpIHtcblx0XHQvLyBib2R5IGlzIGJ1ZmZlclxuXHRcdGRlc3Qud3JpdGUoYm9keSk7XG5cdFx0ZGVzdC5lbmQoKTtcblx0fSBlbHNlIHtcblx0XHQvLyBib2R5IGlzIHN0cmVhbVxuXHRcdGJvZHkucGlwZShkZXN0KTtcblx0fVxufVxuXG4vLyBleHBvc2UgUHJvbWlzZVxuQm9keS5Qcm9taXNlID0gZ2xvYmFsLlByb21pc2U7XG5cbi8qKlxuICogaGVhZGVycy5qc1xuICpcbiAqIEhlYWRlcnMgY2xhc3Mgb2ZmZXJzIGNvbnZlbmllbnQgaGVscGVyc1xuICovXG5cbmNvbnN0IGludmFsaWRUb2tlblJlZ2V4ID0gL1teXFxeX2BhLXpBLVpcXC0wLTkhIyQlJicqKy58fl0vO1xuY29uc3QgaW52YWxpZEhlYWRlckNoYXJSZWdleCA9IC9bXlxcdFxceDIwLVxceDdlXFx4ODAtXFx4ZmZdLztcblxuZnVuY3Rpb24gdmFsaWRhdGVOYW1lKG5hbWUpIHtcblx0bmFtZSA9IGAke25hbWV9YDtcblx0aWYgKGludmFsaWRUb2tlblJlZ2V4LnRlc3QobmFtZSkgfHwgbmFtZSA9PT0gJycpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKGAke25hbWV9IGlzIG5vdCBhIGxlZ2FsIEhUVFAgaGVhZGVyIG5hbWVgKTtcblx0fVxufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZVZhbHVlKHZhbHVlKSB7XG5cdHZhbHVlID0gYCR7dmFsdWV9YDtcblx0aWYgKGludmFsaWRIZWFkZXJDaGFyUmVnZXgudGVzdCh2YWx1ZSkpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKGAke3ZhbHVlfSBpcyBub3QgYSBsZWdhbCBIVFRQIGhlYWRlciB2YWx1ZWApO1xuXHR9XG59XG5cbi8qKlxuICogRmluZCB0aGUga2V5IGluIHRoZSBtYXAgb2JqZWN0IGdpdmVuIGEgaGVhZGVyIG5hbWUuXG4gKlxuICogUmV0dXJucyB1bmRlZmluZWQgaWYgbm90IGZvdW5kLlxuICpcbiAqIEBwYXJhbSAgIFN0cmluZyAgbmFtZSAgSGVhZGVyIG5hbWVcbiAqIEByZXR1cm4gIFN0cmluZ3xVbmRlZmluZWRcbiAqL1xuZnVuY3Rpb24gZmluZChtYXAsIG5hbWUpIHtcblx0bmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblx0Zm9yIChjb25zdCBrZXkgaW4gbWFwKSB7XG5cdFx0aWYgKGtleS50b0xvd2VyQ2FzZSgpID09PSBuYW1lKSB7XG5cdFx0XHRyZXR1cm4ga2V5O1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gdW5kZWZpbmVkO1xufVxuXG5jb25zdCBNQVAgPSBTeW1ib2woJ21hcCcpO1xuY2xhc3MgSGVhZGVycyB7XG5cdC8qKlxuICAqIEhlYWRlcnMgY2xhc3NcbiAgKlxuICAqIEBwYXJhbSAgIE9iamVjdCAgaGVhZGVycyAgUmVzcG9uc2UgaGVhZGVyc1xuICAqIEByZXR1cm4gIFZvaWRcbiAgKi9cblx0Y29uc3RydWN0b3IoKSB7XG5cdFx0bGV0IGluaXQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZDtcblxuXHRcdHRoaXNbTUFQXSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cblx0XHRpZiAoaW5pdCBpbnN0YW5jZW9mIEhlYWRlcnMpIHtcblx0XHRcdGNvbnN0IHJhd0hlYWRlcnMgPSBpbml0LnJhdygpO1xuXHRcdFx0Y29uc3QgaGVhZGVyTmFtZXMgPSBPYmplY3Qua2V5cyhyYXdIZWFkZXJzKTtcblxuXHRcdFx0Zm9yIChjb25zdCBoZWFkZXJOYW1lIG9mIGhlYWRlck5hbWVzKSB7XG5cdFx0XHRcdGZvciAoY29uc3QgdmFsdWUgb2YgcmF3SGVhZGVyc1toZWFkZXJOYW1lXSkge1xuXHRcdFx0XHRcdHRoaXMuYXBwZW5kKGhlYWRlck5hbWUsIHZhbHVlKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gV2UgZG9uJ3Qgd29ycnkgYWJvdXQgY29udmVydGluZyBwcm9wIHRvIEJ5dGVTdHJpbmcgaGVyZSBhcyBhcHBlbmQoKVxuXHRcdC8vIHdpbGwgaGFuZGxlIGl0LlxuXHRcdGlmIChpbml0ID09IG51bGwpIDsgZWxzZSBpZiAodHlwZW9mIGluaXQgPT09ICdvYmplY3QnKSB7XG5cdFx0XHRjb25zdCBtZXRob2QgPSBpbml0W1N5bWJvbC5pdGVyYXRvcl07XG5cdFx0XHRpZiAobWV0aG9kICE9IG51bGwpIHtcblx0XHRcdFx0aWYgKHR5cGVvZiBtZXRob2QgIT09ICdmdW5jdGlvbicpIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdIZWFkZXIgcGFpcnMgbXVzdCBiZSBpdGVyYWJsZScpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gc2VxdWVuY2U8c2VxdWVuY2U8Qnl0ZVN0cmluZz4+XG5cdFx0XHRcdC8vIE5vdGU6IHBlciBzcGVjIHdlIGhhdmUgdG8gZmlyc3QgZXhoYXVzdCB0aGUgbGlzdHMgdGhlbiBwcm9jZXNzIHRoZW1cblx0XHRcdFx0Y29uc3QgcGFpcnMgPSBbXTtcblx0XHRcdFx0Zm9yIChjb25zdCBwYWlyIG9mIGluaXQpIHtcblx0XHRcdFx0XHRpZiAodHlwZW9mIHBhaXIgIT09ICdvYmplY3QnIHx8IHR5cGVvZiBwYWlyW1N5bWJvbC5pdGVyYXRvcl0gIT09ICdmdW5jdGlvbicpIHtcblx0XHRcdFx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ0VhY2ggaGVhZGVyIHBhaXIgbXVzdCBiZSBpdGVyYWJsZScpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRwYWlycy5wdXNoKEFycmF5LmZyb20ocGFpcikpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Zm9yIChjb25zdCBwYWlyIG9mIHBhaXJzKSB7XG5cdFx0XHRcdFx0aWYgKHBhaXIubGVuZ3RoICE9PSAyKSB7XG5cdFx0XHRcdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdFYWNoIGhlYWRlciBwYWlyIG11c3QgYmUgYSBuYW1lL3ZhbHVlIHR1cGxlJyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHRoaXMuYXBwZW5kKHBhaXJbMF0sIHBhaXJbMV0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyByZWNvcmQ8Qnl0ZVN0cmluZywgQnl0ZVN0cmluZz5cblx0XHRcdFx0Zm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMoaW5pdCkpIHtcblx0XHRcdFx0XHRjb25zdCB2YWx1ZSA9IGluaXRba2V5XTtcblx0XHRcdFx0XHR0aGlzLmFwcGVuZChrZXksIHZhbHVlKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdQcm92aWRlZCBpbml0aWFsaXplciBtdXN0IGJlIGFuIG9iamVjdCcpO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuICAqIFJldHVybiBjb21iaW5lZCBoZWFkZXIgdmFsdWUgZ2l2ZW4gbmFtZVxuICAqXG4gICogQHBhcmFtICAgU3RyaW5nICBuYW1lICBIZWFkZXIgbmFtZVxuICAqIEByZXR1cm4gIE1peGVkXG4gICovXG5cdGdldChuYW1lKSB7XG5cdFx0bmFtZSA9IGAke25hbWV9YDtcblx0XHR2YWxpZGF0ZU5hbWUobmFtZSk7XG5cdFx0Y29uc3Qga2V5ID0gZmluZCh0aGlzW01BUF0sIG5hbWUpO1xuXHRcdGlmIChrZXkgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXNbTUFQXVtrZXldLmpvaW4oJywgJyk7XG5cdH1cblxuXHQvKipcbiAgKiBJdGVyYXRlIG92ZXIgYWxsIGhlYWRlcnNcbiAgKlxuICAqIEBwYXJhbSAgIEZ1bmN0aW9uICBjYWxsYmFjayAgRXhlY3V0ZWQgZm9yIGVhY2ggaXRlbSB3aXRoIHBhcmFtZXRlcnMgKHZhbHVlLCBuYW1lLCB0aGlzQXJnKVxuICAqIEBwYXJhbSAgIEJvb2xlYW4gICB0aGlzQXJnICAgYHRoaXNgIGNvbnRleHQgZm9yIGNhbGxiYWNrIGZ1bmN0aW9uXG4gICogQHJldHVybiAgVm9pZFxuICAqL1xuXHRmb3JFYWNoKGNhbGxiYWNrKSB7XG5cdFx0bGV0IHRoaXNBcmcgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcblxuXHRcdGxldCBwYWlycyA9IGdldEhlYWRlcnModGhpcyk7XG5cdFx0bGV0IGkgPSAwO1xuXHRcdHdoaWxlIChpIDwgcGFpcnMubGVuZ3RoKSB7XG5cdFx0XHR2YXIgX3BhaXJzJGkgPSBwYWlyc1tpXTtcblx0XHRcdGNvbnN0IG5hbWUgPSBfcGFpcnMkaVswXSxcblx0XHRcdCAgICAgIHZhbHVlID0gX3BhaXJzJGlbMV07XG5cblx0XHRcdGNhbGxiYWNrLmNhbGwodGhpc0FyZywgdmFsdWUsIG5hbWUsIHRoaXMpO1xuXHRcdFx0cGFpcnMgPSBnZXRIZWFkZXJzKHRoaXMpO1xuXHRcdFx0aSsrO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuICAqIE92ZXJ3cml0ZSBoZWFkZXIgdmFsdWVzIGdpdmVuIG5hbWVcbiAgKlxuICAqIEBwYXJhbSAgIFN0cmluZyAgbmFtZSAgIEhlYWRlciBuYW1lXG4gICogQHBhcmFtICAgU3RyaW5nICB2YWx1ZSAgSGVhZGVyIHZhbHVlXG4gICogQHJldHVybiAgVm9pZFxuICAqL1xuXHRzZXQobmFtZSwgdmFsdWUpIHtcblx0XHRuYW1lID0gYCR7bmFtZX1gO1xuXHRcdHZhbHVlID0gYCR7dmFsdWV9YDtcblx0XHR2YWxpZGF0ZU5hbWUobmFtZSk7XG5cdFx0dmFsaWRhdGVWYWx1ZSh2YWx1ZSk7XG5cdFx0Y29uc3Qga2V5ID0gZmluZCh0aGlzW01BUF0sIG5hbWUpO1xuXHRcdHRoaXNbTUFQXVtrZXkgIT09IHVuZGVmaW5lZCA/IGtleSA6IG5hbWVdID0gW3ZhbHVlXTtcblx0fVxuXG5cdC8qKlxuICAqIEFwcGVuZCBhIHZhbHVlIG9udG8gZXhpc3RpbmcgaGVhZGVyXG4gICpcbiAgKiBAcGFyYW0gICBTdHJpbmcgIG5hbWUgICBIZWFkZXIgbmFtZVxuICAqIEBwYXJhbSAgIFN0cmluZyAgdmFsdWUgIEhlYWRlciB2YWx1ZVxuICAqIEByZXR1cm4gIFZvaWRcbiAgKi9cblx0YXBwZW5kKG5hbWUsIHZhbHVlKSB7XG5cdFx0bmFtZSA9IGAke25hbWV9YDtcblx0XHR2YWx1ZSA9IGAke3ZhbHVlfWA7XG5cdFx0dmFsaWRhdGVOYW1lKG5hbWUpO1xuXHRcdHZhbGlkYXRlVmFsdWUodmFsdWUpO1xuXHRcdGNvbnN0IGtleSA9IGZpbmQodGhpc1tNQVBdLCBuYW1lKTtcblx0XHRpZiAoa2V5ICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdHRoaXNbTUFQXVtrZXldLnB1c2godmFsdWUpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzW01BUF1bbmFtZV0gPSBbdmFsdWVdO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuICAqIENoZWNrIGZvciBoZWFkZXIgbmFtZSBleGlzdGVuY2VcbiAgKlxuICAqIEBwYXJhbSAgIFN0cmluZyAgIG5hbWUgIEhlYWRlciBuYW1lXG4gICogQHJldHVybiAgQm9vbGVhblxuICAqL1xuXHRoYXMobmFtZSkge1xuXHRcdG5hbWUgPSBgJHtuYW1lfWA7XG5cdFx0dmFsaWRhdGVOYW1lKG5hbWUpO1xuXHRcdHJldHVybiBmaW5kKHRoaXNbTUFQXSwgbmFtZSkgIT09IHVuZGVmaW5lZDtcblx0fVxuXG5cdC8qKlxuICAqIERlbGV0ZSBhbGwgaGVhZGVyIHZhbHVlcyBnaXZlbiBuYW1lXG4gICpcbiAgKiBAcGFyYW0gICBTdHJpbmcgIG5hbWUgIEhlYWRlciBuYW1lXG4gICogQHJldHVybiAgVm9pZFxuICAqL1xuXHRkZWxldGUobmFtZSkge1xuXHRcdG5hbWUgPSBgJHtuYW1lfWA7XG5cdFx0dmFsaWRhdGVOYW1lKG5hbWUpO1xuXHRcdGNvbnN0IGtleSA9IGZpbmQodGhpc1tNQVBdLCBuYW1lKTtcblx0XHRpZiAoa2V5ICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdGRlbGV0ZSB0aGlzW01BUF1ba2V5XTtcblx0XHR9XG5cdH1cblxuXHQvKipcbiAgKiBSZXR1cm4gcmF3IGhlYWRlcnMgKG5vbi1zcGVjIGFwaSlcbiAgKlxuICAqIEByZXR1cm4gIE9iamVjdFxuICAqL1xuXHRyYXcoKSB7XG5cdFx0cmV0dXJuIHRoaXNbTUFQXTtcblx0fVxuXG5cdC8qKlxuICAqIEdldCBhbiBpdGVyYXRvciBvbiBrZXlzLlxuICAqXG4gICogQHJldHVybiAgSXRlcmF0b3JcbiAgKi9cblx0a2V5cygpIHtcblx0XHRyZXR1cm4gY3JlYXRlSGVhZGVyc0l0ZXJhdG9yKHRoaXMsICdrZXknKTtcblx0fVxuXG5cdC8qKlxuICAqIEdldCBhbiBpdGVyYXRvciBvbiB2YWx1ZXMuXG4gICpcbiAgKiBAcmV0dXJuICBJdGVyYXRvclxuICAqL1xuXHR2YWx1ZXMoKSB7XG5cdFx0cmV0dXJuIGNyZWF0ZUhlYWRlcnNJdGVyYXRvcih0aGlzLCAndmFsdWUnKTtcblx0fVxuXG5cdC8qKlxuICAqIEdldCBhbiBpdGVyYXRvciBvbiBlbnRyaWVzLlxuICAqXG4gICogVGhpcyBpcyB0aGUgZGVmYXVsdCBpdGVyYXRvciBvZiB0aGUgSGVhZGVycyBvYmplY3QuXG4gICpcbiAgKiBAcmV0dXJuICBJdGVyYXRvclxuICAqL1xuXHRbU3ltYm9sLml0ZXJhdG9yXSgpIHtcblx0XHRyZXR1cm4gY3JlYXRlSGVhZGVyc0l0ZXJhdG9yKHRoaXMsICdrZXkrdmFsdWUnKTtcblx0fVxufVxuSGVhZGVycy5wcm90b3R5cGUuZW50cmllcyA9IEhlYWRlcnMucHJvdG90eXBlW1N5bWJvbC5pdGVyYXRvcl07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShIZWFkZXJzLnByb3RvdHlwZSwgU3ltYm9sLnRvU3RyaW5nVGFnLCB7XG5cdHZhbHVlOiAnSGVhZGVycycsXG5cdHdyaXRhYmxlOiBmYWxzZSxcblx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdGNvbmZpZ3VyYWJsZTogdHJ1ZVxufSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKEhlYWRlcnMucHJvdG90eXBlLCB7XG5cdGdldDogeyBlbnVtZXJhYmxlOiB0cnVlIH0sXG5cdGZvckVhY2g6IHsgZW51bWVyYWJsZTogdHJ1ZSB9LFxuXHRzZXQ6IHsgZW51bWVyYWJsZTogdHJ1ZSB9LFxuXHRhcHBlbmQ6IHsgZW51bWVyYWJsZTogdHJ1ZSB9LFxuXHRoYXM6IHsgZW51bWVyYWJsZTogdHJ1ZSB9LFxuXHRkZWxldGU6IHsgZW51bWVyYWJsZTogdHJ1ZSB9LFxuXHRrZXlzOiB7IGVudW1lcmFibGU6IHRydWUgfSxcblx0dmFsdWVzOiB7IGVudW1lcmFibGU6IHRydWUgfSxcblx0ZW50cmllczogeyBlbnVtZXJhYmxlOiB0cnVlIH1cbn0pO1xuXG5mdW5jdGlvbiBnZXRIZWFkZXJzKGhlYWRlcnMpIHtcblx0bGV0IGtpbmQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICdrZXkrdmFsdWUnO1xuXG5cdGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhoZWFkZXJzW01BUF0pLnNvcnQoKTtcblx0cmV0dXJuIGtleXMubWFwKGtpbmQgPT09ICdrZXknID8gZnVuY3Rpb24gKGspIHtcblx0XHRyZXR1cm4gay50b0xvd2VyQ2FzZSgpO1xuXHR9IDoga2luZCA9PT0gJ3ZhbHVlJyA/IGZ1bmN0aW9uIChrKSB7XG5cdFx0cmV0dXJuIGhlYWRlcnNbTUFQXVtrXS5qb2luKCcsICcpO1xuXHR9IDogZnVuY3Rpb24gKGspIHtcblx0XHRyZXR1cm4gW2sudG9Mb3dlckNhc2UoKSwgaGVhZGVyc1tNQVBdW2tdLmpvaW4oJywgJyldO1xuXHR9KTtcbn1cblxuY29uc3QgSU5URVJOQUwgPSBTeW1ib2woJ2ludGVybmFsJyk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUhlYWRlcnNJdGVyYXRvcih0YXJnZXQsIGtpbmQpIHtcblx0Y29uc3QgaXRlcmF0b3IgPSBPYmplY3QuY3JlYXRlKEhlYWRlcnNJdGVyYXRvclByb3RvdHlwZSk7XG5cdGl0ZXJhdG9yW0lOVEVSTkFMXSA9IHtcblx0XHR0YXJnZXQsXG5cdFx0a2luZCxcblx0XHRpbmRleDogMFxuXHR9O1xuXHRyZXR1cm4gaXRlcmF0b3I7XG59XG5cbmNvbnN0IEhlYWRlcnNJdGVyYXRvclByb3RvdHlwZSA9IE9iamVjdC5zZXRQcm90b3R5cGVPZih7XG5cdG5leHQoKSB7XG5cdFx0Ly8gaXN0YW5idWwgaWdub3JlIGlmXG5cdFx0aWYgKCF0aGlzIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKSAhPT0gSGVhZGVyc0l0ZXJhdG9yUHJvdG90eXBlKSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdWYWx1ZSBvZiBgdGhpc2AgaXMgbm90IGEgSGVhZGVyc0l0ZXJhdG9yJyk7XG5cdFx0fVxuXG5cdFx0dmFyIF9JTlRFUk5BTCA9IHRoaXNbSU5URVJOQUxdO1xuXHRcdGNvbnN0IHRhcmdldCA9IF9JTlRFUk5BTC50YXJnZXQsXG5cdFx0ICAgICAga2luZCA9IF9JTlRFUk5BTC5raW5kLFxuXHRcdCAgICAgIGluZGV4ID0gX0lOVEVSTkFMLmluZGV4O1xuXG5cdFx0Y29uc3QgdmFsdWVzID0gZ2V0SGVhZGVycyh0YXJnZXQsIGtpbmQpO1xuXHRcdGNvbnN0IGxlbiA9IHZhbHVlcy5sZW5ndGg7XG5cdFx0aWYgKGluZGV4ID49IGxlbikge1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0dmFsdWU6IHVuZGVmaW5lZCxcblx0XHRcdFx0ZG9uZTogdHJ1ZVxuXHRcdFx0fTtcblx0XHR9XG5cblx0XHR0aGlzW0lOVEVSTkFMXS5pbmRleCA9IGluZGV4ICsgMTtcblxuXHRcdHJldHVybiB7XG5cdFx0XHR2YWx1ZTogdmFsdWVzW2luZGV4XSxcblx0XHRcdGRvbmU6IGZhbHNlXG5cdFx0fTtcblx0fVxufSwgT2JqZWN0LmdldFByb3RvdHlwZU9mKE9iamVjdC5nZXRQcm90b3R5cGVPZihbXVtTeW1ib2wuaXRlcmF0b3JdKCkpKSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShIZWFkZXJzSXRlcmF0b3JQcm90b3R5cGUsIFN5bWJvbC50b1N0cmluZ1RhZywge1xuXHR2YWx1ZTogJ0hlYWRlcnNJdGVyYXRvcicsXG5cdHdyaXRhYmxlOiBmYWxzZSxcblx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdGNvbmZpZ3VyYWJsZTogdHJ1ZVxufSk7XG5cbi8qKlxuICogRXhwb3J0IHRoZSBIZWFkZXJzIG9iamVjdCBpbiBhIGZvcm0gdGhhdCBOb2RlLmpzIGNhbiBjb25zdW1lLlxuICpcbiAqIEBwYXJhbSAgIEhlYWRlcnMgIGhlYWRlcnNcbiAqIEByZXR1cm4gIE9iamVjdFxuICovXG5mdW5jdGlvbiBleHBvcnROb2RlQ29tcGF0aWJsZUhlYWRlcnMoaGVhZGVycykge1xuXHRjb25zdCBvYmogPSBPYmplY3QuYXNzaWduKHsgX19wcm90b19fOiBudWxsIH0sIGhlYWRlcnNbTUFQXSk7XG5cblx0Ly8gaHR0cC5yZXF1ZXN0KCkgb25seSBzdXBwb3J0cyBzdHJpbmcgYXMgSG9zdCBoZWFkZXIuIFRoaXMgaGFjayBtYWtlc1xuXHQvLyBzcGVjaWZ5aW5nIGN1c3RvbSBIb3N0IGhlYWRlciBwb3NzaWJsZS5cblx0Y29uc3QgaG9zdEhlYWRlcktleSA9IGZpbmQoaGVhZGVyc1tNQVBdLCAnSG9zdCcpO1xuXHRpZiAoaG9zdEhlYWRlcktleSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0b2JqW2hvc3RIZWFkZXJLZXldID0gb2JqW2hvc3RIZWFkZXJLZXldWzBdO1xuXHR9XG5cblx0cmV0dXJuIG9iajtcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBIZWFkZXJzIG9iamVjdCBmcm9tIGFuIG9iamVjdCBvZiBoZWFkZXJzLCBpZ25vcmluZyB0aG9zZSB0aGF0IGRvXG4gKiBub3QgY29uZm9ybSB0byBIVFRQIGdyYW1tYXIgcHJvZHVjdGlvbnMuXG4gKlxuICogQHBhcmFtICAgT2JqZWN0ICBvYmogIE9iamVjdCBvZiBoZWFkZXJzXG4gKiBAcmV0dXJuICBIZWFkZXJzXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUhlYWRlcnNMZW5pZW50KG9iaikge1xuXHRjb25zdCBoZWFkZXJzID0gbmV3IEhlYWRlcnMoKTtcblx0Zm9yIChjb25zdCBuYW1lIG9mIE9iamVjdC5rZXlzKG9iaikpIHtcblx0XHRpZiAoaW52YWxpZFRva2VuUmVnZXgudGVzdChuYW1lKSkge1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXHRcdGlmIChBcnJheS5pc0FycmF5KG9ialtuYW1lXSkpIHtcblx0XHRcdGZvciAoY29uc3QgdmFsIG9mIG9ialtuYW1lXSkge1xuXHRcdFx0XHRpZiAoaW52YWxpZEhlYWRlckNoYXJSZWdleC50ZXN0KHZhbCkpIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoaGVhZGVyc1tNQVBdW25hbWVdID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRoZWFkZXJzW01BUF1bbmFtZV0gPSBbdmFsXTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRoZWFkZXJzW01BUF1bbmFtZV0ucHVzaCh2YWwpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmICghaW52YWxpZEhlYWRlckNoYXJSZWdleC50ZXN0KG9ialtuYW1lXSkpIHtcblx0XHRcdGhlYWRlcnNbTUFQXVtuYW1lXSA9IFtvYmpbbmFtZV1dO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gaGVhZGVycztcbn1cblxuY29uc3QgSU5URVJOQUxTJDEgPSBTeW1ib2woJ1Jlc3BvbnNlIGludGVybmFscycpO1xuXG4vLyBmaXggYW4gaXNzdWUgd2hlcmUgXCJTVEFUVVNfQ09ERVNcIiBhcmVuJ3QgYSBuYW1lZCBleHBvcnQgZm9yIG5vZGUgPDEwXG5jb25zdCBTVEFUVVNfQ09ERVMgPSBodHRwLlNUQVRVU19DT0RFUztcblxuLyoqXG4gKiBSZXNwb25zZSBjbGFzc1xuICpcbiAqIEBwYXJhbSAgIFN0cmVhbSAgYm9keSAgUmVhZGFibGUgc3RyZWFtXG4gKiBAcGFyYW0gICBPYmplY3QgIG9wdHMgIFJlc3BvbnNlIG9wdGlvbnNcbiAqIEByZXR1cm4gIFZvaWRcbiAqL1xuY2xhc3MgUmVzcG9uc2Uge1xuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHRsZXQgYm9keSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogbnVsbDtcblx0XHRsZXQgb3B0cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG5cblx0XHRCb2R5LmNhbGwodGhpcywgYm9keSwgb3B0cyk7XG5cblx0XHRjb25zdCBzdGF0dXMgPSBvcHRzLnN0YXR1cyB8fCAyMDA7XG5cdFx0Y29uc3QgaGVhZGVycyA9IG5ldyBIZWFkZXJzKG9wdHMuaGVhZGVycyk7XG5cblx0XHRpZiAoYm9keSAhPSBudWxsICYmICFoZWFkZXJzLmhhcygnQ29udGVudC1UeXBlJykpIHtcblx0XHRcdGNvbnN0IGNvbnRlbnRUeXBlID0gZXh0cmFjdENvbnRlbnRUeXBlKGJvZHkpO1xuXHRcdFx0aWYgKGNvbnRlbnRUeXBlKSB7XG5cdFx0XHRcdGhlYWRlcnMuYXBwZW5kKCdDb250ZW50LVR5cGUnLCBjb250ZW50VHlwZSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dGhpc1tJTlRFUk5BTFMkMV0gPSB7XG5cdFx0XHR1cmw6IG9wdHMudXJsLFxuXHRcdFx0c3RhdHVzLFxuXHRcdFx0c3RhdHVzVGV4dDogb3B0cy5zdGF0dXNUZXh0IHx8IFNUQVRVU19DT0RFU1tzdGF0dXNdLFxuXHRcdFx0aGVhZGVycyxcblx0XHRcdGNvdW50ZXI6IG9wdHMuY291bnRlclxuXHRcdH07XG5cdH1cblxuXHRnZXQgdXJsKCkge1xuXHRcdHJldHVybiB0aGlzW0lOVEVSTkFMUyQxXS51cmwgfHwgJyc7XG5cdH1cblxuXHRnZXQgc3RhdHVzKCkge1xuXHRcdHJldHVybiB0aGlzW0lOVEVSTkFMUyQxXS5zdGF0dXM7XG5cdH1cblxuXHQvKipcbiAgKiBDb252ZW5pZW5jZSBwcm9wZXJ0eSByZXByZXNlbnRpbmcgaWYgdGhlIHJlcXVlc3QgZW5kZWQgbm9ybWFsbHlcbiAgKi9cblx0Z2V0IG9rKCkge1xuXHRcdHJldHVybiB0aGlzW0lOVEVSTkFMUyQxXS5zdGF0dXMgPj0gMjAwICYmIHRoaXNbSU5URVJOQUxTJDFdLnN0YXR1cyA8IDMwMDtcblx0fVxuXG5cdGdldCByZWRpcmVjdGVkKCkge1xuXHRcdHJldHVybiB0aGlzW0lOVEVSTkFMUyQxXS5jb3VudGVyID4gMDtcblx0fVxuXG5cdGdldCBzdGF0dXNUZXh0KCkge1xuXHRcdHJldHVybiB0aGlzW0lOVEVSTkFMUyQxXS5zdGF0dXNUZXh0O1xuXHR9XG5cblx0Z2V0IGhlYWRlcnMoKSB7XG5cdFx0cmV0dXJuIHRoaXNbSU5URVJOQUxTJDFdLmhlYWRlcnM7XG5cdH1cblxuXHQvKipcbiAgKiBDbG9uZSB0aGlzIHJlc3BvbnNlXG4gICpcbiAgKiBAcmV0dXJuICBSZXNwb25zZVxuICAqL1xuXHRjbG9uZSgpIHtcblx0XHRyZXR1cm4gbmV3IFJlc3BvbnNlKGNsb25lKHRoaXMpLCB7XG5cdFx0XHR1cmw6IHRoaXMudXJsLFxuXHRcdFx0c3RhdHVzOiB0aGlzLnN0YXR1cyxcblx0XHRcdHN0YXR1c1RleHQ6IHRoaXMuc3RhdHVzVGV4dCxcblx0XHRcdGhlYWRlcnM6IHRoaXMuaGVhZGVycyxcblx0XHRcdG9rOiB0aGlzLm9rLFxuXHRcdFx0cmVkaXJlY3RlZDogdGhpcy5yZWRpcmVjdGVkXG5cdFx0fSk7XG5cdH1cbn1cblxuQm9keS5taXhJbihSZXNwb25zZS5wcm90b3R5cGUpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhSZXNwb25zZS5wcm90b3R5cGUsIHtcblx0dXJsOiB7IGVudW1lcmFibGU6IHRydWUgfSxcblx0c3RhdHVzOiB7IGVudW1lcmFibGU6IHRydWUgfSxcblx0b2s6IHsgZW51bWVyYWJsZTogdHJ1ZSB9LFxuXHRyZWRpcmVjdGVkOiB7IGVudW1lcmFibGU6IHRydWUgfSxcblx0c3RhdHVzVGV4dDogeyBlbnVtZXJhYmxlOiB0cnVlIH0sXG5cdGhlYWRlcnM6IHsgZW51bWVyYWJsZTogdHJ1ZSB9LFxuXHRjbG9uZTogeyBlbnVtZXJhYmxlOiB0cnVlIH1cbn0pO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoUmVzcG9uc2UucHJvdG90eXBlLCBTeW1ib2wudG9TdHJpbmdUYWcsIHtcblx0dmFsdWU6ICdSZXNwb25zZScsXG5cdHdyaXRhYmxlOiBmYWxzZSxcblx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdGNvbmZpZ3VyYWJsZTogdHJ1ZVxufSk7XG5cbmNvbnN0IElOVEVSTkFMUyQyID0gU3ltYm9sKCdSZXF1ZXN0IGludGVybmFscycpO1xuXG4vLyBmaXggYW4gaXNzdWUgd2hlcmUgXCJmb3JtYXRcIiwgXCJwYXJzZVwiIGFyZW4ndCBhIG5hbWVkIGV4cG9ydCBmb3Igbm9kZSA8MTBcbmNvbnN0IHBhcnNlX3VybCA9IFVybC5wYXJzZTtcbmNvbnN0IGZvcm1hdF91cmwgPSBVcmwuZm9ybWF0O1xuXG5jb25zdCBzdHJlYW1EZXN0cnVjdGlvblN1cHBvcnRlZCA9ICdkZXN0cm95JyBpbiBTdHJlYW0uUmVhZGFibGUucHJvdG90eXBlO1xuXG4vKipcbiAqIENoZWNrIGlmIGEgdmFsdWUgaXMgYW4gaW5zdGFuY2Ugb2YgUmVxdWVzdC5cbiAqXG4gKiBAcGFyYW0gICBNaXhlZCAgIGlucHV0XG4gKiBAcmV0dXJuICBCb29sZWFuXG4gKi9cbmZ1bmN0aW9uIGlzUmVxdWVzdChpbnB1dCkge1xuXHRyZXR1cm4gdHlwZW9mIGlucHV0ID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgaW5wdXRbSU5URVJOQUxTJDJdID09PSAnb2JqZWN0Jztcbn1cblxuZnVuY3Rpb24gaXNBYm9ydFNpZ25hbChzaWduYWwpIHtcblx0Y29uc3QgcHJvdG8gPSBzaWduYWwgJiYgdHlwZW9mIHNpZ25hbCA9PT0gJ29iamVjdCcgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKHNpZ25hbCk7XG5cdHJldHVybiAhIShwcm90byAmJiBwcm90by5jb25zdHJ1Y3Rvci5uYW1lID09PSAnQWJvcnRTaWduYWwnKTtcbn1cblxuLyoqXG4gKiBSZXF1ZXN0IGNsYXNzXG4gKlxuICogQHBhcmFtICAgTWl4ZWQgICBpbnB1dCAgVXJsIG9yIFJlcXVlc3QgaW5zdGFuY2VcbiAqIEBwYXJhbSAgIE9iamVjdCAgaW5pdCAgIEN1c3RvbSBvcHRpb25zXG4gKiBAcmV0dXJuICBWb2lkXG4gKi9cbmNsYXNzIFJlcXVlc3Qge1xuXHRjb25zdHJ1Y3RvcihpbnB1dCkge1xuXHRcdGxldCBpbml0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcblxuXHRcdGxldCBwYXJzZWRVUkw7XG5cblx0XHQvLyBub3JtYWxpemUgaW5wdXRcblx0XHRpZiAoIWlzUmVxdWVzdChpbnB1dCkpIHtcblx0XHRcdGlmIChpbnB1dCAmJiBpbnB1dC5ocmVmKSB7XG5cdFx0XHRcdC8vIGluIG9yZGVyIHRvIHN1cHBvcnQgTm9kZS5qcycgVXJsIG9iamVjdHM7IHRob3VnaCBXSEFUV0cncyBVUkwgb2JqZWN0c1xuXHRcdFx0XHQvLyB3aWxsIGZhbGwgaW50byB0aGlzIGJyYW5jaCBhbHNvIChzaW5jZSB0aGVpciBgdG9TdHJpbmcoKWAgd2lsbCByZXR1cm5cblx0XHRcdFx0Ly8gYGhyZWZgIHByb3BlcnR5IGFueXdheSlcblx0XHRcdFx0cGFyc2VkVVJMID0gcGFyc2VfdXJsKGlucHV0LmhyZWYpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gY29lcmNlIGlucHV0IHRvIGEgc3RyaW5nIGJlZm9yZSBhdHRlbXB0aW5nIHRvIHBhcnNlXG5cdFx0XHRcdHBhcnNlZFVSTCA9IHBhcnNlX3VybChgJHtpbnB1dH1gKTtcblx0XHRcdH1cblx0XHRcdGlucHV0ID0ge307XG5cdFx0fSBlbHNlIHtcblx0XHRcdHBhcnNlZFVSTCA9IHBhcnNlX3VybChpbnB1dC51cmwpO1xuXHRcdH1cblxuXHRcdGxldCBtZXRob2QgPSBpbml0Lm1ldGhvZCB8fCBpbnB1dC5tZXRob2QgfHwgJ0dFVCc7XG5cdFx0bWV0aG9kID0gbWV0aG9kLnRvVXBwZXJDYXNlKCk7XG5cblx0XHRpZiAoKGluaXQuYm9keSAhPSBudWxsIHx8IGlzUmVxdWVzdChpbnB1dCkgJiYgaW5wdXQuYm9keSAhPT0gbnVsbCkgJiYgKG1ldGhvZCA9PT0gJ0dFVCcgfHwgbWV0aG9kID09PSAnSEVBRCcpKSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdSZXF1ZXN0IHdpdGggR0VUL0hFQUQgbWV0aG9kIGNhbm5vdCBoYXZlIGJvZHknKTtcblx0XHR9XG5cblx0XHRsZXQgaW5wdXRCb2R5ID0gaW5pdC5ib2R5ICE9IG51bGwgPyBpbml0LmJvZHkgOiBpc1JlcXVlc3QoaW5wdXQpICYmIGlucHV0LmJvZHkgIT09IG51bGwgPyBjbG9uZShpbnB1dCkgOiBudWxsO1xuXG5cdFx0Qm9keS5jYWxsKHRoaXMsIGlucHV0Qm9keSwge1xuXHRcdFx0dGltZW91dDogaW5pdC50aW1lb3V0IHx8IGlucHV0LnRpbWVvdXQgfHwgMCxcblx0XHRcdHNpemU6IGluaXQuc2l6ZSB8fCBpbnB1dC5zaXplIHx8IDBcblx0XHR9KTtcblxuXHRcdGNvbnN0IGhlYWRlcnMgPSBuZXcgSGVhZGVycyhpbml0LmhlYWRlcnMgfHwgaW5wdXQuaGVhZGVycyB8fCB7fSk7XG5cblx0XHRpZiAoaW5wdXRCb2R5ICE9IG51bGwgJiYgIWhlYWRlcnMuaGFzKCdDb250ZW50LVR5cGUnKSkge1xuXHRcdFx0Y29uc3QgY29udGVudFR5cGUgPSBleHRyYWN0Q29udGVudFR5cGUoaW5wdXRCb2R5KTtcblx0XHRcdGlmIChjb250ZW50VHlwZSkge1xuXHRcdFx0XHRoZWFkZXJzLmFwcGVuZCgnQ29udGVudC1UeXBlJywgY29udGVudFR5cGUpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGxldCBzaWduYWwgPSBpc1JlcXVlc3QoaW5wdXQpID8gaW5wdXQuc2lnbmFsIDogbnVsbDtcblx0XHRpZiAoJ3NpZ25hbCcgaW4gaW5pdCkgc2lnbmFsID0gaW5pdC5zaWduYWw7XG5cblx0XHRpZiAoc2lnbmFsICE9IG51bGwgJiYgIWlzQWJvcnRTaWduYWwoc2lnbmFsKSkge1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgc2lnbmFsIHRvIGJlIGFuIGluc3RhbmNlb2YgQWJvcnRTaWduYWwnKTtcblx0XHR9XG5cblx0XHR0aGlzW0lOVEVSTkFMUyQyXSA9IHtcblx0XHRcdG1ldGhvZCxcblx0XHRcdHJlZGlyZWN0OiBpbml0LnJlZGlyZWN0IHx8IGlucHV0LnJlZGlyZWN0IHx8ICdmb2xsb3cnLFxuXHRcdFx0aGVhZGVycyxcblx0XHRcdHBhcnNlZFVSTCxcblx0XHRcdHNpZ25hbFxuXHRcdH07XG5cblx0XHQvLyBub2RlLWZldGNoLW9ubHkgb3B0aW9uc1xuXHRcdHRoaXMuZm9sbG93ID0gaW5pdC5mb2xsb3cgIT09IHVuZGVmaW5lZCA/IGluaXQuZm9sbG93IDogaW5wdXQuZm9sbG93ICE9PSB1bmRlZmluZWQgPyBpbnB1dC5mb2xsb3cgOiAyMDtcblx0XHR0aGlzLmNvbXByZXNzID0gaW5pdC5jb21wcmVzcyAhPT0gdW5kZWZpbmVkID8gaW5pdC5jb21wcmVzcyA6IGlucHV0LmNvbXByZXNzICE9PSB1bmRlZmluZWQgPyBpbnB1dC5jb21wcmVzcyA6IHRydWU7XG5cdFx0dGhpcy5jb3VudGVyID0gaW5pdC5jb3VudGVyIHx8IGlucHV0LmNvdW50ZXIgfHwgMDtcblx0XHR0aGlzLmFnZW50ID0gaW5pdC5hZ2VudCB8fCBpbnB1dC5hZ2VudDtcblx0fVxuXG5cdGdldCBtZXRob2QoKSB7XG5cdFx0cmV0dXJuIHRoaXNbSU5URVJOQUxTJDJdLm1ldGhvZDtcblx0fVxuXG5cdGdldCB1cmwoKSB7XG5cdFx0cmV0dXJuIGZvcm1hdF91cmwodGhpc1tJTlRFUk5BTFMkMl0ucGFyc2VkVVJMKTtcblx0fVxuXG5cdGdldCBoZWFkZXJzKCkge1xuXHRcdHJldHVybiB0aGlzW0lOVEVSTkFMUyQyXS5oZWFkZXJzO1xuXHR9XG5cblx0Z2V0IHJlZGlyZWN0KCkge1xuXHRcdHJldHVybiB0aGlzW0lOVEVSTkFMUyQyXS5yZWRpcmVjdDtcblx0fVxuXG5cdGdldCBzaWduYWwoKSB7XG5cdFx0cmV0dXJuIHRoaXNbSU5URVJOQUxTJDJdLnNpZ25hbDtcblx0fVxuXG5cdC8qKlxuICAqIENsb25lIHRoaXMgcmVxdWVzdFxuICAqXG4gICogQHJldHVybiAgUmVxdWVzdFxuICAqL1xuXHRjbG9uZSgpIHtcblx0XHRyZXR1cm4gbmV3IFJlcXVlc3QodGhpcyk7XG5cdH1cbn1cblxuQm9keS5taXhJbihSZXF1ZXN0LnByb3RvdHlwZSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZXF1ZXN0LnByb3RvdHlwZSwgU3ltYm9sLnRvU3RyaW5nVGFnLCB7XG5cdHZhbHVlOiAnUmVxdWVzdCcsXG5cdHdyaXRhYmxlOiBmYWxzZSxcblx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdGNvbmZpZ3VyYWJsZTogdHJ1ZVxufSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKFJlcXVlc3QucHJvdG90eXBlLCB7XG5cdG1ldGhvZDogeyBlbnVtZXJhYmxlOiB0cnVlIH0sXG5cdHVybDogeyBlbnVtZXJhYmxlOiB0cnVlIH0sXG5cdGhlYWRlcnM6IHsgZW51bWVyYWJsZTogdHJ1ZSB9LFxuXHRyZWRpcmVjdDogeyBlbnVtZXJhYmxlOiB0cnVlIH0sXG5cdGNsb25lOiB7IGVudW1lcmFibGU6IHRydWUgfSxcblx0c2lnbmFsOiB7IGVudW1lcmFibGU6IHRydWUgfVxufSk7XG5cbi8qKlxuICogQ29udmVydCBhIFJlcXVlc3QgdG8gTm9kZS5qcyBodHRwIHJlcXVlc3Qgb3B0aW9ucy5cbiAqXG4gKiBAcGFyYW0gICBSZXF1ZXN0ICBBIFJlcXVlc3QgaW5zdGFuY2VcbiAqIEByZXR1cm4gIE9iamVjdCAgIFRoZSBvcHRpb25zIG9iamVjdCB0byBiZSBwYXNzZWQgdG8gaHR0cC5yZXF1ZXN0XG4gKi9cbmZ1bmN0aW9uIGdldE5vZGVSZXF1ZXN0T3B0aW9ucyhyZXF1ZXN0KSB7XG5cdGNvbnN0IHBhcnNlZFVSTCA9IHJlcXVlc3RbSU5URVJOQUxTJDJdLnBhcnNlZFVSTDtcblx0Y29uc3QgaGVhZGVycyA9IG5ldyBIZWFkZXJzKHJlcXVlc3RbSU5URVJOQUxTJDJdLmhlYWRlcnMpO1xuXG5cdC8vIGZldGNoIHN0ZXAgMS4zXG5cdGlmICghaGVhZGVycy5oYXMoJ0FjY2VwdCcpKSB7XG5cdFx0aGVhZGVycy5zZXQoJ0FjY2VwdCcsICcqLyonKTtcblx0fVxuXG5cdC8vIEJhc2ljIGZldGNoXG5cdGlmICghcGFyc2VkVVJMLnByb3RvY29sIHx8ICFwYXJzZWRVUkwuaG9zdG5hbWUpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPbmx5IGFic29sdXRlIFVSTHMgYXJlIHN1cHBvcnRlZCcpO1xuXHR9XG5cblx0aWYgKCEvXmh0dHBzPzokLy50ZXN0KHBhcnNlZFVSTC5wcm90b2NvbCkpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPbmx5IEhUVFAoUykgcHJvdG9jb2xzIGFyZSBzdXBwb3J0ZWQnKTtcblx0fVxuXG5cdGlmIChyZXF1ZXN0LnNpZ25hbCAmJiByZXF1ZXN0LmJvZHkgaW5zdGFuY2VvZiBTdHJlYW0uUmVhZGFibGUgJiYgIXN0cmVhbURlc3RydWN0aW9uU3VwcG9ydGVkKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCdDYW5jZWxsYXRpb24gb2Ygc3RyZWFtZWQgcmVxdWVzdHMgd2l0aCBBYm9ydFNpZ25hbCBpcyBub3Qgc3VwcG9ydGVkIGluIG5vZGUgPCA4Jyk7XG5cdH1cblxuXHQvLyBIVFRQLW5ldHdvcmstb3ItY2FjaGUgZmV0Y2ggc3RlcHMgMi40LTIuN1xuXHRsZXQgY29udGVudExlbmd0aFZhbHVlID0gbnVsbDtcblx0aWYgKHJlcXVlc3QuYm9keSA9PSBudWxsICYmIC9eKFBPU1R8UFVUKSQvaS50ZXN0KHJlcXVlc3QubWV0aG9kKSkge1xuXHRcdGNvbnRlbnRMZW5ndGhWYWx1ZSA9ICcwJztcblx0fVxuXHRpZiAocmVxdWVzdC5ib2R5ICE9IG51bGwpIHtcblx0XHRjb25zdCB0b3RhbEJ5dGVzID0gZ2V0VG90YWxCeXRlcyhyZXF1ZXN0KTtcblx0XHRpZiAodHlwZW9mIHRvdGFsQnl0ZXMgPT09ICdudW1iZXInKSB7XG5cdFx0XHRjb250ZW50TGVuZ3RoVmFsdWUgPSBTdHJpbmcodG90YWxCeXRlcyk7XG5cdFx0fVxuXHR9XG5cdGlmIChjb250ZW50TGVuZ3RoVmFsdWUpIHtcblx0XHRoZWFkZXJzLnNldCgnQ29udGVudC1MZW5ndGgnLCBjb250ZW50TGVuZ3RoVmFsdWUpO1xuXHR9XG5cblx0Ly8gSFRUUC1uZXR3b3JrLW9yLWNhY2hlIGZldGNoIHN0ZXAgMi4xMVxuXHRpZiAoIWhlYWRlcnMuaGFzKCdVc2VyLUFnZW50JykpIHtcblx0XHRoZWFkZXJzLnNldCgnVXNlci1BZ2VudCcsICdub2RlLWZldGNoLzEuMCAoK2h0dHBzOi8vZ2l0aHViLmNvbS9iaXRpbm4vbm9kZS1mZXRjaCknKTtcblx0fVxuXG5cdC8vIEhUVFAtbmV0d29yay1vci1jYWNoZSBmZXRjaCBzdGVwIDIuMTVcblx0aWYgKHJlcXVlc3QuY29tcHJlc3MgJiYgIWhlYWRlcnMuaGFzKCdBY2NlcHQtRW5jb2RpbmcnKSkge1xuXHRcdGhlYWRlcnMuc2V0KCdBY2NlcHQtRW5jb2RpbmcnLCAnZ3ppcCxkZWZsYXRlJyk7XG5cdH1cblxuXHRsZXQgYWdlbnQgPSByZXF1ZXN0LmFnZW50O1xuXHRpZiAodHlwZW9mIGFnZW50ID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0YWdlbnQgPSBhZ2VudChwYXJzZWRVUkwpO1xuXHR9XG5cblx0aWYgKCFoZWFkZXJzLmhhcygnQ29ubmVjdGlvbicpICYmICFhZ2VudCkge1xuXHRcdGhlYWRlcnMuc2V0KCdDb25uZWN0aW9uJywgJ2Nsb3NlJyk7XG5cdH1cblxuXHQvLyBIVFRQLW5ldHdvcmsgZmV0Y2ggc3RlcCA0LjJcblx0Ly8gY2h1bmtlZCBlbmNvZGluZyBpcyBoYW5kbGVkIGJ5IE5vZGUuanNcblxuXHRyZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgcGFyc2VkVVJMLCB7XG5cdFx0bWV0aG9kOiByZXF1ZXN0Lm1ldGhvZCxcblx0XHRoZWFkZXJzOiBleHBvcnROb2RlQ29tcGF0aWJsZUhlYWRlcnMoaGVhZGVycyksXG5cdFx0YWdlbnRcblx0fSk7XG59XG5cbi8qKlxuICogYWJvcnQtZXJyb3IuanNcbiAqXG4gKiBBYm9ydEVycm9yIGludGVyZmFjZSBmb3IgY2FuY2VsbGVkIHJlcXVlc3RzXG4gKi9cblxuLyoqXG4gKiBDcmVhdGUgQWJvcnRFcnJvciBpbnN0YW5jZVxuICpcbiAqIEBwYXJhbSAgIFN0cmluZyAgICAgIG1lc3NhZ2UgICAgICBFcnJvciBtZXNzYWdlIGZvciBodW1hblxuICogQHJldHVybiAgQWJvcnRFcnJvclxuICovXG5mdW5jdGlvbiBBYm9ydEVycm9yKG1lc3NhZ2UpIHtcbiAgRXJyb3IuY2FsbCh0aGlzLCBtZXNzYWdlKTtcblxuICB0aGlzLnR5cGUgPSAnYWJvcnRlZCc7XG4gIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG5cbiAgLy8gaGlkZSBjdXN0b20gZXJyb3IgaW1wbGVtZW50YXRpb24gZGV0YWlscyBmcm9tIGVuZC11c2Vyc1xuICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCB0aGlzLmNvbnN0cnVjdG9yKTtcbn1cblxuQWJvcnRFcnJvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEVycm9yLnByb3RvdHlwZSk7XG5BYm9ydEVycm9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEFib3J0RXJyb3I7XG5BYm9ydEVycm9yLnByb3RvdHlwZS5uYW1lID0gJ0Fib3J0RXJyb3InO1xuXG4vLyBmaXggYW4gaXNzdWUgd2hlcmUgXCJQYXNzVGhyb3VnaFwiLCBcInJlc29sdmVcIiBhcmVuJ3QgYSBuYW1lZCBleHBvcnQgZm9yIG5vZGUgPDEwXG5jb25zdCBQYXNzVGhyb3VnaCQxID0gU3RyZWFtLlBhc3NUaHJvdWdoO1xuY29uc3QgcmVzb2x2ZV91cmwgPSBVcmwucmVzb2x2ZTtcblxuLyoqXG4gKiBGZXRjaCBmdW5jdGlvblxuICpcbiAqIEBwYXJhbSAgIE1peGVkICAgIHVybCAgIEFic29sdXRlIHVybCBvciBSZXF1ZXN0IGluc3RhbmNlXG4gKiBAcGFyYW0gICBPYmplY3QgICBvcHRzICBGZXRjaCBvcHRpb25zXG4gKiBAcmV0dXJuICBQcm9taXNlXG4gKi9cbmZ1bmN0aW9uIGZldGNoKHVybCwgb3B0cykge1xuXG5cdC8vIGFsbG93IGN1c3RvbSBwcm9taXNlXG5cdGlmICghZmV0Y2guUHJvbWlzZSkge1xuXHRcdHRocm93IG5ldyBFcnJvcignbmF0aXZlIHByb21pc2UgbWlzc2luZywgc2V0IGZldGNoLlByb21pc2UgdG8geW91ciBmYXZvcml0ZSBhbHRlcm5hdGl2ZScpO1xuXHR9XG5cblx0Qm9keS5Qcm9taXNlID0gZmV0Y2guUHJvbWlzZTtcblxuXHQvLyB3cmFwIGh0dHAucmVxdWVzdCBpbnRvIGZldGNoXG5cdHJldHVybiBuZXcgZmV0Y2guUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG5cdFx0Ly8gYnVpbGQgcmVxdWVzdCBvYmplY3Rcblx0XHRjb25zdCByZXF1ZXN0ID0gbmV3IFJlcXVlc3QodXJsLCBvcHRzKTtcblx0XHRjb25zdCBvcHRpb25zID0gZ2V0Tm9kZVJlcXVlc3RPcHRpb25zKHJlcXVlc3QpO1xuXG5cdFx0Y29uc3Qgc2VuZCA9IChvcHRpb25zLnByb3RvY29sID09PSAnaHR0cHM6JyA/IGh0dHBzIDogaHR0cCkucmVxdWVzdDtcblx0XHRjb25zdCBzaWduYWwgPSByZXF1ZXN0LnNpZ25hbDtcblxuXHRcdGxldCByZXNwb25zZSA9IG51bGw7XG5cblx0XHRjb25zdCBhYm9ydCA9IGZ1bmN0aW9uIGFib3J0KCkge1xuXHRcdFx0bGV0IGVycm9yID0gbmV3IEFib3J0RXJyb3IoJ1RoZSB1c2VyIGFib3J0ZWQgYSByZXF1ZXN0LicpO1xuXHRcdFx0cmVqZWN0KGVycm9yKTtcblx0XHRcdGlmIChyZXF1ZXN0LmJvZHkgJiYgcmVxdWVzdC5ib2R5IGluc3RhbmNlb2YgU3RyZWFtLlJlYWRhYmxlKSB7XG5cdFx0XHRcdHJlcXVlc3QuYm9keS5kZXN0cm95KGVycm9yKTtcblx0XHRcdH1cblx0XHRcdGlmICghcmVzcG9uc2UgfHwgIXJlc3BvbnNlLmJvZHkpIHJldHVybjtcblx0XHRcdHJlc3BvbnNlLmJvZHkuZW1pdCgnZXJyb3InLCBlcnJvcik7XG5cdFx0fTtcblxuXHRcdGlmIChzaWduYWwgJiYgc2lnbmFsLmFib3J0ZWQpIHtcblx0XHRcdGFib3J0KCk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Y29uc3QgYWJvcnRBbmRGaW5hbGl6ZSA9IGZ1bmN0aW9uIGFib3J0QW5kRmluYWxpemUoKSB7XG5cdFx0XHRhYm9ydCgpO1xuXHRcdFx0ZmluYWxpemUoKTtcblx0XHR9O1xuXG5cdFx0Ly8gc2VuZCByZXF1ZXN0XG5cdFx0Y29uc3QgcmVxID0gc2VuZChvcHRpb25zKTtcblx0XHRsZXQgcmVxVGltZW91dDtcblxuXHRcdGlmIChzaWduYWwpIHtcblx0XHRcdHNpZ25hbC5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsIGFib3J0QW5kRmluYWxpemUpO1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGZpbmFsaXplKCkge1xuXHRcdFx0cmVxLmFib3J0KCk7XG5cdFx0XHRpZiAoc2lnbmFsKSBzaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBhYm9ydEFuZEZpbmFsaXplKTtcblx0XHRcdGNsZWFyVGltZW91dChyZXFUaW1lb3V0KTtcblx0XHR9XG5cblx0XHRpZiAocmVxdWVzdC50aW1lb3V0KSB7XG5cdFx0XHRyZXEub25jZSgnc29ja2V0JywgZnVuY3Rpb24gKHNvY2tldCkge1xuXHRcdFx0XHRyZXFUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0cmVqZWN0KG5ldyBGZXRjaEVycm9yKGBuZXR3b3JrIHRpbWVvdXQgYXQ6ICR7cmVxdWVzdC51cmx9YCwgJ3JlcXVlc3QtdGltZW91dCcpKTtcblx0XHRcdFx0XHRmaW5hbGl6ZSgpO1xuXHRcdFx0XHR9LCByZXF1ZXN0LnRpbWVvdXQpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0cmVxLm9uKCdlcnJvcicsIGZ1bmN0aW9uIChlcnIpIHtcblx0XHRcdHJlamVjdChuZXcgRmV0Y2hFcnJvcihgcmVxdWVzdCB0byAke3JlcXVlc3QudXJsfSBmYWlsZWQsIHJlYXNvbjogJHtlcnIubWVzc2FnZX1gLCAnc3lzdGVtJywgZXJyKSk7XG5cdFx0XHRmaW5hbGl6ZSgpO1xuXHRcdH0pO1xuXG5cdFx0cmVxLm9uKCdyZXNwb25zZScsIGZ1bmN0aW9uIChyZXMpIHtcblx0XHRcdGNsZWFyVGltZW91dChyZXFUaW1lb3V0KTtcblxuXHRcdFx0Y29uc3QgaGVhZGVycyA9IGNyZWF0ZUhlYWRlcnNMZW5pZW50KHJlcy5oZWFkZXJzKTtcblxuXHRcdFx0Ly8gSFRUUCBmZXRjaCBzdGVwIDVcblx0XHRcdGlmIChmZXRjaC5pc1JlZGlyZWN0KHJlcy5zdGF0dXNDb2RlKSkge1xuXHRcdFx0XHQvLyBIVFRQIGZldGNoIHN0ZXAgNS4yXG5cdFx0XHRcdGNvbnN0IGxvY2F0aW9uID0gaGVhZGVycy5nZXQoJ0xvY2F0aW9uJyk7XG5cblx0XHRcdFx0Ly8gSFRUUCBmZXRjaCBzdGVwIDUuM1xuXHRcdFx0XHRjb25zdCBsb2NhdGlvblVSTCA9IGxvY2F0aW9uID09PSBudWxsID8gbnVsbCA6IHJlc29sdmVfdXJsKHJlcXVlc3QudXJsLCBsb2NhdGlvbik7XG5cblx0XHRcdFx0Ly8gSFRUUCBmZXRjaCBzdGVwIDUuNVxuXHRcdFx0XHRzd2l0Y2ggKHJlcXVlc3QucmVkaXJlY3QpIHtcblx0XHRcdFx0XHRjYXNlICdlcnJvcic6XG5cdFx0XHRcdFx0XHRyZWplY3QobmV3IEZldGNoRXJyb3IoYHJlZGlyZWN0IG1vZGUgaXMgc2V0IHRvIGVycm9yOiAke3JlcXVlc3QudXJsfWAsICduby1yZWRpcmVjdCcpKTtcblx0XHRcdFx0XHRcdGZpbmFsaXplKCk7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0Y2FzZSAnbWFudWFsJzpcblx0XHRcdFx0XHRcdC8vIG5vZGUtZmV0Y2gtc3BlY2lmaWMgc3RlcDogbWFrZSBtYW51YWwgcmVkaXJlY3QgYSBiaXQgZWFzaWVyIHRvIHVzZSBieSBzZXR0aW5nIHRoZSBMb2NhdGlvbiBoZWFkZXIgdmFsdWUgdG8gdGhlIHJlc29sdmVkIFVSTC5cblx0XHRcdFx0XHRcdGlmIChsb2NhdGlvblVSTCAhPT0gbnVsbCkge1xuXHRcdFx0XHRcdFx0XHQvLyBoYW5kbGUgY29ycnVwdGVkIGhlYWRlclxuXHRcdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRcdGhlYWRlcnMuc2V0KCdMb2NhdGlvbicsIGxvY2F0aW9uVVJMKTtcblx0XHRcdFx0XHRcdFx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gaXN0YW5idWwgaWdub3JlIG5leHQ6IG5vZGVqcyBzZXJ2ZXIgcHJldmVudCBpbnZhbGlkIHJlc3BvbnNlIGhlYWRlcnMsIHdlIGNhbid0IHRlc3QgdGhpcyB0aHJvdWdoIG5vcm1hbCByZXF1ZXN0XG5cdFx0XHRcdFx0XHRcdFx0cmVqZWN0KGVycik7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2ZvbGxvdyc6XG5cdFx0XHRcdFx0XHQvLyBIVFRQLXJlZGlyZWN0IGZldGNoIHN0ZXAgMlxuXHRcdFx0XHRcdFx0aWYgKGxvY2F0aW9uVVJMID09PSBudWxsKSB7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBIVFRQLXJlZGlyZWN0IGZldGNoIHN0ZXAgNVxuXHRcdFx0XHRcdFx0aWYgKHJlcXVlc3QuY291bnRlciA+PSByZXF1ZXN0LmZvbGxvdykge1xuXHRcdFx0XHRcdFx0XHRyZWplY3QobmV3IEZldGNoRXJyb3IoYG1heGltdW0gcmVkaXJlY3QgcmVhY2hlZCBhdDogJHtyZXF1ZXN0LnVybH1gLCAnbWF4LXJlZGlyZWN0JykpO1xuXHRcdFx0XHRcdFx0XHRmaW5hbGl6ZSgpO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIEhUVFAtcmVkaXJlY3QgZmV0Y2ggc3RlcCA2IChjb3VudGVyIGluY3JlbWVudClcblx0XHRcdFx0XHRcdC8vIENyZWF0ZSBhIG5ldyBSZXF1ZXN0IG9iamVjdC5cblx0XHRcdFx0XHRcdGNvbnN0IHJlcXVlc3RPcHRzID0ge1xuXHRcdFx0XHRcdFx0XHRoZWFkZXJzOiBuZXcgSGVhZGVycyhyZXF1ZXN0LmhlYWRlcnMpLFxuXHRcdFx0XHRcdFx0XHRmb2xsb3c6IHJlcXVlc3QuZm9sbG93LFxuXHRcdFx0XHRcdFx0XHRjb3VudGVyOiByZXF1ZXN0LmNvdW50ZXIgKyAxLFxuXHRcdFx0XHRcdFx0XHRhZ2VudDogcmVxdWVzdC5hZ2VudCxcblx0XHRcdFx0XHRcdFx0Y29tcHJlc3M6IHJlcXVlc3QuY29tcHJlc3MsXG5cdFx0XHRcdFx0XHRcdG1ldGhvZDogcmVxdWVzdC5tZXRob2QsXG5cdFx0XHRcdFx0XHRcdGJvZHk6IHJlcXVlc3QuYm9keSxcblx0XHRcdFx0XHRcdFx0c2lnbmFsOiByZXF1ZXN0LnNpZ25hbCxcblx0XHRcdFx0XHRcdFx0dGltZW91dDogcmVxdWVzdC50aW1lb3V0XG5cdFx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0XHQvLyBIVFRQLXJlZGlyZWN0IGZldGNoIHN0ZXAgOVxuXHRcdFx0XHRcdFx0aWYgKHJlcy5zdGF0dXNDb2RlICE9PSAzMDMgJiYgcmVxdWVzdC5ib2R5ICYmIGdldFRvdGFsQnl0ZXMocmVxdWVzdCkgPT09IG51bGwpIHtcblx0XHRcdFx0XHRcdFx0cmVqZWN0KG5ldyBGZXRjaEVycm9yKCdDYW5ub3QgZm9sbG93IHJlZGlyZWN0IHdpdGggYm9keSBiZWluZyBhIHJlYWRhYmxlIHN0cmVhbScsICd1bnN1cHBvcnRlZC1yZWRpcmVjdCcpKTtcblx0XHRcdFx0XHRcdFx0ZmluYWxpemUoKTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBIVFRQLXJlZGlyZWN0IGZldGNoIHN0ZXAgMTFcblx0XHRcdFx0XHRcdGlmIChyZXMuc3RhdHVzQ29kZSA9PT0gMzAzIHx8IChyZXMuc3RhdHVzQ29kZSA9PT0gMzAxIHx8IHJlcy5zdGF0dXNDb2RlID09PSAzMDIpICYmIHJlcXVlc3QubWV0aG9kID09PSAnUE9TVCcpIHtcblx0XHRcdFx0XHRcdFx0cmVxdWVzdE9wdHMubWV0aG9kID0gJ0dFVCc7XG5cdFx0XHRcdFx0XHRcdHJlcXVlc3RPcHRzLmJvZHkgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdHJlcXVlc3RPcHRzLmhlYWRlcnMuZGVsZXRlKCdjb250ZW50LWxlbmd0aCcpO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBIVFRQLXJlZGlyZWN0IGZldGNoIHN0ZXAgMTVcblx0XHRcdFx0XHRcdHJlc29sdmUoZmV0Y2gobmV3IFJlcXVlc3QobG9jYXRpb25VUkwsIHJlcXVlc3RPcHRzKSkpO1xuXHRcdFx0XHRcdFx0ZmluYWxpemUoKTtcblx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBwcmVwYXJlIHJlc3BvbnNlXG5cdFx0XHRyZXMub25jZSgnZW5kJywgZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRpZiAoc2lnbmFsKSBzaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBhYm9ydEFuZEZpbmFsaXplKTtcblx0XHRcdH0pO1xuXHRcdFx0bGV0IGJvZHkgPSByZXMucGlwZShuZXcgUGFzc1Rocm91Z2gkMSgpKTtcblxuXHRcdFx0Y29uc3QgcmVzcG9uc2Vfb3B0aW9ucyA9IHtcblx0XHRcdFx0dXJsOiByZXF1ZXN0LnVybCxcblx0XHRcdFx0c3RhdHVzOiByZXMuc3RhdHVzQ29kZSxcblx0XHRcdFx0c3RhdHVzVGV4dDogcmVzLnN0YXR1c01lc3NhZ2UsXG5cdFx0XHRcdGhlYWRlcnM6IGhlYWRlcnMsXG5cdFx0XHRcdHNpemU6IHJlcXVlc3Quc2l6ZSxcblx0XHRcdFx0dGltZW91dDogcmVxdWVzdC50aW1lb3V0LFxuXHRcdFx0XHRjb3VudGVyOiByZXF1ZXN0LmNvdW50ZXJcblx0XHRcdH07XG5cblx0XHRcdC8vIEhUVFAtbmV0d29yayBmZXRjaCBzdGVwIDEyLjEuMS4zXG5cdFx0XHRjb25zdCBjb2RpbmdzID0gaGVhZGVycy5nZXQoJ0NvbnRlbnQtRW5jb2RpbmcnKTtcblxuXHRcdFx0Ly8gSFRUUC1uZXR3b3JrIGZldGNoIHN0ZXAgMTIuMS4xLjQ6IGhhbmRsZSBjb250ZW50IGNvZGluZ3NcblxuXHRcdFx0Ly8gaW4gZm9sbG93aW5nIHNjZW5hcmlvcyB3ZSBpZ25vcmUgY29tcHJlc3Npb24gc3VwcG9ydFxuXHRcdFx0Ly8gMS4gY29tcHJlc3Npb24gc3VwcG9ydCBpcyBkaXNhYmxlZFxuXHRcdFx0Ly8gMi4gSEVBRCByZXF1ZXN0XG5cdFx0XHQvLyAzLiBubyBDb250ZW50LUVuY29kaW5nIGhlYWRlclxuXHRcdFx0Ly8gNC4gbm8gY29udGVudCByZXNwb25zZSAoMjA0KVxuXHRcdFx0Ly8gNS4gY29udGVudCBub3QgbW9kaWZpZWQgcmVzcG9uc2UgKDMwNClcblx0XHRcdGlmICghcmVxdWVzdC5jb21wcmVzcyB8fCByZXF1ZXN0Lm1ldGhvZCA9PT0gJ0hFQUQnIHx8IGNvZGluZ3MgPT09IG51bGwgfHwgcmVzLnN0YXR1c0NvZGUgPT09IDIwNCB8fCByZXMuc3RhdHVzQ29kZSA9PT0gMzA0KSB7XG5cdFx0XHRcdHJlc3BvbnNlID0gbmV3IFJlc3BvbnNlKGJvZHksIHJlc3BvbnNlX29wdGlvbnMpO1xuXHRcdFx0XHRyZXNvbHZlKHJlc3BvbnNlKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBGb3IgTm9kZSB2Nitcblx0XHRcdC8vIEJlIGxlc3Mgc3RyaWN0IHdoZW4gZGVjb2RpbmcgY29tcHJlc3NlZCByZXNwb25zZXMsIHNpbmNlIHNvbWV0aW1lc1xuXHRcdFx0Ly8gc2VydmVycyBzZW5kIHNsaWdodGx5IGludmFsaWQgcmVzcG9uc2VzIHRoYXQgYXJlIHN0aWxsIGFjY2VwdGVkXG5cdFx0XHQvLyBieSBjb21tb24gYnJvd3NlcnMuXG5cdFx0XHQvLyBBbHdheXMgdXNpbmcgWl9TWU5DX0ZMVVNIIGlzIHdoYXQgY1VSTCBkb2VzLlxuXHRcdFx0Y29uc3QgemxpYk9wdGlvbnMgPSB7XG5cdFx0XHRcdGZsdXNoOiB6bGliLlpfU1lOQ19GTFVTSCxcblx0XHRcdFx0ZmluaXNoRmx1c2g6IHpsaWIuWl9TWU5DX0ZMVVNIXG5cdFx0XHR9O1xuXG5cdFx0XHQvLyBmb3IgZ3ppcFxuXHRcdFx0aWYgKGNvZGluZ3MgPT0gJ2d6aXAnIHx8IGNvZGluZ3MgPT0gJ3gtZ3ppcCcpIHtcblx0XHRcdFx0Ym9keSA9IGJvZHkucGlwZSh6bGliLmNyZWF0ZUd1bnppcCh6bGliT3B0aW9ucykpO1xuXHRcdFx0XHRyZXNwb25zZSA9IG5ldyBSZXNwb25zZShib2R5LCByZXNwb25zZV9vcHRpb25zKTtcblx0XHRcdFx0cmVzb2x2ZShyZXNwb25zZSk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gZm9yIGRlZmxhdGVcblx0XHRcdGlmIChjb2RpbmdzID09ICdkZWZsYXRlJyB8fCBjb2RpbmdzID09ICd4LWRlZmxhdGUnKSB7XG5cdFx0XHRcdC8vIGhhbmRsZSB0aGUgaW5mYW1vdXMgcmF3IGRlZmxhdGUgcmVzcG9uc2UgZnJvbSBvbGQgc2VydmVyc1xuXHRcdFx0XHQvLyBhIGhhY2sgZm9yIG9sZCBJSVMgYW5kIEFwYWNoZSBzZXJ2ZXJzXG5cdFx0XHRcdGNvbnN0IHJhdyA9IHJlcy5waXBlKG5ldyBQYXNzVGhyb3VnaCQxKCkpO1xuXHRcdFx0XHRyYXcub25jZSgnZGF0YScsIGZ1bmN0aW9uIChjaHVuaykge1xuXHRcdFx0XHRcdC8vIHNlZSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzM3NTE5ODI4XG5cdFx0XHRcdFx0aWYgKChjaHVua1swXSAmIDB4MEYpID09PSAweDA4KSB7XG5cdFx0XHRcdFx0XHRib2R5ID0gYm9keS5waXBlKHpsaWIuY3JlYXRlSW5mbGF0ZSgpKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Ym9keSA9IGJvZHkucGlwZSh6bGliLmNyZWF0ZUluZmxhdGVSYXcoKSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJlc3BvbnNlID0gbmV3IFJlc3BvbnNlKGJvZHksIHJlc3BvbnNlX29wdGlvbnMpO1xuXHRcdFx0XHRcdHJlc29sdmUocmVzcG9uc2UpO1xuXHRcdFx0XHR9KTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBmb3IgYnJcblx0XHRcdGlmIChjb2RpbmdzID09ICdicicgJiYgdHlwZW9mIHpsaWIuY3JlYXRlQnJvdGxpRGVjb21wcmVzcyA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0XHRib2R5ID0gYm9keS5waXBlKHpsaWIuY3JlYXRlQnJvdGxpRGVjb21wcmVzcygpKTtcblx0XHRcdFx0cmVzcG9uc2UgPSBuZXcgUmVzcG9uc2UoYm9keSwgcmVzcG9uc2Vfb3B0aW9ucyk7XG5cdFx0XHRcdHJlc29sdmUocmVzcG9uc2UpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIG90aGVyd2lzZSwgdXNlIHJlc3BvbnNlIGFzLWlzXG5cdFx0XHRyZXNwb25zZSA9IG5ldyBSZXNwb25zZShib2R5LCByZXNwb25zZV9vcHRpb25zKTtcblx0XHRcdHJlc29sdmUocmVzcG9uc2UpO1xuXHRcdH0pO1xuXG5cdFx0d3JpdGVUb1N0cmVhbShyZXEsIHJlcXVlc3QpO1xuXHR9KTtcbn1cbi8qKlxuICogUmVkaXJlY3QgY29kZSBtYXRjaGluZ1xuICpcbiAqIEBwYXJhbSAgIE51bWJlciAgIGNvZGUgIFN0YXR1cyBjb2RlXG4gKiBAcmV0dXJuICBCb29sZWFuXG4gKi9cbmZldGNoLmlzUmVkaXJlY3QgPSBmdW5jdGlvbiAoY29kZSkge1xuXHRyZXR1cm4gY29kZSA9PT0gMzAxIHx8IGNvZGUgPT09IDMwMiB8fCBjb2RlID09PSAzMDMgfHwgY29kZSA9PT0gMzA3IHx8IGNvZGUgPT09IDMwODtcbn07XG5cbi8vIGV4cG9zZSBQcm9taXNlXG5mZXRjaC5Qcm9taXNlID0gZ2xvYmFsLlByb21pc2U7XG5cbmZ1bmN0aW9uIGdldF9wYWdlX2hhbmRsZXIoXG5cdG1hbmlmZXN0LFxuXHRzZXNzaW9uX2dldHRlclxuKSB7XG5cdGNvbnN0IGdldF9idWlsZF9pbmZvID0gZGV2XG5cdFx0PyAoKSA9PiBKU09OLnBhcnNlKGZzLnJlYWRGaWxlU3luYyhwYXRoLmpvaW4oYnVpbGRfZGlyLCAnYnVpbGQuanNvbicpLCAndXRmLTgnKSlcblx0XHQ6IChhc3NldHMgPT4gKCkgPT4gYXNzZXRzKShKU09OLnBhcnNlKGZzLnJlYWRGaWxlU3luYyhwYXRoLmpvaW4oYnVpbGRfZGlyLCAnYnVpbGQuanNvbicpLCAndXRmLTgnKSkpO1xuXG5cdGNvbnN0IHRlbXBsYXRlID0gZGV2XG5cdFx0PyAoKSA9PiByZWFkX3RlbXBsYXRlKHNyY19kaXIpXG5cdFx0OiAoc3RyID0+ICgpID0+IHN0cikocmVhZF90ZW1wbGF0ZShidWlsZF9kaXIpKTtcblxuXHRjb25zdCBoYXNfc2VydmljZV93b3JrZXIgPSBmcy5leGlzdHNTeW5jKHBhdGguam9pbihidWlsZF9kaXIsICdzZXJ2aWNlLXdvcmtlci5qcycpKTtcblxuXHRjb25zdCB7IHNlcnZlcl9yb3V0ZXMsIHBhZ2VzIH0gPSBtYW5pZmVzdDtcblx0Y29uc3QgZXJyb3Jfcm91dGUgPSBtYW5pZmVzdC5lcnJvcjtcblxuXHRmdW5jdGlvbiBiYWlsKHJlcSwgcmVzLCBlcnIpIHtcblx0XHRjb25zb2xlLmVycm9yKGVycik7XG5cblx0XHRjb25zdCBtZXNzYWdlID0gZGV2ID8gZXNjYXBlX2h0bWwoZXJyLm1lc3NhZ2UpIDogJ0ludGVybmFsIHNlcnZlciBlcnJvcic7XG5cblx0XHRyZXMuc3RhdHVzQ29kZSA9IDUwMDtcblx0XHRyZXMuZW5kKGA8cHJlPiR7bWVzc2FnZX08L3ByZT5gKTtcblx0fVxuXG5cdGZ1bmN0aW9uIGhhbmRsZV9lcnJvcihyZXEsIHJlcywgc3RhdHVzQ29kZSwgZXJyb3IpIHtcblx0XHRoYW5kbGVfcGFnZSh7XG5cdFx0XHRwYXR0ZXJuOiBudWxsLFxuXHRcdFx0cGFydHM6IFtcblx0XHRcdFx0eyBuYW1lOiBudWxsLCBjb21wb25lbnQ6IGVycm9yX3JvdXRlIH1cblx0XHRcdF1cblx0XHR9LCByZXEsIHJlcywgc3RhdHVzQ29kZSwgZXJyb3IgfHwgbmV3IEVycm9yKCdVbmtub3duIGVycm9yIGluIHByZWxvYWQgZnVuY3Rpb24nKSk7XG5cdH1cblxuXHRhc3luYyBmdW5jdGlvbiBoYW5kbGVfcGFnZShwYWdlLCByZXEsIHJlcywgc3RhdHVzID0gMjAwLCBlcnJvciA9IG51bGwpIHtcblx0XHRjb25zdCBpc19zZXJ2aWNlX3dvcmtlcl9pbmRleCA9IHJlcS5wYXRoID09PSAnL3NlcnZpY2Utd29ya2VyLWluZGV4Lmh0bWwnO1xuXHRcdGNvbnN0IGJ1aWxkX2luZm9cblxuXG5cblxuID0gZ2V0X2J1aWxkX2luZm8oKTtcblxuXHRcdHJlcy5zZXRIZWFkZXIoJ0NvbnRlbnQtVHlwZScsICd0ZXh0L2h0bWwnKTtcblx0XHRyZXMuc2V0SGVhZGVyKCdDYWNoZS1Db250cm9sJywgZGV2ID8gJ25vLWNhY2hlJyA6ICdtYXgtYWdlPTYwMCcpO1xuXG5cdFx0Ly8gcHJlbG9hZCBtYWluLmpzIGFuZCBjdXJyZW50IHJvdXRlXG5cdFx0Ly8gVE9ETyBkZXRlY3Qgb3RoZXIgc3R1ZmYgd2UgY2FuIHByZWxvYWQ/IGltYWdlcywgQ1NTLCBmb250cz9cblx0XHRsZXQgcHJlbG9hZGVkX2NodW5rcyA9IEFycmF5LmlzQXJyYXkoYnVpbGRfaW5mby5hc3NldHMubWFpbikgPyBidWlsZF9pbmZvLmFzc2V0cy5tYWluIDogW2J1aWxkX2luZm8uYXNzZXRzLm1haW5dO1xuXHRcdGlmICghZXJyb3IgJiYgIWlzX3NlcnZpY2Vfd29ya2VyX2luZGV4KSB7XG5cdFx0XHRwYWdlLnBhcnRzLmZvckVhY2gocGFydCA9PiB7XG5cdFx0XHRcdGlmICghcGFydCkgcmV0dXJuO1xuXG5cdFx0XHRcdC8vIHVzaW5nIGNvbmNhdCBiZWNhdXNlIGl0IGNvdWxkIGJlIGEgc3RyaW5nIG9yIGFuIGFycmF5LiB0aGFua3Mgd2VicGFjayFcblx0XHRcdFx0cHJlbG9hZGVkX2NodW5rcyA9IHByZWxvYWRlZF9jaHVua3MuY29uY2F0KGJ1aWxkX2luZm8uYXNzZXRzW3BhcnQubmFtZV0pO1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0aWYgKGJ1aWxkX2luZm8uYnVuZGxlciA9PT0gJ3JvbGx1cCcpIHtcblx0XHRcdC8vIFRPRE8gYWRkIGRlcGVuZGVuY2llcyBhbmQgQ1NTXG5cdFx0XHRjb25zdCBsaW5rID0gcHJlbG9hZGVkX2NodW5rc1xuXHRcdFx0XHQuZmlsdGVyKGZpbGUgPT4gZmlsZSAmJiAhZmlsZS5tYXRjaCgvXFwubWFwJC8pKVxuXHRcdFx0XHQubWFwKGZpbGUgPT4gYDwke3JlcS5iYXNlVXJsfS9jbGllbnQvJHtmaWxlfT47cmVsPVwibW9kdWxlcHJlbG9hZFwiYClcblx0XHRcdFx0LmpvaW4oJywgJyk7XG5cblx0XHRcdHJlcy5zZXRIZWFkZXIoJ0xpbmsnLCBsaW5rKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29uc3QgbGluayA9IHByZWxvYWRlZF9jaHVua3Ncblx0XHRcdFx0LmZpbHRlcihmaWxlID0+IGZpbGUgJiYgIWZpbGUubWF0Y2goL1xcLm1hcCQvKSlcblx0XHRcdFx0Lm1hcCgoZmlsZSkgPT4ge1xuXHRcdFx0XHRcdGNvbnN0IGFzID0gL1xcLmNzcyQvLnRlc3QoZmlsZSkgPyAnc3R5bGUnIDogJ3NjcmlwdCc7XG5cdFx0XHRcdFx0cmV0dXJuIGA8JHtyZXEuYmFzZVVybH0vY2xpZW50LyR7ZmlsZX0+O3JlbD1cInByZWxvYWRcIjthcz1cIiR7YXN9XCJgO1xuXHRcdFx0XHR9KVxuXHRcdFx0XHQuam9pbignLCAnKTtcblxuXHRcdFx0cmVzLnNldEhlYWRlcignTGluaycsIGxpbmspO1xuXHRcdH1cblxuXHRcdGNvbnN0IHNlc3Npb24gPSBzZXNzaW9uX2dldHRlcihyZXEsIHJlcyk7XG5cblx0XHRsZXQgcmVkaXJlY3Q7XG5cdFx0bGV0IHByZWxvYWRfZXJyb3I7XG5cblx0XHRjb25zdCBwcmVsb2FkX2NvbnRleHQgPSB7XG5cdFx0XHRyZWRpcmVjdDogKHN0YXR1c0NvZGUsIGxvY2F0aW9uKSA9PiB7XG5cdFx0XHRcdGlmIChyZWRpcmVjdCAmJiAocmVkaXJlY3Quc3RhdHVzQ29kZSAhPT0gc3RhdHVzQ29kZSB8fCByZWRpcmVjdC5sb2NhdGlvbiAhPT0gbG9jYXRpb24pKSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKGBDb25mbGljdGluZyByZWRpcmVjdHNgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRsb2NhdGlvbiA9IGxvY2F0aW9uLnJlcGxhY2UoL15cXC8vZywgJycpOyAvLyBsZWFkaW5nIHNsYXNoIChvbmx5KVxuXHRcdFx0XHRyZWRpcmVjdCA9IHsgc3RhdHVzQ29kZSwgbG9jYXRpb24gfTtcblx0XHRcdH0sXG5cdFx0XHRlcnJvcjogKHN0YXR1c0NvZGUsIG1lc3NhZ2UpID0+IHtcblx0XHRcdFx0cHJlbG9hZF9lcnJvciA9IHsgc3RhdHVzQ29kZSwgbWVzc2FnZSB9O1xuXHRcdFx0fSxcblx0XHRcdGZldGNoOiAodXJsLCBvcHRzKSA9PiB7XG5cdFx0XHRcdGNvbnN0IHBhcnNlZCA9IG5ldyBVcmwuVVJMKHVybCwgYGh0dHA6Ly8xMjcuMC4wLjE6JHtwcm9jZXNzLmVudi5QT1JUfSR7cmVxLmJhc2VVcmwgPyByZXEuYmFzZVVybCArICcvJyA6Jyd9YCk7XG5cblx0XHRcdFx0aWYgKG9wdHMpIHtcblx0XHRcdFx0XHRvcHRzID0gT2JqZWN0LmFzc2lnbih7fSwgb3B0cyk7XG5cblx0XHRcdFx0XHRjb25zdCBpbmNsdWRlX2Nvb2tpZXMgPSAoXG5cdFx0XHRcdFx0XHRvcHRzLmNyZWRlbnRpYWxzID09PSAnaW5jbHVkZScgfHxcblx0XHRcdFx0XHRcdG9wdHMuY3JlZGVudGlhbHMgPT09ICdzYW1lLW9yaWdpbicgJiYgcGFyc2VkLm9yaWdpbiA9PT0gYGh0dHA6Ly8xMjcuMC4wLjE6JHtwcm9jZXNzLmVudi5QT1JUfWBcblx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0aWYgKGluY2x1ZGVfY29va2llcykge1xuXHRcdFx0XHRcdFx0b3B0cy5oZWFkZXJzID0gT2JqZWN0LmFzc2lnbih7fSwgb3B0cy5oZWFkZXJzKTtcblxuXHRcdFx0XHRcdFx0Y29uc3QgY29va2llcyA9IE9iamVjdC5hc3NpZ24oXG5cdFx0XHRcdFx0XHRcdHt9LFxuXHRcdFx0XHRcdFx0XHRjb29raWUucGFyc2UocmVxLmhlYWRlcnMuY29va2llIHx8ICcnKSxcblx0XHRcdFx0XHRcdFx0Y29va2llLnBhcnNlKG9wdHMuaGVhZGVycy5jb29raWUgfHwgJycpXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHRjb25zdCBzZXRfY29va2llID0gcmVzLmdldEhlYWRlcignU2V0LUNvb2tpZScpO1xuXHRcdFx0XHRcdFx0KEFycmF5LmlzQXJyYXkoc2V0X2Nvb2tpZSkgPyBzZXRfY29va2llIDogW3NldF9jb29raWVdKS5mb3JFYWNoKHN0ciA9PiB7XG5cdFx0XHRcdFx0XHRcdGNvbnN0IG1hdGNoID0gLyhbXj1dKyk9KFteO10rKS8uZXhlYyhzdHIpO1xuXHRcdFx0XHRcdFx0XHRpZiAobWF0Y2gpIGNvb2tpZXNbbWF0Y2hbMV1dID0gbWF0Y2hbMl07XG5cdFx0XHRcdFx0XHR9KTtcblxuXHRcdFx0XHRcdFx0Y29uc3Qgc3RyID0gT2JqZWN0LmtleXMoY29va2llcylcblx0XHRcdFx0XHRcdFx0Lm1hcChrZXkgPT4gYCR7a2V5fT0ke2Nvb2tpZXNba2V5XX1gKVxuXHRcdFx0XHRcdFx0XHQuam9pbignOyAnKTtcblxuXHRcdFx0XHRcdFx0b3B0cy5oZWFkZXJzLmNvb2tpZSA9IHN0cjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gZmV0Y2gocGFyc2VkLmhyZWYsIG9wdHMpO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0XHRsZXQgcHJlbG9hZGVkO1xuXHRcdGxldCBtYXRjaDtcblx0XHRsZXQgcGFyYW1zO1xuXG5cdFx0dHJ5IHtcblx0XHRcdGNvbnN0IHJvb3RfcHJlbG9hZGVkID0gbWFuaWZlc3Qucm9vdF9wcmVsb2FkXG5cdFx0XHRcdD8gbWFuaWZlc3Qucm9vdF9wcmVsb2FkLmNhbGwocHJlbG9hZF9jb250ZXh0LCB7XG5cdFx0XHRcdFx0aG9zdDogcmVxLmhlYWRlcnMuaG9zdCxcblx0XHRcdFx0XHRwYXRoOiByZXEucGF0aCxcblx0XHRcdFx0XHRxdWVyeTogcmVxLnF1ZXJ5LFxuXHRcdFx0XHRcdHBhcmFtczoge31cblx0XHRcdFx0fSwgc2Vzc2lvbilcblx0XHRcdFx0OiB7fTtcblxuXHRcdFx0bWF0Y2ggPSBlcnJvciA/IG51bGwgOiBwYWdlLnBhdHRlcm4uZXhlYyhyZXEucGF0aCk7XG5cblxuXHRcdFx0bGV0IHRvUHJlbG9hZCA9IFtyb290X3ByZWxvYWRlZF07XG5cdFx0XHRpZiAoIWlzX3NlcnZpY2Vfd29ya2VyX2luZGV4KSB7XG5cdFx0XHRcdHRvUHJlbG9hZCA9IHRvUHJlbG9hZC5jb25jYXQocGFnZS5wYXJ0cy5tYXAocGFydCA9PiB7XG5cdFx0XHRcdFx0aWYgKCFwYXJ0KSByZXR1cm4gbnVsbDtcblxuXHRcdFx0XHRcdC8vIHRoZSBkZWVwZXN0IGxldmVsIGlzIHVzZWQgYmVsb3csIHRvIGluaXRpYWxpc2UgdGhlIHN0b3JlXG5cdFx0XHRcdFx0cGFyYW1zID0gcGFydC5wYXJhbXMgPyBwYXJ0LnBhcmFtcyhtYXRjaCkgOiB7fTtcblxuXHRcdFx0XHRcdHJldHVybiBwYXJ0LnByZWxvYWRcblx0XHRcdFx0XHRcdD8gcGFydC5wcmVsb2FkLmNhbGwocHJlbG9hZF9jb250ZXh0LCB7XG5cdFx0XHRcdFx0XHRcdGhvc3Q6IHJlcS5oZWFkZXJzLmhvc3QsXG5cdFx0XHRcdFx0XHRcdHBhdGg6IHJlcS5wYXRoLFxuXHRcdFx0XHRcdFx0XHRxdWVyeTogcmVxLnF1ZXJ5LFxuXHRcdFx0XHRcdFx0XHRwYXJhbXNcblx0XHRcdFx0XHRcdH0sIHNlc3Npb24pXG5cdFx0XHRcdFx0XHQ6IHt9O1xuXHRcdFx0XHR9KSk7XG5cdFx0XHR9XG5cblx0XHRcdHByZWxvYWRlZCA9IGF3YWl0IFByb21pc2UuYWxsKHRvUHJlbG9hZCk7XG5cdFx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0XHRpZiAoZXJyb3IpIHtcblx0XHRcdFx0cmV0dXJuIGJhaWwocmVxLCByZXMsIGVycilcblx0XHRcdH1cblxuXHRcdFx0cHJlbG9hZF9lcnJvciA9IHsgc3RhdHVzQ29kZTogNTAwLCBtZXNzYWdlOiBlcnIgfTtcblx0XHRcdHByZWxvYWRlZCA9IFtdOyAvLyBhcHBlYXNlIFR5cGVTY3JpcHRcblx0XHR9XG5cblx0XHR0cnkge1xuXHRcdFx0aWYgKHJlZGlyZWN0KSB7XG5cdFx0XHRcdGNvbnN0IGxvY2F0aW9uID0gVXJsLnJlc29sdmUoKHJlcS5iYXNlVXJsIHx8ICcnKSArICcvJywgcmVkaXJlY3QubG9jYXRpb24pO1xuXG5cdFx0XHRcdHJlcy5zdGF0dXNDb2RlID0gcmVkaXJlY3Quc3RhdHVzQ29kZTtcblx0XHRcdFx0cmVzLnNldEhlYWRlcignTG9jYXRpb24nLCBsb2NhdGlvbik7XG5cdFx0XHRcdHJlcy5lbmQoKTtcblxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmIChwcmVsb2FkX2Vycm9yKSB7XG5cdFx0XHRcdGhhbmRsZV9lcnJvcihyZXEsIHJlcywgcHJlbG9hZF9lcnJvci5zdGF0dXNDb2RlLCBwcmVsb2FkX2Vycm9yLm1lc3NhZ2UpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IHNlZ21lbnRzID0gcmVxLnBhdGguc3BsaXQoJy8nKS5maWx0ZXIoQm9vbGVhbik7XG5cblx0XHRcdC8vIFRPRE8gbWFrZSB0aGlzIGxlc3MgY29uZnVzaW5nXG5cdFx0XHRjb25zdCBsYXlvdXRfc2VnbWVudHMgPSBbc2VnbWVudHNbMF1dO1xuXHRcdFx0bGV0IGwgPSAxO1xuXG5cdFx0XHRwYWdlLnBhcnRzLmZvckVhY2goKHBhcnQsIGkpID0+IHtcblx0XHRcdFx0bGF5b3V0X3NlZ21lbnRzW2xdID0gc2VnbWVudHNbaSArIDFdO1xuXHRcdFx0XHRpZiAoIXBhcnQpIHJldHVybiBudWxsO1xuXHRcdFx0XHRsKys7XG5cdFx0XHR9KTtcblxuXHRcdFx0Y29uc3QgcHJvcHMgPSB7XG5cdFx0XHRcdHN0b3Jlczoge1xuXHRcdFx0XHRcdHBhZ2U6IHtcblx0XHRcdFx0XHRcdHN1YnNjcmliZTogd3JpdGFibGUoe1xuXHRcdFx0XHRcdFx0XHRob3N0OiByZXEuaGVhZGVycy5ob3N0LFxuXHRcdFx0XHRcdFx0XHRwYXRoOiByZXEucGF0aCxcblx0XHRcdFx0XHRcdFx0cXVlcnk6IHJlcS5xdWVyeSxcblx0XHRcdFx0XHRcdFx0cGFyYW1zXG5cdFx0XHRcdFx0XHR9KS5zdWJzY3JpYmVcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdHByZWxvYWRpbmc6IHtcblx0XHRcdFx0XHRcdHN1YnNjcmliZTogd3JpdGFibGUobnVsbCkuc3Vic2NyaWJlXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRzZXNzaW9uOiB3cml0YWJsZShzZXNzaW9uKVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRzZWdtZW50czogbGF5b3V0X3NlZ21lbnRzLFxuXHRcdFx0XHRzdGF0dXM6IGVycm9yID8gc3RhdHVzIDogMjAwLFxuXHRcdFx0XHRlcnJvcjogZXJyb3IgPyBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IgOiB7IG1lc3NhZ2U6IGVycm9yIH0gOiBudWxsLFxuXHRcdFx0XHRsZXZlbDA6IHtcblx0XHRcdFx0XHRwcm9wczogcHJlbG9hZGVkWzBdXG5cdFx0XHRcdH0sXG5cdFx0XHRcdGxldmVsMToge1xuXHRcdFx0XHRcdHNlZ21lbnQ6IHNlZ21lbnRzWzBdLFxuXHRcdFx0XHRcdHByb3BzOiB7fVxuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0XHRpZiAoIWlzX3NlcnZpY2Vfd29ya2VyX2luZGV4KSB7XG5cdFx0XHRcdGxldCBsID0gMTtcblx0XHRcdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBwYWdlLnBhcnRzLmxlbmd0aDsgaSArPSAxKSB7XG5cdFx0XHRcdFx0Y29uc3QgcGFydCA9IHBhZ2UucGFydHNbaV07XG5cdFx0XHRcdFx0aWYgKCFwYXJ0KSBjb250aW51ZTtcblxuXHRcdFx0XHRcdHByb3BzW2BsZXZlbCR7bCsrfWBdID0ge1xuXHRcdFx0XHRcdFx0Y29tcG9uZW50OiBwYXJ0LmNvbXBvbmVudCxcblx0XHRcdFx0XHRcdHByb3BzOiBwcmVsb2FkZWRbaSArIDFdIHx8IHt9LFxuXHRcdFx0XHRcdFx0c2VnbWVudDogc2VnbWVudHNbaV1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IHsgaHRtbCwgaGVhZCwgY3NzIH0gPSBBcHAucmVuZGVyKHByb3BzKTtcblxuXHRcdFx0Y29uc3Qgc2VyaWFsaXplZCA9IHtcblx0XHRcdFx0cHJlbG9hZGVkOiBgWyR7cHJlbG9hZGVkLm1hcChkYXRhID0+IHRyeV9zZXJpYWxpemUoZGF0YSkpLmpvaW4oJywnKX1dYCxcblx0XHRcdFx0c2Vzc2lvbjogc2Vzc2lvbiAmJiB0cnlfc2VyaWFsaXplKHNlc3Npb24sIGVyciA9PiB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gc2VyaWFsaXplIHNlc3Npb24gZGF0YTogJHtlcnIubWVzc2FnZX1gKTtcblx0XHRcdFx0fSksXG5cdFx0XHRcdGVycm9yOiBlcnJvciAmJiB0cnlfc2VyaWFsaXplKHByb3BzLmVycm9yKVxuXHRcdFx0fTtcblxuXHRcdFx0bGV0IHNjcmlwdCA9IGBfX1NBUFBFUl9fPXske1tcblx0XHRcdFx0ZXJyb3IgJiYgYGVycm9yOiR7c2VyaWFsaXplZC5lcnJvcn0sc3RhdHVzOiR7c3RhdHVzfWAsXG5cdFx0XHRcdGBiYXNlVXJsOlwiJHtyZXEuYmFzZVVybH1cImAsXG5cdFx0XHRcdHNlcmlhbGl6ZWQucHJlbG9hZGVkICYmIGBwcmVsb2FkZWQ6JHtzZXJpYWxpemVkLnByZWxvYWRlZH1gLFxuXHRcdFx0XHRzZXJpYWxpemVkLnNlc3Npb24gJiYgYHNlc3Npb246JHtzZXJpYWxpemVkLnNlc3Npb259YFxuXHRcdFx0XS5maWx0ZXIoQm9vbGVhbikuam9pbignLCcpfX07YDtcblxuXHRcdFx0aWYgKGhhc19zZXJ2aWNlX3dvcmtlcikge1xuXHRcdFx0XHRzY3JpcHQgKz0gYGlmKCdzZXJ2aWNlV29ya2VyJyBpbiBuYXZpZ2F0b3IpbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIucmVnaXN0ZXIoJyR7cmVxLmJhc2VVcmx9L3NlcnZpY2Utd29ya2VyLmpzJyk7YDtcblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgZmlsZSA9IFtdLmNvbmNhdChidWlsZF9pbmZvLmFzc2V0cy5tYWluKS5maWx0ZXIoZmlsZSA9PiBmaWxlICYmIC9cXC5qcyQvLnRlc3QoZmlsZSkpWzBdO1xuXHRcdFx0Y29uc3QgbWFpbiA9IGAke3JlcS5iYXNlVXJsfS9jbGllbnQvJHtmaWxlfWA7XG5cblx0XHRcdGlmIChidWlsZF9pbmZvLmJ1bmRsZXIgPT09ICdyb2xsdXAnKSB7XG5cdFx0XHRcdGlmIChidWlsZF9pbmZvLmxlZ2FjeV9hc3NldHMpIHtcblx0XHRcdFx0XHRjb25zdCBsZWdhY3lfbWFpbiA9IGAke3JlcS5iYXNlVXJsfS9jbGllbnQvbGVnYWN5LyR7YnVpbGRfaW5mby5sZWdhY3lfYXNzZXRzLm1haW59YDtcblx0XHRcdFx0XHRzY3JpcHQgKz0gYChmdW5jdGlvbigpe3RyeXtldmFsKFwiYXN5bmMgZnVuY3Rpb24geCgpe31cIik7dmFyIG1haW49XCIke21haW59XCJ9Y2F0Y2goZSl7bWFpbj1cIiR7bGVnYWN5X21haW59XCJ9O3ZhciBzPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7dHJ5e25ldyBGdW5jdGlvbihcImlmKDApaW1wb3J0KCcnKVwiKSgpO3Muc3JjPW1haW47cy50eXBlPVwibW9kdWxlXCI7cy5jcm9zc09yaWdpbj1cInVzZS1jcmVkZW50aWFsc1wiO31jYXRjaChlKXtzLnNyYz1cIiR7cmVxLmJhc2VVcmx9L2NsaWVudC9zaGltcG9ydEAke2J1aWxkX2luZm8uc2hpbXBvcnR9LmpzXCI7cy5zZXRBdHRyaWJ1dGUoXCJkYXRhLW1haW5cIixtYWluKTt9ZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzKTt9KCkpO2A7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c2NyaXB0ICs9IGB2YXIgcz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO3RyeXtuZXcgRnVuY3Rpb24oXCJpZigwKWltcG9ydCgnJylcIikoKTtzLnNyYz1cIiR7bWFpbn1cIjtzLnR5cGU9XCJtb2R1bGVcIjtzLmNyb3NzT3JpZ2luPVwidXNlLWNyZWRlbnRpYWxzXCI7fWNhdGNoKGUpe3Muc3JjPVwiJHtyZXEuYmFzZVVybH0vY2xpZW50L3NoaW1wb3J0QCR7YnVpbGRfaW5mby5zaGltcG9ydH0uanNcIjtzLnNldEF0dHJpYnV0ZShcImRhdGEtbWFpblwiLFwiJHttYWlufVwiKX1kb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHMpYDtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0c2NyaXB0ICs9IGA8L3NjcmlwdD48c2NyaXB0IHNyYz1cIiR7bWFpbn1cIj5gO1xuXHRcdFx0fVxuXG5cdFx0XHRsZXQgc3R5bGVzO1xuXG5cdFx0XHQvLyBUT0RPIG1ha2UgdGhpcyBjb25zaXN0ZW50IGFjcm9zcyBhcHBzXG5cdFx0XHQvLyBUT0RPIGVtYmVkIGJ1aWxkX2luZm8gaW4gcGxhY2Vob2xkZXIudHNcblx0XHRcdGlmIChidWlsZF9pbmZvLmNzcyAmJiBidWlsZF9pbmZvLmNzcy5tYWluKSB7XG5cdFx0XHRcdGNvbnN0IGNzc19jaHVua3MgPSBuZXcgU2V0KCk7XG5cdFx0XHRcdGlmIChidWlsZF9pbmZvLmNzcy5tYWluKSBjc3NfY2h1bmtzLmFkZChidWlsZF9pbmZvLmNzcy5tYWluKTtcblx0XHRcdFx0cGFnZS5wYXJ0cy5mb3JFYWNoKHBhcnQgPT4ge1xuXHRcdFx0XHRcdGlmICghcGFydCkgcmV0dXJuO1xuXHRcdFx0XHRcdGNvbnN0IGNzc19jaHVua3NfZm9yX3BhcnQgPSBidWlsZF9pbmZvLmNzcy5jaHVua3NbcGFydC5maWxlXTtcblxuXHRcdFx0XHRcdGlmIChjc3NfY2h1bmtzX2Zvcl9wYXJ0KSB7XG5cdFx0XHRcdFx0XHRjc3NfY2h1bmtzX2Zvcl9wYXJ0LmZvckVhY2goZmlsZSA9PiB7XG5cdFx0XHRcdFx0XHRcdGNzc19jaHVua3MuYWRkKGZpbGUpO1xuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHRzdHlsZXMgPSBBcnJheS5mcm9tKGNzc19jaHVua3MpXG5cdFx0XHRcdFx0Lm1hcChocmVmID0+IGA8bGluayByZWw9XCJzdHlsZXNoZWV0XCIgaHJlZj1cImNsaWVudC8ke2hyZWZ9XCI+YClcblx0XHRcdFx0XHQuam9pbignJyk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzdHlsZXMgPSAoY3NzICYmIGNzcy5jb2RlID8gYDxzdHlsZT4ke2Nzcy5jb2RlfTwvc3R5bGU+YCA6ICcnKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gdXNlcnMgY2FuIHNldCBhIENTUCBub25jZSB1c2luZyByZXMubG9jYWxzLm5vbmNlXG5cdFx0XHRjb25zdCBub25jZV9hdHRyID0gKHJlcy5sb2NhbHMgJiYgcmVzLmxvY2Fscy5ub25jZSkgPyBgIG5vbmNlPVwiJHtyZXMubG9jYWxzLm5vbmNlfVwiYCA6ICcnO1xuXG5cdFx0XHRjb25zdCBib2R5ID0gdGVtcGxhdGUoKVxuXHRcdFx0XHQucmVwbGFjZSgnJXNhcHBlci5iYXNlJScsICgpID0+IGA8YmFzZSBocmVmPVwiJHtyZXEuYmFzZVVybH0vXCI+YClcblx0XHRcdFx0LnJlcGxhY2UoJyVzYXBwZXIuc2NyaXB0cyUnLCAoKSA9PiBgPHNjcmlwdCR7bm9uY2VfYXR0cn0+JHtzY3JpcHR9PC9zY3JpcHQ+YClcblx0XHRcdFx0LnJlcGxhY2UoJyVzYXBwZXIuaHRtbCUnLCAoKSA9PiBodG1sKVxuXHRcdFx0XHQucmVwbGFjZSgnJXNhcHBlci5oZWFkJScsICgpID0+IGA8bm9zY3JpcHQgaWQ9J3NhcHBlci1oZWFkLXN0YXJ0Jz48L25vc2NyaXB0PiR7aGVhZH08bm9zY3JpcHQgaWQ9J3NhcHBlci1oZWFkLWVuZCc+PC9ub3NjcmlwdD5gKVxuXHRcdFx0XHQucmVwbGFjZSgnJXNhcHBlci5zdHlsZXMlJywgKCkgPT4gc3R5bGVzKTtcblxuXHRcdFx0cmVzLnN0YXR1c0NvZGUgPSBzdGF0dXM7XG5cdFx0XHRyZXMuZW5kKGJvZHkpO1xuXHRcdH0gY2F0Y2goZXJyKSB7XG5cdFx0XHRpZiAoZXJyb3IpIHtcblx0XHRcdFx0YmFpbChyZXEsIHJlcywgZXJyKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGhhbmRsZV9lcnJvcihyZXEsIHJlcywgNTAwLCBlcnIpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBmdW5jdGlvbiBmaW5kX3JvdXRlKHJlcSwgcmVzLCBuZXh0KSB7XG5cdFx0aWYgKHJlcS5wYXRoID09PSAnL3NlcnZpY2Utd29ya2VyLWluZGV4Lmh0bWwnKSB7XG5cdFx0XHRjb25zdCBob21lUGFnZSA9IHBhZ2VzLmZpbmQocGFnZSA9PiBwYWdlLnBhdHRlcm4udGVzdCgnLycpKTtcblx0XHRcdGhhbmRsZV9wYWdlKGhvbWVQYWdlLCByZXEsIHJlcyk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Zm9yIChjb25zdCBwYWdlIG9mIHBhZ2VzKSB7XG5cdFx0XHRpZiAocGFnZS5wYXR0ZXJuLnRlc3QocmVxLnBhdGgpKSB7XG5cdFx0XHRcdGhhbmRsZV9wYWdlKHBhZ2UsIHJlcSwgcmVzKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGhhbmRsZV9lcnJvcihyZXEsIHJlcywgNDA0LCAnTm90IGZvdW5kJyk7XG5cdH07XG59XG5cbmZ1bmN0aW9uIHJlYWRfdGVtcGxhdGUoZGlyID0gYnVpbGRfZGlyKSB7XG5cdHJldHVybiBmcy5yZWFkRmlsZVN5bmMoYCR7ZGlyfS90ZW1wbGF0ZS5odG1sYCwgJ3V0Zi04Jyk7XG59XG5cbmZ1bmN0aW9uIHRyeV9zZXJpYWxpemUoZGF0YSwgZmFpbCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBkZXZhbHVlKGRhdGEpO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHRpZiAoZmFpbCkgZmFpbChlcnIpO1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGVzY2FwZV9odG1sKGh0bWwpIHtcblx0Y29uc3QgY2hhcnMgPSB7XG5cdFx0J1wiJyA6ICdxdW90Jyxcblx0XHRcIidcIjogJyMzOScsXG5cdFx0JyYnOiAnYW1wJyxcblx0XHQnPCcgOiAnbHQnLFxuXHRcdCc+JyA6ICdndCdcblx0fTtcblxuXHRyZXR1cm4gaHRtbC5yZXBsYWNlKC9bXCInJjw+XS9nLCBjID0+IGAmJHtjaGFyc1tjXX07YCk7XG59XG5cbnZhciBtaW1lX3JhdyA9IFwiYXBwbGljYXRpb24vYW5kcmV3LWluc2V0XFx0XFx0XFx0ZXpcXG5hcHBsaWNhdGlvbi9hcHBsaXh3YXJlXFx0XFx0XFx0XFx0YXdcXG5hcHBsaWNhdGlvbi9hdG9tK3htbFxcdFxcdFxcdFxcdGF0b21cXG5hcHBsaWNhdGlvbi9hdG9tY2F0K3htbFxcdFxcdFxcdFxcdGF0b21jYXRcXG5hcHBsaWNhdGlvbi9hdG9tc3ZjK3htbFxcdFxcdFxcdFxcdGF0b21zdmNcXG5hcHBsaWNhdGlvbi9jY3htbCt4bWxcXHRcXHRcXHRcXHRjY3htbFxcbmFwcGxpY2F0aW9uL2NkbWktY2FwYWJpbGl0eVxcdFxcdFxcdGNkbWlhXFxuYXBwbGljYXRpb24vY2RtaS1jb250YWluZXJcXHRcXHRcXHRjZG1pY1xcbmFwcGxpY2F0aW9uL2NkbWktZG9tYWluXFx0XFx0XFx0XFx0Y2RtaWRcXG5hcHBsaWNhdGlvbi9jZG1pLW9iamVjdFxcdFxcdFxcdFxcdGNkbWlvXFxuYXBwbGljYXRpb24vY2RtaS1xdWV1ZVxcdFxcdFxcdFxcdGNkbWlxXFxuYXBwbGljYXRpb24vY3Utc2VlbWVcXHRcXHRcXHRcXHRjdVxcbmFwcGxpY2F0aW9uL2Rhdm1vdW50K3htbFxcdFxcdFxcdGRhdm1vdW50XFxuYXBwbGljYXRpb24vZG9jYm9vayt4bWxcXHRcXHRcXHRcXHRkYmtcXG5hcHBsaWNhdGlvbi9kc3NjK2RlclxcdFxcdFxcdFxcdGRzc2NcXG5hcHBsaWNhdGlvbi9kc3NjK3htbFxcdFxcdFxcdFxcdHhkc3NjXFxuYXBwbGljYXRpb24vZWNtYXNjcmlwdFxcdFxcdFxcdFxcdGVjbWFcXG5hcHBsaWNhdGlvbi9lbW1hK3htbFxcdFxcdFxcdFxcdGVtbWFcXG5hcHBsaWNhdGlvbi9lcHViK3ppcFxcdFxcdFxcdFxcdGVwdWJcXG5hcHBsaWNhdGlvbi9leGlcXHRcXHRcXHRcXHRcXHRleGlcXG5hcHBsaWNhdGlvbi9mb250LXRkcGZyXFx0XFx0XFx0XFx0cGZyXFxuYXBwbGljYXRpb24vZ21sK3htbFxcdFxcdFxcdFxcdGdtbFxcbmFwcGxpY2F0aW9uL2dweCt4bWxcXHRcXHRcXHRcXHRncHhcXG5hcHBsaWNhdGlvbi9neGZcXHRcXHRcXHRcXHRcXHRneGZcXG5hcHBsaWNhdGlvbi9oeXBlcnN0dWRpb1xcdFxcdFxcdFxcdHN0a1xcbmFwcGxpY2F0aW9uL2lua21sK3htbFxcdFxcdFxcdFxcdGluayBpbmttbFxcbmFwcGxpY2F0aW9uL2lwZml4XFx0XFx0XFx0XFx0aXBmaXhcXG5hcHBsaWNhdGlvbi9qYXZhLWFyY2hpdmVcXHRcXHRcXHRqYXJcXG5hcHBsaWNhdGlvbi9qYXZhLXNlcmlhbGl6ZWQtb2JqZWN0XFx0XFx0c2VyXFxuYXBwbGljYXRpb24vamF2YS12bVxcdFxcdFxcdFxcdGNsYXNzXFxuYXBwbGljYXRpb24vamF2YXNjcmlwdFxcdFxcdFxcdFxcdGpzXFxuYXBwbGljYXRpb24vanNvblxcdFxcdFxcdFxcdGpzb24gbWFwXFxuYXBwbGljYXRpb24vanNvbm1sK2pzb25cXHRcXHRcXHRcXHRqc29ubWxcXG5hcHBsaWNhdGlvbi9sb3N0K3htbFxcdFxcdFxcdFxcdGxvc3R4bWxcXG5hcHBsaWNhdGlvbi9tYWMtYmluaGV4NDBcXHRcXHRcXHRocXhcXG5hcHBsaWNhdGlvbi9tYWMtY29tcGFjdHByb1xcdFxcdFxcdGNwdFxcbmFwcGxpY2F0aW9uL21hZHMreG1sXFx0XFx0XFx0XFx0bWFkc1xcbmFwcGxpY2F0aW9uL21hcmNcXHRcXHRcXHRcXHRtcmNcXG5hcHBsaWNhdGlvbi9tYXJjeG1sK3htbFxcdFxcdFxcdFxcdG1yY3hcXG5hcHBsaWNhdGlvbi9tYXRoZW1hdGljYVxcdFxcdFxcdFxcdG1hIG5iIG1iXFxuYXBwbGljYXRpb24vbWF0aG1sK3htbFxcdFxcdFxcdFxcdG1hdGhtbFxcbmFwcGxpY2F0aW9uL21ib3hcXHRcXHRcXHRcXHRtYm94XFxuYXBwbGljYXRpb24vbWVkaWFzZXJ2ZXJjb250cm9sK3htbFxcdFxcdG1zY21sXFxuYXBwbGljYXRpb24vbWV0YWxpbmsreG1sXFx0XFx0XFx0bWV0YWxpbmtcXG5hcHBsaWNhdGlvbi9tZXRhbGluazQreG1sXFx0XFx0XFx0bWV0YTRcXG5hcHBsaWNhdGlvbi9tZXRzK3htbFxcdFxcdFxcdFxcdG1ldHNcXG5hcHBsaWNhdGlvbi9tb2RzK3htbFxcdFxcdFxcdFxcdG1vZHNcXG5hcHBsaWNhdGlvbi9tcDIxXFx0XFx0XFx0XFx0bTIxIG1wMjFcXG5hcHBsaWNhdGlvbi9tcDRcXHRcXHRcXHRcXHRcXHRtcDRzXFxuYXBwbGljYXRpb24vbXN3b3JkXFx0XFx0XFx0XFx0ZG9jIGRvdFxcbmFwcGxpY2F0aW9uL214ZlxcdFxcdFxcdFxcdFxcdG14ZlxcbmFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbVxcdGJpbiBkbXMgbHJmIG1hciBzbyBkaXN0IGRpc3R6IHBrZyBicGsgZHVtcCBlbGMgZGVwbG95XFxuYXBwbGljYXRpb24vb2RhXFx0XFx0XFx0XFx0XFx0b2RhXFxuYXBwbGljYXRpb24vb2VicHMtcGFja2FnZSt4bWxcXHRcXHRcXHRvcGZcXG5hcHBsaWNhdGlvbi9vZ2dcXHRcXHRcXHRcXHRcXHRvZ3hcXG5hcHBsaWNhdGlvbi9vbWRvYyt4bWxcXHRcXHRcXHRcXHRvbWRvY1xcbmFwcGxpY2F0aW9uL29uZW5vdGVcXHRcXHRcXHRcXHRvbmV0b2Mgb25ldG9jMiBvbmV0bXAgb25lcGtnXFxuYXBwbGljYXRpb24vb3hwc1xcdFxcdFxcdFxcdG94cHNcXG5hcHBsaWNhdGlvbi9wYXRjaC1vcHMtZXJyb3IreG1sXFx0XFx0XFx0eGVyXFxuYXBwbGljYXRpb24vcGRmXFx0XFx0XFx0XFx0XFx0cGRmXFxuYXBwbGljYXRpb24vcGdwLWVuY3J5cHRlZFxcdFxcdFxcdHBncFxcbmFwcGxpY2F0aW9uL3BncC1zaWduYXR1cmVcXHRcXHRcXHRhc2Mgc2lnXFxuYXBwbGljYXRpb24vcGljcy1ydWxlc1xcdFxcdFxcdFxcdHByZlxcbmFwcGxpY2F0aW9uL3BrY3MxMFxcdFxcdFxcdFxcdHAxMFxcbmFwcGxpY2F0aW9uL3BrY3M3LW1pbWVcXHRcXHRcXHRcXHRwN20gcDdjXFxuYXBwbGljYXRpb24vcGtjczctc2lnbmF0dXJlXFx0XFx0XFx0cDdzXFxuYXBwbGljYXRpb24vcGtjczhcXHRcXHRcXHRcXHRwOFxcbmFwcGxpY2F0aW9uL3BraXgtYXR0ci1jZXJ0XFx0XFx0XFx0YWNcXG5hcHBsaWNhdGlvbi9wa2l4LWNlcnRcXHRcXHRcXHRcXHRjZXJcXG5hcHBsaWNhdGlvbi9wa2l4LWNybFxcdFxcdFxcdFxcdGNybFxcbmFwcGxpY2F0aW9uL3BraXgtcGtpcGF0aFxcdFxcdFxcdHBraXBhdGhcXG5hcHBsaWNhdGlvbi9wa2l4Y21wXFx0XFx0XFx0XFx0cGtpXFxuYXBwbGljYXRpb24vcGxzK3htbFxcdFxcdFxcdFxcdHBsc1xcbmFwcGxpY2F0aW9uL3Bvc3RzY3JpcHRcXHRcXHRcXHRcXHRhaSBlcHMgcHNcXG5hcHBsaWNhdGlvbi9wcnMuY3d3XFx0XFx0XFx0XFx0Y3d3XFxuYXBwbGljYXRpb24vcHNrYyt4bWxcXHRcXHRcXHRcXHRwc2tjeG1sXFxuYXBwbGljYXRpb24vcmRmK3htbFxcdFxcdFxcdFxcdHJkZlxcbmFwcGxpY2F0aW9uL3JlZ2luZm8reG1sXFx0XFx0XFx0XFx0cmlmXFxuYXBwbGljYXRpb24vcmVsYXgtbmctY29tcGFjdC1zeW50YXhcXHRcXHRybmNcXG5hcHBsaWNhdGlvbi9yZXNvdXJjZS1saXN0cyt4bWxcXHRcXHRcXHRybFxcbmFwcGxpY2F0aW9uL3Jlc291cmNlLWxpc3RzLWRpZmYreG1sXFx0XFx0cmxkXFxuYXBwbGljYXRpb24vcmxzLXNlcnZpY2VzK3htbFxcdFxcdFxcdHJzXFxuYXBwbGljYXRpb24vcnBraS1naG9zdGJ1c3RlcnNcXHRcXHRcXHRnYnJcXG5hcHBsaWNhdGlvbi9ycGtpLW1hbmlmZXN0XFx0XFx0XFx0bWZ0XFxuYXBwbGljYXRpb24vcnBraS1yb2FcXHRcXHRcXHRcXHRyb2FcXG5hcHBsaWNhdGlvbi9yc2QreG1sXFx0XFx0XFx0XFx0cnNkXFxuYXBwbGljYXRpb24vcnNzK3htbFxcdFxcdFxcdFxcdHJzc1xcbmFwcGxpY2F0aW9uL3J0ZlxcdFxcdFxcdFxcdFxcdHJ0ZlxcbmFwcGxpY2F0aW9uL3NibWwreG1sXFx0XFx0XFx0XFx0c2JtbFxcbmFwcGxpY2F0aW9uL3NjdnAtY3YtcmVxdWVzdFxcdFxcdFxcdHNjcVxcbmFwcGxpY2F0aW9uL3NjdnAtY3YtcmVzcG9uc2VcXHRcXHRcXHRzY3NcXG5hcHBsaWNhdGlvbi9zY3ZwLXZwLXJlcXVlc3RcXHRcXHRcXHRzcHFcXG5hcHBsaWNhdGlvbi9zY3ZwLXZwLXJlc3BvbnNlXFx0XFx0XFx0c3BwXFxuYXBwbGljYXRpb24vc2RwXFx0XFx0XFx0XFx0XFx0c2RwXFxuYXBwbGljYXRpb24vc2V0LXBheW1lbnQtaW5pdGlhdGlvblxcdFxcdHNldHBheVxcbmFwcGxpY2F0aW9uL3NldC1yZWdpc3RyYXRpb24taW5pdGlhdGlvblxcdFxcdHNldHJlZ1xcbmFwcGxpY2F0aW9uL3NoZit4bWxcXHRcXHRcXHRcXHRzaGZcXG5hcHBsaWNhdGlvbi9zbWlsK3htbFxcdFxcdFxcdFxcdHNtaSBzbWlsXFxuYXBwbGljYXRpb24vc3BhcnFsLXF1ZXJ5XFx0XFx0XFx0cnFcXG5hcHBsaWNhdGlvbi9zcGFycWwtcmVzdWx0cyt4bWxcXHRcXHRcXHRzcnhcXG5hcHBsaWNhdGlvbi9zcmdzXFx0XFx0XFx0XFx0Z3JhbVxcbmFwcGxpY2F0aW9uL3NyZ3MreG1sXFx0XFx0XFx0XFx0Z3J4bWxcXG5hcHBsaWNhdGlvbi9zcnUreG1sXFx0XFx0XFx0XFx0c3J1XFxuYXBwbGljYXRpb24vc3NkbCt4bWxcXHRcXHRcXHRcXHRzc2RsXFxuYXBwbGljYXRpb24vc3NtbCt4bWxcXHRcXHRcXHRcXHRzc21sXFxuYXBwbGljYXRpb24vdGVpK3htbFxcdFxcdFxcdFxcdHRlaSB0ZWljb3JwdXNcXG5hcHBsaWNhdGlvbi90aHJhdWQreG1sXFx0XFx0XFx0XFx0dGZpXFxuYXBwbGljYXRpb24vdGltZXN0YW1wZWQtZGF0YVxcdFxcdFxcdHRzZFxcbmFwcGxpY2F0aW9uL3ZuZC4zZ3BwLnBpYy1idy1sYXJnZVxcdFxcdHBsYlxcbmFwcGxpY2F0aW9uL3ZuZC4zZ3BwLnBpYy1idy1zbWFsbFxcdFxcdHBzYlxcbmFwcGxpY2F0aW9uL3ZuZC4zZ3BwLnBpYy1idy12YXJcXHRcXHRcXHRwdmJcXG5hcHBsaWNhdGlvbi92bmQuM2dwcDIudGNhcFxcdFxcdFxcdHRjYXBcXG5hcHBsaWNhdGlvbi92bmQuM20ucG9zdC1pdC1ub3Rlc1xcdFxcdHB3blxcbmFwcGxpY2F0aW9uL3ZuZC5hY2NwYWMuc2ltcGx5LmFzb1xcdFxcdGFzb1xcbmFwcGxpY2F0aW9uL3ZuZC5hY2NwYWMuc2ltcGx5LmltcFxcdFxcdGltcFxcbmFwcGxpY2F0aW9uL3ZuZC5hY3Vjb2JvbFxcdFxcdFxcdGFjdVxcbmFwcGxpY2F0aW9uL3ZuZC5hY3Vjb3JwXFx0XFx0XFx0XFx0YXRjIGFjdXRjXFxuYXBwbGljYXRpb24vdm5kLmFkb2JlLmFpci1hcHBsaWNhdGlvbi1pbnN0YWxsZXItcGFja2FnZSt6aXBcXHRhaXJcXG5hcHBsaWNhdGlvbi92bmQuYWRvYmUuZm9ybXNjZW50cmFsLmZjZHRcXHRcXHRmY2R0XFxuYXBwbGljYXRpb24vdm5kLmFkb2JlLmZ4cFxcdFxcdFxcdGZ4cCBmeHBsXFxuYXBwbGljYXRpb24vdm5kLmFkb2JlLnhkcCt4bWxcXHRcXHRcXHR4ZHBcXG5hcHBsaWNhdGlvbi92bmQuYWRvYmUueGZkZlxcdFxcdFxcdHhmZGZcXG5hcHBsaWNhdGlvbi92bmQuYWhlYWQuc3BhY2VcXHRcXHRcXHRhaGVhZFxcbmFwcGxpY2F0aW9uL3ZuZC5haXJ6aXAuZmlsZXNlY3VyZS5hemZcXHRcXHRhemZcXG5hcHBsaWNhdGlvbi92bmQuYWlyemlwLmZpbGVzZWN1cmUuYXpzXFx0XFx0YXpzXFxuYXBwbGljYXRpb24vdm5kLmFtYXpvbi5lYm9va1xcdFxcdFxcdGF6d1xcbmFwcGxpY2F0aW9uL3ZuZC5hbWVyaWNhbmR5bmFtaWNzLmFjY1xcdFxcdGFjY1xcbmFwcGxpY2F0aW9uL3ZuZC5hbWlnYS5hbWlcXHRcXHRcXHRhbWlcXG5hcHBsaWNhdGlvbi92bmQuYW5kcm9pZC5wYWNrYWdlLWFyY2hpdmVcXHRcXHRhcGtcXG5hcHBsaWNhdGlvbi92bmQuYW5zZXItd2ViLWNlcnRpZmljYXRlLWlzc3VlLWluaXRpYXRpb25cXHRjaWlcXG5hcHBsaWNhdGlvbi92bmQuYW5zZXItd2ViLWZ1bmRzLXRyYW5zZmVyLWluaXRpYXRpb25cXHRmdGlcXG5hcHBsaWNhdGlvbi92bmQuYW50aXguZ2FtZS1jb21wb25lbnRcXHRcXHRhdHhcXG5hcHBsaWNhdGlvbi92bmQuYXBwbGUuaW5zdGFsbGVyK3htbFxcdFxcdG1wa2dcXG5hcHBsaWNhdGlvbi92bmQuYXBwbGUubXBlZ3VybFxcdFxcdFxcdG0zdThcXG5hcHBsaWNhdGlvbi92bmQuYXJpc3RhbmV0d29ya3Muc3dpXFx0XFx0c3dpXFxuYXBwbGljYXRpb24vdm5kLmFzdHJhZWEtc29mdHdhcmUuaW90YVxcdFxcdGlvdGFcXG5hcHBsaWNhdGlvbi92bmQuYXVkaW9ncmFwaFxcdFxcdFxcdGFlcFxcbmFwcGxpY2F0aW9uL3ZuZC5ibHVlaWNlLm11bHRpcGFzc1xcdFxcdG1wbVxcbmFwcGxpY2F0aW9uL3ZuZC5ibWlcXHRcXHRcXHRcXHRibWlcXG5hcHBsaWNhdGlvbi92bmQuYnVzaW5lc3NvYmplY3RzXFx0XFx0XFx0cmVwXFxuYXBwbGljYXRpb24vdm5kLmNoZW1kcmF3K3htbFxcdFxcdFxcdGNkeG1sXFxuYXBwbGljYXRpb24vdm5kLmNoaXBudXRzLmthcmFva2UtbW1kXFx0XFx0bW1kXFxuYXBwbGljYXRpb24vdm5kLmNpbmRlcmVsbGFcXHRcXHRcXHRjZHlcXG5hcHBsaWNhdGlvbi92bmQuY2xheW1vcmVcXHRcXHRcXHRjbGFcXG5hcHBsaWNhdGlvbi92bmQuY2xvYW50by5ycDlcXHRcXHRcXHRycDlcXG5hcHBsaWNhdGlvbi92bmQuY2xvbmsuYzRncm91cFxcdFxcdFxcdGM0ZyBjNGQgYzRmIGM0cCBjNHVcXG5hcHBsaWNhdGlvbi92bmQuY2x1ZXRydXN0LmNhcnRvbW9iaWxlLWNvbmZpZ1xcdFxcdGMxMWFtY1xcbmFwcGxpY2F0aW9uL3ZuZC5jbHVldHJ1c3QuY2FydG9tb2JpbGUtY29uZmlnLXBrZ1xcdGMxMWFtelxcbmFwcGxpY2F0aW9uL3ZuZC5jb21tb25zcGFjZVxcdFxcdFxcdGNzcFxcbmFwcGxpY2F0aW9uL3ZuZC5jb250YWN0LmNtc2dcXHRcXHRcXHRjZGJjbXNnXFxuYXBwbGljYXRpb24vdm5kLmNvc21vY2FsbGVyXFx0XFx0XFx0Y21jXFxuYXBwbGljYXRpb24vdm5kLmNyaWNrLmNsaWNrZXJcXHRcXHRcXHRjbGt4XFxuYXBwbGljYXRpb24vdm5kLmNyaWNrLmNsaWNrZXIua2V5Ym9hcmRcXHRcXHRjbGtrXFxuYXBwbGljYXRpb24vdm5kLmNyaWNrLmNsaWNrZXIucGFsZXR0ZVxcdFxcdGNsa3BcXG5hcHBsaWNhdGlvbi92bmQuY3JpY2suY2xpY2tlci50ZW1wbGF0ZVxcdFxcdGNsa3RcXG5hcHBsaWNhdGlvbi92bmQuY3JpY2suY2xpY2tlci53b3JkYmFua1xcdFxcdGNsa3dcXG5hcHBsaWNhdGlvbi92bmQuY3JpdGljYWx0b29scy53YnMreG1sXFx0XFx0d2JzXFxuYXBwbGljYXRpb24vdm5kLmN0Yy1wb3NtbFxcdFxcdFxcdHBtbFxcbmFwcGxpY2F0aW9uL3ZuZC5jdXBzLXBwZFxcdFxcdFxcdHBwZFxcbmFwcGxpY2F0aW9uL3ZuZC5jdXJsLmNhclxcdFxcdFxcdGNhclxcbmFwcGxpY2F0aW9uL3ZuZC5jdXJsLnBjdXJsXFx0XFx0XFx0cGN1cmxcXG5hcHBsaWNhdGlvbi92bmQuZGFydFxcdFxcdFxcdFxcdGRhcnRcXG5hcHBsaWNhdGlvbi92bmQuZGF0YS12aXNpb24ucmR6XFx0XFx0XFx0cmR6XFxuYXBwbGljYXRpb24vdm5kLmRlY2UuZGF0YVxcdFxcdFxcdHV2ZiB1dnZmIHV2ZCB1dnZkXFxuYXBwbGljYXRpb24vdm5kLmRlY2UudHRtbCt4bWxcXHRcXHRcXHR1dnQgdXZ2dFxcbmFwcGxpY2F0aW9uL3ZuZC5kZWNlLnVuc3BlY2lmaWVkXFx0XFx0dXZ4IHV2dnhcXG5hcHBsaWNhdGlvbi92bmQuZGVjZS56aXBcXHRcXHRcXHR1dnogdXZ2elxcbmFwcGxpY2F0aW9uL3ZuZC5kZW5vdm8uZmNzZWxheW91dC1saW5rXFx0XFx0ZmVfbGF1bmNoXFxuYXBwbGljYXRpb24vdm5kLmRuYVxcdFxcdFxcdFxcdGRuYVxcbmFwcGxpY2F0aW9uL3ZuZC5kb2xieS5tbHBcXHRcXHRcXHRtbHBcXG5hcHBsaWNhdGlvbi92bmQuZHBncmFwaFxcdFxcdFxcdFxcdGRwZ1xcbmFwcGxpY2F0aW9uL3ZuZC5kcmVhbWZhY3RvcnlcXHRcXHRcXHRkZmFjXFxuYXBwbGljYXRpb24vdm5kLmRzLWtleXBvaW50XFx0XFx0XFx0a3B4eFxcbmFwcGxpY2F0aW9uL3ZuZC5kdmIuYWl0XFx0XFx0XFx0XFx0YWl0XFxuYXBwbGljYXRpb24vdm5kLmR2Yi5zZXJ2aWNlXFx0XFx0XFx0c3ZjXFxuYXBwbGljYXRpb24vdm5kLmR5bmFnZW9cXHRcXHRcXHRcXHRnZW9cXG5hcHBsaWNhdGlvbi92bmQuZWNvd2luLmNoYXJ0XFx0XFx0XFx0bWFnXFxuYXBwbGljYXRpb24vdm5kLmVubGl2ZW5cXHRcXHRcXHRcXHRubWxcXG5hcHBsaWNhdGlvbi92bmQuZXBzb24uZXNmXFx0XFx0XFx0ZXNmXFxuYXBwbGljYXRpb24vdm5kLmVwc29uLm1zZlxcdFxcdFxcdG1zZlxcbmFwcGxpY2F0aW9uL3ZuZC5lcHNvbi5xdWlja2FuaW1lXFx0XFx0cWFtXFxuYXBwbGljYXRpb24vdm5kLmVwc29uLnNhbHRcXHRcXHRcXHRzbHRcXG5hcHBsaWNhdGlvbi92bmQuZXBzb24uc3NmXFx0XFx0XFx0c3NmXFxuYXBwbGljYXRpb24vdm5kLmVzemlnbm8zK3htbFxcdFxcdFxcdGVzMyBldDNcXG5hcHBsaWNhdGlvbi92bmQuZXpwaXgtYWxidW1cXHRcXHRcXHRlejJcXG5hcHBsaWNhdGlvbi92bmQuZXpwaXgtcGFja2FnZVxcdFxcdFxcdGV6M1xcbmFwcGxpY2F0aW9uL3ZuZC5mZGZcXHRcXHRcXHRcXHRmZGZcXG5hcHBsaWNhdGlvbi92bmQuZmRzbi5tc2VlZFxcdFxcdFxcdG1zZWVkXFxuYXBwbGljYXRpb24vdm5kLmZkc24uc2VlZFxcdFxcdFxcdHNlZWQgZGF0YWxlc3NcXG5hcHBsaWNhdGlvbi92bmQuZmxvZ3JhcGhpdFxcdFxcdFxcdGdwaFxcbmFwcGxpY2F0aW9uL3ZuZC5mbHV4dGltZS5jbGlwXFx0XFx0XFx0ZnRjXFxuYXBwbGljYXRpb24vdm5kLmZyYW1lbWFrZXJcXHRcXHRcXHRmbSBmcmFtZSBtYWtlciBib29rXFxuYXBwbGljYXRpb24vdm5kLmZyb2dhbnMuZm5jXFx0XFx0XFx0Zm5jXFxuYXBwbGljYXRpb24vdm5kLmZyb2dhbnMubHRmXFx0XFx0XFx0bHRmXFxuYXBwbGljYXRpb24vdm5kLmZzYy53ZWJsYXVuY2hcXHRcXHRcXHRmc2NcXG5hcHBsaWNhdGlvbi92bmQuZnVqaXRzdS5vYXN5c1xcdFxcdFxcdG9hc1xcbmFwcGxpY2F0aW9uL3ZuZC5mdWppdHN1Lm9hc3lzMlxcdFxcdFxcdG9hMlxcbmFwcGxpY2F0aW9uL3ZuZC5mdWppdHN1Lm9hc3lzM1xcdFxcdFxcdG9hM1xcbmFwcGxpY2F0aW9uL3ZuZC5mdWppdHN1Lm9hc3lzZ3BcXHRcXHRcXHRmZzVcXG5hcHBsaWNhdGlvbi92bmQuZnVqaXRzdS5vYXN5c3Byc1xcdFxcdGJoMlxcbmFwcGxpY2F0aW9uL3ZuZC5mdWppeGVyb3guZGRkXFx0XFx0XFx0ZGRkXFxuYXBwbGljYXRpb24vdm5kLmZ1aml4ZXJveC5kb2N1d29ya3NcXHRcXHR4ZHdcXG5hcHBsaWNhdGlvbi92bmQuZnVqaXhlcm94LmRvY3V3b3Jrcy5iaW5kZXJcXHR4YmRcXG5hcHBsaWNhdGlvbi92bmQuZnV6enlzaGVldFxcdFxcdFxcdGZ6c1xcbmFwcGxpY2F0aW9uL3ZuZC5nZW5vbWF0aXgudHV4ZWRvXFx0XFx0dHhkXFxuYXBwbGljYXRpb24vdm5kLmdlb2dlYnJhLmZpbGVcXHRcXHRcXHRnZ2JcXG5hcHBsaWNhdGlvbi92bmQuZ2VvZ2VicmEudG9vbFxcdFxcdFxcdGdndFxcbmFwcGxpY2F0aW9uL3ZuZC5nZW9tZXRyeS1leHBsb3JlclxcdFxcdGdleCBncmVcXG5hcHBsaWNhdGlvbi92bmQuZ2VvbmV4dFxcdFxcdFxcdFxcdGd4dFxcbmFwcGxpY2F0aW9uL3ZuZC5nZW9wbGFuXFx0XFx0XFx0XFx0ZzJ3XFxuYXBwbGljYXRpb24vdm5kLmdlb3NwYWNlXFx0XFx0XFx0ZzN3XFxuYXBwbGljYXRpb24vdm5kLmdteFxcdFxcdFxcdFxcdGdteFxcbmFwcGxpY2F0aW9uL3ZuZC5nb29nbGUtZWFydGgua21sK3htbFxcdFxcdGttbFxcbmFwcGxpY2F0aW9uL3ZuZC5nb29nbGUtZWFydGgua216XFx0XFx0a216XFxuYXBwbGljYXRpb24vdm5kLmdyYWZlcVxcdFxcdFxcdFxcdGdxZiBncXNcXG5hcHBsaWNhdGlvbi92bmQuZ3Jvb3ZlLWFjY291bnRcXHRcXHRcXHRnYWNcXG5hcHBsaWNhdGlvbi92bmQuZ3Jvb3ZlLWhlbHBcXHRcXHRcXHRnaGZcXG5hcHBsaWNhdGlvbi92bmQuZ3Jvb3ZlLWlkZW50aXR5LW1lc3NhZ2VcXHRcXHRnaW1cXG5hcHBsaWNhdGlvbi92bmQuZ3Jvb3ZlLWluamVjdG9yXFx0XFx0XFx0Z3J2XFxuYXBwbGljYXRpb24vdm5kLmdyb292ZS10b29sLW1lc3NhZ2VcXHRcXHRndG1cXG5hcHBsaWNhdGlvbi92bmQuZ3Jvb3ZlLXRvb2wtdGVtcGxhdGVcXHRcXHR0cGxcXG5hcHBsaWNhdGlvbi92bmQuZ3Jvb3ZlLXZjYXJkXFx0XFx0XFx0dmNnXFxuYXBwbGljYXRpb24vdm5kLmhhbCt4bWxcXHRcXHRcXHRcXHRoYWxcXG5hcHBsaWNhdGlvbi92bmQuaGFuZGhlbGQtZW50ZXJ0YWlubWVudCt4bWxcXHR6bW1cXG5hcHBsaWNhdGlvbi92bmQuaGJjaVxcdFxcdFxcdFxcdGhiY2lcXG5hcHBsaWNhdGlvbi92bmQuaGhlLmxlc3Nvbi1wbGF5ZXJcXHRcXHRsZXNcXG5hcHBsaWNhdGlvbi92bmQuaHAtaHBnbFxcdFxcdFxcdFxcdGhwZ2xcXG5hcHBsaWNhdGlvbi92bmQuaHAtaHBpZFxcdFxcdFxcdFxcdGhwaWRcXG5hcHBsaWNhdGlvbi92bmQuaHAtaHBzXFx0XFx0XFx0XFx0aHBzXFxuYXBwbGljYXRpb24vdm5kLmhwLWpseXRcXHRcXHRcXHRcXHRqbHRcXG5hcHBsaWNhdGlvbi92bmQuaHAtcGNsXFx0XFx0XFx0XFx0cGNsXFxuYXBwbGljYXRpb24vdm5kLmhwLXBjbHhsXFx0XFx0XFx0cGNseGxcXG5hcHBsaWNhdGlvbi92bmQuaHlkcm9zdGF0aXguc29mLWRhdGFcXHRcXHRzZmQtaGRzdHhcXG5hcHBsaWNhdGlvbi92bmQuaWJtLm1pbmlwYXlcXHRcXHRcXHRtcHlcXG5hcHBsaWNhdGlvbi92bmQuaWJtLm1vZGNhcFxcdFxcdFxcdGFmcCBsaXN0YWZwIGxpc3QzODIwXFxuYXBwbGljYXRpb24vdm5kLmlibS5yaWdodHMtbWFuYWdlbWVudFxcdFxcdGlybVxcbmFwcGxpY2F0aW9uL3ZuZC5pYm0uc2VjdXJlLWNvbnRhaW5lclxcdFxcdHNjXFxuYXBwbGljYXRpb24vdm5kLmljY3Byb2ZpbGVcXHRcXHRcXHRpY2MgaWNtXFxuYXBwbGljYXRpb24vdm5kLmlnbG9hZGVyXFx0XFx0XFx0aWdsXFxuYXBwbGljYXRpb24vdm5kLmltbWVydmlzaW9uLWl2cFxcdFxcdFxcdGl2cFxcbmFwcGxpY2F0aW9uL3ZuZC5pbW1lcnZpc2lvbi1pdnVcXHRcXHRcXHRpdnVcXG5hcHBsaWNhdGlvbi92bmQuaW5zb3JzLmlnbVxcdFxcdFxcdGlnbVxcbmFwcGxpY2F0aW9uL3ZuZC5pbnRlcmNvbi5mb3JtbmV0XFx0XFx0eHB3IHhweFxcbmFwcGxpY2F0aW9uL3ZuZC5pbnRlcmdlb1xcdFxcdFxcdGkyZ1xcbmFwcGxpY2F0aW9uL3ZuZC5pbnR1LnFib1xcdFxcdFxcdHFib1xcbmFwcGxpY2F0aW9uL3ZuZC5pbnR1LnFmeFxcdFxcdFxcdHFmeFxcbmFwcGxpY2F0aW9uL3ZuZC5pcHVucGx1Z2dlZC5yY3Byb2ZpbGVcXHRcXHRyY3Byb2ZpbGVcXG5hcHBsaWNhdGlvbi92bmQuaXJlcG9zaXRvcnkucGFja2FnZSt4bWxcXHRcXHRpcnBcXG5hcHBsaWNhdGlvbi92bmQuaXMteHByXFx0XFx0XFx0XFx0eHByXFxuYXBwbGljYXRpb24vdm5kLmlzYWMuZmNzXFx0XFx0XFx0ZmNzXFxuYXBwbGljYXRpb24vdm5kLmphbVxcdFxcdFxcdFxcdGphbVxcbmFwcGxpY2F0aW9uL3ZuZC5qY3AuamF2YW1lLm1pZGxldC1ybXNcXHRcXHRybXNcXG5hcHBsaWNhdGlvbi92bmQuamlzcFxcdFxcdFxcdFxcdGppc3BcXG5hcHBsaWNhdGlvbi92bmQuam9vc3Quam9kYS1hcmNoaXZlXFx0XFx0am9kYVxcbmFwcGxpY2F0aW9uL3ZuZC5rYWhvb3R6XFx0XFx0XFx0XFx0a3R6IGt0clxcbmFwcGxpY2F0aW9uL3ZuZC5rZGUua2FyYm9uXFx0XFx0XFx0a2FyYm9uXFxuYXBwbGljYXRpb24vdm5kLmtkZS5rY2hhcnRcXHRcXHRcXHRjaHJ0XFxuYXBwbGljYXRpb24vdm5kLmtkZS5rZm9ybXVsYVxcdFxcdFxcdGtmb1xcbmFwcGxpY2F0aW9uL3ZuZC5rZGUua2l2aW9cXHRcXHRcXHRmbHdcXG5hcHBsaWNhdGlvbi92bmQua2RlLmtvbnRvdXJcXHRcXHRcXHRrb25cXG5hcHBsaWNhdGlvbi92bmQua2RlLmtwcmVzZW50ZXJcXHRcXHRcXHRrcHIga3B0XFxuYXBwbGljYXRpb24vdm5kLmtkZS5rc3ByZWFkXFx0XFx0XFx0a3NwXFxuYXBwbGljYXRpb24vdm5kLmtkZS5rd29yZFxcdFxcdFxcdGt3ZCBrd3RcXG5hcHBsaWNhdGlvbi92bmQua2VuYW1lYWFwcFxcdFxcdFxcdGh0a2VcXG5hcHBsaWNhdGlvbi92bmQua2lkc3BpcmF0aW9uXFx0XFx0XFx0a2lhXFxuYXBwbGljYXRpb24vdm5kLmtpbmFyXFx0XFx0XFx0XFx0a25lIGtucFxcbmFwcGxpY2F0aW9uL3ZuZC5rb2FuXFx0XFx0XFx0XFx0c2twIHNrZCBza3Qgc2ttXFxuYXBwbGljYXRpb24vdm5kLmtvZGFrLWRlc2NyaXB0b3JcXHRcXHRzc2VcXG5hcHBsaWNhdGlvbi92bmQubGFzLmxhcyt4bWxcXHRcXHRcXHRsYXN4bWxcXG5hcHBsaWNhdGlvbi92bmQubGxhbWFncmFwaGljcy5saWZlLWJhbGFuY2UuZGVza3RvcFxcdGxiZFxcbmFwcGxpY2F0aW9uL3ZuZC5sbGFtYWdyYXBoaWNzLmxpZmUtYmFsYW5jZS5leGNoYW5nZSt4bWxcXHRsYmVcXG5hcHBsaWNhdGlvbi92bmQubG90dXMtMS0yLTNcXHRcXHRcXHQxMjNcXG5hcHBsaWNhdGlvbi92bmQubG90dXMtYXBwcm9hY2hcXHRcXHRcXHRhcHJcXG5hcHBsaWNhdGlvbi92bmQubG90dXMtZnJlZWxhbmNlXFx0XFx0XFx0cHJlXFxuYXBwbGljYXRpb24vdm5kLmxvdHVzLW5vdGVzXFx0XFx0XFx0bnNmXFxuYXBwbGljYXRpb24vdm5kLmxvdHVzLW9yZ2FuaXplclxcdFxcdFxcdG9yZ1xcbmFwcGxpY2F0aW9uL3ZuZC5sb3R1cy1zY3JlZW5jYW1cXHRcXHRcXHRzY21cXG5hcHBsaWNhdGlvbi92bmQubG90dXMtd29yZHByb1xcdFxcdFxcdGx3cFxcbmFwcGxpY2F0aW9uL3ZuZC5tYWNwb3J0cy5wb3J0cGtnXFx0XFx0cG9ydHBrZ1xcbmFwcGxpY2F0aW9uL3ZuZC5tY2RcXHRcXHRcXHRcXHRtY2RcXG5hcHBsaWNhdGlvbi92bmQubWVkY2FsY2RhdGFcXHRcXHRcXHRtYzFcXG5hcHBsaWNhdGlvbi92bmQubWVkaWFzdGF0aW9uLmNka2V5XFx0XFx0Y2RrZXlcXG5hcHBsaWNhdGlvbi92bmQubWZlclxcdFxcdFxcdFxcdG13ZlxcbmFwcGxpY2F0aW9uL3ZuZC5tZm1wXFx0XFx0XFx0XFx0bWZtXFxuYXBwbGljYXRpb24vdm5kLm1pY3JvZ3JhZnguZmxvXFx0XFx0XFx0ZmxvXFxuYXBwbGljYXRpb24vdm5kLm1pY3JvZ3JhZnguaWd4XFx0XFx0XFx0aWd4XFxuYXBwbGljYXRpb24vdm5kLm1pZlxcdFxcdFxcdFxcdG1pZlxcbmFwcGxpY2F0aW9uL3ZuZC5tb2JpdXMuZGFmXFx0XFx0XFx0ZGFmXFxuYXBwbGljYXRpb24vdm5kLm1vYml1cy5kaXNcXHRcXHRcXHRkaXNcXG5hcHBsaWNhdGlvbi92bmQubW9iaXVzLm1ia1xcdFxcdFxcdG1ia1xcbmFwcGxpY2F0aW9uL3ZuZC5tb2JpdXMubXF5XFx0XFx0XFx0bXF5XFxuYXBwbGljYXRpb24vdm5kLm1vYml1cy5tc2xcXHRcXHRcXHRtc2xcXG5hcHBsaWNhdGlvbi92bmQubW9iaXVzLnBsY1xcdFxcdFxcdHBsY1xcbmFwcGxpY2F0aW9uL3ZuZC5tb2JpdXMudHhmXFx0XFx0XFx0dHhmXFxuYXBwbGljYXRpb24vdm5kLm1vcGh1bi5hcHBsaWNhdGlvblxcdFxcdG1wblxcbmFwcGxpY2F0aW9uL3ZuZC5tb3BodW4uY2VydGlmaWNhdGVcXHRcXHRtcGNcXG5hcHBsaWNhdGlvbi92bmQubW96aWxsYS54dWwreG1sXFx0XFx0XFx0eHVsXFxuYXBwbGljYXRpb24vdm5kLm1zLWFydGdhbHJ5XFx0XFx0XFx0Y2lsXFxuYXBwbGljYXRpb24vdm5kLm1zLWNhYi1jb21wcmVzc2VkXFx0XFx0Y2FiXFxuYXBwbGljYXRpb24vdm5kLm1zLWV4Y2VsXFx0XFx0XFx0eGxzIHhsbSB4bGEgeGxjIHhsdCB4bHdcXG5hcHBsaWNhdGlvbi92bmQubXMtZXhjZWwuYWRkaW4ubWFjcm9lbmFibGVkLjEyXFx0XFx0eGxhbVxcbmFwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbC5zaGVldC5iaW5hcnkubWFjcm9lbmFibGVkLjEyXFx0eGxzYlxcbmFwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbC5zaGVldC5tYWNyb2VuYWJsZWQuMTJcXHRcXHR4bHNtXFxuYXBwbGljYXRpb24vdm5kLm1zLWV4Y2VsLnRlbXBsYXRlLm1hY3JvZW5hYmxlZC4xMlxcdHhsdG1cXG5hcHBsaWNhdGlvbi92bmQubXMtZm9udG9iamVjdFxcdFxcdFxcdGVvdFxcbmFwcGxpY2F0aW9uL3ZuZC5tcy1odG1saGVscFxcdFxcdFxcdGNobVxcbmFwcGxpY2F0aW9uL3ZuZC5tcy1pbXNcXHRcXHRcXHRcXHRpbXNcXG5hcHBsaWNhdGlvbi92bmQubXMtbHJtXFx0XFx0XFx0XFx0bHJtXFxuYXBwbGljYXRpb24vdm5kLm1zLW9mZmljZXRoZW1lXFx0XFx0XFx0dGhteFxcbmFwcGxpY2F0aW9uL3ZuZC5tcy1wa2kuc2VjY2F0XFx0XFx0XFx0Y2F0XFxuYXBwbGljYXRpb24vdm5kLm1zLXBraS5zdGxcXHRcXHRcXHRzdGxcXG5hcHBsaWNhdGlvbi92bmQubXMtcG93ZXJwb2ludFxcdFxcdFxcdHBwdCBwcHMgcG90XFxuYXBwbGljYXRpb24vdm5kLm1zLXBvd2VycG9pbnQuYWRkaW4ubWFjcm9lbmFibGVkLjEyXFx0XFx0cHBhbVxcbmFwcGxpY2F0aW9uL3ZuZC5tcy1wb3dlcnBvaW50LnByZXNlbnRhdGlvbi5tYWNyb2VuYWJsZWQuMTJcXHRwcHRtXFxuYXBwbGljYXRpb24vdm5kLm1zLXBvd2VycG9pbnQuc2xpZGUubWFjcm9lbmFibGVkLjEyXFx0XFx0c2xkbVxcbmFwcGxpY2F0aW9uL3ZuZC5tcy1wb3dlcnBvaW50LnNsaWRlc2hvdy5tYWNyb2VuYWJsZWQuMTJcXHRcXHRwcHNtXFxuYXBwbGljYXRpb24vdm5kLm1zLXBvd2VycG9pbnQudGVtcGxhdGUubWFjcm9lbmFibGVkLjEyXFx0XFx0cG90bVxcbmFwcGxpY2F0aW9uL3ZuZC5tcy1wcm9qZWN0XFx0XFx0XFx0bXBwIG1wdFxcbmFwcGxpY2F0aW9uL3ZuZC5tcy13b3JkLmRvY3VtZW50Lm1hY3JvZW5hYmxlZC4xMlxcdGRvY21cXG5hcHBsaWNhdGlvbi92bmQubXMtd29yZC50ZW1wbGF0ZS5tYWNyb2VuYWJsZWQuMTJcXHRkb3RtXFxuYXBwbGljYXRpb24vdm5kLm1zLXdvcmtzXFx0XFx0XFx0d3BzIHdrcyB3Y20gd2RiXFxuYXBwbGljYXRpb24vdm5kLm1zLXdwbFxcdFxcdFxcdFxcdHdwbFxcbmFwcGxpY2F0aW9uL3ZuZC5tcy14cHNkb2N1bWVudFxcdFxcdFxcdHhwc1xcbmFwcGxpY2F0aW9uL3ZuZC5tc2VxXFx0XFx0XFx0XFx0bXNlcVxcbmFwcGxpY2F0aW9uL3ZuZC5tdXNpY2lhblxcdFxcdFxcdG11c1xcbmFwcGxpY2F0aW9uL3ZuZC5tdXZlZS5zdHlsZVxcdFxcdFxcdG1zdHlcXG5hcHBsaWNhdGlvbi92bmQubXluZmNcXHRcXHRcXHRcXHR0YWdsZXRcXG5hcHBsaWNhdGlvbi92bmQubmV1cm9sYW5ndWFnZS5ubHVcXHRcXHRubHVcXG5hcHBsaWNhdGlvbi92bmQubml0ZlxcdFxcdFxcdFxcdG50ZiBuaXRmXFxuYXBwbGljYXRpb24vdm5kLm5vYmxlbmV0LWRpcmVjdG9yeVxcdFxcdG5uZFxcbmFwcGxpY2F0aW9uL3ZuZC5ub2JsZW5ldC1zZWFsZXJcXHRcXHRcXHRubnNcXG5hcHBsaWNhdGlvbi92bmQubm9ibGVuZXQtd2ViXFx0XFx0XFx0bm53XFxuYXBwbGljYXRpb24vdm5kLm5va2lhLm4tZ2FnZS5kYXRhXFx0XFx0bmdkYXRcXG5hcHBsaWNhdGlvbi92bmQubm9raWEubi1nYWdlLnN5bWJpYW4uaW5zdGFsbFxcdG4tZ2FnZVxcbmFwcGxpY2F0aW9uL3ZuZC5ub2tpYS5yYWRpby1wcmVzZXRcXHRcXHRycHN0XFxuYXBwbGljYXRpb24vdm5kLm5va2lhLnJhZGlvLXByZXNldHNcXHRcXHRycHNzXFxuYXBwbGljYXRpb24vdm5kLm5vdmFkaWdtLmVkbVxcdFxcdFxcdGVkbVxcbmFwcGxpY2F0aW9uL3ZuZC5ub3ZhZGlnbS5lZHhcXHRcXHRcXHRlZHhcXG5hcHBsaWNhdGlvbi92bmQubm92YWRpZ20uZXh0XFx0XFx0XFx0ZXh0XFxuYXBwbGljYXRpb24vdm5kLm9hc2lzLm9wZW5kb2N1bWVudC5jaGFydFxcdFxcdG9kY1xcbmFwcGxpY2F0aW9uL3ZuZC5vYXNpcy5vcGVuZG9jdW1lbnQuY2hhcnQtdGVtcGxhdGVcXHRvdGNcXG5hcHBsaWNhdGlvbi92bmQub2FzaXMub3BlbmRvY3VtZW50LmRhdGFiYXNlXFx0XFx0b2RiXFxuYXBwbGljYXRpb24vdm5kLm9hc2lzLm9wZW5kb2N1bWVudC5mb3JtdWxhXFx0XFx0b2RmXFxuYXBwbGljYXRpb24vdm5kLm9hc2lzLm9wZW5kb2N1bWVudC5mb3JtdWxhLXRlbXBsYXRlXFx0b2RmdFxcbmFwcGxpY2F0aW9uL3ZuZC5vYXNpcy5vcGVuZG9jdW1lbnQuZ3JhcGhpY3NcXHRcXHRvZGdcXG5hcHBsaWNhdGlvbi92bmQub2FzaXMub3BlbmRvY3VtZW50LmdyYXBoaWNzLXRlbXBsYXRlXFx0b3RnXFxuYXBwbGljYXRpb24vdm5kLm9hc2lzLm9wZW5kb2N1bWVudC5pbWFnZVxcdFxcdG9kaVxcbmFwcGxpY2F0aW9uL3ZuZC5vYXNpcy5vcGVuZG9jdW1lbnQuaW1hZ2UtdGVtcGxhdGVcXHRvdGlcXG5hcHBsaWNhdGlvbi92bmQub2FzaXMub3BlbmRvY3VtZW50LnByZXNlbnRhdGlvblxcdFxcdG9kcFxcbmFwcGxpY2F0aW9uL3ZuZC5vYXNpcy5vcGVuZG9jdW1lbnQucHJlc2VudGF0aW9uLXRlbXBsYXRlXFx0b3RwXFxuYXBwbGljYXRpb24vdm5kLm9hc2lzLm9wZW5kb2N1bWVudC5zcHJlYWRzaGVldFxcdFxcdG9kc1xcbmFwcGxpY2F0aW9uL3ZuZC5vYXNpcy5vcGVuZG9jdW1lbnQuc3ByZWFkc2hlZXQtdGVtcGxhdGVcXHRvdHNcXG5hcHBsaWNhdGlvbi92bmQub2FzaXMub3BlbmRvY3VtZW50LnRleHRcXHRcXHRcXHRvZHRcXG5hcHBsaWNhdGlvbi92bmQub2FzaXMub3BlbmRvY3VtZW50LnRleHQtbWFzdGVyXFx0XFx0b2RtXFxuYXBwbGljYXRpb24vdm5kLm9hc2lzLm9wZW5kb2N1bWVudC50ZXh0LXRlbXBsYXRlXFx0b3R0XFxuYXBwbGljYXRpb24vdm5kLm9hc2lzLm9wZW5kb2N1bWVudC50ZXh0LXdlYlxcdFxcdG90aFxcbmFwcGxpY2F0aW9uL3ZuZC5vbHBjLXN1Z2FyXFx0XFx0XFx0eG9cXG5hcHBsaWNhdGlvbi92bmQub21hLmRkMit4bWxcXHRcXHRcXHRkZDJcXG5hcHBsaWNhdGlvbi92bmQub3Blbm9mZmljZW9yZy5leHRlbnNpb25cXHRcXHRveHRcXG5hcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQucHJlc2VudGF0aW9ubWwucHJlc2VudGF0aW9uXFx0cHB0eFxcbmFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5wcmVzZW50YXRpb25tbC5zbGlkZVxcdHNsZHhcXG5hcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQucHJlc2VudGF0aW9ubWwuc2xpZGVzaG93XFx0cHBzeFxcbmFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5wcmVzZW50YXRpb25tbC50ZW1wbGF0ZVxcdHBvdHhcXG5hcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuc3ByZWFkc2hlZXRtbC5zaGVldFxcdHhsc3hcXG5hcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuc3ByZWFkc2hlZXRtbC50ZW1wbGF0ZVxcdHhsdHhcXG5hcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQud29yZHByb2Nlc3NpbmdtbC5kb2N1bWVudFxcdGRvY3hcXG5hcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQud29yZHByb2Nlc3NpbmdtbC50ZW1wbGF0ZVxcdGRvdHhcXG5hcHBsaWNhdGlvbi92bmQub3NnZW8ubWFwZ3VpZGUucGFja2FnZVxcdFxcdG1ncFxcbmFwcGxpY2F0aW9uL3ZuZC5vc2dpLmRwXFx0XFx0XFx0XFx0ZHBcXG5hcHBsaWNhdGlvbi92bmQub3NnaS5zdWJzeXN0ZW1cXHRcXHRcXHRlc2FcXG5hcHBsaWNhdGlvbi92bmQucGFsbVxcdFxcdFxcdFxcdHBkYiBwcWEgb3ByY1xcbmFwcGxpY2F0aW9uL3ZuZC5wYXdhYWZpbGVcXHRcXHRcXHRwYXdcXG5hcHBsaWNhdGlvbi92bmQucGcuZm9ybWF0XFx0XFx0XFx0c3RyXFxuYXBwbGljYXRpb24vdm5kLnBnLm9zYXNsaVxcdFxcdFxcdGVpNlxcbmFwcGxpY2F0aW9uL3ZuZC5waWNzZWxcXHRcXHRcXHRcXHRlZmlmXFxuYXBwbGljYXRpb24vdm5kLnBtaS53aWRnZXRcXHRcXHRcXHR3Z1xcbmFwcGxpY2F0aW9uL3ZuZC5wb2NrZXRsZWFyblxcdFxcdFxcdHBsZlxcbmFwcGxpY2F0aW9uL3ZuZC5wb3dlcmJ1aWxkZXI2XFx0XFx0XFx0cGJkXFxuYXBwbGljYXRpb24vdm5kLnByZXZpZXdzeXN0ZW1zLmJveFxcdFxcdGJveFxcbmFwcGxpY2F0aW9uL3ZuZC5wcm90ZXVzLm1hZ2F6aW5lXFx0XFx0bWd6XFxuYXBwbGljYXRpb24vdm5kLnB1Ymxpc2hhcmUtZGVsdGEtdHJlZVxcdFxcdHFwc1xcbmFwcGxpY2F0aW9uL3ZuZC5wdmkucHRpZDFcXHRcXHRcXHRwdGlkXFxuYXBwbGljYXRpb24vdm5kLnF1YXJrLnF1YXJreHByZXNzXFx0XFx0cXhkIHF4dCBxd2QgcXd0IHF4bCBxeGJcXG5hcHBsaWNhdGlvbi92bmQucmVhbHZuYy5iZWRcXHRcXHRcXHRiZWRcXG5hcHBsaWNhdGlvbi92bmQucmVjb3JkYXJlLm11c2ljeG1sXFx0XFx0bXhsXFxuYXBwbGljYXRpb24vdm5kLnJlY29yZGFyZS5tdXNpY3htbCt4bWxcXHRcXHRtdXNpY3htbFxcbmFwcGxpY2F0aW9uL3ZuZC5yaWcuY3J5cHRvbm90ZVxcdFxcdFxcdGNyeXB0b25vdGVcXG5hcHBsaWNhdGlvbi92bmQucmltLmNvZFxcdFxcdFxcdFxcdGNvZFxcbmFwcGxpY2F0aW9uL3ZuZC5ybi1yZWFsbWVkaWFcXHRcXHRcXHRybVxcbmFwcGxpY2F0aW9uL3ZuZC5ybi1yZWFsbWVkaWEtdmJyXFx0XFx0cm12YlxcbmFwcGxpY2F0aW9uL3ZuZC5yb3V0ZTY2Lmxpbms2Nit4bWxcXHRcXHRsaW5rNjZcXG5hcHBsaWNhdGlvbi92bmQuc2FpbGluZ3RyYWNrZXIudHJhY2tcXHRcXHRzdFxcbmFwcGxpY2F0aW9uL3ZuZC5zZWVtYWlsXFx0XFx0XFx0XFx0c2VlXFxuYXBwbGljYXRpb24vdm5kLnNlbWFcXHRcXHRcXHRcXHRzZW1hXFxuYXBwbGljYXRpb24vdm5kLnNlbWRcXHRcXHRcXHRcXHRzZW1kXFxuYXBwbGljYXRpb24vdm5kLnNlbWZcXHRcXHRcXHRcXHRzZW1mXFxuYXBwbGljYXRpb24vdm5kLnNoYW5hLmluZm9ybWVkLmZvcm1kYXRhXFx0XFx0aWZtXFxuYXBwbGljYXRpb24vdm5kLnNoYW5hLmluZm9ybWVkLmZvcm10ZW1wbGF0ZVxcdGl0cFxcbmFwcGxpY2F0aW9uL3ZuZC5zaGFuYS5pbmZvcm1lZC5pbnRlcmNoYW5nZVxcdGlpZlxcbmFwcGxpY2F0aW9uL3ZuZC5zaGFuYS5pbmZvcm1lZC5wYWNrYWdlXFx0XFx0aXBrXFxuYXBwbGljYXRpb24vdm5kLnNpbXRlY2gtbWluZG1hcHBlclxcdFxcdHR3ZCB0d2RzXFxuYXBwbGljYXRpb24vdm5kLnNtYWZcXHRcXHRcXHRcXHRtbWZcXG5hcHBsaWNhdGlvbi92bmQuc21hcnQudGVhY2hlclxcdFxcdFxcdHRlYWNoZXJcXG5hcHBsaWNhdGlvbi92bmQuc29sZW50LnNka20reG1sXFx0XFx0XFx0c2RrbSBzZGtkXFxuYXBwbGljYXRpb24vdm5kLnNwb3RmaXJlLmR4cFxcdFxcdFxcdGR4cFxcbmFwcGxpY2F0aW9uL3ZuZC5zcG90ZmlyZS5zZnNcXHRcXHRcXHRzZnNcXG5hcHBsaWNhdGlvbi92bmQuc3RhcmRpdmlzaW9uLmNhbGNcXHRcXHRzZGNcXG5hcHBsaWNhdGlvbi92bmQuc3RhcmRpdmlzaW9uLmRyYXdcXHRcXHRzZGFcXG5hcHBsaWNhdGlvbi92bmQuc3RhcmRpdmlzaW9uLmltcHJlc3NcXHRcXHRzZGRcXG5hcHBsaWNhdGlvbi92bmQuc3RhcmRpdmlzaW9uLm1hdGhcXHRcXHRzbWZcXG5hcHBsaWNhdGlvbi92bmQuc3RhcmRpdmlzaW9uLndyaXRlclxcdFxcdHNkdyB2b3JcXG5hcHBsaWNhdGlvbi92bmQuc3RhcmRpdmlzaW9uLndyaXRlci1nbG9iYWxcXHRzZ2xcXG5hcHBsaWNhdGlvbi92bmQuc3RlcG1hbmlhLnBhY2thZ2VcXHRcXHRzbXppcFxcbmFwcGxpY2F0aW9uL3ZuZC5zdGVwbWFuaWEuc3RlcGNoYXJ0XFx0XFx0c21cXG5hcHBsaWNhdGlvbi92bmQuc3VuLnhtbC5jYWxjXFx0XFx0XFx0c3hjXFxuYXBwbGljYXRpb24vdm5kLnN1bi54bWwuY2FsYy50ZW1wbGF0ZVxcdFxcdHN0Y1xcbmFwcGxpY2F0aW9uL3ZuZC5zdW4ueG1sLmRyYXdcXHRcXHRcXHRzeGRcXG5hcHBsaWNhdGlvbi92bmQuc3VuLnhtbC5kcmF3LnRlbXBsYXRlXFx0XFx0c3RkXFxuYXBwbGljYXRpb24vdm5kLnN1bi54bWwuaW1wcmVzc1xcdFxcdFxcdHN4aVxcbmFwcGxpY2F0aW9uL3ZuZC5zdW4ueG1sLmltcHJlc3MudGVtcGxhdGVcXHRzdGlcXG5hcHBsaWNhdGlvbi92bmQuc3VuLnhtbC5tYXRoXFx0XFx0XFx0c3htXFxuYXBwbGljYXRpb24vdm5kLnN1bi54bWwud3JpdGVyXFx0XFx0XFx0c3h3XFxuYXBwbGljYXRpb24vdm5kLnN1bi54bWwud3JpdGVyLmdsb2JhbFxcdFxcdHN4Z1xcbmFwcGxpY2F0aW9uL3ZuZC5zdW4ueG1sLndyaXRlci50ZW1wbGF0ZVxcdFxcdHN0d1xcbmFwcGxpY2F0aW9uL3ZuZC5zdXMtY2FsZW5kYXJcXHRcXHRcXHRzdXMgc3VzcFxcbmFwcGxpY2F0aW9uL3ZuZC5zdmRcXHRcXHRcXHRcXHRzdmRcXG5hcHBsaWNhdGlvbi92bmQuc3ltYmlhbi5pbnN0YWxsXFx0XFx0XFx0c2lzIHNpc3hcXG5hcHBsaWNhdGlvbi92bmQuc3luY21sK3htbFxcdFxcdFxcdHhzbVxcbmFwcGxpY2F0aW9uL3ZuZC5zeW5jbWwuZG0rd2J4bWxcXHRcXHRcXHRiZG1cXG5hcHBsaWNhdGlvbi92bmQuc3luY21sLmRtK3htbFxcdFxcdFxcdHhkbVxcbmFwcGxpY2F0aW9uL3ZuZC50YW8uaW50ZW50LW1vZHVsZS1hcmNoaXZlXFx0dGFvXFxuYXBwbGljYXRpb24vdm5kLnRjcGR1bXAucGNhcFxcdFxcdFxcdHBjYXAgY2FwIGRtcFxcbmFwcGxpY2F0aW9uL3ZuZC50bW9iaWxlLWxpdmV0dlxcdFxcdFxcdHRtb1xcbmFwcGxpY2F0aW9uL3ZuZC50cmlkLnRwdFxcdFxcdFxcdHRwdFxcbmFwcGxpY2F0aW9uL3ZuZC50cmlzY2FwZS5teHNcXHRcXHRcXHRteHNcXG5hcHBsaWNhdGlvbi92bmQudHJ1ZWFwcFxcdFxcdFxcdFxcdHRyYVxcbmFwcGxpY2F0aW9uL3ZuZC51ZmRsXFx0XFx0XFx0XFx0dWZkIHVmZGxcXG5hcHBsaWNhdGlvbi92bmQudWlxLnRoZW1lXFx0XFx0XFx0dXR6XFxuYXBwbGljYXRpb24vdm5kLnVtYWppblxcdFxcdFxcdFxcdHVtalxcbmFwcGxpY2F0aW9uL3ZuZC51bml0eVxcdFxcdFxcdFxcdHVuaXR5d2ViXFxuYXBwbGljYXRpb24vdm5kLnVvbWwreG1sXFx0XFx0XFx0dW9tbFxcbmFwcGxpY2F0aW9uL3ZuZC52Y3hcXHRcXHRcXHRcXHR2Y3hcXG5hcHBsaWNhdGlvbi92bmQudmlzaW9cXHRcXHRcXHRcXHR2c2QgdnN0IHZzcyB2c3dcXG5hcHBsaWNhdGlvbi92bmQudmlzaW9uYXJ5XFx0XFx0XFx0dmlzXFxuYXBwbGljYXRpb24vdm5kLnZzZlxcdFxcdFxcdFxcdHZzZlxcbmFwcGxpY2F0aW9uL3ZuZC53YXAud2J4bWxcXHRcXHRcXHR3YnhtbFxcbmFwcGxpY2F0aW9uL3ZuZC53YXAud21sY1xcdFxcdFxcdHdtbGNcXG5hcHBsaWNhdGlvbi92bmQud2FwLndtbHNjcmlwdGNcXHRcXHRcXHR3bWxzY1xcbmFwcGxpY2F0aW9uL3ZuZC53ZWJ0dXJib1xcdFxcdFxcdHd0YlxcbmFwcGxpY2F0aW9uL3ZuZC53b2xmcmFtLnBsYXllclxcdFxcdFxcdG5icFxcbmFwcGxpY2F0aW9uL3ZuZC53b3JkcGVyZmVjdFxcdFxcdFxcdHdwZFxcbmFwcGxpY2F0aW9uL3ZuZC53cWRcXHRcXHRcXHRcXHR3cWRcXG5hcHBsaWNhdGlvbi92bmQud3Quc3RmXFx0XFx0XFx0XFx0c3RmXFxuYXBwbGljYXRpb24vdm5kLnhhcmFcXHRcXHRcXHRcXHR4YXJcXG5hcHBsaWNhdGlvbi92bmQueGZkbFxcdFxcdFxcdFxcdHhmZGxcXG5hcHBsaWNhdGlvbi92bmQueWFtYWhhLmh2LWRpY1xcdFxcdFxcdGh2ZFxcbmFwcGxpY2F0aW9uL3ZuZC55YW1haGEuaHYtc2NyaXB0XFx0XFx0aHZzXFxuYXBwbGljYXRpb24vdm5kLnlhbWFoYS5odi12b2ljZVxcdFxcdFxcdGh2cFxcbmFwcGxpY2F0aW9uL3ZuZC55YW1haGEub3BlbnNjb3JlZm9ybWF0XFx0XFx0XFx0b3NmXFxuYXBwbGljYXRpb24vdm5kLnlhbWFoYS5vcGVuc2NvcmVmb3JtYXQub3NmcHZnK3htbFxcdG9zZnB2Z1xcbmFwcGxpY2F0aW9uL3ZuZC55YW1haGEuc21hZi1hdWRpb1xcdFxcdHNhZlxcbmFwcGxpY2F0aW9uL3ZuZC55YW1haGEuc21hZi1waHJhc2VcXHRcXHRzcGZcXG5hcHBsaWNhdGlvbi92bmQueWVsbG93cml2ZXItY3VzdG9tLW1lbnVcXHRcXHRjbXBcXG5hcHBsaWNhdGlvbi92bmQuenVsXFx0XFx0XFx0XFx0emlyIHppcnpcXG5hcHBsaWNhdGlvbi92bmQuenphenouZGVjayt4bWxcXHRcXHRcXHR6YXpcXG5hcHBsaWNhdGlvbi92b2ljZXhtbCt4bWxcXHRcXHRcXHR2eG1sXFxuYXBwbGljYXRpb24vd2FzbVxcdFxcdFxcdFxcdHdhc21cXG5hcHBsaWNhdGlvbi93aWRnZXRcXHRcXHRcXHRcXHR3Z3RcXG5hcHBsaWNhdGlvbi93aW5obHBcXHRcXHRcXHRcXHRobHBcXG5hcHBsaWNhdGlvbi93c2RsK3htbFxcdFxcdFxcdFxcdHdzZGxcXG5hcHBsaWNhdGlvbi93c3BvbGljeSt4bWxcXHRcXHRcXHR3c3BvbGljeVxcbmFwcGxpY2F0aW9uL3gtN3otY29tcHJlc3NlZFxcdFxcdFxcdDd6XFxuYXBwbGljYXRpb24veC1hYml3b3JkXFx0XFx0XFx0XFx0YWJ3XFxuYXBwbGljYXRpb24veC1hY2UtY29tcHJlc3NlZFxcdFxcdFxcdGFjZVxcbmFwcGxpY2F0aW9uL3gtYXBwbGUtZGlza2ltYWdlXFx0XFx0XFx0ZG1nXFxuYXBwbGljYXRpb24veC1hdXRob3J3YXJlLWJpblxcdFxcdFxcdGFhYiB4MzIgdTMyIHZveFxcbmFwcGxpY2F0aW9uL3gtYXV0aG9yd2FyZS1tYXBcXHRcXHRcXHRhYW1cXG5hcHBsaWNhdGlvbi94LWF1dGhvcndhcmUtc2VnXFx0XFx0XFx0YWFzXFxuYXBwbGljYXRpb24veC1iY3Bpb1xcdFxcdFxcdFxcdGJjcGlvXFxuYXBwbGljYXRpb24veC1iaXR0b3JyZW50XFx0XFx0XFx0dG9ycmVudFxcbmFwcGxpY2F0aW9uL3gtYmxvcmJcXHRcXHRcXHRcXHRibGIgYmxvcmJcXG5hcHBsaWNhdGlvbi94LWJ6aXBcXHRcXHRcXHRcXHRielxcbmFwcGxpY2F0aW9uL3gtYnppcDJcXHRcXHRcXHRcXHRiejIgYm96XFxuYXBwbGljYXRpb24veC1jYnJcXHRcXHRcXHRcXHRjYnIgY2JhIGNidCBjYnogY2I3XFxuYXBwbGljYXRpb24veC1jZGxpbmtcXHRcXHRcXHRcXHR2Y2RcXG5hcHBsaWNhdGlvbi94LWNmcy1jb21wcmVzc2VkXFx0XFx0XFx0Y2ZzXFxuYXBwbGljYXRpb24veC1jaGF0XFx0XFx0XFx0XFx0Y2hhdFxcbmFwcGxpY2F0aW9uL3gtY2hlc3MtcGduXFx0XFx0XFx0XFx0cGduXFxuYXBwbGljYXRpb24veC1jb25mZXJlbmNlXFx0XFx0XFx0bnNjXFxuYXBwbGljYXRpb24veC1jcGlvXFx0XFx0XFx0XFx0Y3Bpb1xcbmFwcGxpY2F0aW9uL3gtY3NoXFx0XFx0XFx0XFx0Y3NoXFxuYXBwbGljYXRpb24veC1kZWJpYW4tcGFja2FnZVxcdFxcdFxcdGRlYiB1ZGViXFxuYXBwbGljYXRpb24veC1kZ2MtY29tcHJlc3NlZFxcdFxcdFxcdGRnY1xcbmFwcGxpY2F0aW9uL3gtZGlyZWN0b3JcXHRcXHRcXHRkaXIgZGNyIGR4ciBjc3QgY2N0IGN4dCB3M2QgZmdkIHN3YVxcbmFwcGxpY2F0aW9uL3gtZG9vbVxcdFxcdFxcdFxcdHdhZFxcbmFwcGxpY2F0aW9uL3gtZHRibmN4K3htbFxcdFxcdFxcdG5jeFxcbmFwcGxpY2F0aW9uL3gtZHRib29rK3htbFxcdFxcdFxcdGR0YlxcbmFwcGxpY2F0aW9uL3gtZHRicmVzb3VyY2UreG1sXFx0XFx0XFx0cmVzXFxuYXBwbGljYXRpb24veC1kdmlcXHRcXHRcXHRcXHRkdmlcXG5hcHBsaWNhdGlvbi94LWVudm95XFx0XFx0XFx0XFx0ZXZ5XFxuYXBwbGljYXRpb24veC1ldmFcXHRcXHRcXHRcXHRldmFcXG5hcHBsaWNhdGlvbi94LWZvbnQtYmRmXFx0XFx0XFx0XFx0YmRmXFxuYXBwbGljYXRpb24veC1mb250LWdob3N0c2NyaXB0XFx0XFx0XFx0Z3NmXFxuYXBwbGljYXRpb24veC1mb250LWxpbnV4LXBzZlxcdFxcdFxcdHBzZlxcbmFwcGxpY2F0aW9uL3gtZm9udC1wY2ZcXHRcXHRcXHRcXHRwY2ZcXG5hcHBsaWNhdGlvbi94LWZvbnQtc25mXFx0XFx0XFx0XFx0c25mXFxuYXBwbGljYXRpb24veC1mb250LXR5cGUxXFx0XFx0XFx0cGZhIHBmYiBwZm0gYWZtXFxuYXBwbGljYXRpb24veC1mcmVlYXJjXFx0XFx0XFx0XFx0YXJjXFxuYXBwbGljYXRpb24veC1mdXR1cmVzcGxhc2hcXHRcXHRcXHRzcGxcXG5hcHBsaWNhdGlvbi94LWdjYS1jb21wcmVzc2VkXFx0XFx0XFx0Z2NhXFxuYXBwbGljYXRpb24veC1nbHVseFxcdFxcdFxcdFxcdHVseFxcbmFwcGxpY2F0aW9uL3gtZ251bWVyaWNcXHRcXHRcXHRcXHRnbnVtZXJpY1xcbmFwcGxpY2F0aW9uL3gtZ3JhbXBzLXhtbFxcdFxcdFxcdGdyYW1wc1xcbmFwcGxpY2F0aW9uL3gtZ3RhclxcdFxcdFxcdFxcdGd0YXJcXG5hcHBsaWNhdGlvbi94LWhkZlxcdFxcdFxcdFxcdGhkZlxcbmFwcGxpY2F0aW9uL3gtaW5zdGFsbC1pbnN0cnVjdGlvbnNcXHRcXHRpbnN0YWxsXFxuYXBwbGljYXRpb24veC1pc285NjYwLWltYWdlXFx0XFx0XFx0aXNvXFxuYXBwbGljYXRpb24veC1qYXZhLWpubHAtZmlsZVxcdFxcdFxcdGpubHBcXG5hcHBsaWNhdGlvbi94LWxhdGV4XFx0XFx0XFx0XFx0bGF0ZXhcXG5hcHBsaWNhdGlvbi94LWx6aC1jb21wcmVzc2VkXFx0XFx0XFx0bHpoIGxoYVxcbmFwcGxpY2F0aW9uL3gtbWllXFx0XFx0XFx0XFx0bWllXFxuYXBwbGljYXRpb24veC1tb2JpcG9ja2V0LWVib29rXFx0XFx0XFx0cHJjIG1vYmlcXG5hcHBsaWNhdGlvbi94LW1zLWFwcGxpY2F0aW9uXFx0XFx0XFx0YXBwbGljYXRpb25cXG5hcHBsaWNhdGlvbi94LW1zLXNob3J0Y3V0XFx0XFx0XFx0bG5rXFxuYXBwbGljYXRpb24veC1tcy13bWRcXHRcXHRcXHRcXHR3bWRcXG5hcHBsaWNhdGlvbi94LW1zLXdtelxcdFxcdFxcdFxcdHdtelxcbmFwcGxpY2F0aW9uL3gtbXMteGJhcFxcdFxcdFxcdFxcdHhiYXBcXG5hcHBsaWNhdGlvbi94LW1zYWNjZXNzXFx0XFx0XFx0XFx0bWRiXFxuYXBwbGljYXRpb24veC1tc2JpbmRlclxcdFxcdFxcdFxcdG9iZFxcbmFwcGxpY2F0aW9uL3gtbXNjYXJkZmlsZVxcdFxcdFxcdGNyZFxcbmFwcGxpY2F0aW9uL3gtbXNjbGlwXFx0XFx0XFx0XFx0Y2xwXFxuYXBwbGljYXRpb24veC1tc2Rvd25sb2FkXFx0XFx0XFx0ZXhlIGRsbCBjb20gYmF0IG1zaVxcbmFwcGxpY2F0aW9uL3gtbXNtZWRpYXZpZXdcXHRcXHRcXHRtdmIgbTEzIG0xNFxcbmFwcGxpY2F0aW9uL3gtbXNtZXRhZmlsZVxcdFxcdFxcdHdtZiB3bXogZW1mIGVtelxcbmFwcGxpY2F0aW9uL3gtbXNtb25leVxcdFxcdFxcdFxcdG1ueVxcbmFwcGxpY2F0aW9uL3gtbXNwdWJsaXNoZXJcXHRcXHRcXHRwdWJcXG5hcHBsaWNhdGlvbi94LW1zc2NoZWR1bGVcXHRcXHRcXHRzY2RcXG5hcHBsaWNhdGlvbi94LW1zdGVybWluYWxcXHRcXHRcXHR0cm1cXG5hcHBsaWNhdGlvbi94LW1zd3JpdGVcXHRcXHRcXHRcXHR3cmlcXG5hcHBsaWNhdGlvbi94LW5ldGNkZlxcdFxcdFxcdFxcdG5jIGNkZlxcbmFwcGxpY2F0aW9uL3gtbnpiXFx0XFx0XFx0XFx0bnpiXFxuYXBwbGljYXRpb24veC1wa2NzMTJcXHRcXHRcXHRcXHRwMTIgcGZ4XFxuYXBwbGljYXRpb24veC1wa2NzNy1jZXJ0aWZpY2F0ZXNcXHRcXHRwN2Igc3BjXFxuYXBwbGljYXRpb24veC1wa2NzNy1jZXJ0cmVxcmVzcFxcdFxcdFxcdHA3clxcbmFwcGxpY2F0aW9uL3gtcmFyLWNvbXByZXNzZWRcXHRcXHRcXHRyYXJcXG5hcHBsaWNhdGlvbi94LXJlc2VhcmNoLWluZm8tc3lzdGVtc1xcdFxcdHJpc1xcbmFwcGxpY2F0aW9uL3gtc2hcXHRcXHRcXHRcXHRzaFxcbmFwcGxpY2F0aW9uL3gtc2hhclxcdFxcdFxcdFxcdHNoYXJcXG5hcHBsaWNhdGlvbi94LXNob2Nrd2F2ZS1mbGFzaFxcdFxcdFxcdHN3ZlxcbmFwcGxpY2F0aW9uL3gtc2lsdmVybGlnaHQtYXBwXFx0XFx0XFx0eGFwXFxuYXBwbGljYXRpb24veC1zcWxcXHRcXHRcXHRcXHRzcWxcXG5hcHBsaWNhdGlvbi94LXN0dWZmaXRcXHRcXHRcXHRcXHRzaXRcXG5hcHBsaWNhdGlvbi94LXN0dWZmaXR4XFx0XFx0XFx0XFx0c2l0eFxcbmFwcGxpY2F0aW9uL3gtc3VicmlwXFx0XFx0XFx0XFx0c3J0XFxuYXBwbGljYXRpb24veC1zdjRjcGlvXFx0XFx0XFx0XFx0c3Y0Y3Bpb1xcbmFwcGxpY2F0aW9uL3gtc3Y0Y3JjXFx0XFx0XFx0XFx0c3Y0Y3JjXFxuYXBwbGljYXRpb24veC10M3ZtLWltYWdlXFx0XFx0XFx0dDNcXG5hcHBsaWNhdGlvbi94LXRhZHNcXHRcXHRcXHRcXHRnYW1cXG5hcHBsaWNhdGlvbi94LXRhclxcdFxcdFxcdFxcdHRhclxcbmFwcGxpY2F0aW9uL3gtdGNsXFx0XFx0XFx0XFx0dGNsXFxuYXBwbGljYXRpb24veC10ZXhcXHRcXHRcXHRcXHR0ZXhcXG5hcHBsaWNhdGlvbi94LXRleC10Zm1cXHRcXHRcXHRcXHR0Zm1cXG5hcHBsaWNhdGlvbi94LXRleGluZm9cXHRcXHRcXHRcXHR0ZXhpbmZvIHRleGlcXG5hcHBsaWNhdGlvbi94LXRnaWZcXHRcXHRcXHRcXHRvYmpcXG5hcHBsaWNhdGlvbi94LXVzdGFyXFx0XFx0XFx0XFx0dXN0YXJcXG5hcHBsaWNhdGlvbi94LXdhaXMtc291cmNlXFx0XFx0XFx0c3JjXFxuYXBwbGljYXRpb24veC14NTA5LWNhLWNlcnRcXHRcXHRcXHRkZXIgY3J0XFxuYXBwbGljYXRpb24veC14ZmlnXFx0XFx0XFx0XFx0ZmlnXFxuYXBwbGljYXRpb24veC14bGlmZit4bWxcXHRcXHRcXHRcXHR4bGZcXG5hcHBsaWNhdGlvbi94LXhwaW5zdGFsbFxcdFxcdFxcdFxcdHhwaVxcbmFwcGxpY2F0aW9uL3gteHpcXHRcXHRcXHRcXHR4elxcbmFwcGxpY2F0aW9uL3gtem1hY2hpbmVcXHRcXHRcXHRcXHR6MSB6MiB6MyB6NCB6NSB6NiB6NyB6OFxcbmFwcGxpY2F0aW9uL3hhbWwreG1sXFx0XFx0XFx0XFx0eGFtbFxcbmFwcGxpY2F0aW9uL3hjYXAtZGlmZit4bWxcXHRcXHRcXHR4ZGZcXG5hcHBsaWNhdGlvbi94ZW5jK3htbFxcdFxcdFxcdFxcdHhlbmNcXG5hcHBsaWNhdGlvbi94aHRtbCt4bWxcXHRcXHRcXHRcXHR4aHRtbCB4aHRcXG5hcHBsaWNhdGlvbi94bWxcXHRcXHRcXHRcXHRcXHR4bWwgeHNsXFxuYXBwbGljYXRpb24veG1sLWR0ZFxcdFxcdFxcdFxcdGR0ZFxcbmFwcGxpY2F0aW9uL3hvcCt4bWxcXHRcXHRcXHRcXHR4b3BcXG5hcHBsaWNhdGlvbi94cHJvYyt4bWxcXHRcXHRcXHRcXHR4cGxcXG5hcHBsaWNhdGlvbi94c2x0K3htbFxcdFxcdFxcdFxcdHhzbHRcXG5hcHBsaWNhdGlvbi94c3BmK3htbFxcdFxcdFxcdFxcdHhzcGZcXG5hcHBsaWNhdGlvbi94dit4bWxcXHRcXHRcXHRcXHRteG1sIHhodm1sIHh2bWwgeHZtXFxuYXBwbGljYXRpb24veWFuZ1xcdFxcdFxcdFxcdHlhbmdcXG5hcHBsaWNhdGlvbi95aW4reG1sXFx0XFx0XFx0XFx0eWluXFxuYXBwbGljYXRpb24vemlwXFx0XFx0XFx0XFx0XFx0emlwXFxuYXVkaW8vYWRwY21cXHRcXHRcXHRcXHRcXHRhZHBcXG5hdWRpby9iYXNpY1xcdFxcdFxcdFxcdFxcdGF1IHNuZFxcbmF1ZGlvL21pZGlcXHRcXHRcXHRcXHRcXHRtaWQgbWlkaSBrYXIgcm1pXFxuYXVkaW8vbXA0XFx0XFx0XFx0XFx0XFx0bTRhIG1wNGFcXG5hdWRpby9tcGVnXFx0XFx0XFx0XFx0XFx0bXBnYSBtcDIgbXAyYSBtcDMgbTJhIG0zYVxcbmF1ZGlvL29nZ1xcdFxcdFxcdFxcdFxcdG9nYSBvZ2cgc3B4XFxuYXVkaW8vczNtXFx0XFx0XFx0XFx0XFx0czNtXFxuYXVkaW8vc2lsa1xcdFxcdFxcdFxcdFxcdHNpbFxcbmF1ZGlvL3ZuZC5kZWNlLmF1ZGlvXFx0XFx0XFx0XFx0dXZhIHV2dmFcXG5hdWRpby92bmQuZGlnaXRhbC13aW5kc1xcdFxcdFxcdFxcdGVvbFxcbmF1ZGlvL3ZuZC5kcmFcXHRcXHRcXHRcXHRcXHRkcmFcXG5hdWRpby92bmQuZHRzXFx0XFx0XFx0XFx0XFx0ZHRzXFxuYXVkaW8vdm5kLmR0cy5oZFxcdFxcdFxcdFxcdGR0c2hkXFxuYXVkaW8vdm5kLmx1Y2VudC52b2ljZVxcdFxcdFxcdFxcdGx2cFxcbmF1ZGlvL3ZuZC5tcy1wbGF5cmVhZHkubWVkaWEucHlhXFx0XFx0cHlhXFxuYXVkaW8vdm5kLm51ZXJhLmVjZWxwNDgwMFxcdFxcdFxcdGVjZWxwNDgwMFxcbmF1ZGlvL3ZuZC5udWVyYS5lY2VscDc0NzBcXHRcXHRcXHRlY2VscDc0NzBcXG5hdWRpby92bmQubnVlcmEuZWNlbHA5NjAwXFx0XFx0XFx0ZWNlbHA5NjAwXFxuYXVkaW8vdm5kLnJpcFxcdFxcdFxcdFxcdFxcdHJpcFxcbmF1ZGlvL3dlYm1cXHRcXHRcXHRcXHRcXHR3ZWJhXFxuYXVkaW8veC1hYWNcXHRcXHRcXHRcXHRcXHRhYWNcXG5hdWRpby94LWFpZmZcXHRcXHRcXHRcXHRcXHRhaWYgYWlmZiBhaWZjXFxuYXVkaW8veC1jYWZcXHRcXHRcXHRcXHRcXHRjYWZcXG5hdWRpby94LWZsYWNcXHRcXHRcXHRcXHRcXHRmbGFjXFxuYXVkaW8veC1tYXRyb3NrYVxcdFxcdFxcdFxcdG1rYVxcbmF1ZGlvL3gtbXBlZ3VybFxcdFxcdFxcdFxcdFxcdG0zdVxcbmF1ZGlvL3gtbXMtd2F4XFx0XFx0XFx0XFx0XFx0d2F4XFxuYXVkaW8veC1tcy13bWFcXHRcXHRcXHRcXHRcXHR3bWFcXG5hdWRpby94LXBuLXJlYWxhdWRpb1xcdFxcdFxcdFxcdHJhbSByYVxcbmF1ZGlvL3gtcG4tcmVhbGF1ZGlvLXBsdWdpblxcdFxcdFxcdHJtcFxcbmF1ZGlvL3gtd2F2XFx0XFx0XFx0XFx0XFx0d2F2XFxuYXVkaW8veG1cXHRcXHRcXHRcXHRcXHR4bVxcbmNoZW1pY2FsL3gtY2R4XFx0XFx0XFx0XFx0XFx0Y2R4XFxuY2hlbWljYWwveC1jaWZcXHRcXHRcXHRcXHRcXHRjaWZcXG5jaGVtaWNhbC94LWNtZGZcXHRcXHRcXHRcXHRcXHRjbWRmXFxuY2hlbWljYWwveC1jbWxcXHRcXHRcXHRcXHRcXHRjbWxcXG5jaGVtaWNhbC94LWNzbWxcXHRcXHRcXHRcXHRcXHRjc21sXFxuY2hlbWljYWwveC14eXpcXHRcXHRcXHRcXHRcXHR4eXpcXG5mb250L2NvbGxlY3Rpb25cXHRcXHRcXHRcXHRcXHR0dGNcXG5mb250L290ZlxcdFxcdFxcdFxcdFxcdG90ZlxcbmZvbnQvdHRmXFx0XFx0XFx0XFx0XFx0dHRmXFxuZm9udC93b2ZmXFx0XFx0XFx0XFx0XFx0d29mZlxcbmZvbnQvd29mZjJcXHRcXHRcXHRcXHRcXHR3b2ZmMlxcbmltYWdlL2JtcFxcdFxcdFxcdFxcdFxcdGJtcFxcbmltYWdlL2NnbVxcdFxcdFxcdFxcdFxcdGNnbVxcbmltYWdlL2czZmF4XFx0XFx0XFx0XFx0XFx0ZzNcXG5pbWFnZS9naWZcXHRcXHRcXHRcXHRcXHRnaWZcXG5pbWFnZS9pZWZcXHRcXHRcXHRcXHRcXHRpZWZcXG5pbWFnZS9qcGVnXFx0XFx0XFx0XFx0XFx0anBlZyBqcGcganBlXFxuaW1hZ2Uva3R4XFx0XFx0XFx0XFx0XFx0a3R4XFxuaW1hZ2UvcG5nXFx0XFx0XFx0XFx0XFx0cG5nXFxuaW1hZ2UvcHJzLmJ0aWZcXHRcXHRcXHRcXHRcXHRidGlmXFxuaW1hZ2Uvc2dpXFx0XFx0XFx0XFx0XFx0c2dpXFxuaW1hZ2Uvc3ZnK3htbFxcdFxcdFxcdFxcdFxcdHN2ZyBzdmd6XFxuaW1hZ2UvdGlmZlxcdFxcdFxcdFxcdFxcdHRpZmYgdGlmXFxuaW1hZ2Uvdm5kLmFkb2JlLnBob3Rvc2hvcFxcdFxcdFxcdHBzZFxcbmltYWdlL3ZuZC5kZWNlLmdyYXBoaWNcXHRcXHRcXHRcXHR1dmkgdXZ2aSB1dmcgdXZ2Z1xcbmltYWdlL3ZuZC5kanZ1XFx0XFx0XFx0XFx0XFx0ZGp2dSBkanZcXG5pbWFnZS92bmQuZHZiLnN1YnRpdGxlXFx0XFx0XFx0XFx0c3ViXFxuaW1hZ2Uvdm5kLmR3Z1xcdFxcdFxcdFxcdFxcdGR3Z1xcbmltYWdlL3ZuZC5keGZcXHRcXHRcXHRcXHRcXHRkeGZcXG5pbWFnZS92bmQuZmFzdGJpZHNoZWV0XFx0XFx0XFx0XFx0ZmJzXFxuaW1hZ2Uvdm5kLmZweFxcdFxcdFxcdFxcdFxcdGZweFxcbmltYWdlL3ZuZC5mc3RcXHRcXHRcXHRcXHRcXHRmc3RcXG5pbWFnZS92bmQuZnVqaXhlcm94LmVkbWljcy1tbXJcXHRcXHRcXHRtbXJcXG5pbWFnZS92bmQuZnVqaXhlcm94LmVkbWljcy1ybGNcXHRcXHRcXHRybGNcXG5pbWFnZS92bmQubXMtbW9kaVxcdFxcdFxcdFxcdG1kaVxcbmltYWdlL3ZuZC5tcy1waG90b1xcdFxcdFxcdFxcdHdkcFxcbmltYWdlL3ZuZC5uZXQtZnB4XFx0XFx0XFx0XFx0bnB4XFxuaW1hZ2Uvdm5kLndhcC53Ym1wXFx0XFx0XFx0XFx0d2JtcFxcbmltYWdlL3ZuZC54aWZmXFx0XFx0XFx0XFx0XFx0eGlmXFxuaW1hZ2Uvd2VicFxcdFxcdFxcdFxcdFxcdHdlYnBcXG5pbWFnZS94LTNkc1xcdFxcdFxcdFxcdFxcdDNkc1xcbmltYWdlL3gtY211LXJhc3RlclxcdFxcdFxcdFxcdHJhc1xcbmltYWdlL3gtY214XFx0XFx0XFx0XFx0XFx0Y214XFxuaW1hZ2UveC1mcmVlaGFuZFxcdFxcdFxcdFxcdGZoIGZoYyBmaDQgZmg1IGZoN1xcbmltYWdlL3gtaWNvblxcdFxcdFxcdFxcdFxcdGljb1xcbmltYWdlL3gtbXJzaWQtaW1hZ2VcXHRcXHRcXHRcXHRzaWRcXG5pbWFnZS94LXBjeFxcdFxcdFxcdFxcdFxcdHBjeFxcbmltYWdlL3gtcGljdFxcdFxcdFxcdFxcdFxcdHBpYyBwY3RcXG5pbWFnZS94LXBvcnRhYmxlLWFueW1hcFxcdFxcdFxcdFxcdHBubVxcbmltYWdlL3gtcG9ydGFibGUtYml0bWFwXFx0XFx0XFx0XFx0cGJtXFxuaW1hZ2UveC1wb3J0YWJsZS1ncmF5bWFwXFx0XFx0XFx0cGdtXFxuaW1hZ2UveC1wb3J0YWJsZS1waXhtYXBcXHRcXHRcXHRcXHRwcG1cXG5pbWFnZS94LXJnYlxcdFxcdFxcdFxcdFxcdHJnYlxcbmltYWdlL3gtdGdhXFx0XFx0XFx0XFx0XFx0dGdhXFxuaW1hZ2UveC14Yml0bWFwXFx0XFx0XFx0XFx0XFx0eGJtXFxuaW1hZ2UveC14cGl4bWFwXFx0XFx0XFx0XFx0XFx0eHBtXFxuaW1hZ2UveC14d2luZG93ZHVtcFxcdFxcdFxcdFxcdHh3ZFxcbm1lc3NhZ2UvcmZjODIyXFx0XFx0XFx0XFx0XFx0ZW1sIG1pbWVcXG5tb2RlbC9pZ2VzXFx0XFx0XFx0XFx0XFx0aWdzIGlnZXNcXG5tb2RlbC9tZXNoXFx0XFx0XFx0XFx0XFx0bXNoIG1lc2ggc2lsb1xcbm1vZGVsL3ZuZC5jb2xsYWRhK3htbFxcdFxcdFxcdFxcdGRhZVxcbm1vZGVsL3ZuZC5kd2ZcXHRcXHRcXHRcXHRcXHRkd2ZcXG5tb2RlbC92bmQuZ2RsXFx0XFx0XFx0XFx0XFx0Z2RsXFxubW9kZWwvdm5kLmd0d1xcdFxcdFxcdFxcdFxcdGd0d1xcbm1vZGVsL3ZuZC5tdHNcXHRcXHRcXHRcXHRcXHRtdHNcXG5tb2RlbC92bmQudnR1XFx0XFx0XFx0XFx0XFx0dnR1XFxubW9kZWwvdnJtbFxcdFxcdFxcdFxcdFxcdHdybCB2cm1sXFxubW9kZWwveDNkK2JpbmFyeVxcdFxcdFxcdFxcdHgzZGIgeDNkYnpcXG5tb2RlbC94M2QrdnJtbFxcdFxcdFxcdFxcdFxcdHgzZHYgeDNkdnpcXG5tb2RlbC94M2QreG1sXFx0XFx0XFx0XFx0XFx0eDNkIHgzZHpcXG50ZXh0L2NhY2hlLW1hbmlmZXN0XFx0XFx0XFx0XFx0YXBwY2FjaGVcXG50ZXh0L2NhbGVuZGFyXFx0XFx0XFx0XFx0XFx0aWNzIGlmYlxcbnRleHQvY3NzXFx0XFx0XFx0XFx0XFx0Y3NzXFxudGV4dC9jc3ZcXHRcXHRcXHRcXHRcXHRjc3ZcXG50ZXh0L2h0bWxcXHRcXHRcXHRcXHRcXHRodG1sIGh0bVxcbnRleHQvbjNcXHRcXHRcXHRcXHRcXHRcXHRuM1xcbnRleHQvcGxhaW5cXHRcXHRcXHRcXHRcXHR0eHQgdGV4dCBjb25mIGRlZiBsaXN0IGxvZyBpblxcbnRleHQvcHJzLmxpbmVzLnRhZ1xcdFxcdFxcdFxcdGRzY1xcbnRleHQvcmljaHRleHRcXHRcXHRcXHRcXHRcXHRydHhcXG50ZXh0L3NnbWxcXHRcXHRcXHRcXHRcXHRzZ21sIHNnbVxcbnRleHQvdGFiLXNlcGFyYXRlZC12YWx1ZXNcXHRcXHRcXHR0c3ZcXG50ZXh0L3Ryb2ZmXFx0XFx0XFx0XFx0XFx0dCB0ciByb2ZmIG1hbiBtZSBtc1xcbnRleHQvdHVydGxlXFx0XFx0XFx0XFx0XFx0dHRsXFxudGV4dC91cmktbGlzdFxcdFxcdFxcdFxcdFxcdHVyaSB1cmlzIHVybHNcXG50ZXh0L3ZjYXJkXFx0XFx0XFx0XFx0XFx0dmNhcmRcXG50ZXh0L3ZuZC5jdXJsXFx0XFx0XFx0XFx0XFx0Y3VybFxcbnRleHQvdm5kLmN1cmwuZGN1cmxcXHRcXHRcXHRcXHRkY3VybFxcbnRleHQvdm5kLmN1cmwubWN1cmxcXHRcXHRcXHRcXHRtY3VybFxcbnRleHQvdm5kLmN1cmwuc2N1cmxcXHRcXHRcXHRcXHRzY3VybFxcbnRleHQvdm5kLmR2Yi5zdWJ0aXRsZVxcdFxcdFxcdFxcdHN1YlxcbnRleHQvdm5kLmZseVxcdFxcdFxcdFxcdFxcdGZseVxcbnRleHQvdm5kLmZtaS5mbGV4c3RvclxcdFxcdFxcdFxcdGZseFxcbnRleHQvdm5kLmdyYXBodml6XFx0XFx0XFx0XFx0Z3ZcXG50ZXh0L3ZuZC5pbjNkLjNkbWxcXHRcXHRcXHRcXHQzZG1sXFxudGV4dC92bmQuaW4zZC5zcG90XFx0XFx0XFx0XFx0c3BvdFxcbnRleHQvdm5kLnN1bi5qMm1lLmFwcC1kZXNjcmlwdG9yXFx0XFx0amFkXFxudGV4dC92bmQud2FwLndtbFxcdFxcdFxcdFxcdHdtbFxcbnRleHQvdm5kLndhcC53bWxzY3JpcHRcXHRcXHRcXHRcXHR3bWxzXFxudGV4dC94LWFzbVxcdFxcdFxcdFxcdFxcdHMgYXNtXFxudGV4dC94LWNcXHRcXHRcXHRcXHRcXHRjIGNjIGN4eCBjcHAgaCBoaCBkaWNcXG50ZXh0L3gtZm9ydHJhblxcdFxcdFxcdFxcdFxcdGYgZm9yIGY3NyBmOTBcXG50ZXh0L3gtamF2YS1zb3VyY2VcXHRcXHRcXHRcXHRqYXZhXFxudGV4dC94LW5mb1xcdFxcdFxcdFxcdFxcdG5mb1xcbnRleHQveC1vcG1sXFx0XFx0XFx0XFx0XFx0b3BtbFxcbnRleHQveC1wYXNjYWxcXHRcXHRcXHRcXHRcXHRwIHBhc1xcbnRleHQveC1zZXRleHRcXHRcXHRcXHRcXHRcXHRldHhcXG50ZXh0L3gtc2Z2XFx0XFx0XFx0XFx0XFx0c2Z2XFxudGV4dC94LXV1ZW5jb2RlXFx0XFx0XFx0XFx0XFx0dXVcXG50ZXh0L3gtdmNhbGVuZGFyXFx0XFx0XFx0XFx0dmNzXFxudGV4dC94LXZjYXJkXFx0XFx0XFx0XFx0XFx0dmNmXFxudmlkZW8vM2dwcFxcdFxcdFxcdFxcdFxcdDNncFxcbnZpZGVvLzNncHAyXFx0XFx0XFx0XFx0XFx0M2cyXFxudmlkZW8vaDI2MVxcdFxcdFxcdFxcdFxcdGgyNjFcXG52aWRlby9oMjYzXFx0XFx0XFx0XFx0XFx0aDI2M1xcbnZpZGVvL2gyNjRcXHRcXHRcXHRcXHRcXHRoMjY0XFxudmlkZW8vanBlZ1xcdFxcdFxcdFxcdFxcdGpwZ3ZcXG52aWRlby9qcG1cXHRcXHRcXHRcXHRcXHRqcG0ganBnbVxcbnZpZGVvL21qMlxcdFxcdFxcdFxcdFxcdG1qMiBtanAyXFxudmlkZW8vbXA0XFx0XFx0XFx0XFx0XFx0bXA0IG1wNHYgbXBnNFxcbnZpZGVvL21wZWdcXHRcXHRcXHRcXHRcXHRtcGVnIG1wZyBtcGUgbTF2IG0ydlxcbnZpZGVvL29nZ1xcdFxcdFxcdFxcdFxcdG9ndlxcbnZpZGVvL3F1aWNrdGltZVxcdFxcdFxcdFxcdFxcdHF0IG1vdlxcbnZpZGVvL3ZuZC5kZWNlLmhkXFx0XFx0XFx0XFx0dXZoIHV2dmhcXG52aWRlby92bmQuZGVjZS5tb2JpbGVcXHRcXHRcXHRcXHR1dm0gdXZ2bVxcbnZpZGVvL3ZuZC5kZWNlLnBkXFx0XFx0XFx0XFx0dXZwIHV2dnBcXG52aWRlby92bmQuZGVjZS5zZFxcdFxcdFxcdFxcdHV2cyB1dnZzXFxudmlkZW8vdm5kLmRlY2UudmlkZW9cXHRcXHRcXHRcXHR1dnYgdXZ2dlxcbnZpZGVvL3ZuZC5kdmIuZmlsZVxcdFxcdFxcdFxcdGR2YlxcbnZpZGVvL3ZuZC5mdnRcXHRcXHRcXHRcXHRcXHRmdnRcXG52aWRlby92bmQubXBlZ3VybFxcdFxcdFxcdFxcdG14dSBtNHVcXG52aWRlby92bmQubXMtcGxheXJlYWR5Lm1lZGlhLnB5dlxcdFxcdHB5dlxcbnZpZGVvL3ZuZC51dnZ1Lm1wNFxcdFxcdFxcdFxcdHV2dSB1dnZ1XFxudmlkZW8vdm5kLnZpdm9cXHRcXHRcXHRcXHRcXHR2aXZcXG52aWRlby93ZWJtXFx0XFx0XFx0XFx0XFx0d2VibVxcbnZpZGVvL3gtZjR2XFx0XFx0XFx0XFx0XFx0ZjR2XFxudmlkZW8veC1mbGlcXHRcXHRcXHRcXHRcXHRmbGlcXG52aWRlby94LWZsdlxcdFxcdFxcdFxcdFxcdGZsdlxcbnZpZGVvL3gtbTR2XFx0XFx0XFx0XFx0XFx0bTR2XFxudmlkZW8veC1tYXRyb3NrYVxcdFxcdFxcdFxcdG1rdiBtazNkIG1rc1xcbnZpZGVvL3gtbW5nXFx0XFx0XFx0XFx0XFx0bW5nXFxudmlkZW8veC1tcy1hc2ZcXHRcXHRcXHRcXHRcXHRhc2YgYXN4XFxudmlkZW8veC1tcy12b2JcXHRcXHRcXHRcXHRcXHR2b2JcXG52aWRlby94LW1zLXdtXFx0XFx0XFx0XFx0XFx0d21cXG52aWRlby94LW1zLXdtdlxcdFxcdFxcdFxcdFxcdHdtdlxcbnZpZGVvL3gtbXMtd214XFx0XFx0XFx0XFx0XFx0d214XFxudmlkZW8veC1tcy13dnhcXHRcXHRcXHRcXHRcXHR3dnhcXG52aWRlby94LW1zdmlkZW9cXHRcXHRcXHRcXHRcXHRhdmlcXG52aWRlby94LXNnaS1tb3ZpZVxcdFxcdFxcdFxcdG1vdmllXFxudmlkZW8veC1zbXZcXHRcXHRcXHRcXHRcXHRzbXZcXG54LWNvbmZlcmVuY2UveC1jb29sdGFsa1xcdFxcdFxcdFxcdGljZVxcblwiO1xuXG5jb25zdCBtYXAgPSBuZXcgTWFwKCk7XG5cbm1pbWVfcmF3LnNwbGl0KCdcXG4nKS5mb3JFYWNoKChyb3cpID0+IHtcblx0Y29uc3QgbWF0Y2ggPSAvKC4rPylcXHQrKC4rKS8uZXhlYyhyb3cpO1xuXHRpZiAoIW1hdGNoKSByZXR1cm47XG5cblx0Y29uc3QgdHlwZSA9IG1hdGNoWzFdO1xuXHRjb25zdCBleHRlbnNpb25zID0gbWF0Y2hbMl0uc3BsaXQoJyAnKTtcblxuXHRleHRlbnNpb25zLmZvckVhY2goZXh0ID0+IHtcblx0XHRtYXAuc2V0KGV4dCwgdHlwZSk7XG5cdH0pO1xufSk7XG5cbmZ1bmN0aW9uIGxvb2t1cChmaWxlKSB7XG5cdGNvbnN0IG1hdGNoID0gL1xcLihbXlxcLl0rKSQvLmV4ZWMoZmlsZSk7XG5cdHJldHVybiBtYXRjaCAmJiBtYXAuZ2V0KG1hdGNoWzFdKTtcbn1cblxuZnVuY3Rpb24gbWlkZGxld2FyZShvcHRzXG5cblxuID0ge30pIHtcblx0Y29uc3QgeyBzZXNzaW9uLCBpZ25vcmUgfSA9IG9wdHM7XG5cblx0bGV0IGVtaXR0ZWRfYmFzZXBhdGggPSBmYWxzZTtcblxuXHRyZXR1cm4gY29tcG9zZV9oYW5kbGVycyhpZ25vcmUsIFtcblx0XHQocmVxLCByZXMsIG5leHQpID0+IHtcblx0XHRcdGlmIChyZXEuYmFzZVVybCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdGxldCB7IG9yaWdpbmFsVXJsIH0gPSByZXE7XG5cdFx0XHRcdGlmIChyZXEudXJsID09PSAnLycgJiYgb3JpZ2luYWxVcmxbb3JpZ2luYWxVcmwubGVuZ3RoIC0gMV0gIT09ICcvJykge1xuXHRcdFx0XHRcdG9yaWdpbmFsVXJsICs9ICcvJztcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJlcS5iYXNlVXJsID0gb3JpZ2luYWxVcmxcblx0XHRcdFx0XHQ/IG9yaWdpbmFsVXJsLnNsaWNlKDAsIC1yZXEudXJsLmxlbmd0aClcblx0XHRcdFx0XHQ6ICcnO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIWVtaXR0ZWRfYmFzZXBhdGggJiYgcHJvY2Vzcy5zZW5kKSB7XG5cdFx0XHRcdHByb2Nlc3Muc2VuZCh7XG5cdFx0XHRcdFx0X19zYXBwZXJfXzogdHJ1ZSxcblx0XHRcdFx0XHRldmVudDogJ2Jhc2VwYXRoJyxcblx0XHRcdFx0XHRiYXNlcGF0aDogcmVxLmJhc2VVcmxcblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0ZW1pdHRlZF9iYXNlcGF0aCA9IHRydWU7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChyZXEucGF0aCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdHJlcS5wYXRoID0gcmVxLnVybC5yZXBsYWNlKC9cXD8uKi8sICcnKTtcblx0XHRcdH1cblxuXHRcdFx0bmV4dCgpO1xuXHRcdH0sXG5cblx0XHRmcy5leGlzdHNTeW5jKHBhdGguam9pbihidWlsZF9kaXIsICdzZXJ2aWNlLXdvcmtlci5qcycpKSAmJiBzZXJ2ZSh7XG5cdFx0XHRwYXRobmFtZTogJy9zZXJ2aWNlLXdvcmtlci5qcycsXG5cdFx0XHRjYWNoZV9jb250cm9sOiAnbm8tY2FjaGUsIG5vLXN0b3JlLCBtdXN0LXJldmFsaWRhdGUnXG5cdFx0fSksXG5cblx0XHRmcy5leGlzdHNTeW5jKHBhdGguam9pbihidWlsZF9kaXIsICdzZXJ2aWNlLXdvcmtlci5qcy5tYXAnKSkgJiYgc2VydmUoe1xuXHRcdFx0cGF0aG5hbWU6ICcvc2VydmljZS13b3JrZXIuanMubWFwJyxcblx0XHRcdGNhY2hlX2NvbnRyb2w6ICduby1jYWNoZSwgbm8tc3RvcmUsIG11c3QtcmV2YWxpZGF0ZSdcblx0XHR9KSxcblxuXHRcdHNlcnZlKHtcblx0XHRcdHByZWZpeDogJy9jbGllbnQvJyxcblx0XHRcdGNhY2hlX2NvbnRyb2w6IGRldiA/ICduby1jYWNoZScgOiAnbWF4LWFnZT0zMTUzNjAwMCwgaW1tdXRhYmxlJ1xuXHRcdH0pLFxuXG5cdFx0Z2V0X3NlcnZlcl9yb3V0ZV9oYW5kbGVyKG1hbmlmZXN0LnNlcnZlcl9yb3V0ZXMpLFxuXG5cdFx0Z2V0X3BhZ2VfaGFuZGxlcihtYW5pZmVzdCwgc2Vzc2lvbiB8fCBub29wKVxuXHRdLmZpbHRlcihCb29sZWFuKSk7XG59XG5cbmZ1bmN0aW9uIGNvbXBvc2VfaGFuZGxlcnMoaWdub3JlLCBoYW5kbGVycykge1xuXHRjb25zdCB0b3RhbCA9IGhhbmRsZXJzLmxlbmd0aDtcblxuXHRmdW5jdGlvbiBudGhfaGFuZGxlcihuLCByZXEsIHJlcywgbmV4dCkge1xuXHRcdGlmIChuID49IHRvdGFsKSB7XG5cdFx0XHRyZXR1cm4gbmV4dCgpO1xuXHRcdH1cblxuXHRcdGhhbmRsZXJzW25dKHJlcSwgcmVzLCAoKSA9PiBudGhfaGFuZGxlcihuKzEsIHJlcSwgcmVzLCBuZXh0KSk7XG5cdH1cblxuXHRyZXR1cm4gIWlnbm9yZVxuXHRcdD8gKHJlcSwgcmVzLCBuZXh0KSA9PiBudGhfaGFuZGxlcigwLCByZXEsIHJlcywgbmV4dClcblx0XHQ6IChyZXEsIHJlcywgbmV4dCkgPT4ge1xuXHRcdFx0aWYgKHNob3VsZF9pZ25vcmUocmVxLnBhdGgsIGlnbm9yZSkpIHtcblx0XHRcdFx0bmV4dCgpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bnRoX2hhbmRsZXIoMCwgcmVxLCByZXMsIG5leHQpO1xuXHRcdFx0fVxuXHRcdH07XG59XG5cbmZ1bmN0aW9uIHNob3VsZF9pZ25vcmUodXJpLCB2YWwpIHtcblx0aWYgKEFycmF5LmlzQXJyYXkodmFsKSkgcmV0dXJuIHZhbC5zb21lKHggPT4gc2hvdWxkX2lnbm9yZSh1cmksIHgpKTtcblx0aWYgKHZhbCBpbnN0YW5jZW9mIFJlZ0V4cCkgcmV0dXJuIHZhbC50ZXN0KHVyaSk7XG5cdGlmICh0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nKSByZXR1cm4gdmFsKHVyaSk7XG5cdHJldHVybiB1cmkuc3RhcnRzV2l0aCh2YWwuY2hhckNvZGVBdCgwKSA9PT0gNDcgPyB2YWwgOiBgLyR7dmFsfWApO1xufVxuXG5mdW5jdGlvbiBzZXJ2ZSh7IHByZWZpeCwgcGF0aG5hbWUsIGNhY2hlX2NvbnRyb2wgfVxuXG5cblxuKSB7XG5cdGNvbnN0IGZpbHRlciA9IHBhdGhuYW1lXG5cdFx0PyAocmVxKSA9PiByZXEucGF0aCA9PT0gcGF0aG5hbWVcblx0XHQ6IChyZXEpID0+IHJlcS5wYXRoLnN0YXJ0c1dpdGgocHJlZml4KTtcblxuXHRjb25zdCBjYWNoZSA9IG5ldyBNYXAoKTtcblxuXHRjb25zdCByZWFkID0gZGV2XG5cdFx0PyAoZmlsZSkgPT4gZnMucmVhZEZpbGVTeW5jKHBhdGgucmVzb2x2ZShidWlsZF9kaXIsIGZpbGUpKVxuXHRcdDogKGZpbGUpID0+IChjYWNoZS5oYXMoZmlsZSkgPyBjYWNoZSA6IGNhY2hlLnNldChmaWxlLCBmcy5yZWFkRmlsZVN5bmMocGF0aC5yZXNvbHZlKGJ1aWxkX2RpciwgZmlsZSkpKSkuZ2V0KGZpbGUpO1xuXG5cdHJldHVybiAocmVxLCByZXMsIG5leHQpID0+IHtcblx0XHRpZiAoZmlsdGVyKHJlcSkpIHtcblx0XHRcdGNvbnN0IHR5cGUgPSBsb29rdXAocmVxLnBhdGgpO1xuXG5cdFx0XHR0cnkge1xuXHRcdFx0XHRjb25zdCBmaWxlID0gZGVjb2RlVVJJQ29tcG9uZW50KHJlcS5wYXRoLnNsaWNlKDEpKTtcblx0XHRcdFx0Y29uc3QgZGF0YSA9IHJlYWQoZmlsZSk7XG5cblx0XHRcdFx0cmVzLnNldEhlYWRlcignQ29udGVudC1UeXBlJywgdHlwZSk7XG5cdFx0XHRcdHJlcy5zZXRIZWFkZXIoJ0NhY2hlLUNvbnRyb2wnLCBjYWNoZV9jb250cm9sKTtcblx0XHRcdFx0cmVzLmVuZChkYXRhKTtcblx0XHRcdH0gY2F0Y2ggKGVycikge1xuXHRcdFx0XHRyZXMuc3RhdHVzQ29kZSA9IDQwNDtcblx0XHRcdFx0cmVzLmVuZCgnbm90IGZvdW5kJyk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdG5leHQoKTtcblx0XHR9XG5cdH07XG59XG5cbmZ1bmN0aW9uIG5vb3AoKXt9XG5cbmV4cG9ydCB7IG1pZGRsZXdhcmUgfTtcbiIsImltcG9ydCB7IGNyZWF0ZVNlcnZlciB9IGZyb20gXCJodHRwc1wiO1xuaW1wb3J0IHsgcmVhZEZpbGVTeW5jIH0gZnJvbSBcImZzXCI7XG5pbXBvcnQgc2lydiBmcm9tICdzaXJ2JztcbmltcG9ydCBwb2xrYSBmcm9tICdwb2xrYSc7XG5pbXBvcnQgY29tcHJlc3Npb24gZnJvbSAnY29tcHJlc3Npb24nO1xuaW1wb3J0ICogYXMgc2FwcGVyIGZyb20gJ0BzYXBwZXIvc2VydmVyJztcblxuY29uc3QgeyBQT1JULCBOT0RFX0VOViB9ID0gcHJvY2Vzcy5lbnY7XG5jb25zdCBkZXYgPSBOT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JztcblxuY29uc3Qgb3B0aW9ucyA9IHtcbiAga2V5OiByZWFkRmlsZVN5bmMoXCIuLi9jZXJ0L2NlcnRzL3RzdS5nZy9wcml2a2V5LnBlbVwiKSxcbiAgY2VydDogcmVhZEZpbGVTeW5jKFwiLi4vY2VydC9jZXJ0cy90c3UuZ2cvZnVsbGNoYWluLnBlbVwiKSxcbn07XG5cbmZ1bmN0aW9uIHJlZGlyZWN0X2h0dHBfdG9faHR0cHMocmVxLCByZXMsIG5leHQpIHtcbiAgcmVzLnJlZGlyZWN0ID0gXCJodHRwczovL3RzdS5nZ1wiO1xuICByZXMud3JpdGVIZWFkKDMwMiwge1xuICAgICAgTG9jYXRpb246IHJlcy5yZWRpcmVjdCxcbiAgICAgICdDb250ZW50LVR5cGUnOiAndGV4dC9wbGFpbicsXG4gICAgICAnQ29udGVudC1MZW5ndGgnOiAwLFxuICB9KTtcbiAgcmVzLmVuZCgpO1xufVxuXG5pZihkZXYpe1xuICBwb2xrYSgpIFxuICAgIC51c2UoXG4gICAgICBjb21wcmVzc2lvbih7IHRocmVzaG9sZDogMCB9KSxcbiAgICAgIHNpcnYoJ3N0YXRpYycsIHsgZGV2IH0pLFxuICAgICAgc2lydignZGVoeWRyYXRlZCcsIHsgZGV2OiB0cnVlLCBkb3RmaWxlczogdHJ1ZX0pLFxuICAgICAgc2FwcGVyLm1pZGRsZXdhcmUoKVxuICAgIClcbiAgICAubGlzdGVuKDgwODAsIGVyciA9PiB7XG4gICAgICBpZiAoZXJyKSBjb25zb2xlLmxvZygnZXJyb3InLCBlcnIpO1xuICAgIH0pO1xufVxuZWxzZXtcbiAgY29uc3QgeyBoYW5kbGVyIH0gPSBwb2xrYSgpIC8vIFlvdSBjYW4gYWxzbyB1c2UgRXhwcmVzc1xuICAgIC51c2UoXG4gICAgICBjb21wcmVzc2lvbih7IHRocmVzaG9sZDogMCB9KSxcbiAgICAgIHNpcnYoJ3N0YXRpYycsIHsgZGV2IH0pLFxuICAgICAgc2FwcGVyLm1pZGRsZXdhcmUoKVxuICAgICk7XG4gIGNyZWF0ZVNlcnZlcihvcHRpb25zLCBoYW5kbGVyKVxuICAgIC5saXN0ZW4oNDQzLCBlcnIgPT4ge1xuICAgICAgaWYgKGVycikgY29uc29sZS5sb2coJ2Vycm9yJywgZXJyKTtcbiAgICB9KTtcbiAgcG9sa2EoKSBcbiAgICAudXNlKFxuICAgICAgc2lydignZGVoeWRyYXRlZCcsIHsgZGV2OiB0cnVlLCBkb3RmaWxlczogdHJ1ZX0pLFxuICAgICAgcmVkaXJlY3RfaHR0cF90b19odHRwcyxcbiAgICApXG4gICAgLmxpc3Rlbig4MCwgZXJyID0+IHtcbiAgICAgIGlmIChlcnIpIGNvbnNvbGUubG9nKCdlcnJvcicsIGVycik7XG4gICAgfSk7XG59XG4iXSwibmFtZXMiOlsiZXNjYXBlIiwiZmV0Y2giLCJmYVF1ZXN0aW9uIiwiZmFDYXJldERvd24iLCJmYUNhcmV0VXAiLCJmYUNvbW1lbnQiLCJmYVVzZXIiLCJmYVN0YXIiLCJmYVVzZXJDbG9jayIsImZhVXNlckxvY2siLCJmYURvbGxhclNpZ24iLCJmYUhvdXJnbGFzc0hhbGYiLCJmYUhpc3RvcnkiLCJmYVVzZXJTZWNyZXQiLCJmYUtleSIsImZhQ29tbWVudERvdHMiLCJtYXhfeV9heGlzIiwibWF4X3lfYXhpc19yaWdodCIsInRvb2x0aXBfZGF0YV90aW1lX2Zvcm1hdCIsImZhTW9vbiIsImZhU3VuIiwiZmFBcnJvd1VwIiwiZmFBcnJvd0Rvd24iLCJwcmVsb2FkIiwiZmFFeHRlcm5hbExpbmtBbHQiLCJuZXh0X2lkIiwiZmFNb3VzZSIsImZhTW9iaWxlQWx0IiwiZmFNYXAiLCJmYUV4Y2hhbmdlQWx0IiwiY29tcG9uZW50XzAiLCJjb21wb25lbnRfMSIsImNvbXBvbmVudF8yIiwicHJlbG9hZF8yIiwiY29tcG9uZW50XzMiLCJwcmVsb2FkXzMiLCJjb21wb25lbnRfNCIsImNvbXBvbmVudF81IiwicHJlbG9hZF81Iiwicm9vdCIsImVycm9yIiwiZGVjb2RlIiwiZW5jb2RlIiwiZXNjYXBlZCIsImh0dHBzIiwiZnMiLCJub29wIiwicmVhZEZpbGVTeW5jIiwic2FwcGVyLm1pZGRsZXdhcmUiLCJjcmVhdGVTZXJ2ZXIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxTQUFTLElBQUksR0FBRyxHQUFHO0FBQ25CLEFBZUEsU0FBUyxHQUFHLENBQUMsRUFBRSxFQUFFO0lBQ2IsT0FBTyxFQUFFLEVBQUUsQ0FBQztDQUNmO0FBQ0QsU0FBUyxZQUFZLEdBQUc7SUFDcEIsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0NBQzlCO0FBQ0QsU0FBUyxPQUFPLENBQUMsR0FBRyxFQUFFO0lBQ2xCLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7Q0FDcEI7QUFDRCxBQUdBLFNBQVMsY0FBYyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUU7SUFDMUIsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxPQUFPLENBQUMsS0FBSyxRQUFRLEtBQUssT0FBTyxDQUFDLEtBQUssVUFBVSxDQUFDLENBQUM7Q0FDakc7QUFDRCxBQVFBLFNBQVMsU0FBUyxDQUFDLEtBQUssRUFBRSxRQUFRLEVBQUU7SUFDaEMsTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUN4QyxPQUFPLEtBQUssQ0FBQyxXQUFXLEdBQUcsTUFBTSxLQUFLLENBQUMsV0FBVyxFQUFFLEdBQUcsS0FBSyxDQUFDO0NBQ2hFO0FBQ0QsU0FBUyxlQUFlLENBQUMsS0FBSyxFQUFFO0lBQzVCLElBQUksS0FBSyxDQUFDO0lBQ1YsU0FBUyxDQUFDLEtBQUssRUFBRSxDQUFDLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFDbkMsT0FBTyxLQUFLLENBQUM7Q0FDaEI7QUFDRCxBQThUQSxTQUFTLFlBQVksQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFO0lBQ2hDLE1BQU0sQ0FBQyxHQUFHLFFBQVEsQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDOUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztJQUM5QyxPQUFPLENBQUMsQ0FBQztDQUNaO0FBQ0QsQUFzSkE7QUFDQSxJQUFJLGlCQUFpQixDQUFDO0FBQ3RCLFNBQVMscUJBQXFCLENBQUMsU0FBUyxFQUFFO0lBQ3RDLGlCQUFpQixHQUFHLFNBQVMsQ0FBQztDQUNqQztBQUNELFNBQVMscUJBQXFCLEdBQUc7SUFDN0IsSUFBSSxDQUFDLGlCQUFpQjtRQUNsQixNQUFNLElBQUksS0FBSyxDQUFDLENBQUMsZ0RBQWdELENBQUMsQ0FBQyxDQUFDO0lBQ3hFLE9BQU8saUJBQWlCLENBQUM7Q0FDNUI7QUFDRCxBQUdBLFNBQVMsT0FBTyxDQUFDLEVBQUUsRUFBRTtJQUNqQixxQkFBcUIsRUFBRSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0NBQ2hEO0FBQ0QsQUFHQSxTQUFTLFNBQVMsQ0FBQyxFQUFFLEVBQUU7SUFDbkIscUJBQXFCLEVBQUUsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztDQUNsRDtBQUNELFNBQVMscUJBQXFCLEdBQUc7SUFDN0IsTUFBTSxTQUFTLEdBQUcsaUJBQWlCLENBQUM7SUFDcEMsT0FBTyxDQUFDLElBQUksRUFBRSxNQUFNLEtBQUs7UUFDckIsTUFBTSxTQUFTLEdBQUcsU0FBUyxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDL0MsSUFBSSxTQUFTLEVBQUU7OztZQUdYLE1BQU0sS0FBSyxHQUFHLFlBQVksQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDekMsU0FBUyxDQUFDLEtBQUssRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFLElBQUk7Z0JBQzVCLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxDQUFDO2FBQzdCLENBQUMsQ0FBQztTQUNOO0tBQ0osQ0FBQztDQUNMO0FBQ0QsU0FBUyxVQUFVLENBQUMsR0FBRyxFQUFFLE9BQU8sRUFBRTtJQUM5QixxQkFBcUIsRUFBRSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQztDQUN4RDtBQUNELEFBeWpCQSxNQUFNLE9BQU8sR0FBRztJQUNaLEdBQUcsRUFBRSxRQUFRO0lBQ2IsR0FBRyxFQUFFLE9BQU87SUFDWixHQUFHLEVBQUUsT0FBTztJQUNaLEdBQUcsRUFBRSxNQUFNO0lBQ1gsR0FBRyxFQUFFLE1BQU07Q0FDZCxDQUFDO0FBQ0YsU0FBU0EsUUFBTSxDQUFDLElBQUksRUFBRTtJQUNsQixPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLEtBQUssSUFBSSxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztDQUNwRTtBQUNELFNBQVMsSUFBSSxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUU7SUFDckIsSUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFDO0lBQ2IsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUN0QyxHQUFHLElBQUksRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztLQUMxQjtJQUNELE9BQU8sR0FBRyxDQUFDO0NBQ2Q7QUFDRCxNQUFNLGlCQUFpQixHQUFHO0lBQ3RCLFFBQVEsRUFBRSxNQUFNLEVBQUU7Q0FDckIsQ0FBQztBQUNGLFNBQVMsa0JBQWtCLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRTtJQUN6QyxJQUFJLENBQUMsU0FBUyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRTtRQUNuQyxJQUFJLElBQUksS0FBSyxrQkFBa0I7WUFDM0IsSUFBSSxJQUFJLGFBQWEsQ0FBQztRQUMxQixNQUFNLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQywrSkFBK0osQ0FBQyxDQUFDLENBQUM7S0FDOUw7SUFDRCxPQUFPLFNBQVMsQ0FBQztDQUNwQjtBQUNELEFBS0EsSUFBSSxVQUFVLENBQUM7QUFDZixTQUFTLG9CQUFvQixDQUFDLEVBQUUsRUFBRTtJQUM5QixTQUFTLFFBQVEsQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUU7UUFDOUMsTUFBTSxnQkFBZ0IsR0FBRyxpQkFBaUIsQ0FBQztRQUMzQyxNQUFNLEVBQUUsR0FBRztZQUNQLFVBQVU7WUFDVixPQUFPLEVBQUUsSUFBSSxHQUFHLENBQUMsZ0JBQWdCLEdBQUcsZ0JBQWdCLENBQUMsRUFBRSxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7O1lBRXJFLFFBQVEsRUFBRSxFQUFFO1lBQ1osYUFBYSxFQUFFLEVBQUU7WUFDakIsWUFBWSxFQUFFLEVBQUU7WUFDaEIsU0FBUyxFQUFFLFlBQVksRUFBRTtTQUM1QixDQUFDO1FBQ0YscUJBQXFCLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQzlCLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNoRCxxQkFBcUIsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ3hDLE9BQU8sSUFBSSxDQUFDO0tBQ2Y7SUFDRCxPQUFPO1FBQ0gsTUFBTSxFQUFFLENBQUMsS0FBSyxHQUFHLEVBQUUsRUFBRSxPQUFPLEdBQUcsRUFBRSxLQUFLO1lBQ2xDLFVBQVUsR0FBRyxFQUFFLENBQUM7WUFDaEIsTUFBTSxNQUFNLEdBQUcsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxJQUFJLEdBQUcsRUFBRSxFQUFFLENBQUM7WUFDNUMsTUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQ2xELE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUNwQixPQUFPO2dCQUNILElBQUk7Z0JBQ0osR0FBRyxFQUFFO29CQUNELElBQUksRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO29CQUM1RCxHQUFHLEVBQUUsSUFBSTtpQkFDWjtnQkFDRCxJQUFJLEVBQUUsTUFBTSxDQUFDLElBQUk7YUFDcEIsQ0FBQztTQUNMO1FBQ0QsUUFBUTtLQUNYLENBQUM7Q0FDTDtBQUNELFNBQVMsYUFBYSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFO0lBQ3pDLElBQUksS0FBSyxJQUFJLElBQUksS0FBSyxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDcEMsT0FBTyxFQUFFLENBQUM7SUFDZCxPQUFPLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxFQUFFLEtBQUssS0FBSyxJQUFJLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLE9BQU8sS0FBSyxLQUFLLFFBQVEsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDQSxRQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUM1SDtBQUNELFNBQVMsV0FBVyxDQUFDLE9BQU8sRUFBRTtJQUMxQixPQUFPLE9BQU8sR0FBRyxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Q0FDL0M7O0FDcnJDRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBd0JBLElBQUksUUFBUSxHQUFHLG9CQUFvQjtJQUMvQixRQUFRLEdBQUcsVUFBVTtJQUNyQixRQUFRLEdBQUcsZ0JBQWdCLENBQUM7O0FBRWhDLFNBQVMsTUFBTSxDQUFDLEtBQUssRUFBRTtFQUNyQixJQUFJLElBQUksR0FBRyxJQUFJLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztFQUNoQyxJQUFJLFFBQVEsR0FBRyxJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztFQUNsQyxJQUFJLFVBQVUsQ0FBQztFQUNmLElBQUksTUFBTSxHQUFHLENBQUMsQ0FBQzs7RUFFZixTQUFTLFlBQVksQ0FBQyxNQUFNLEVBQUU7SUFDNUIsSUFBSSxhQUFhLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztJQUNwQyxJQUFJLGNBQWMsR0FBRyxNQUFNLEdBQUcsTUFBTSxDQUFDO0lBQ3JDLE9BQU8sYUFBYSxHQUFHLGNBQWM7TUFDbkMsYUFBYSxLQUFLLENBQUMsQ0FBQztJQUN0QixJQUFJLGFBQWEsS0FBSyxJQUFJLENBQUMsVUFBVSxFQUFFO01BQ3JDLElBQUksV0FBVyxHQUFHLFFBQVEsQ0FBQztNQUMzQixJQUFJLEdBQUcsSUFBSSxXQUFXLENBQUMsYUFBYSxDQUFDLENBQUM7TUFDdEMsUUFBUSxHQUFHLElBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO01BQzlCLElBQUksV0FBVyxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7TUFDcEMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFdBQVcsRUFBRSxFQUFFLENBQUM7UUFDbEMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDN0Q7O0lBRUQsVUFBVSxHQUFHLE1BQU0sQ0FBQztJQUNwQixPQUFPLFFBQVEsQ0FBQztHQUNqQjtFQUNELFNBQVMsV0FBVyxHQUFHO0lBQ3JCLE1BQU0sSUFBSSxVQUFVLENBQUM7R0FDdEI7RUFDRCxTQUFTLFlBQVksQ0FBQyxLQUFLLEVBQUU7SUFDM0IsV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7R0FDeEQ7RUFDRCxTQUFTLFVBQVUsQ0FBQyxLQUFLLEVBQUU7SUFDekIsV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7R0FDdEQ7RUFDRCxTQUFTLGVBQWUsQ0FBQyxLQUFLLEVBQUU7SUFDOUIsSUFBSSxRQUFRLEdBQUcsWUFBWSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMxQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUM7TUFDbkMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFDLFdBQVcsRUFBRSxDQUFDO0dBQ2Y7RUFDRCxTQUFTLFdBQVcsQ0FBQyxLQUFLLEVBQUU7SUFDMUIsV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7R0FDdkQ7RUFDRCxTQUFTLFdBQVcsQ0FBQyxLQUFLLEVBQUU7SUFDMUIsV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7R0FDdkQ7RUFDRCxTQUFTLFdBQVcsQ0FBQyxLQUFLLEVBQUU7SUFDMUIsSUFBSSxHQUFHLEdBQUcsS0FBSyxHQUFHLFFBQVEsQ0FBQztJQUMzQixJQUFJLElBQUksR0FBRyxDQUFDLEtBQUssR0FBRyxHQUFHLElBQUksUUFBUSxDQUFDO0lBQ3BDLElBQUksUUFBUSxHQUFHLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixRQUFRLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNqQyxRQUFRLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDcEMsV0FBVyxFQUFFLENBQUM7R0FDZjtFQUNELFNBQVMsa0JBQWtCLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRTtJQUN4QyxJQUFJLE1BQU0sR0FBRyxFQUFFLEVBQUU7TUFDZixVQUFVLENBQUMsSUFBSSxJQUFJLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQztLQUNoQyxNQUFNLElBQUksTUFBTSxHQUFHLEtBQUssRUFBRTtNQUN6QixVQUFVLENBQUMsSUFBSSxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztNQUMzQixVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDcEIsTUFBTSxJQUFJLE1BQU0sR0FBRyxPQUFPLEVBQUU7TUFDM0IsVUFBVSxDQUFDLElBQUksSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7TUFDM0IsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQ3JCLE1BQU0sSUFBSSxNQUFNLEdBQUcsV0FBVyxFQUFFO01BQy9CLFVBQVUsQ0FBQyxJQUFJLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO01BQzNCLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztLQUNyQixNQUFNO01BQ0wsVUFBVSxDQUFDLElBQUksSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7TUFDM0IsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQ3JCO0dBQ0Y7O0VBRUQsU0FBUyxVQUFVLENBQUMsS0FBSyxFQUFFO0lBQ3pCLElBQUksQ0FBQyxDQUFDOztJQUVOLElBQUksS0FBSyxLQUFLLEtBQUs7TUFDakIsT0FBTyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDMUIsSUFBSSxLQUFLLEtBQUssSUFBSTtNQUNoQixPQUFPLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMxQixJQUFJLEtBQUssS0FBSyxJQUFJO01BQ2hCLE9BQU8sVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzFCLElBQUksS0FBSyxLQUFLLFNBQVM7TUFDckIsT0FBTyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7O0lBRTFCLFFBQVEsT0FBTyxLQUFLO01BQ2xCLEtBQUssUUFBUTtRQUNYLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxLQUFLLEVBQUU7VUFDL0IsSUFBSSxDQUFDLElBQUksS0FBSyxJQUFJLEtBQUssSUFBSSxRQUFRO1lBQ2pDLE9BQU8sa0JBQWtCLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO1VBQ3RDLElBQUksQ0FBQyxRQUFRLElBQUksS0FBSyxJQUFJLEtBQUssR0FBRyxDQUFDO1lBQ2pDLE9BQU8sa0JBQWtCLENBQUMsQ0FBQyxFQUFFLEVBQUUsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDOUM7UUFDRCxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDakIsT0FBTyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7O01BRTdCLEtBQUssUUFBUTtRQUNYLElBQUksUUFBUSxHQUFHLEVBQUUsQ0FBQztRQUNsQixLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLEVBQUU7VUFDakMsSUFBSSxRQUFRLEdBQUcsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztVQUNuQyxJQUFJLFFBQVEsR0FBRyxJQUFJLEVBQUU7WUFDbkIsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztXQUN6QixNQUFNLElBQUksUUFBUSxHQUFHLEtBQUssRUFBRTtZQUMzQixRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxRQUFRLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDcEMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsUUFBUSxHQUFHLElBQUksQ0FBQyxDQUFDO1dBQ3ZDLE1BQU0sSUFBSSxRQUFRLEdBQUcsTUFBTSxFQUFFO1lBQzVCLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLFFBQVEsSUFBSSxFQUFFLENBQUMsQ0FBQztZQUNyQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLFFBQVEsSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLENBQUM7WUFDOUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsUUFBUSxHQUFHLElBQUksQ0FBQyxDQUFDO1dBQ3ZDLE1BQU07WUFDTCxRQUFRLEdBQUcsQ0FBQyxRQUFRLEdBQUcsS0FBSyxLQUFLLEVBQUUsQ0FBQztZQUNwQyxRQUFRLElBQUksS0FBSyxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQztZQUMxQyxRQUFRLElBQUksT0FBTyxDQUFDOztZQUVwQixRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxRQUFRLElBQUksRUFBRSxDQUFDLENBQUM7WUFDckMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxRQUFRLElBQUksRUFBRSxLQUFLLElBQUksQ0FBQyxDQUFDO1lBQy9DLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsUUFBUSxJQUFJLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQztZQUM5QyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxRQUFRLEdBQUcsSUFBSSxDQUFDLENBQUM7V0FDdkM7U0FDRjs7UUFFRCxrQkFBa0IsQ0FBQyxDQUFDLEVBQUUsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3ZDLE9BQU8sZUFBZSxDQUFDLFFBQVEsQ0FBQyxDQUFDOztNQUVuQztRQUNFLElBQUksTUFBTSxDQUFDO1FBQ1gsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO1VBQ3hCLE1BQU0sR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDO1VBQ3RCLGtCQUFrQixDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQztVQUM5QixLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sRUFBRSxFQUFFLENBQUM7WUFDekIsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3hCLE1BQU0sSUFBSSxLQUFLLFlBQVksVUFBVSxFQUFFO1VBQ3RDLGtCQUFrQixDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7VUFDcEMsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3hCLE1BQU07VUFDTCxJQUFJLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1VBQzlCLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1VBQ3JCLGtCQUFrQixDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQztVQUM5QixLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sRUFBRSxFQUFFLENBQUMsRUFBRTtZQUMzQixJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbEIsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ2hCLFVBQVUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztXQUN4QjtTQUNGO0tBQ0o7R0FDRjs7RUFFRCxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7O0VBRWxCLElBQUksT0FBTyxJQUFJLElBQUk7SUFDakIsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQzs7RUFFL0IsSUFBSSxHQUFHLEdBQUcsSUFBSSxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7RUFDbEMsSUFBSSxPQUFPLEdBQUcsSUFBSSxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7RUFDaEMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sRUFBRSxFQUFFLENBQUM7SUFDN0IsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQzVDLE9BQU8sR0FBRyxDQUFDO0NBQ1o7O0FBRUQsU0FBUyxNQUFNLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUU7RUFDekMsSUFBSSxRQUFRLEdBQUcsSUFBSSxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7RUFDbEMsSUFBSSxNQUFNLEdBQUcsQ0FBQyxDQUFDOztFQUVmLElBQUksT0FBTyxNQUFNLEtBQUssVUFBVTtJQUM5QixNQUFNLEdBQUcsU0FBUyxLQUFLLEVBQUUsRUFBRSxPQUFPLEtBQUssQ0FBQyxFQUFFLENBQUM7RUFDN0MsSUFBSSxPQUFPLFdBQVcsS0FBSyxVQUFVO0lBQ25DLFdBQVcsR0FBRyxXQUFXLEVBQUUsT0FBTyxTQUFTLENBQUMsRUFBRSxDQUFDOztFQUVqRCxTQUFTLFVBQVUsQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFO0lBQ2pDLE1BQU0sSUFBSSxNQUFNLENBQUM7SUFDakIsT0FBTyxLQUFLLENBQUM7R0FDZDtFQUNELFNBQVMsZUFBZSxDQUFDLE1BQU0sRUFBRTtJQUMvQixPQUFPLFVBQVUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxVQUFVLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDO0dBQ2pFO0VBQ0QsU0FBUyxXQUFXLEdBQUc7SUFDckIsSUFBSSxlQUFlLEdBQUcsSUFBSSxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDekMsSUFBSSxZQUFZLEdBQUcsSUFBSSxRQUFRLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDakQsSUFBSSxLQUFLLEdBQUcsVUFBVSxFQUFFLENBQUM7O0lBRXpCLElBQUksSUFBSSxHQUFHLEtBQUssR0FBRyxNQUFNLENBQUM7SUFDMUIsSUFBSSxRQUFRLEdBQUcsS0FBSyxHQUFHLE1BQU0sQ0FBQztJQUM5QixJQUFJLFFBQVEsR0FBRyxLQUFLLEdBQUcsTUFBTSxDQUFDOztJQUU5QixJQUFJLFFBQVEsS0FBSyxNQUFNO01BQ3JCLFFBQVEsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO1NBQ25CLElBQUksUUFBUSxLQUFLLENBQUM7TUFDckIsUUFBUSxJQUFJLENBQUMsR0FBRyxHQUFHLEVBQUUsS0FBSyxFQUFFLENBQUM7U0FDMUIsSUFBSSxRQUFRLEtBQUssQ0FBQztNQUNyQixPQUFPLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxRQUFRLEdBQUcsUUFBUSxDQUFDOztJQUUvQyxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxJQUFJLElBQUksRUFBRSxHQUFHLFFBQVEsSUFBSSxFQUFFLEdBQUcsUUFBUSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQ3hFLE9BQU8sWUFBWSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztHQUNuQztFQUNELFNBQVMsV0FBVyxHQUFHO0lBQ3JCLE9BQU8sVUFBVSxDQUFDLENBQUMsRUFBRSxRQUFRLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7R0FDbkQ7RUFDRCxTQUFTLFdBQVcsR0FBRztJQUNyQixPQUFPLFVBQVUsQ0FBQyxDQUFDLEVBQUUsUUFBUSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0dBQ25EO0VBQ0QsU0FBUyxTQUFTLEdBQUc7SUFDbkIsT0FBTyxVQUFVLENBQUMsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztHQUNqRDtFQUNELFNBQVMsVUFBVSxHQUFHO0lBQ3BCLE9BQU8sVUFBVSxDQUFDLENBQUMsRUFBRSxRQUFRLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7R0FDbEQ7RUFDRCxTQUFTLFVBQVUsR0FBRztJQUNwQixPQUFPLFVBQVUsQ0FBQyxDQUFDLEVBQUUsUUFBUSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0dBQ2xEO0VBQ0QsU0FBUyxVQUFVLEdBQUc7SUFDcEIsT0FBTyxVQUFVLEVBQUUsR0FBRyxRQUFRLEdBQUcsVUFBVSxFQUFFLENBQUM7R0FDL0M7RUFDRCxTQUFTLFNBQVMsR0FBRztJQUNuQixJQUFJLFFBQVEsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEtBQUssSUFBSTtNQUNwQyxPQUFPLEtBQUssQ0FBQztJQUNmLE1BQU0sSUFBSSxDQUFDLENBQUM7SUFDWixPQUFPLElBQUksQ0FBQztHQUNiO0VBQ0QsU0FBUyxVQUFVLENBQUMscUJBQXFCLEVBQUU7SUFDekMsSUFBSSxxQkFBcUIsR0FBRyxFQUFFO01BQzVCLE9BQU8scUJBQXFCLENBQUM7SUFDL0IsSUFBSSxxQkFBcUIsS0FBSyxFQUFFO01BQzlCLE9BQU8sU0FBUyxFQUFFLENBQUM7SUFDckIsSUFBSSxxQkFBcUIsS0FBSyxFQUFFO01BQzlCLE9BQU8sVUFBVSxFQUFFLENBQUM7SUFDdEIsSUFBSSxxQkFBcUIsS0FBSyxFQUFFO01BQzlCLE9BQU8sVUFBVSxFQUFFLENBQUM7SUFDdEIsSUFBSSxxQkFBcUIsS0FBSyxFQUFFO01BQzlCLE9BQU8sVUFBVSxFQUFFLENBQUM7SUFDdEIsSUFBSSxxQkFBcUIsS0FBSyxFQUFFO01BQzlCLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDWixNQUFNLHlCQUF5QixDQUFDO0dBQ2pDO0VBQ0QsU0FBUywwQkFBMEIsQ0FBQyxTQUFTLEVBQUU7SUFDN0MsSUFBSSxXQUFXLEdBQUcsU0FBUyxFQUFFLENBQUM7SUFDOUIsSUFBSSxXQUFXLEtBQUssSUFBSTtNQUN0QixPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ1osSUFBSSxNQUFNLEdBQUcsVUFBVSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsQ0FBQztJQUM1QyxJQUFJLE1BQU0sR0FBRyxDQUFDLElBQUksQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLFNBQVM7TUFDaEQsTUFBTSxtQ0FBbUMsQ0FBQztJQUM1QyxPQUFPLE1BQU0sQ0FBQztHQUNmOztFQUVELFNBQVMsZUFBZSxDQUFDLFNBQVMsRUFBRSxNQUFNLEVBQUU7SUFDMUMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sRUFBRSxFQUFFLENBQUMsRUFBRTtNQUMvQixJQUFJLEtBQUssR0FBRyxTQUFTLEVBQUUsQ0FBQztNQUN4QixJQUFJLEtBQUssR0FBRyxJQUFJLEVBQUU7UUFDaEIsSUFBSSxLQUFLLEdBQUcsSUFBSSxFQUFFO1VBQ2hCLEtBQUssR0FBRyxDQUFDLEtBQUssR0FBRyxJQUFJLE1BQU0sQ0FBQzttQkFDbkIsU0FBUyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7VUFDN0IsTUFBTSxJQUFJLENBQUMsQ0FBQztTQUNiLE1BQU0sSUFBSSxLQUFLLEdBQUcsSUFBSSxFQUFFO1VBQ3ZCLEtBQUssR0FBRyxDQUFDLEtBQUssR0FBRyxJQUFJLEtBQUssRUFBRTtrQkFDcEIsQ0FBQyxTQUFTLEVBQUUsR0FBRyxJQUFJLEtBQUssQ0FBQzttQkFDeEIsU0FBUyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7VUFDN0IsTUFBTSxJQUFJLENBQUMsQ0FBQztTQUNiLE1BQU07VUFDTCxLQUFLLEdBQUcsQ0FBQyxLQUFLLEdBQUcsSUFBSSxLQUFLLEVBQUU7a0JBQ3BCLENBQUMsU0FBUyxFQUFFLEdBQUcsSUFBSSxLQUFLLEVBQUU7a0JBQzFCLENBQUMsU0FBUyxFQUFFLEdBQUcsSUFBSSxLQUFLLENBQUM7bUJBQ3hCLFNBQVMsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDO1VBQzdCLE1BQU0sSUFBSSxDQUFDLENBQUM7U0FDYjtPQUNGOztNQUVELElBQUksS0FBSyxHQUFHLE9BQU8sRUFBRTtRQUNuQixTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO09BQ3ZCLE1BQU07UUFDTCxLQUFLLElBQUksT0FBTyxDQUFDO1FBQ2pCLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFJLEtBQUssSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3ZDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFJLEtBQUssR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO09BQzFDO0tBQ0Y7R0FDRjs7RUFFRCxTQUFTLFVBQVUsR0FBRztJQUNwQixJQUFJLFdBQVcsR0FBRyxTQUFTLEVBQUUsQ0FBQztJQUM5QixJQUFJLFNBQVMsR0FBRyxXQUFXLElBQUksQ0FBQyxDQUFDO0lBQ2pDLElBQUkscUJBQXFCLEdBQUcsV0FBVyxHQUFHLElBQUksQ0FBQztJQUMvQyxJQUFJLENBQUMsQ0FBQztJQUNOLElBQUksTUFBTSxDQUFDOztJQUVYLElBQUksU0FBUyxLQUFLLENBQUMsRUFBRTtNQUNuQixRQUFRLHFCQUFxQjtRQUMzQixLQUFLLEVBQUU7VUFDTCxPQUFPLFdBQVcsRUFBRSxDQUFDO1FBQ3ZCLEtBQUssRUFBRTtVQUNMLE9BQU8sV0FBVyxFQUFFLENBQUM7UUFDdkIsS0FBSyxFQUFFO1VBQ0wsT0FBTyxXQUFXLEVBQUUsQ0FBQztPQUN4QjtLQUNGOztJQUVELE1BQU0sR0FBRyxVQUFVLENBQUMscUJBQXFCLENBQUMsQ0FBQztJQUMzQyxJQUFJLE1BQU0sR0FBRyxDQUFDLEtBQUssU0FBUyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsU0FBUyxDQUFDO01BQ2hELE1BQU0sZ0JBQWdCLENBQUM7O0lBRXpCLFFBQVEsU0FBUztNQUNmLEtBQUssQ0FBQztRQUNKLE9BQU8sTUFBTSxDQUFDO01BQ2hCLEtBQUssQ0FBQztRQUNKLE9BQU8sQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDO01BQ3JCLEtBQUssQ0FBQztRQUNKLElBQUksTUFBTSxHQUFHLENBQUMsRUFBRTtVQUNkLElBQUksUUFBUSxHQUFHLEVBQUUsQ0FBQztVQUNsQixJQUFJLGVBQWUsR0FBRyxDQUFDLENBQUM7VUFDeEIsT0FBTyxDQUFDLE1BQU0sR0FBRywwQkFBMEIsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDNUQsZUFBZSxJQUFJLE1BQU0sQ0FBQztZQUMxQixRQUFRLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1dBQ3hDO1VBQ0QsSUFBSSxTQUFTLEdBQUcsSUFBSSxVQUFVLENBQUMsZUFBZSxDQUFDLENBQUM7VUFDaEQsSUFBSSxlQUFlLEdBQUcsQ0FBQyxDQUFDO1VBQ3hCLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsUUFBUSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsRUFBRTtZQUNwQyxTQUFTLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxlQUFlLENBQUMsQ0FBQztZQUM1QyxlQUFlLElBQUksUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztXQUN2QztVQUNELE9BQU8sU0FBUyxDQUFDO1NBQ2xCO1FBQ0QsT0FBTyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUM7TUFDakMsS0FBSyxDQUFDO1FBQ0osSUFBSSxTQUFTLEdBQUcsRUFBRSxDQUFDO1FBQ25CLElBQUksTUFBTSxHQUFHLENBQUMsRUFBRTtVQUNkLE9BQU8sQ0FBQyxNQUFNLEdBQUcsMEJBQTBCLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQztZQUMxRCxlQUFlLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1NBQ3RDO1VBQ0MsZUFBZSxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUNyQyxPQUFPLE1BQU0sQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQztNQUNwRCxLQUFLLENBQUM7UUFDSixJQUFJLFFBQVEsQ0FBQztRQUNiLElBQUksTUFBTSxHQUFHLENBQUMsRUFBRTtVQUNkLFFBQVEsR0FBRyxFQUFFLENBQUM7VUFDZCxPQUFPLENBQUMsU0FBUyxFQUFFO1lBQ2pCLFFBQVEsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQztTQUMvQixNQUFNO1VBQ0wsUUFBUSxHQUFHLElBQUksS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1VBQzdCLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxFQUFFLEVBQUUsQ0FBQztZQUN6QixRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsVUFBVSxFQUFFLENBQUM7U0FDOUI7UUFDRCxPQUFPLFFBQVEsQ0FBQztNQUNsQixLQUFLLENBQUM7UUFDSixJQUFJLFNBQVMsR0FBRyxFQUFFLENBQUM7UUFDbkIsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLElBQUksTUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFO1VBQ3pELElBQUksR0FBRyxHQUFHLFVBQVUsRUFBRSxDQUFDO1VBQ3ZCLFNBQVMsQ0FBQyxHQUFHLENBQUMsR0FBRyxVQUFVLEVBQUUsQ0FBQztTQUMvQjtRQUNELE9BQU8sU0FBUyxDQUFDO01BQ25CLEtBQUssQ0FBQztRQUNKLE9BQU8sTUFBTSxDQUFDLFVBQVUsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO01BQ3RDLEtBQUssQ0FBQztRQUNKLFFBQVEsTUFBTTtVQUNaLEtBQUssRUFBRTtZQUNMLE9BQU8sS0FBSyxDQUFDO1VBQ2YsS0FBSyxFQUFFO1lBQ0wsT0FBTyxJQUFJLENBQUM7VUFDZCxLQUFLLEVBQUU7WUFDTCxPQUFPLElBQUksQ0FBQztVQUNkLEtBQUssRUFBRTtZQUNMLE9BQU8sU0FBUyxDQUFDO1VBQ25CO1lBQ0UsT0FBTyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDOUI7S0FDSjtHQUNGOztFQUVELElBQUksR0FBRyxHQUFHLFVBQVUsRUFBRSxDQUFDO0VBQ3ZCLElBQUksTUFBTSxLQUFLLElBQUksQ0FBQyxVQUFVO0lBQzVCLE1BQU0saUJBQWlCLENBQUM7RUFDMUIsT0FBTyxHQUFHLENBQUM7Q0FDWjs7QUFFRCxBQUFPLE1BQU0sSUFBSSxHQUFHLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLENBQUM7O0FDell2RCxNQUFNLGVBQWUsR0FBRyxzQkFBcUI7QUFDN0MsTUFBTSxTQUFTLEdBQUc7RUFDaEIsU0FBUztFQUNULFNBQVM7RUFDVCxTQUFTO0VBQ1QsU0FBUztFQUNULFNBQVM7RUFDVCxTQUFTO0VBQ1QsU0FBUztFQUNULFNBQVM7RUFDVCxTQUFTO0VBQ1QsU0FBUztFQUNULFNBQVM7Q0FDVixDQUFDO0FBQ0YsZUFBZSxNQUFNLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRTtFQUNsQyxJQUFJLEdBQUcsQ0FBQztFQUNSLEdBQUcsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUk7SUFDbkMsR0FBRyxHQUFHLE1BQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7Ozs7SUFJckMsR0FBRyxHQUFHLE1BQU1DLE9BQUssQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7RUFDbEMsR0FBRyxHQUFHLENBQUMsTUFBTSxJQUFJLEdBQUc7SUFDbEIsTUFBTSxHQUFHLENBQUMsTUFBTSxDQUFDO09BQ2QsT0FBTyxHQUFHLENBQUM7Q0FDakI7QUFDRCxlQUFlLFVBQVUsQ0FBQyxJQUFJLEVBQUU7RUFDOUIsSUFBSSxHQUFHLEdBQUcsTUFBTSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7RUFDN0IsSUFBSSxJQUFJLEdBQUcsTUFBTSxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUM7RUFDbkMsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0NBQzFCO0FBQ0QsQUFBTyxNQUFNLEdBQUcsR0FBRztFQUNqQixZQUFZLEVBQUUsa0JBQWtCO0lBQzlCLE9BQU8sQ0FBQyxNQUFNLFVBQVUsQ0FBQyxlQUFlLEdBQUcsbUJBQW1CLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztHQUN6RztFQUNELFFBQVEsRUFBRSxnQkFBZ0IsRUFBRSxFQUFFO0lBQzVCLE9BQU8sTUFBTSxVQUFVLENBQUMsZUFBZSxHQUFHLENBQUMsY0FBYyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztHQUNsRTtFQUNELGNBQWMsRUFBRSxnQkFBZ0IsYUFBYSxFQUFFO0lBQzdDLEdBQUcsT0FBTyxhQUFhLENBQUMsSUFBSSxRQUFRO01BQ2xDLE9BQU8sTUFBTSxVQUFVLENBQUMsZUFBZSxHQUFHLENBQUMsMkJBQTJCLEVBQUUsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3ZGO01BQ0YsYUFBYSxHQUFHLFFBQVEsR0FBRyxhQUFhLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBQztNQUN4RCxPQUFPLE1BQU0sVUFBVSxDQUFDLGVBQWUsR0FBRyxDQUFDLG9CQUFvQixFQUFFLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUNuRjtHQUNGO0VBQ0QsUUFBUSxFQUFFLGdCQUFnQixFQUFFLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRTtJQUN0QyxPQUFPLE1BQU0sVUFBVSxDQUFDLGVBQWUsR0FBRyxDQUFDLGNBQWMsRUFBRSxFQUFFLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0dBQzdIO0VBQ0QsaUJBQWlCLEVBQUUsZ0JBQWdCLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQyxFQUFFO0lBQy9DLEdBQUcsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7TUFDMUIsT0FBTyxDQUFDLE1BQU0sVUFBVSxDQUFDLGVBQWUsR0FBRyxDQUFDLGNBQWMsRUFBRSxFQUFFLENBQUMsMEJBQTBCLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDOztNQUU3SSxPQUFPLENBQUMsTUFBTSxVQUFVLENBQUMsZUFBZSxHQUFHLENBQUMsY0FBYyxFQUFFLEVBQUUsQ0FBQywwQkFBMEIsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsSUFBSSxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0dBQy9JO0VBQ0QsYUFBYSxFQUFFLGdCQUFnQixFQUFFLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRTtJQUMzQyxPQUFPLE1BQU0sVUFBVSxDQUFDLGVBQWUsR0FBRyxDQUFDLGNBQWMsRUFBRSxFQUFFLENBQUMsb0JBQW9CLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7Ozs7Ozs7R0FPbEk7RUFDRCxRQUFRLEVBQUUsZUFBZSxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUMsRUFBRTtJQUNyQyxPQUFPLE1BQU0sVUFBVSxDQUFDLGVBQWUsR0FBRyxDQUFDLGNBQWMsRUFBRSxFQUFFLENBQUMsaUJBQWlCLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0dBQzVGO0VBQ0QsYUFBYSxFQUFFLGVBQWUsRUFBRSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLFNBQVMsQ0FBQyxJQUFJLEVBQUU7SUFDOUUsT0FBTyxNQUFNLE1BQU0sQ0FBQyxlQUFlLEdBQUcsQ0FBQyxjQUFjLEVBQUUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxFQUFFO01BQ3BFLE1BQU0sRUFBRSxNQUFNO01BQ2QsT0FBTyxFQUFFO1FBQ1AsY0FBYyxFQUFFLGtCQUFrQjtPQUNuQztNQUNELElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQ25CLFFBQVEsRUFBRSxRQUFRO1FBQ2xCLFFBQVEsRUFBRSxRQUFRO1FBQ2xCLFFBQVEsRUFBRSxRQUFRO1FBQ2xCLFNBQVMsRUFBRSxTQUFTO09BQ3JCLENBQUM7S0FDSCxDQUFDO0dBQ0g7RUFDRCxZQUFZLEVBQUUsZUFBZSxFQUFFLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRTtJQUNuRCxPQUFPLE1BQU0sTUFBTSxDQUFDLGVBQWUsR0FBRyxDQUFDLGNBQWMsRUFBRSxFQUFFLENBQUMsU0FBUyxDQUFDLEVBQUU7TUFDcEUsTUFBTSxFQUFFLE9BQU87TUFDZixPQUFPLEVBQUU7UUFDUCxjQUFjLEVBQUUsa0JBQWtCO09BQ25DO01BQ0QsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUM7UUFDbkIsTUFBTSxFQUFFLE1BQU07UUFDZCxFQUFFLEVBQUUsVUFBVTtPQUNmLENBQUM7S0FDSCxDQUFDLENBQUM7R0FDSjtFQUNELGdCQUFnQixFQUFFLGlCQUFpQjtJQUNqQyxPQUFPLE1BQU0sVUFBVSxDQUFDLGVBQWUsR0FBRywwQkFBMEIsQ0FBQyxDQUFDO0dBQ3ZFO0VBQ0QsUUFBUSxFQUFFLGVBQWUsRUFBRSxFQUFFO0lBQzNCLE9BQU8sTUFBTSxVQUFVLENBQUMsZUFBZSxHQUFHLENBQUMsY0FBYyxFQUFFLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUM7R0FDcEY7RUFDRCwrQkFBK0IsRUFBRSxlQUFlLEVBQUUsRUFBRTtJQUNsRCxPQUFPLE1BQU0sVUFBVSxDQUFDLGVBQWUsR0FBRyxDQUFDLGNBQWMsRUFBRSxFQUFFLENBQUMsZ0NBQWdDLENBQUMsQ0FBQyxDQUFDO0dBQ2xHO0VBQ0Qsd0NBQXdDLEVBQUUsZUFBZSxNQUFNLENBQUMsQ0FBQyxFQUFFO0lBQ2pFLE9BQU8sTUFBTSxVQUFVLENBQUMsZUFBZSxHQUFHLENBQUMscURBQXFELEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0dBQzdHO0VBQ0QscUNBQXFDLEVBQUUsZUFBZSxNQUFNLENBQUMsQ0FBQyxFQUFFO0lBQzlELE9BQU8sTUFBTSxVQUFVLENBQUMsZUFBZSxHQUFHLENBQUMsa0RBQWtELEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0dBQzFHO0VBQ0QsZ0JBQWdCLEVBQUUsZUFBZSxNQUFNLENBQUMsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFO0lBQy9FLE9BQU8sQ0FBQyxNQUFNLFVBQVUsQ0FBQyxlQUFlLEdBQUcsQ0FBQyw2QkFBNkIsRUFBRSxNQUFNLENBQUMsVUFBVSxFQUFFLFFBQVEsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0dBQ2hLO0VBQ0QsdUJBQXVCLEVBQUUsZUFBZSxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUU7SUFDMUQsT0FBTyxNQUFNLFVBQVUsQ0FBQyxlQUFlLEdBQUcsQ0FBQywyQkFBMkIsRUFBRSxHQUFHLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7R0FDN0k7RUFDRCw4QkFBOEIsRUFBRSxlQUFlLE1BQU0sRUFBRTtJQUNyRCxPQUFPLE1BQU0sVUFBVSxDQUFDLGVBQWUsR0FBRyxDQUFDLHFDQUFxQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztHQUM3RjtDQUNGOzs7Ozs7Ozs7OztBQ3ZIRCxBQUNBLE1BQU0sQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFLFlBQVksRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQzlELElBQUksTUFBTSxHQUFHLEtBQUssQ0FBQztBQUNuQixJQUFJLFFBQVEsR0FBRyxVQUFVLENBQUM7QUFDMUIsSUFBSSxLQUFLLEdBQUcsR0FBRyxDQUFDO0FBQ2hCLElBQUksTUFBTSxHQUFHLEdBQUcsQ0FBQztBQUNqQixJQUFJLFNBQVMsR0FBRyxFQUFFLENBQUM7QUFDbkIsSUFBSSxPQUFPLEdBQUcsTUFBTSxDQUFDO0FBQ3JCLElBQUksV0FBVyxHQUFHLHNrQkFBc2tCLENBQUM7O0FBRXpsQixrQkFBa0IsR0FBRztFQUNuQixNQUFNLEVBQUUsTUFBTTtFQUNkLFFBQVEsRUFBRSxRQUFRO0VBQ2xCLElBQUksRUFBRTtJQUNKLEtBQUs7SUFDTCxNQUFNO0lBQ04sU0FBUztJQUNULE9BQU87SUFDUCxXQUFXO0dBQ1osQ0FBQyxDQUFDOztBQUVMLGtCQUFrQixHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUM7QUFDeEMsY0FBYyxHQUFHLE1BQU0sQ0FBQztBQUN4QixnQkFBZ0IsR0FBRyxRQUFRLENBQUM7QUFDNUIsYUFBYSxHQUFHLEtBQUssQ0FBQztBQUN0QixjQUFjLEdBQUcsTUFBTSxDQUFDO0FBQ3hCLGlCQUFpQixHQUFHLFNBQVMsQ0FBQztBQUM5QixlQUFlLEdBQUcsT0FBTyxDQUFDO0FBQzFCLG1CQUFtQixHQUFHLFdBQVc7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0M4QmpDLElBQUksWUFBWSxHQUFHLEtBQUssQ0FBQztBQUNsQixNQUFJLFFBQVEsR0FBRyxtQkFBTyxDQUFDO0FBQzlCLEFBTU8sTUFBSSxLQUFLLEdBQUcsZ0JBQUksQ0FBQzs7Ozs7OzsyREFsRWtJLEtBQUs7MkdBQzNELGFBQWEsa0JBQWUsaUJBQWlCLGlCQUFnQixrQkFBa0I7Ozs7bUdBSTNGQyxvQkFBa0IsY0FBR0Esb0JBQWtCO3FEQUMzRkEsb0JBQWtCOzs7Ozs7Ozs7Ozs7OztDQ29CL0MsTUFBSSxHQUFHLEdBQUcsS0FBSyxFQUNYLFlBQVksRUFBRSxLQUFLLEVBQ25CLElBQUksRUFBRSxLQUFLLEVBQ1gsS0FBSyxFQUFFLGlCQUFLLENBQUM7O0FBRXhCLElBQUksVUFBVSxHQUFHLEtBQUssQ0FBQztBQUV2Qjs7Ozs7Ozs7Z0NBakNhLGFBQWE7OEVBRVgsSUFBSSxnQkFDSCxLQUFLO2tFQUVvRCwwQkFBMEI7OztRQUcxRixHQUFHOzs7Ozs7Ozs7Ozs7Ozs7QUNSWixTQUFTLGdCQUFnQixDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFO0VBQ3hDLElBQUksTUFBTSxDQUFDO0VBQ1gsR0FBRyxPQUFPLElBQUksQ0FBQyxJQUFJLFFBQVE7SUFDekIsTUFBTSxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQzs7SUFFaEMsTUFBTSxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztFQUM1QixPQUFPLE1BQU07SUFDWCxDQUFDLE1BQU0sRUFBRSxHQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUUsR0FBRyxHQUFHO0lBQ2hDLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRSxPQUFPLEVBQUUsR0FBRyxJQUFJO0lBQ3JDLENBQUMsTUFBTSxFQUFFLElBQUksR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUM7Q0FDbkQ7QUFDRCxTQUFTLFVBQVUsQ0FBQyxDQUFDLEVBQUU7RUFDckIsT0FBTyxXQUFXO0lBQ2hCLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxVQUFVLENBQUM7SUFDeEIsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ25DLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDeEMsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxJQUFJLFVBQVUsQ0FBQztHQUM1QztDQUNGO0FBQ0QsU0FBUyxJQUFJLENBQUMsSUFBSSxFQUFFO0VBQ2xCLElBQUksSUFBSSxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxDQUFDO0VBQ3JCLElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUUsT0FBTyxJQUFJLENBQUM7RUFDbkMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO0lBQ2hDLEdBQUcsS0FBSyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzNCLElBQUksSUFBSSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksR0FBRyxDQUFDO0lBQ25DLElBQUksSUFBSSxDQUFDLENBQUM7R0FDWDtFQUNELE9BQU8sSUFBSSxDQUFDO0NBQ2IsQUFDTSxNQUFNLGlCQUFpQixHQUFHLENBQUMsSUFBSSxLQUFLO0VBQ3pDLE9BQU8sZ0JBQWdCLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQztFQUN2Qzs7OztBQUlELE1BQU0sT0FBTyxHQUFHO0VBQ2QsTUFBTSxFQUFFLEVBQUU7RUFDVixLQUFLLEdBQUcsRUFBRTs7RUFFVixPQUFPLEVBQUUsS0FBSztFQUNkLE1BQU0sR0FBRyxLQUFLO0VBQ2QsT0FBTyxFQUFFLE1BQU07RUFDZixJQUFJLEtBQUssTUFBTTtFQUNmLEtBQUssSUFBSSxPQUFPO0VBQ2hCLEdBQUcsTUFBTSxLQUFLO0VBQ2QsSUFBSSxLQUFLLE1BQU07RUFDZixLQUFLLElBQUksS0FBSztFQUNkLE1BQU0sR0FBRyxNQUFNO0VBQ2YsSUFBSSxLQUFLLEtBQUs7RUFDZCxLQUFLLElBQUksTUFBTTtDQUNoQixDQUFDOztBQUVGLEFBQU8sTUFBTSxRQUFRLEdBQUcsU0FBUyxJQUFJLEVBQUU7RUFDckMsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksSUFBSSxFQUFFLEdBQUcsSUFBSSxJQUFJLElBQUksQ0FBQztNQUNoRCxTQUFTLEdBQUcsQUFBb0IsQ0FBQyxHQUFHO01BQ3BDLEtBQUssR0FBRyxPQUFPLENBQUMsTUFBTSxHQUFHLFNBQVM7TUFDbEMsUUFBUSxHQUFHLENBQUM7TUFDWixTQUFTLEdBQUc7UUFDVixJQUFJLElBQUksT0FBTyxHQUFHLFFBQVE7UUFDMUIsS0FBSyxHQUFHLE9BQU8sR0FBRyxPQUFPO1FBQ3pCLEdBQUcsS0FBSyxPQUFPLEdBQUcsS0FBSztRQUN2QixJQUFJLElBQUksT0FBTyxHQUFHLElBQUk7UUFDdEIsTUFBTSxFQUFFLE9BQU8sR0FBRyxFQUFFO09BQ3JCLENBQUM7O0VBRU4sSUFBSSxRQUFRLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQzs7RUFFL0IsS0FBSyxJQUFJLEdBQUcsSUFBSSxTQUFTLEVBQUU7SUFDekIsUUFBUSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7O0lBRXRDLElBQUksUUFBUSxHQUFHLENBQUMsRUFBRTtNQUNoQixRQUFRLEdBQUcsT0FBTyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQztNQUM5QixNQUFNO0tBQ1AsTUFBTSxJQUFJLFFBQVEsS0FBSyxDQUFDLEVBQUU7TUFDekIsUUFBUSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztNQUN4QixNQUFNO0tBQ1A7R0FDRjs7RUFFRCxRQUFRLEdBQUcsUUFBUSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUM7RUFDN0MsS0FBSyxJQUFJLFFBQVEsR0FBRyxTQUFTLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQztFQUM5QyxPQUFPLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztDQUNyQixDQUFDOztBQUVGLEFBQU8sTUFBTSxhQUFhLEdBQUcsU0FBUyxLQUFLLEVBQUUsU0FBUyxFQUFFO0lBQ3BELElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUM7SUFDckIsT0FBTyxDQUFDLEVBQUUsRUFBRTtRQUNSLElBQUksU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDO1lBQzdCLE9BQU8sQ0FBQyxDQUFDO0tBQ2hCO0lBQ0QsT0FBTyxDQUFDLENBQUMsQ0FBQztDQUNiOzs7Ozs7Ozs7OztFQzJCQyxNQUFXLG9CQUFRLENBQUM7RUFFcEIsSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDOzs7Ozs7K0JBeEhOLGFBQWE7TUFDbEIsc0NBQXNDOzs7Ozs7Ozs7Ozs7OztNQVl0Qyx3Q0FBd0M7Ozs7Ozs7Ozs7Ozs7O01BWXhDO01Bd0RBLHFCQUFxQjtVQUduQixNQUFNLEdBQUksS0FBSyxTQUNmLFNBQVM7Ozs7eUdBR29FLFFBQVEsaUNBQXNCLFFBQVE7d0JBQy9HLFFBQVE7Ozs7d0JBR1IsUUFBUTs7Ozs7Ozs7a0lBTzBGLFFBQVEsaUNBQXNCLFFBQVE7d0JBQ3hJLFFBQVE7Ozs7d0JBR1IsUUFBUTs7Ozs7Ozs7Ozs7Ozs7Ozs7RUN0RW5CLE1BQVcsb0JBQVEsQ0FBQztFQUNwQixJQUFJLGFBQWEsR0FBRyxJQUFJLENBQUM7RUFDekIsSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDOzs7Ozs7Q0FDYixHQUFHLFFBQVEsSUFBSSxhQUFhLENBQUM7UUFDOUIsYUFBYSxHQUFHLFFBQVEsQ0FBQztRQUN6QixNQUFNLEdBQUcsRUFBRSxDQUFDO1FBQ1osR0FBRyxRQUFRLENBQUMsaUJBQWlCO1VBQzNCLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsaUJBQWlCLEVBQUUsaUJBQWlCLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxFQUFFLENBQUMsRUFBRSxhQUFhLENBQUMsQ0FBQyxDQUFDO1FBQzNHLEdBQUcsUUFBUSxDQUFDLG1CQUFtQjtVQUM3QixNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLG1CQUFtQixFQUFFLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLENBQUMsRUFBRSxlQUFlLENBQUMsQ0FBQyxDQUFDO1FBQ2pILE1BQU0sR0FBRyxNQUFNLENBQUM7T0FDakI7OytCQTVDUyxhQUFhO1VBQ2hCLE1BQU0sR0FBSSxLQUFLLFNBQ2YsU0FBUzs7OztrSEFHNkUsUUFBUSxpQ0FBc0IsUUFBUSwrQ0FDN0MsUUFBUTt3QkFDbkYsUUFBUTs7Ozt3QkFHUixRQUFROzs7Ozs7OzsySUFPbUcsUUFBUSxpQ0FBc0IsUUFBUSwrQ0FDdEUsUUFBUTt3QkFDbkYsUUFBUTs7Ozt3QkFHUixRQUFROzs7Ozs7Ozs7OztDQ1paLE1BQUksZ0JBQUksQ0FBQzs7Ozt1R0FQQyxZQUFZLGNBQUcsWUFBWSxzQkFDakMsYUFBYSwwREFDYixhQUFhO2lEQUNNLFlBQVk7Ozs7OztBQ0wxQyxJQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUM7QUFDZCxBQUNBLE1BQU0sK0JBQStCLEdBQUcsOENBQThDLENBQUM7QUFDdkYsU0FBUyxrQkFBa0IsQ0FBQyxFQUFFLENBQUM7RUFDN0IsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsK0JBQStCLEdBQUcsRUFBRSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7Q0FDckY7QUFDRDs7OztFQVFPLE1BQUksU0FBUyxHQUFHLEVBQUUsRUFDZCxRQUFRLEdBQUcsSUFBSSxFQUNmLFdBQVcsR0FBRyxFQUFFLEVBQ2hCLFFBQVEsR0FBRyxDQUFDLENBQUMsR0FBRyxlQUFFO0VBQzdCLE1BQVcsT0FBTyxHQUFHLEVBQUUsRUFDWixXQUFXLEdBQUcsaU9BQWlPLEVBQy9PLElBQUksR0FBRyxJQUFJLEVBQ1gsRUFBRSxHQUFHLE9BQU8sRUFBRSxFQUNkLGtCQUFrQixHQUFHLGNBQWMsRUFDbkMsVUFBVSxHQUFHLHFCQUFTLENBQUM7OztFQUdsQyxJQUFJLGFBQWEsQ0FBQztFQUNYLE1BQUksV0FBVyxDQUFDLGNBQUUsQ0FBQztFQUcxQixJQUFJLGtCQUFrQixHQUFHLEVBQUUsQ0FBQztFQUM1QixJQUFJLHFCQUFxQixHQUFHLEVBQUUsQ0FBQzs7RUFFL0IsT0FBTyxDQUFDLElBQUk7SUFDVixxQkFBcUIsR0FBRyxrQkFBa0IsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUMvQyxxQkFBcUIsR0FBRyxxQkFBcUIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0dBQ2hHLENBQUMsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7c0RBa0Q4QixhQUFhO3dDQUUvQixXQUFXLDJCQUNqQixPQUFPLDhCQUNOLFdBQVcsOEJBQytDLFdBQVcsNkJBQWEsYUFBYTtNQUVwRyxhQUFhLGlPQUNpTSxVQUFVOzs7MkNBSTNLO1FBQzNDLHFDQUFxQyxXQUNqQyxxQkFBcUIsR0FBSSxRQUFRO21FQUVHLDBCQUEwQjs4Q0FDeEMsYUFBYTs7a0tBS25DLGtCQUFrQixHQUFJLFFBQVEsNEJBQ21CLGtCQUFrQjttRUFDL0IsMEJBQTBCOzhDQUN4QyxjQUFjLCtDQUFvQyxnQkFBZ0IsMEJBQWUsZUFBZTs7Ozs7OztBQ2hIbkksQUFDQSxNQUFNLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxZQUFZLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUM5RCxJQUFJLE1BQU0sR0FBRyxLQUFLLENBQUM7QUFDbkIsSUFBSSxRQUFRLEdBQUcsU0FBUyxDQUFDO0FBQ3pCLElBQUksS0FBSyxHQUFHLEdBQUcsQ0FBQztBQUNoQixJQUFJLE1BQU0sR0FBRyxHQUFHLENBQUM7QUFDakIsSUFBSSxTQUFTLEdBQUcsRUFBRSxDQUFDO0FBQ25CLElBQUksT0FBTyxHQUFHLE1BQU0sQ0FBQztBQUNyQixJQUFJLFdBQVcsR0FBRyw4TkFBOE4sQ0FBQzs7QUFFalAsa0JBQWtCLEdBQUc7RUFDbkIsTUFBTSxFQUFFLE1BQU07RUFDZCxRQUFRLEVBQUUsUUFBUTtFQUNsQixJQUFJLEVBQUU7SUFDSixLQUFLO0lBQ0wsTUFBTTtJQUNOLFNBQVM7SUFDVCxPQUFPO0lBQ1AsV0FBVztHQUNaLENBQUMsQ0FBQzs7QUFFTCxpQkFBaUIsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDO0FBQ3ZDLGNBQWMsR0FBRyxNQUFNLENBQUM7QUFDeEIsZ0JBQWdCLEdBQUcsUUFBUSxDQUFDO0FBQzVCLGFBQWEsR0FBRyxLQUFLLENBQUM7QUFDdEIsY0FBYyxHQUFHLE1BQU0sQ0FBQztBQUN4QixpQkFBaUIsR0FBRyxTQUFTLENBQUM7QUFDOUIsZUFBZSxHQUFHLE9BQU8sQ0FBQztBQUMxQixtQkFBbUIsR0FBRyxXQUFXOzs7Ozs7Ozs7Ozs7Ozs7QUM1QmpDLEFBQ0EsTUFBTSxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUUsWUFBWSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7QUFDOUQsSUFBSSxNQUFNLEdBQUcsS0FBSyxDQUFDO0FBQ25CLElBQUksUUFBUSxHQUFHLEtBQUssQ0FBQztBQUNyQixJQUFJLEtBQUssR0FBRyxHQUFHLENBQUM7QUFDaEIsSUFBSSxNQUFNLEdBQUcsR0FBRyxDQUFDO0FBQ2pCLElBQUksU0FBUyxHQUFHLEVBQUUsQ0FBQztBQUNuQixJQUFJLE9BQU8sR0FBRyxNQUFNLENBQUM7QUFDckIsSUFBSSxXQUFXLEdBQUcsNGNBQTRjLENBQUM7O0FBRS9kLGtCQUFrQixHQUFHO0VBQ25CLE1BQU0sRUFBRSxNQUFNO0VBQ2QsUUFBUSxFQUFFLFFBQVE7RUFDbEIsSUFBSSxFQUFFO0lBQ0osS0FBSztJQUNMLE1BQU07SUFDTixTQUFTO0lBQ1QsT0FBTztJQUNQLFdBQVc7R0FDWixDQUFDLENBQUM7O0FBRUwsYUFBYSxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUM7QUFDbkMsY0FBYyxHQUFHLE1BQU0sQ0FBQztBQUN4QixnQkFBZ0IsR0FBRyxRQUFRLENBQUM7QUFDNUIsYUFBYSxHQUFHLEtBQUssQ0FBQztBQUN0QixjQUFjLEdBQUcsTUFBTSxDQUFDO0FBQ3hCLGlCQUFpQixHQUFHLFNBQVMsQ0FBQztBQUM5QixlQUFlLEdBQUcsT0FBTyxDQUFDO0FBQzFCLG1CQUFtQixHQUFHLFdBQVc7Ozs7Ozs7Ozs7Ozs7OztBQzVCakMsQUFDQSxNQUFNLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxZQUFZLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUM5RCxJQUFJLE1BQU0sR0FBRyxLQUFLLENBQUM7QUFDbkIsSUFBSSxRQUFRLEdBQUcsTUFBTSxDQUFDO0FBQ3RCLElBQUksS0FBSyxHQUFHLEdBQUcsQ0FBQztBQUNoQixJQUFJLE1BQU0sR0FBRyxHQUFHLENBQUM7QUFDakIsSUFBSSxTQUFTLEdBQUcsRUFBRSxDQUFDO0FBQ25CLElBQUksT0FBTyxHQUFHLE1BQU0sQ0FBQztBQUNyQixJQUFJLFdBQVcsR0FBRyxrUUFBa1EsQ0FBQzs7QUFFclIsa0JBQWtCLEdBQUc7RUFDbkIsTUFBTSxFQUFFLE1BQU07RUFDZCxRQUFRLEVBQUUsUUFBUTtFQUNsQixJQUFJLEVBQUU7SUFDSixLQUFLO0lBQ0wsTUFBTTtJQUNOLFNBQVM7SUFDVCxPQUFPO0lBQ1AsV0FBVztHQUNaLENBQUMsQ0FBQzs7QUFFTCxjQUFjLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQztBQUNwQyxjQUFjLEdBQUcsTUFBTSxDQUFDO0FBQ3hCLGdCQUFnQixHQUFHLFFBQVEsQ0FBQztBQUM1QixhQUFhLEdBQUcsS0FBSyxDQUFDO0FBQ3RCLGNBQWMsR0FBRyxNQUFNLENBQUM7QUFDeEIsaUJBQWlCLEdBQUcsU0FBUyxDQUFDO0FBQzlCLGVBQWUsR0FBRyxPQUFPLENBQUM7QUFDMUIsbUJBQW1CLEdBQUcsV0FBVzs7Ozs7Ozs7Ozs7Ozs7O0FDNUJqQyxBQUNBLE1BQU0sQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFLFlBQVksRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQzlELElBQUksTUFBTSxHQUFHLEtBQUssQ0FBQztBQUNuQixJQUFJLFFBQVEsR0FBRyxZQUFZLENBQUM7QUFDNUIsSUFBSSxLQUFLLEdBQUcsR0FBRyxDQUFDO0FBQ2hCLElBQUksTUFBTSxHQUFHLEdBQUcsQ0FBQztBQUNqQixJQUFJLFNBQVMsR0FBRyxFQUFFLENBQUM7QUFDbkIsSUFBSSxPQUFPLEdBQUcsTUFBTSxDQUFDO0FBQ3JCLElBQUksV0FBVyxHQUFHLHdnQkFBd2dCLENBQUM7O0FBRTNoQixrQkFBa0IsR0FBRztFQUNuQixNQUFNLEVBQUUsTUFBTTtFQUNkLFFBQVEsRUFBRSxRQUFRO0VBQ2xCLElBQUksRUFBRTtJQUNKLEtBQUs7SUFDTCxNQUFNO0lBQ04sU0FBUztJQUNULE9BQU87SUFDUCxXQUFXO0dBQ1osQ0FBQyxDQUFDOztBQUVMLG1CQUFtQixHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUM7QUFDekMsY0FBYyxHQUFHLE1BQU0sQ0FBQztBQUN4QixnQkFBZ0IsR0FBRyxRQUFRLENBQUM7QUFDNUIsYUFBYSxHQUFHLEtBQUssQ0FBQztBQUN0QixjQUFjLEdBQUcsTUFBTSxDQUFDO0FBQ3hCLGlCQUFpQixHQUFHLFNBQVMsQ0FBQztBQUM5QixlQUFlLEdBQUcsT0FBTyxDQUFDO0FBQzFCLG1CQUFtQixHQUFHLFdBQVc7Ozs7Ozs7Ozs7Ozs7OztBQzVCakMsQUFDQSxNQUFNLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxZQUFZLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUM5RCxJQUFJLE1BQU0sR0FBRyxLQUFLLENBQUM7QUFDbkIsSUFBSSxRQUFRLEdBQUcsV0FBVyxDQUFDO0FBQzNCLElBQUksS0FBSyxHQUFHLEdBQUcsQ0FBQztBQUNoQixJQUFJLE1BQU0sR0FBRyxHQUFHLENBQUM7QUFDakIsSUFBSSxTQUFTLEdBQUcsRUFBRSxDQUFDO0FBQ25CLElBQUksT0FBTyxHQUFHLE1BQU0sQ0FBQztBQUNyQixJQUFJLFdBQVcsR0FBRyxxYkFBcWIsQ0FBQzs7QUFFeGMsa0JBQWtCLEdBQUc7RUFDbkIsTUFBTSxFQUFFLE1BQU07RUFDZCxRQUFRLEVBQUUsUUFBUTtFQUNsQixJQUFJLEVBQUU7SUFDSixLQUFLO0lBQ0wsTUFBTTtJQUNOLFNBQVM7SUFDVCxPQUFPO0lBQ1AsV0FBVztHQUNaLENBQUMsQ0FBQzs7QUFFTCxrQkFBa0IsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDO0FBQ3hDLGNBQWMsR0FBRyxNQUFNLENBQUM7QUFDeEIsZ0JBQWdCLEdBQUcsUUFBUSxDQUFDO0FBQzVCLGFBQWEsR0FBRyxLQUFLLENBQUM7QUFDdEIsY0FBYyxHQUFHLE1BQU0sQ0FBQztBQUN4QixpQkFBaUIsR0FBRyxTQUFTLENBQUM7QUFDOUIsZUFBZSxHQUFHLE9BQU8sQ0FBQztBQUMxQixtQkFBbUIsR0FBRyxXQUFXOzs7Ozs7Ozs7Ozs7Ozs7QUM1QmpDLEFBQ0EsTUFBTSxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUUsWUFBWSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7QUFDOUQsSUFBSSxNQUFNLEdBQUcsS0FBSyxDQUFDO0FBQ25CLElBQUksUUFBUSxHQUFHLGdCQUFnQixDQUFDO0FBQ2hDLElBQUksS0FBSyxHQUFHLEdBQUcsQ0FBQztBQUNoQixJQUFJLE1BQU0sR0FBRyxHQUFHLENBQUM7QUFDakIsSUFBSSxTQUFTLEdBQUcsRUFBRSxDQUFDO0FBQ25CLElBQUksT0FBTyxHQUFHLE1BQU0sQ0FBQztBQUNyQixJQUFJLFdBQVcsR0FBRyx5aEJBQXloQixDQUFDOztBQUU1aUIsa0JBQWtCLEdBQUc7RUFDbkIsTUFBTSxFQUFFLE1BQU07RUFDZCxRQUFRLEVBQUUsUUFBUTtFQUNsQixJQUFJLEVBQUU7SUFDSixLQUFLO0lBQ0wsTUFBTTtJQUNOLFNBQVM7SUFDVCxPQUFPO0lBQ1AsV0FBVztHQUNaLENBQUMsQ0FBQzs7QUFFTCx1QkFBdUIsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDO0FBQzdDLGNBQWMsR0FBRyxNQUFNLENBQUM7QUFDeEIsZ0JBQWdCLEdBQUcsUUFBUSxDQUFDO0FBQzVCLGFBQWEsR0FBRyxLQUFLLENBQUM7QUFDdEIsY0FBYyxHQUFHLE1BQU0sQ0FBQztBQUN4QixpQkFBaUIsR0FBRyxTQUFTLENBQUM7QUFDOUIsZUFBZSxHQUFHLE9BQU8sQ0FBQztBQUMxQixtQkFBbUIsR0FBRyxXQUFXOzs7Ozs7Ozs7Ozs7Ozs7QUM1QmpDLEFBQ0EsTUFBTSxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUUsWUFBWSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7QUFDOUQsSUFBSSxNQUFNLEdBQUcsS0FBSyxDQUFDO0FBQ25CLElBQUksUUFBUSxHQUFHLFNBQVMsQ0FBQztBQUN6QixJQUFJLEtBQUssR0FBRyxHQUFHLENBQUM7QUFDaEIsSUFBSSxNQUFNLEdBQUcsR0FBRyxDQUFDO0FBQ2pCLElBQUksU0FBUyxHQUFHLEVBQUUsQ0FBQztBQUNuQixJQUFJLE9BQU8sR0FBRyxNQUFNLENBQUM7QUFDckIsSUFBSSxXQUFXLEdBQUcsbXRCQUFtdEIsQ0FBQzs7QUFFdHVCLGtCQUFrQixHQUFHO0VBQ25CLE1BQU0sRUFBRSxNQUFNO0VBQ2QsUUFBUSxFQUFFLFFBQVE7RUFDbEIsSUFBSSxFQUFFO0lBQ0osS0FBSztJQUNMLE1BQU07SUFDTixTQUFTO0lBQ1QsT0FBTztJQUNQLFdBQVc7R0FDWixDQUFDLENBQUM7O0FBRUwsaUJBQWlCLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQztBQUN2QyxjQUFjLEdBQUcsTUFBTSxDQUFDO0FBQ3hCLGdCQUFnQixHQUFHLFFBQVEsQ0FBQztBQUM1QixhQUFhLEdBQUcsS0FBSyxDQUFDO0FBQ3RCLGNBQWMsR0FBRyxNQUFNLENBQUM7QUFDeEIsaUJBQWlCLEdBQUcsU0FBUyxDQUFDO0FBQzlCLGVBQWUsR0FBRyxPQUFPLENBQUM7QUFDMUIsbUJBQW1CLEdBQUcsV0FBVzs7Ozs7Ozs7Ozs7Ozs7O0FDNUJqQyxBQUNBLE1BQU0sQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFLFlBQVksRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQzlELElBQUksTUFBTSxHQUFHLEtBQUssQ0FBQztBQUNuQixJQUFJLFFBQVEsR0FBRyxhQUFhLENBQUM7QUFDN0IsSUFBSSxLQUFLLEdBQUcsR0FBRyxDQUFDO0FBQ2hCLElBQUksTUFBTSxHQUFHLEdBQUcsQ0FBQztBQUNqQixJQUFJLFNBQVMsR0FBRyxFQUFFLENBQUM7QUFDbkIsSUFBSSxPQUFPLEdBQUcsTUFBTSxDQUFDO0FBQ3JCLElBQUksV0FBVyxHQUFHLDJsQkFBMmxCLENBQUM7O0FBRTltQixrQkFBa0IsR0FBRztFQUNuQixNQUFNLEVBQUUsTUFBTTtFQUNkLFFBQVEsRUFBRSxRQUFRO0VBQ2xCLElBQUksRUFBRTtJQUNKLEtBQUs7SUFDTCxNQUFNO0lBQ04sU0FBUztJQUNULE9BQU87SUFDUCxXQUFXO0dBQ1osQ0FBQyxDQUFDOztBQUVMLG9CQUFvQixHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUM7QUFDMUMsY0FBYyxHQUFHLE1BQU0sQ0FBQztBQUN4QixnQkFBZ0IsR0FBRyxRQUFRLENBQUM7QUFDNUIsYUFBYSxHQUFHLEtBQUssQ0FBQztBQUN0QixjQUFjLEdBQUcsTUFBTSxDQUFDO0FBQ3hCLGlCQUFpQixHQUFHLFNBQVMsQ0FBQztBQUM5QixlQUFlLEdBQUcsT0FBTyxDQUFDO0FBQzFCLG1CQUFtQixHQUFHLFdBQVc7Ozs7Ozs7Ozs7Ozs7OztBQzVCakMsQUFDQSxNQUFNLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxZQUFZLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUM5RCxJQUFJLE1BQU0sR0FBRyxLQUFLLENBQUM7QUFDbkIsSUFBSSxRQUFRLEdBQUcsTUFBTSxDQUFDO0FBQ3RCLElBQUksS0FBSyxHQUFHLEdBQUcsQ0FBQztBQUNoQixJQUFJLE1BQU0sR0FBRyxHQUFHLENBQUM7QUFDakIsSUFBSSxTQUFTLEdBQUcsRUFBRSxDQUFDO0FBQ25CLElBQUksT0FBTyxHQUFHLE1BQU0sQ0FBQztBQUNyQixJQUFJLFdBQVcsR0FBRyxrUUFBa1EsQ0FBQzs7QUFFclIsa0JBQWtCLEdBQUc7RUFDbkIsTUFBTSxFQUFFLE1BQU07RUFDZCxRQUFRLEVBQUUsUUFBUTtFQUNsQixJQUFJLEVBQUU7SUFDSixLQUFLO0lBQ0wsTUFBTTtJQUNOLFNBQVM7SUFDVCxPQUFPO0lBQ1AsV0FBVztHQUNaLENBQUMsQ0FBQzs7QUFFTCxjQUFjLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQztBQUNwQyxjQUFjLEdBQUcsTUFBTSxDQUFDO0FBQ3hCLGdCQUFnQixHQUFHLFFBQVEsQ0FBQztBQUM1QixhQUFhLEdBQUcsS0FBSyxDQUFDO0FBQ3RCLGNBQWMsR0FBRyxNQUFNLENBQUM7QUFDeEIsaUJBQWlCLEdBQUcsU0FBUyxDQUFDO0FBQzlCLGVBQWUsR0FBRyxPQUFPLENBQUM7QUFDMUIsbUJBQW1CLEdBQUcsV0FBVzs7Ozs7Ozs7Ozs7Ozs7O0FDNUJqQyxBQUNBLE1BQU0sQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFLFlBQVksRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQzlELElBQUksTUFBTSxHQUFHLEtBQUssQ0FBQztBQUNuQixJQUFJLFFBQVEsR0FBRyxjQUFjLENBQUM7QUFDOUIsSUFBSSxLQUFLLEdBQUcsR0FBRyxDQUFDO0FBQ2hCLElBQUksTUFBTSxHQUFHLEdBQUcsQ0FBQztBQUNqQixJQUFJLFNBQVMsR0FBRyxFQUFFLENBQUM7QUFDbkIsSUFBSSxPQUFPLEdBQUcsTUFBTSxDQUFDO0FBQ3JCLElBQUksV0FBVyxHQUFHLDZZQUE2WSxDQUFDOztBQUVoYSxrQkFBa0IsR0FBRztFQUNuQixNQUFNLEVBQUUsTUFBTTtFQUNkLFFBQVEsRUFBRSxRQUFRO0VBQ2xCLElBQUksRUFBRTtJQUNKLEtBQUs7SUFDTCxNQUFNO0lBQ04sU0FBUztJQUNULE9BQU87SUFDUCxXQUFXO0dBQ1osQ0FBQyxDQUFDOztBQUVMLHFCQUFxQixHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUM7QUFDM0MsY0FBYyxHQUFHLE1BQU0sQ0FBQztBQUN4QixnQkFBZ0IsR0FBRyxRQUFRLENBQUM7QUFDNUIsYUFBYSxHQUFHLEtBQUssQ0FBQztBQUN0QixjQUFjLEdBQUcsTUFBTSxDQUFDO0FBQ3hCLGlCQUFpQixHQUFHLFNBQVMsQ0FBQztBQUM5QixlQUFlLEdBQUcsT0FBTyxDQUFDO0FBQzFCLG1CQUFtQixHQUFHLFdBQVc7Ozs7Ozs7Ozs7Ozs7OztBQzVCakMsQUFDQSxNQUFNLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxZQUFZLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUM5RCxJQUFJLE1BQU0sR0FBRyxLQUFLLENBQUM7QUFDbkIsSUFBSSxRQUFRLEdBQUcsVUFBVSxDQUFDO0FBQzFCLElBQUksS0FBSyxHQUFHLEdBQUcsQ0FBQztBQUNoQixJQUFJLE1BQU0sR0FBRyxHQUFHLENBQUM7QUFDakIsSUFBSSxTQUFTLEdBQUcsRUFBRSxDQUFDO0FBQ25CLElBQUksT0FBTyxHQUFHLE1BQU0sQ0FBQztBQUNyQixJQUFJLFdBQVcsR0FBRyxrS0FBa0ssQ0FBQzs7QUFFckwsa0JBQWtCLEdBQUc7RUFDbkIsTUFBTSxFQUFFLE1BQU07RUFDZCxRQUFRLEVBQUUsUUFBUTtFQUNsQixJQUFJLEVBQUU7SUFDSixLQUFLO0lBQ0wsTUFBTTtJQUNOLFNBQVM7SUFDVCxPQUFPO0lBQ1AsV0FBVztHQUNaLENBQUMsQ0FBQzs7QUFFTCxpQkFBaUIsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDO0FBQ3ZDLGNBQWMsR0FBRyxNQUFNLENBQUM7QUFDeEIsZ0JBQWdCLEdBQUcsUUFBUSxDQUFDO0FBQzVCLGFBQWEsR0FBRyxLQUFLLENBQUM7QUFDdEIsY0FBYyxHQUFHLE1BQU0sQ0FBQztBQUN4QixpQkFBaUIsR0FBRyxTQUFTLENBQUM7QUFDOUIsZUFBZSxHQUFHLE9BQU8sQ0FBQztBQUMxQixtQkFBbUIsR0FBRyxXQUFXOzs7Ozs7Ozs7Ozs7Ozs7QUM1QmpDLEFBQ0EsTUFBTSxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUUsWUFBWSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7QUFDOUQsSUFBSSxNQUFNLEdBQUcsS0FBSyxDQUFDO0FBQ25CLElBQUksUUFBUSxHQUFHLFlBQVksQ0FBQztBQUM1QixJQUFJLEtBQUssR0FBRyxHQUFHLENBQUM7QUFDaEIsSUFBSSxNQUFNLEdBQUcsR0FBRyxDQUFDO0FBQ2pCLElBQUksU0FBUyxHQUFHLEVBQUUsQ0FBQztBQUNuQixJQUFJLE9BQU8sR0FBRyxNQUFNLENBQUM7QUFDckIsSUFBSSxXQUFXLEdBQUcseUhBQXlILENBQUM7O0FBRTVJLGtCQUFrQixHQUFHO0VBQ25CLE1BQU0sRUFBRSxNQUFNO0VBQ2QsUUFBUSxFQUFFLFFBQVE7RUFDbEIsSUFBSSxFQUFFO0lBQ0osS0FBSztJQUNMLE1BQU07SUFDTixTQUFTO0lBQ1QsT0FBTztJQUNQLFdBQVc7R0FDWixDQUFDLENBQUM7O0FBRUwsbUJBQW1CLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQztBQUN6QyxjQUFjLEdBQUcsTUFBTSxDQUFDO0FBQ3hCLGdCQUFnQixHQUFHLFFBQVEsQ0FBQztBQUM1QixhQUFhLEdBQUcsS0FBSyxDQUFDO0FBQ3RCLGNBQWMsR0FBRyxNQUFNLENBQUM7QUFDeEIsaUJBQWlCLEdBQUcsU0FBUyxDQUFDO0FBQzlCLGVBQWUsR0FBRyxPQUFPLENBQUM7QUFDMUIsbUJBQW1CLEdBQUcsV0FBVzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDcVNqQyxJQUFJLEtBQUssR0FBRztFQUNWLFVBQVUsRUFBRSxnQkFBZ0I7RUFDNUIsTUFBTSxFQUFFLElBQUk7RUFDYjtBQUlELElBQUksUUFBUSxHQUFHLEdBQUcsQ0FBQztBQUNuQixJQUFJLE9BQU8sR0FBRyxHQUFHLENBQUM7QUFDbEIsSUFBSSxtQkFBbUIsR0FBRyxJQUFJLENBQUM7O0FBRS9CLElBQUksOEJBQThCLEdBQUcsRUFBRSxDQUFDO0FBQ3hDLElBQUksNkJBQTZCLEdBQUcsQ0FBQyxDQUFDOztBQWV0QyxTQUFTLFlBQVksRUFBRTtFQUNyQixHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksSUFBSTtJQUN2QyxPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztFQUNyQyxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksSUFBSTtJQUN4QyxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztFQUN2QyxPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO0VBQ3hFLElBQUksVUFBVSxHQUFHO0lBQ2YsVUFBVSxFQUFFLEtBQUssQ0FBQyxRQUFRO0lBQzFCLE1BQU0sRUFBRSxLQUFLLENBQUMsSUFBSTtHQUNuQixDQUFDO0VBQ0YsR0FBRyxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUUsVUFBVSxDQUFDLFFBQVEsRUFBRSxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sSUFBSTtJQUM5RyxHQUFHLE9BQU8sQ0FBQztNQUNULFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUUsR0FBRyxPQUFPLEVBQUM7TUFDNUYsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztNQUNyQixtQkFBbUIsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLG1CQUFtQixFQUFFLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLG1CQUFtQixDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDO01BQ3BILE9BQU8sQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsQ0FBQztNQUNqQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksSUFBSSxDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQztLQUM1QztHQUNGLENBQUMsQ0FBQztDQUNKOztBQUVELFNBQVMsbUNBQW1DLEVBQUU7RUFDNUMsNkJBQTZCLEdBQUcsOEJBQThCLENBQUMsTUFBTSxDQUFDO0VBQ3RFLEdBQUcsQ0FBQyw4QkFBOEIsQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLElBQUk7SUFDaEYsR0FBRyxPQUFPLENBQUM7TUFDVCw4QkFBOEIsR0FBRyxDQUFDLEdBQUcsOEJBQThCLEVBQUUsR0FBRyxPQUFPLENBQUMsQ0FBQztLQUNsRjtHQUNGLENBQUMsQ0FBQztDQUNKOztBQUVELFlBQVksRUFBRSxDQUFDO0FBQ2YsbUNBQW1DLEVBQUUsQ0FBQzs7QUFFdEMsU0FBUyxrQkFBa0IsQ0FBQyxNQUFNLEVBQUU7RUFDbEMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEdBQUcsWUFBWSxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUM7Q0FDckQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzthQXZYd0Msa0JBQWtCOzswQkFBbEIsa0JBQWtCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O1dBd0JoRCxxQ0FBcUM7dUJBRXJDLDBEQUEwRDs7Ozs7ZUFLeEQsOEJBQThCLEdBQUksQ0FBQzs7a0VBR00sV0FBVztpR0FDYSwwQkFBMEI7d0VBQ2xELGFBQWEsaUJBQUksYUFBYTs7cUVBRTNCLFdBQVcsa0JBQU8sZ0JBQWdCLG1CQUFRLG9CQUFvQjs7Ozs7O2tFQVFqRSxvQ0FBb0MscUNBQW9CLCtCQUErQjs7OzZCQUc1SCxpQkFBaUI7OztrRUFHb0IsZ0JBQWdCO2lHQUNRLCtCQUErQjt3RUFDdkQsa0JBQWtCLGlCQUFJLGtCQUFrQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztXQW9CbkYscUNBQXFDO3VCQUVyQyx1Q0FBdUM7Ozs7Ozs7OzsySUFVckIsZ0NBQWdDO2lCQUU1QyxrQ0FBa0MsT0FDaEMsVUFBVSxzRUFDQ0MsYUFBVyxxR0FFWEMsV0FBUztnRkFHYkMsV0FBUzs7Ozs7b0pBTU4sOEJBQThCO2lCQUUxQyxnQ0FBZ0MsT0FDOUIsVUFBVSxzRUFDQ0YsYUFBVyxxR0FFWEMsV0FBUztnRkFHYkUsUUFBTTs7Ozs7b0pBTUgsZ0NBQWdDO2lCQUU1QyxrQ0FBa0MsT0FDaEMsVUFBVSxzRUFDQ0gsYUFBVyxxR0FFWEMsV0FBUztnRkFHYkcsUUFBTTs7Ozs7b0pBTUgsc0NBQXNDO2lCQUVsRCx3Q0FBd0MsT0FDdEMsVUFBVSxzRUFDQ0osYUFBVyxxR0FFWEMsV0FBUztnRkFHYkksYUFBVzs7Ozs7c0tBTVIsc0NBQXNDO2lCQUVsRCx3Q0FBd0MsT0FDdEMsVUFBVSxzRUFDQ0wsYUFBVyxxR0FFWEMsV0FBUztnRkFHYkssWUFBVTs7Ozs7bUtBTVAsMENBQTBDO2lCQUV0RCw0Q0FBNEMsT0FDMUMsVUFBVSxzRUFDQ04sYUFBVyxxR0FFWEMsV0FBUzs7a0ZBSVhFLFFBQU07O1NBQ05JLGNBQVk7Ozs7Ozs7O21LQU9YLDBDQUEwQztpQkFFdEQsNENBQTRDLE9BQzFDLFVBQVUsa0dBQ3VFUCxxQkFBbUIsY0FBR0EscUJBQW1CO2tFQUM3RkEscUJBQW1COzJIQUdpQ0MsbUJBQWlCLGNBQUdBLG1CQUFpQjtrRUFDekZBLG1CQUFpQjs7aUJBSWhELDRDQUE0QyxPQUMxQyxVQUFVLHNFQUNDRCxhQUFXLHFHQUVYQyxXQUFTO2dGQUdiTyxpQkFBZTs7Ozs7O2dGQU1mQyxXQUFTOzs7Ozs7OztpQkFRcEIsK0JBQStCLEdBQUksUUFBUTs7eUJBRzdDLEdBQUc7Ozt3RkFHNEQsV0FBVzsrR0FDSywwQkFBMEI7Ozs7eURBSXpFLFdBQVc7a0RBQ2xCLGFBQWE7OzthQUUxQixRQUFROzs7OzthQUVOLFFBQVE7Ozs7OztpQkFJbEIsdUJBQXVCLGVBQ3pCLGtDQUFrQzs7O2lCQUloQyw2QkFBNkIsZUFDL0IsOERBQThEOzs7eUJBSWhFLGdFQUFnRTs7O3lCQUdoRSxzRUFBc0U7OztpQkFHbEUscUNBQXFDLGVBQ3ZDLDhDQUE4Qzs7O2lCQUk1QyxpQ0FBaUMsZUFDbkMsa0RBQWtEOzs7aUJBSWhELGlDQUFpQyxpQkFDakMsNENBQTRDOzs7aUJBSzVDLHFCQUFxQixjQUVoQiw0QkFBNEIsZUFDbkMsZ0RBQWdEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDalIvRCxNQUFNLGdCQUFnQixHQUFHLEVBQUUsQ0FBQztBQUM1QixBQVVBOzs7OztBQUtBLFNBQVMsUUFBUSxDQUFDLEtBQUssRUFBRSxLQUFLLEdBQUcsSUFBSSxFQUFFO0lBQ25DLElBQUksSUFBSSxDQUFDO0lBQ1QsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLFNBQVMsR0FBRyxDQUFDLFNBQVMsRUFBRTtRQUNwQixJQUFJLGNBQWMsQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLEVBQUU7WUFDbEMsS0FBSyxHQUFHLFNBQVMsQ0FBQztZQUNsQixJQUFJLElBQUksRUFBRTtnQkFDTixNQUFNLFNBQVMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQztnQkFDM0MsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRTtvQkFDNUMsTUFBTSxDQUFDLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUN6QixDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztvQkFDUCxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO2lCQUNuQztnQkFDRCxJQUFJLFNBQVMsRUFBRTtvQkFDWCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsZ0JBQWdCLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUU7d0JBQ2pELGdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO3FCQUNuRDtvQkFDRCxnQkFBZ0IsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO2lCQUMvQjthQUNKO1NBQ0o7S0FDSjtJQUNELFNBQVMsTUFBTSxDQUFDLEVBQUUsRUFBRTtRQUNoQixHQUFHLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7S0FDbEI7SUFDRCxTQUFTLFNBQVMsQ0FBQyxHQUFHLEVBQUUsVUFBVSxHQUFHLElBQUksRUFBRTtRQUN2QyxNQUFNLFVBQVUsR0FBRyxDQUFDLEdBQUcsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUNyQyxXQUFXLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzdCLElBQUksV0FBVyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDMUIsSUFBSSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUM7U0FDN0I7UUFDRCxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDWCxPQUFPLE1BQU07WUFDVCxNQUFNLEtBQUssR0FBRyxXQUFXLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQzlDLElBQUksS0FBSyxLQUFLLENBQUMsQ0FBQyxFQUFFO2dCQUNkLFdBQVcsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO2FBQ2hDO1lBQ0QsSUFBSSxXQUFXLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtnQkFDMUIsSUFBSSxFQUFFLENBQUM7Z0JBQ1AsSUFBSSxHQUFHLElBQUksQ0FBQzthQUNmO1NBQ0osQ0FBQztLQUNMO0lBQ0QsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLENBQUM7Q0FDckM7OztBQy9ERCxBQUNBLE1BQU0sQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFLFlBQVksRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQzlELElBQUksTUFBTSxHQUFHLEtBQUssQ0FBQztBQUNuQixJQUFJLFFBQVEsR0FBRyxhQUFhLENBQUM7QUFDN0IsSUFBSSxLQUFLLEdBQUcsR0FBRyxDQUFDO0FBQ2hCLElBQUksTUFBTSxHQUFHLEdBQUcsQ0FBQztBQUNqQixJQUFJLFNBQVMsR0FBRyxFQUFFLENBQUM7QUFDbkIsSUFBSSxPQUFPLEdBQUcsTUFBTSxDQUFDO0FBQ3JCLElBQUksV0FBVyxHQUFHLG8wQkFBbzBCLENBQUM7O0FBRXYxQixrQkFBa0IsR0FBRztFQUNuQixNQUFNLEVBQUUsTUFBTTtFQUNkLFFBQVEsRUFBRSxRQUFRO0VBQ2xCLElBQUksRUFBRTtJQUNKLEtBQUs7SUFDTCxNQUFNO0lBQ04sU0FBUztJQUNULE9BQU87SUFDUCxXQUFXO0dBQ1osQ0FBQyxDQUFDOztBQUVMLG9CQUFvQixHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUM7QUFDMUMsY0FBYyxHQUFHLE1BQU0sQ0FBQztBQUN4QixnQkFBZ0IsR0FBRyxRQUFRLENBQUM7QUFDNUIsYUFBYSxHQUFHLEtBQUssQ0FBQztBQUN0QixjQUFjLEdBQUcsTUFBTSxDQUFDO0FBQ3hCLGlCQUFpQixHQUFHLFNBQVMsQ0FBQztBQUM5QixlQUFlLEdBQUcsT0FBTyxDQUFDO0FBQzFCLG1CQUFtQixHQUFHLFdBQVc7Ozs7Ozs7Ozs7Ozs7OztBQzVCakMsQUFDQSxNQUFNLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxZQUFZLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUM5RCxJQUFJLE1BQU0sR0FBRyxLQUFLLENBQUM7QUFDbkIsSUFBSSxRQUFRLEdBQUcsY0FBYyxDQUFDO0FBQzlCLElBQUksS0FBSyxHQUFHLEdBQUcsQ0FBQztBQUNoQixJQUFJLE1BQU0sR0FBRyxHQUFHLENBQUM7QUFDakIsSUFBSSxTQUFTLEdBQUcsRUFBRSxDQUFDO0FBQ25CLElBQUksT0FBTyxHQUFHLE1BQU0sQ0FBQztBQUNyQixJQUFJLFdBQVcsR0FBRyxxYkFBcWIsQ0FBQzs7QUFFeGMsa0JBQWtCLEdBQUc7RUFDbkIsTUFBTSxFQUFFLE1BQU07RUFDZCxRQUFRLEVBQUUsUUFBUTtFQUNsQixJQUFJLEVBQUU7SUFDSixLQUFLO0lBQ0wsTUFBTTtJQUNOLFNBQVM7SUFDVCxPQUFPO0lBQ1AsV0FBVztHQUNaLENBQUMsQ0FBQzs7QUFFTCxxQkFBcUIsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDO0FBQzNDLGNBQWMsR0FBRyxNQUFNLENBQUM7QUFDeEIsZ0JBQWdCLEdBQUcsUUFBUSxDQUFDO0FBQzVCLGFBQWEsR0FBRyxLQUFLLENBQUM7QUFDdEIsY0FBYyxHQUFHLE1BQU0sQ0FBQztBQUN4QixpQkFBaUIsR0FBRyxTQUFTLENBQUM7QUFDOUIsZUFBZSxHQUFHLE9BQU8sQ0FBQztBQUMxQixtQkFBbUIsR0FBRyxXQUFXOzs7Ozs7Ozs7Ozs7Ozs7QUM1QmpDLEFBQ0EsTUFBTSxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUUsWUFBWSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7QUFDOUQsSUFBSSxNQUFNLEdBQUcsS0FBSyxDQUFDO0FBQ25CLElBQUksUUFBUSxHQUFHLEtBQUssQ0FBQztBQUNyQixJQUFJLEtBQUssR0FBRyxHQUFHLENBQUM7QUFDaEIsSUFBSSxNQUFNLEdBQUcsR0FBRyxDQUFDO0FBQ2pCLElBQUksU0FBUyxHQUFHLEVBQUUsQ0FBQztBQUNuQixJQUFJLE9BQU8sR0FBRyxNQUFNLENBQUM7QUFDckIsSUFBSSxXQUFXLEdBQUcsNmtCQUE2a0IsQ0FBQzs7QUFFaG1CLGtCQUFrQixHQUFHO0VBQ25CLE1BQU0sRUFBRSxNQUFNO0VBQ2QsUUFBUSxFQUFFLFFBQVE7RUFDbEIsSUFBSSxFQUFFO0lBQ0osS0FBSztJQUNMLE1BQU07SUFDTixTQUFTO0lBQ1QsT0FBTztJQUNQLFdBQVc7R0FDWixDQUFDLENBQUM7O0FBRUwsYUFBYSxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUM7QUFDbkMsY0FBYyxHQUFHLE1BQU0sQ0FBQztBQUN4QixnQkFBZ0IsR0FBRyxRQUFRLENBQUM7QUFDNUIsYUFBYSxHQUFHLEtBQUssQ0FBQztBQUN0QixjQUFjLEdBQUcsTUFBTSxDQUFDO0FBQ3hCLGlCQUFpQixHQUFHLFNBQVMsQ0FBQztBQUM5QixlQUFlLEdBQUcsT0FBTyxDQUFDO0FBQzFCLG1CQUFtQixHQUFHLFdBQVc7Ozs7Ozs7Ozs7Ozs7OztBQzVCakMsQUFDQSxNQUFNLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxZQUFZLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUM5RCxJQUFJLE1BQU0sR0FBRyxLQUFLLENBQUM7QUFDbkIsSUFBSSxRQUFRLEdBQUcsTUFBTSxDQUFDO0FBQ3RCLElBQUksS0FBSyxHQUFHLEdBQUcsQ0FBQztBQUNoQixJQUFJLE1BQU0sR0FBRyxHQUFHLENBQUM7QUFDakIsSUFBSSxTQUFTLEdBQUcsRUFBRSxDQUFDO0FBQ25CLElBQUksT0FBTyxHQUFHLE1BQU0sQ0FBQztBQUNyQixJQUFJLFdBQVcsR0FBRyxpVEFBaVQsQ0FBQzs7QUFFcFUsa0JBQWtCLEdBQUc7RUFDbkIsTUFBTSxFQUFFLE1BQU07RUFDZCxRQUFRLEVBQUUsUUFBUTtFQUNsQixJQUFJLEVBQUU7SUFDSixLQUFLO0lBQ0wsTUFBTTtJQUNOLFNBQVM7SUFDVCxPQUFPO0lBQ1AsV0FBVztHQUNaLENBQUMsQ0FBQzs7QUFFTCxjQUFjLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQztBQUNwQyxjQUFjLEdBQUcsTUFBTSxDQUFDO0FBQ3hCLGdCQUFnQixHQUFHLFFBQVEsQ0FBQztBQUM1QixhQUFhLEdBQUcsS0FBSyxDQUFDO0FBQ3RCLGNBQWMsR0FBRyxNQUFNLENBQUM7QUFDeEIsaUJBQWlCLEdBQUcsU0FBUyxDQUFDO0FBQzlCLGVBQWUsR0FBRyxPQUFPLENBQUM7QUFDMUIsbUJBQW1CLEdBQUcsV0FBVzs7Ozs7Ozs7Ozs7Ozs7O0FDNUJqQyxBQUNBLE1BQU0sQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFLFlBQVksRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQzlELElBQUksTUFBTSxHQUFHLEtBQUssQ0FBQztBQUNuQixJQUFJLFFBQVEsR0FBRyxtQkFBbUIsQ0FBQztBQUNuQyxJQUFJLEtBQUssR0FBRyxHQUFHLENBQUM7QUFDaEIsSUFBSSxNQUFNLEdBQUcsR0FBRyxDQUFDO0FBQ2pCLElBQUksU0FBUyxHQUFHLEVBQUUsQ0FBQztBQUNuQixJQUFJLE9BQU8sR0FBRyxNQUFNLENBQUM7QUFDckIsSUFBSSxXQUFXLEdBQUcseVZBQXlWLENBQUM7O0FBRTVXLGtCQUFrQixHQUFHO0VBQ25CLE1BQU0sRUFBRSxNQUFNO0VBQ2QsUUFBUSxFQUFFLFFBQVE7RUFDbEIsSUFBSSxFQUFFO0lBQ0osS0FBSztJQUNMLE1BQU07SUFDTixTQUFTO0lBQ1QsT0FBTztJQUNQLFdBQVc7R0FDWixDQUFDLENBQUM7O0FBRUwseUJBQXlCLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQztBQUMvQyxjQUFjLEdBQUcsTUFBTSxDQUFDO0FBQ3hCLGdCQUFnQixHQUFHLFFBQVEsQ0FBQztBQUM1QixhQUFhLEdBQUcsS0FBSyxDQUFDO0FBQ3RCLGNBQWMsR0FBRyxNQUFNLENBQUM7QUFDeEIsaUJBQWlCLEdBQUcsU0FBUyxDQUFDO0FBQzlCLGVBQWUsR0FBRyxPQUFPLENBQUM7QUFDMUIsbUJBQW1CLEdBQUcsV0FBVzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDc0cvQixJQUFJLFVBQVUsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDN0IsSUFBSSxnQkFBZ0IsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7O0NBRXBDLFNBQVMsd0JBQXdCLENBQUMsSUFBSSxFQUFFO0VBQ3ZDLElBQUksQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDNUIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDO0VBQ3ZDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQ3JGOzs7Ozs7O0FBa0JLLE1BQUksSUFBSSxFQUNKLG9CQUFRLENBQUM7Ozs7QUFJcEIsSUFBSSxTQUFTLENBQUMsQ0FBQztFQUNiLFNBQVMsQ0FBQyxDQUFDO0VBQ1gsWUFBWSxDQUFDLElBQUksQ0FBQzs7QUFFcEIsSUFBSSxLQUFLLEdBQUcsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3BELElBQUksRUFBRSxHQUFHLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNuRCxJQUFJLElBQUksR0FBRyxLQUFLLENBQUM7O0FBRVYsTUFBSSxNQUFNLEdBQUcsZUFBRyxDQUFDO0FBQ3hCLElBQUksS0FBSyxHQUFHLEdBQUcsQ0FBQzs7QUFFaEIsSUFBSSxLQUFLLEdBQUcsRUFBRSxDQUFDO0FBQ2YsSUFBSSxXQUFXLEdBQUcsRUFBRSxDQUFDO0FBQ3JCLElBQUksU0FBUyxHQUFHLElBQUksQ0FBQzs7QUFJckIsSUFBSSxHQUFHLENBQUM7O0FBRVIsSUFBSSxZQUFZLEdBQUcsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQztBQUNyQyxJQUFJLGNBQWMsR0FBRyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDO0FBQ3pDLFNBQVMsTUFBTSxDQUFDLENBQUMsRUFBRTtFQUNqQixPQUFPLEtBQUssSUFBSSxDQUFDLEdBQUcsY0FBYyxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztDQUNsRDtBQUNELFNBQVMsT0FBTyxDQUFDLENBQUMsRUFBRTtFQUNsQixPQUFPLENBQUMsR0FBRyxLQUFLLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxjQUFjO0NBQy9DO0FBQ0QsU0FBUyxNQUFNLENBQUMsQ0FBQyxFQUFFO0VBQ2pCLE9BQU8sTUFBTSxJQUFJLFdBQVcsR0FBRyxDQUFDLENBQUMsR0FBRyxXQUFXLENBQUM7Q0FDakQ7QUFDRCxBQUdBLFNBQVMsV0FBVyxHQUFHO0VBQ3JCLElBQUksSUFBSSxJQUFJLElBQUksV0FBVyxDQUFDO0lBQzFCLElBQUksQ0FBQyxJQUFJO01BQ1AsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7TUFDdEMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1IsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7T0FDdkMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO01BQ1YsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRztRQUNqQixDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7T0FDakcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO01BQ1YsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztHQUMxQztFQUNELFdBQVcsR0FBRyxXQUFXLENBQUM7Q0FDM0I7QUFDRCxJQUFJLGVBQWUsR0FBRyxXQUFXLENBQUM7QUFDbEMsSUFBSSxxQkFBcUIsR0FBRyxpQkFBaUIsQ0FBQzs7QUFPOUMsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDOztBQUVqQixPQUFPLENBQUMsV0FBVztDQUNsQixLQUFLLEdBQUcsR0FBRyxDQUFDLHFCQUFxQixFQUFFLENBQUMsS0FBSyxDQUFDO0VBQ3pDLEtBQUssR0FBRyxNQUFNLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztFQUMxQyxHQUFHLFFBQVEsSUFBSSxJQUFJO0lBQ2pCLE9BQU87RUFDVCxJQUFJLENBQUMsY0FBYyxFQUFFLHVCQUF1QixDQUFDLEdBQUcsTUFBTSxHQUFHLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0VBQzFGLFNBQVMsR0FBRyxjQUFjLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUNwRCxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxHQUFHLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDOUUsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxHQUFHLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUMxRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDUixJQUFJLFNBQVMsR0FBRyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSTtJQUN0QyxNQUFNLHVCQUF1QixDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLHVCQUF1QixDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztJQUN6RixHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLEVBQUUsT0FBTyxJQUFJLENBQUM7U0FDekIsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLE9BQU8sdUJBQXVCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQzVDLE9BQU8sSUFBSSxDQUFDO0dBQ2xCLENBQUMsQ0FBQztFQUNILGNBQWMsR0FBRyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDbEUsSUFBSSxJQUFJLEdBQUcsRUFBRSxFQUFFLGlCQUFpQixHQUFHLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0VBQ2pHLElBQUksSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3pFLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsY0FBYyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUM7SUFDbEUsaUJBQWlCLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0dBQzVCO0VBQ0QsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsY0FBYyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQzlELEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzdDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7R0FDM0I7RUFDRCxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsaUJBQWlCLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO0lBQy9DLGNBQWMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7Q0FFM0YsR0FBRyxDQUFDLFdBQVcsR0FBRyxTQUFTLENBQUMsQ0FBQztFQUM1QixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxHQUFHLEdBQUcsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLENBQUM7SUFDL0MsQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLEdBQUcsR0FBRyxDQUFDLHFCQUFxQixFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzlDLFNBQVMsR0FBRyxDQUFDLENBQUM7SUFDZCxTQUFTLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSSxXQUFXLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzdCLElBQUksV0FBVyxHQUFHLGNBQWMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxXQUFXLENBQUM7UUFDaEUsVUFBVSxHQUFHLGFBQWEsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxXQUFXLENBQUMsQ0FBQztJQUN6RSxJQUFJLGFBQWEsQ0FBQztJQUNsQixHQUFHLFdBQVcsSUFBSSxDQUFDLElBQUksVUFBVSxJQUFJLENBQUM7TUFDcEMsYUFBYSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQztRQUM3SCxVQUFVLEVBQUUsV0FBVyxDQUFDO1NBQ3ZCLEdBQUcsV0FBVyxJQUFJLENBQUM7TUFDdEIsYUFBYSxHQUFHLFdBQVcsQ0FBQztTQUN6QixHQUFHLFVBQVUsSUFBSSxDQUFDO01BQ3JCLGFBQWEsR0FBRyxVQUFVLENBQUM7U0FDeEI7TUFDSCxZQUFZLEdBQUcsSUFBSSxDQUFDO01BQ3BCLE9BQU87S0FDUjs7SUFFRCxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUU7TUFDbkUsWUFBWSxHQUFHLGNBQWMsQ0FBQyxhQUFhLENBQUMsQ0FBQztLQUM5Qzs7TUFFQyxZQUFZLEdBQUcsSUFBSSxDQUFDO0lBQ3ZCO0VBQ0QsR0FBRyxDQUFDLFlBQVksR0FBRyxTQUFTLENBQUMsQ0FBQztJQUM1QixZQUFZLEdBQUcsSUFBSSxDQUFDO0lBQ3JCO0VBQ0QsV0FBVyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztDQUN0QixJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUU7TUFDaEQsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztXQUNuQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLElBQUksU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJO1lBQzlDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLElBQUksU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVO1lBQ3BELENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsTUFBTSxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7WUFDOUYsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2hELEVBQUUsQ0FBQyxDQUFDO1FBQ0osV0FBVyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNyQixHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLElBQUksU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUM7VUFDeEYsSUFBSSxHQUFHLEdBQUcsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztVQUNwRyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsR0FBRyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQztVQUMvQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxHQUFHLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUM7U0FDNUM7T0FDRjtNQUNELFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxFQUFDO0dBQ3pDO0VBQ0QsV0FBVyxFQUFFLENBQUM7RUFDZCxXQUFXLEdBQUcsV0FBVyxDQUFDO0VBQzFCLElBQUksSUFBSSxJQUFJLElBQUksV0FBVyxDQUFDO0dBQzNCLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksSUFBSSxFQUFFLFNBQVM7RUFDL0UsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztFQUM1QztDQUNELENBQUMsQ0FBQzs7Ozs7Ozs7S0E3SEEsa0JBQWtCLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQztLQUNoQyxtQkFBbUIsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDO0NBa0NqQyxHQUFHLFdBQVcsS0FBSyxDQUFDLGVBQWUsSUFBSSxXQUFXLE1BQU0scUJBQXFCLElBQUksaUJBQWlCLENBQUMsQ0FBQyxFQUFFO01BQ3ZHLGVBQWUsR0FBRyxXQUFXLENBQUM7TUFDOUIscUJBQXFCLEdBQUcsaUJBQWlCLENBQUM7TUFDMUMsV0FBVyxFQUFFLENBQUM7S0FDZjs7OzsyRUFuTndELEtBQUssK0JBQVUsTUFBTSw2QkFBYSxHQUFHOztnQkFFL0Usb0JBQW9CLEdBQUksSUFBSSwyQ0FDUixPQUFPLDRCQUFVLGtCQUFrQiwrQkFBVSxtQkFBbUIsd0RBQW1DLFdBQVc7Y0FDbEksZ0JBQWdCLHdDQUNBLGdHQUFnRyw4QkFBUyxrQkFBa0IsK0JBQVUsbUJBQW1COzs7Ozs7Ozs4QkFrRHZLLFVBQVUsZUFBSSxTQUFTLGNBQUcsVUFBVTtnQkFJckMsV0FBVyxHQUFJLElBQUksU0FDbkIsb0dBQW9HLG1EQUV0RSxrQkFBa0Isa0RBQzVDLFNBQVMsMkZBS1QsU0FBUzs7O29DQUswQixTQUFTLDJCQUFNLFNBQVMsMkJBQU0sQ0FBQywyQkFBTSxNQUFNLCtFQUFyRSxvQkFBb0I7Ozs7S0FNMUMsWUFBWSxxRUFDeUMsOEZBQThGLG9CQUFTLGFBQWE7OztvQkFHdEssc0NBQXNDOzs7b0JBR3RDLHFCQUFxQjs7O2lIQUd3RU4sZ0JBQWMsY0FBR0EsZ0JBQWM7bUVBQ25GQSxnQkFBYzs7aUNBRTFDLGVBQWU7OztpSEFHaUVPLHNCQUFvQixjQUFHQSxzQkFBb0I7bUVBQy9GQSxzQkFBb0I7O2lDQUVoRCxpQ0FBaUM7OztpSEFHK0NDLGVBQWEsY0FBR0EsZUFBYTttRUFDakZBLGVBQWE7O2lDQUV6QyxlQUFlOzs7aUhBR2lFQyx1QkFBcUIsY0FBR0EsdUJBQXFCO21FQUNqR0EsdUJBQXFCOztpQ0FFakQsMEJBQTBCOzs7aUhBR3NESCxtQkFBaUIsY0FBR0EsbUJBQWlCO21FQUN6RkEsbUJBQWlCOztxQ0FFekMsaUVBQWlFLGVBQUksc0VBQXNFOzsySEFFckQsdUVBQXVFOzRCQUN0Syw0REFBNEQ7Ozs7Ozs7Ozs7O0VDekYzRSxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7RUFDZCxJQUFJLEdBQUcsQ0FBQztFQUNELE1BQUksTUFBTSxHQUFHLEdBQUcsRUFDWixlQUFlLEdBQUcsR0FBRyxFQUNyQixVQUFVLEVBQ1YsR0FBRyxFQUNILGVBQUcsQ0FBQztFQUNmLElBQUksS0FBSyxDQUFDO0VBQ1YsT0FBTyxDQUFDLEtBQUs7SUFDWCxLQUFLLEdBQUcsR0FBRyxDQUFDLHFCQUFxQixFQUFFLENBQUMsS0FBSyxDQUFDO0dBQzNDLENBQUMsQ0FBQzs7Ozs7Ozs7Q0FDQTtRQUNELEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQztVQUNuQixLQUFLLEdBQUcsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO1VBQ3JDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDO1NBQ3hCO09BQ0Y7S0FDRSxLQUFLLEdBQUcsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUk7UUFDN0IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxFQUFFLEdBQUcsS0FBSyxDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMxRixJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbkUsR0FBRyxDQUFDLENBQUMsTUFBTSxJQUFJLEdBQUc7O1VBRWhCLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDLGVBQWUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7OztVQUc3SCxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDLGVBQWUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7T0FDdEksQ0FBQyxDQUFDOzttRUExRDJDLGFBQWEsNEJBQWlCLEtBQUssY0FBRyxNQUFNLDRCQUFXLEtBQUssK0JBQVksTUFBTSw2QkFBYyxHQUFHOzs7Ozs7O1lBU3BJLEtBQUssR0FBSSxJQUFJLG1FQUdILFVBQVUsdURBR3JCLFNBQVM7d0RBSUMsaUJBQWlCLDBEQUVQLG1CQUFtQixlQUFJLFVBQVU7b0JBR3RELFVBQVU7Ozs7OztBQ3hCbkIsTUFBTSxlQUFlLEdBQUcsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxTQUFTLEdBQUcsQ0FBQyxLQUFLO0VBQ2hFLElBQUksSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7RUFDcEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLFNBQVMsQ0FBQyxDQUFDO0VBQ3pELElBQUksU0FBUyxHQUFHLEtBQUssS0FBSyxFQUFFLEdBQUcsQ0FBQyxHQUFHLEtBQUssR0FBRyxDQUFDLENBQUM7OztFQUc3QyxJQUFJLEtBQUssR0FBRyxFQUFFLENBQUM7RUFDZixPQUFPLElBQUksQ0FBQyxRQUFRLEVBQUUsS0FBSyxTQUFTLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRSxLQUFLLFNBQVMsSUFBSSxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtJQUN6RixJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUUsS0FBSyxTQUFTLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsRUFBRSxLQUFLLENBQUMsRUFBRSxJQUFJLENBQUMsRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDMUcsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztNQUM1QixXQUFXLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxLQUFLLEtBQUs7TUFDdEMsR0FBRyxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUU7TUFDbkIsS0FBSyxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUU7TUFDdEIsSUFBSSxFQUFFLElBQUksQ0FBQyxXQUFXLEVBQUU7TUFDeEIsSUFBSSxFQUFFLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQztLQUNyQixFQUFFLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ25CLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzVCLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO0dBQ2xDO0VBQ0QsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDO0VBQ2hCLE9BQU8sRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFDO0NBQy9CLENBQUM7O0FBRUYsTUFBTSxrQkFBa0IsR0FBRyxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsa0JBQWtCLEtBQUs7RUFDN0QsSUFBSSxLQUFLLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztFQUN2QixLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0VBQzNCLE9BQU8sSUFBSSxJQUFJO0lBQ2IsTUFBTSxTQUFTLEdBQUcsSUFBSSxJQUFJLEtBQUssSUFBSSxJQUFJLElBQUksR0FBRyxDQUFDO0lBQy9DLE9BQU87TUFDTCxTQUFTO01BQ1QsVUFBVSxFQUFFLFNBQVMsS0FBSyxDQUFDLGtCQUFrQixJQUFJLGtCQUFrQixDQUFDLElBQUksQ0FBQyxDQUFDO01BQzFFLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLEtBQUssS0FBSyxDQUFDLE9BQU8sRUFBRTtLQUM1QyxDQUFDO0dBQ0gsQ0FBQztDQUNILENBQUM7O0FBRUYsQUFBTyxTQUFTLFNBQVMsQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLGtCQUFrQixHQUFHLElBQUksRUFBRSxTQUFTLEdBQUcsQ0FBQyxFQUFFO0VBQzlFLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7RUFDM0IsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztFQUN6QixJQUFJLE9BQU8sR0FBRyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLEVBQUUsR0FBRyxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztFQUNqRSxJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUM7RUFDaEIsSUFBSSxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxFQUFFLEtBQUssQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztFQUM5RCxJQUFJLGVBQWUsR0FBRyxrQkFBa0IsQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLGtCQUFrQixDQUFDLENBQUM7RUFDekUsT0FBTyxJQUFJLEdBQUcsT0FBTyxFQUFFO0lBQ3JCLE1BQU0sQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBRSxJQUFJLENBQUMsV0FBVyxFQUFFLEVBQUUsZUFBZSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUM7SUFDOUYsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7R0FDcEM7RUFDRCxPQUFPLE1BQU0sQ0FBQztDQUNmOztBQUVELEFBQU8sTUFBTSxrQkFBa0IsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQyxPQUFPLEVBQUU7S0FDbEUsQ0FBQyxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQyxRQUFRLEVBQUU7S0FDN0IsQ0FBQyxDQUFDLFdBQVcsRUFBRSxLQUFLLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQzs7Ozs7Ozs7Ozs7RUM3Q3ZDLE1BQVcsSUFBSSxFQUNKLFFBQVEsRUFDUixXQUFXLEVBQ1gsZUFBZSxFQUNmLHFCQUFTLENBQUM7Ozs7Ozs7Ozs7O1VBUWQsSUFBSSxHQUFJLEdBQUcsMENBR08sZ0JBQWdCLHlCQUNyQixXQUFXLG9CQUNSLGVBQWU7cURBSWhCLHNDQUFzQyxvQkFDbkMseUNBQXlDLHVCQUMxQyxnRUFBZ0Usc0JBQ2xFLGVBQWU7b0JBSTlCLGtCQUFrQjs7Ozs7Ozs7Ozs7Ozs7Q0NoQ2xCLE1BQUksRUFBRSxFQUNGLFlBQVksRUFDWixRQUFRLEVBQ1IsV0FBVyxFQUNYLDJCQUFlLENBQUM7O0VBRTNCLElBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQztFQUNoQixJQUFJLFNBQVMsQ0FBQzs7Ozs7Ozs7OztDQUVYO1FBQ0QsU0FBUyxHQUFHLE1BQU0sR0FBRyxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ2pDLE1BQU0sR0FBRyxFQUFFLENBQUM7T0FDYjs7O1VBSU0sa0JBQWtCLEdBQUksSUFBSTtRQUV2QixTQUFTO1lBQ2QsUUFBUTtlQUNSLFdBQVc7bUJBQ1gsZUFBZTthQUNmLFNBQVM7Ozs7Ozs7Ozs7Ozs7O0VDcEJQLE1BQUksS0FBSyxFQUNMLElBQUksRUFDSixLQUFLLEVBQ0wsR0FBRyxFQUNILGlCQUFpQixFQUNqQixpQkFBaUIsRUFDakIsd0JBQVksQ0FBQzs7RUFFeEIsSUFBSSxpQkFBaUIsR0FBRyxLQUFLLENBQUM7RUFDOUIsSUFBSSxlQUFlLENBQUM7Ozs7Ozs7Ozs7OztDQUVqQjtRQUNELElBQUksaUJBQWlCLEdBQUcsS0FBSyxDQUFDLFdBQVcsRUFBRSxLQUFLLElBQUksQ0FBQztRQUNyRCxJQUFJLGlCQUFpQixHQUFHLEdBQUcsQ0FBQyxXQUFXLEVBQUUsS0FBSyxJQUFJLENBQUM7UUFDbkQsZUFBZSxHQUFHLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLO1VBQzNDLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUU7WUFDdkIsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDVixNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztXQUNiLEVBQUU7WUFDRCxVQUFVO2NBQ1IsQ0FBQyxDQUFDLGlCQUFpQixJQUFJLENBQUMsaUJBQWlCOztnQkFFdkMsQ0FBQyxDQUFDLGlCQUFpQixJQUFJLENBQUMsSUFBSSxLQUFLLENBQUMsUUFBUSxFQUFFO29CQUN4QyxDQUFDLGlCQUFpQixJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUM7ZUFDL0M7V0FDSixDQUFDLENBQUM7U0FDSixDQUFDLENBQUM7T0FDSjs7Ozs4Q0FpQmtCLGlCQUFpQjs7OztrQkFLL0Isc0JBQXNCLGNBQUcsSUFBSTs7OENBR2YsaUJBQWlCOzs7O21EQUtJLGlCQUFpQjtZQUNoRCxlQUFlLEdBQUksZUFBZSxvRUFHckIsZUFBZSxvQkFDYiwwQkFBMEI7aURBR3JDLHNCQUFzQjs7Ozs7Ozs7Ozs7Ozs7Q0NuRW5DLE1BQU0sUUFBUSxHQUFHLHFCQUFxQixFQUFFLENBQUM7O0VBRXpDLElBQUksSUFBSSxHQUFHLENBQUMsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEtBQUs7SUFDMUIsU0FBUyxPQUFPLEdBQUc7TUFDakIsRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUM7TUFDMUIsRUFBRSxDQUFDLG1CQUFtQixDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQztLQUN0QztJQUNELEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUM7R0FDbkMsQ0FBQzs7RUFFRixJQUFJLE9BQU8sQ0FBQztFQUVaLElBQUksZ0JBQWdCLENBQUM7RUFDckIsSUFBSSxnQkFBZ0IsQ0FBQztFQUNyQixJQUFJLGVBQWUsQ0FBQztFQUNwQixJQUFJLFVBQVUsR0FBRyxDQUFDLENBQUM7RUFDbkIsSUFBSSxVQUFVLEdBQUcsQ0FBQyxDQUFDOztFQUVuQixNQUFXLElBQUksR0FBRyxLQUFLLEVBQ1osTUFBTSxFQUNOLG1CQUFPLENBQUM7RUFDbkIsTUFBYSxLQUFLLEdBQUcsTUFBTTtJQUN6QixNQUFNLEdBQUcsSUFBSSxDQUFDO0lBQ2QsSUFBSSxDQUFDLGdCQUFnQixFQUFFLGNBQWMsRUFBRSxNQUFNO01BQzNDLE1BQU0sR0FBRyxLQUFLLENBQUM7TUFDZixJQUFJLEdBQUcsS0FBSyxDQUFDO01BQ2IsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0tBQ3BCLENBQUMsQ0FBQztHQUNKLENBQUM7O0VBRUYsU0FBUyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUU7SUFDOUIsSUFBSSxDQUFDLElBQUksRUFBRSxPQUFPO0lBQ2xCLElBQUksRUFBRSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUM7O0lBRXBCLEdBQUc7TUFDRCxJQUFJLEVBQUUsS0FBSyxPQUFPLEVBQUUsT0FBTzs7S0FFNUIsUUFBUSxFQUFFLEdBQUcsRUFBRSxDQUFDLFVBQVUsRUFBRTtJQUM3QixLQUFLLEVBQUUsQ0FBQztHQUNUOztFQUVELE9BQU8sQ0FBQyxNQUFNO0lBQ1osUUFBUSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO0lBQ3RELElBQUksQ0FBQyxPQUFPLEVBQUUsT0FBTztJQUNyQixnQkFBZ0IsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQzs7O0lBR3RFLE9BQU8sTUFBTTtNQUNYLFFBQVEsQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztLQUMxRCxDQUFDO0dBQ0gsQ0FBQyxDQUFDOzs7Ozs7Ozs7OytEQWlEOEIsT0FBTzsrQ0FDVSxnQkFBZ0I7Ozs7cURBTWpELElBQUksbUJBQ0wsTUFBTSxrR0FDOEIsVUFBVSxpQkFBTSxVQUFVLDhCQUNqRSxlQUFlO2lFQUNPLGdCQUFnQjs7Ozs7Ozs7O0FDakhyRDs7Ozs7Ozs7Ozs7O0FBWUEsTUFBTSxnQkFBZ0IsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxLQUFLLEdBQUc7R0FDN0MsT0FBTyxDQUFDLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBbUJqRCxNQUFNLGFBQWEsR0FBRyxTQUFTLEdBQUcsQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFO0VBQ2xELEdBQUcsR0FBRyxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUM7RUFDckIsR0FBRyxPQUFPLE1BQU0sSUFBSSxXQUFXLEVBQUUsT0FBTyxHQUFHLENBQUM7RUFDNUMsR0FBRyxHQUFHLENBQUMsTUFBTSxJQUFJLE1BQU0sRUFBRSxPQUFPLEdBQUcsQ0FBQztFQUNwQyxRQUFRLEdBQUcsQ0FBQyxPQUFPLFFBQVEsSUFBSSxXQUFXLElBQUksS0FBSyxHQUFHLFFBQVEsQ0FBQztFQUMvRCxHQUFHLEdBQUcsQ0FBQyxNQUFNLEdBQUcsTUFBTSxFQUFFOztJQUV0QixNQUFNLE1BQU0sR0FBRyxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztHQUNoRCxNQUFNLEdBQUcsR0FBRyxDQUFDLE1BQU0sR0FBRyxNQUFNLEVBQUU7SUFDN0IsR0FBRyxRQUFRLEVBQUU7O01BRVgsR0FBRyxHQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztLQUN4QyxNQUFNOztNQUVMLEdBQUcsR0FBRyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQztLQUMvQjtHQUNGO0VBQ0QsT0FBTyxHQUFHLENBQUM7Q0FDWixDQUFDOztBQUVGLE1BQU0sVUFBVSxHQUFHO0VBQ2pCLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRTtFQUNuQixFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUU7RUFDbkIsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFO0VBQ3BCLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRTtFQUN0QixFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUU7RUFDckIsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFO0VBQ25CLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRTtDQUN0QixDQUFDOztBQUVGLE1BQU0sWUFBWSxHQUFHO0VBQ25CLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRTtFQUNwQixFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUU7RUFDckIsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFO0VBQ2xCLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRTtFQUNsQixFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUU7RUFDaEIsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFO0VBQ2pCLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRTtFQUNqQixFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUU7RUFDbkIsRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFO0VBQ3RCLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRTtFQUNwQixFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUU7RUFDckIsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFO0NBQ3RCLENBQUM7O0FBRUYsSUFBSSxVQUFVLEdBQUc7RUFDZixVQUFVO0VBQ1YsWUFBWTtDQUNiLENBQUM7O0FBRUYsTUFBTSxnQkFBZ0IsR0FBRyxDQUFDLElBQUk7RUFDNUIsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxJQUFJO0lBQy9CLEdBQUcsVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRTtNQUNoRSxVQUFVLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQzdCO0dBQ0YsQ0FBQyxDQUFDO0FBQ0wsQUFFQTtBQUNBLElBQUksa0JBQWtCLEdBQUc7RUFDdkI7O0lBRUUsR0FBRyxFQUFFLEdBQUc7SUFDUixNQUFNLEVBQUUsU0FBUyxJQUFJLEVBQUUsRUFBRSxPQUFPLGFBQWEsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRTtHQUNwRSxFQUFFOztJQUVELEdBQUcsRUFBRSxHQUFHO0lBQ1IsTUFBTSxFQUFFLFNBQVMsSUFBSSxFQUFFLEVBQUUsT0FBTyxVQUFVLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7R0FDM0UsRUFBRTs7SUFFRCxHQUFHLEVBQUUsR0FBRztJQUNSLE1BQU0sRUFBRSxTQUFTLElBQUksRUFBRSxFQUFFLE9BQU8sSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLEVBQUU7R0FDbEQsRUFBRTs7SUFFRCxHQUFHLEVBQUUsR0FBRztJQUNSLE1BQU0sRUFBRSxTQUFTLElBQUksRUFBRSxFQUFFLE9BQU8sVUFBVSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO0dBQzNFLEVBQUU7O0lBRUQsR0FBRyxFQUFFLEdBQUc7SUFDUixNQUFNLEVBQUUsU0FBUyxJQUFJLEVBQUUsRUFBRSxPQUFPLFVBQVUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtHQUMvRSxFQUFFOztJQUVELEdBQUcsRUFBRSxHQUFHO0lBQ1IsTUFBTSxFQUFFLFNBQVMsSUFBSSxFQUFFLEVBQUUsT0FBTyxhQUFhLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO0dBQ3RFLEVBQUU7O0lBRUQsR0FBRyxFQUFFLEdBQUc7SUFDUixNQUFNLEVBQUUsU0FBUyxJQUFJLEVBQUUsRUFBRSxPQUFPLFVBQVUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtHQUMvRSxFQUFFOztJQUVELEdBQUcsRUFBRSxHQUFHO0lBQ1IsTUFBTSxFQUFFLFNBQVMsSUFBSSxFQUFFLEVBQUUsT0FBTyxJQUFJLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUU7R0FDdkQsRUFBRTs7SUFFRCxHQUFHLEVBQUUsR0FBRztJQUNSLE1BQU0sRUFBRSxTQUFTLElBQUksRUFBRSxFQUFFLE9BQU8sSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLEVBQUU7R0FDdEQsRUFBRTs7SUFFRCxHQUFHLEVBQUUsR0FBRztJQUNSLE1BQU0sRUFBRSxTQUFTLElBQUksRUFBRSxFQUFFLE9BQU8sYUFBYSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRTtJQUMzRTtDQUNILENBQUM7O0FBRUYsSUFBSSxrQkFBa0IsR0FBRztFQUN2Qjs7SUFFRSxHQUFHLEVBQUUsR0FBRztJQUNSLE1BQU0sRUFBRSxTQUFTLElBQUksRUFBRSxFQUFFLE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLEdBQUcsRUFBRSxJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsRUFBRTtHQUN4RSxFQUFFOztJQUVELEdBQUcsRUFBRSxHQUFHO0lBQ1IsTUFBTSxFQUFFLFNBQVMsSUFBSSxFQUFFLEVBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsR0FBRyxFQUFFLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxFQUFFO0dBQ3hFLEVBQUU7O0lBRUQsR0FBRyxFQUFFLEdBQUc7SUFDUixNQUFNLEVBQUUsU0FBUyxJQUFJLEVBQUUsRUFBRSxPQUFPLElBQUksQ0FBQyxRQUFRLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUU7R0FDOUQsRUFBRTs7SUFFRCxHQUFHLEVBQUUsR0FBRztJQUNSLE1BQU0sRUFBRSxTQUFTLElBQUksRUFBRSxFQUFFLE9BQU8sSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLEVBQUU7R0FDbkQsRUFBRTs7SUFFRCxHQUFHLEVBQUUsR0FBRztJQUNSLE1BQU0sRUFBRSxTQUFTLElBQUksRUFBRSxFQUFFLE9BQU8sYUFBYSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7R0FDN0UsRUFBRTs7SUFFRCxHQUFHLEVBQUUsR0FBRztJQUNSLE1BQU0sRUFBRSxTQUFTLElBQUksRUFBRSxFQUFFLE9BQU8sYUFBYSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO0dBQ3BFLEVBQUU7O0lBRUQsR0FBRyxFQUFFLEdBQUc7SUFDUixNQUFNLEVBQUUsU0FBUyxJQUFJLEVBQUUsRUFBRSxPQUFPLGFBQWEsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtHQUN0RSxFQUFFOztJQUVELEdBQUcsRUFBRSxHQUFHO0lBQ1IsTUFBTSxFQUFFLFNBQVMsSUFBSSxFQUFFLEVBQUUsT0FBTyxhQUFhLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7SUFDckU7Q0FDSCxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7O0FBZ0JGLE1BQU0sZ0JBQWdCLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLO0VBQ3BDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDO0NBQ3hCLENBQUM7Ozs7Ozs7Ozs7Ozs7QUFhRixNQUFNLFVBQVUsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLEtBQUs7RUFDckQsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEtBQUssSUFBSTtJQUNsQyxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLEVBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLE9BQU87SUFDckQsUUFBUSxHQUFHLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztHQUNwRSxDQUFDLENBQUM7RUFDSCxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsS0FBSyxJQUFJO0lBQ2xDLEdBQUcsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsRUFBRSxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsT0FBTztJQUNyRCxRQUFRLEdBQUcsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0dBQ3BFLENBQUMsQ0FBQztFQUNILE9BQU8sUUFBUSxDQUFDO0NBQ2pCLENBQUM7O0FDbE5LLE1BQU0sUUFBUSxHQUFHO0VBQ3RCLElBQUksRUFBRSxFQUFFO0VBQ1IsRUFBRSxFQUFFLEVBQUU7RUFDTixLQUFLLEVBQUUsRUFBRTtFQUNULElBQUksRUFBRSxFQUFFO0VBQ1IsSUFBSSxFQUFFLEVBQUU7RUFDUixNQUFNLEVBQUUsRUFBRTtFQUNWLEtBQUssRUFBRSxFQUFFO0VBQ1QsTUFBTSxFQUFFLEVBQUU7RUFDVixHQUFHLEVBQUUsQ0FBQztDQUNQLENBQUM7O0FBRUYsQUFBTyxNQUFNLGFBQWEsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Ozs7Ozs7Ozs7RUNGdkUsTUFBTSxLQUFLLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQzs7RUFFekIsSUFBSSxPQUFPLENBQUM7O0VBRVosTUFBVyxNQUFNLEdBQUcsZ0JBQWdCLEVBQ3pCLEtBQUssR0FBRyxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUM3QixHQUFHLEdBQUcsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsRUFDM0IsUUFBUSxHQUFHLEtBQUssRUFDaEIsVUFBVSxHQUFHLEtBQUssRUFDbEIsT0FBTyxHQUFHLElBQUksRUFDZCxrQkFBa0IsR0FBRyxJQUFJLEVBQ3pCLFNBQVMsR0FBRyxDQUFDLEVBQ2IsVUFBVSxHQUFHO0lBQ3RCLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQztJQUNqQixDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUM7SUFDakIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO0lBQ2xCLENBQUMsV0FBVyxFQUFFLEtBQUssQ0FBQztJQUNwQixDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUM7SUFDbkIsQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDO0lBQ2pCLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQztHQUNwQixFQUNVLFlBQVksR0FBRztJQUN4QixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7SUFDbEIsQ0FBQyxVQUFVLEVBQUUsS0FBSyxDQUFDO0lBQ25CLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQztJQUNoQixDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUM7SUFDaEIsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDO0lBQ2QsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDO0lBQ2YsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDO0lBQ2YsQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDO0lBQ2pCLENBQUMsV0FBVyxFQUFFLEtBQUssQ0FBQztJQUNwQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7SUFDbEIsQ0FBQyxVQUFVLEVBQUUsS0FBSyxDQUFDO0lBQ25CLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQztHQUNwQixFQUVVLEtBQUssR0FBRyxFQUFFLEVBR1YscUJBQXFCLEdBQUcsTUFBTSxFQUM5QixpQkFBaUIsR0FBRyxNQUFNLEVBQzFCLGVBQWUsR0FBRyxNQUFNLEVBQ3hCLGNBQWMsR0FBRyxTQUFTLEVBQzFCLGtCQUFrQixHQUFHLE1BQU0sRUFDM0IsWUFBWSxHQUFHLFNBQVMsRUFDeEIsNkJBQTZCLEdBQUcsU0FBUyxFQUN6Qyx1QkFBdUIsR0FBRyxxQkFBUyxDQUFDOztFQUUvQyxnQkFBZ0IsQ0FBQyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsQ0FBQyxDQUFDO0VBQy9DLElBQUksZ0JBQWdCLEdBQUcsU0FBUyxLQUFLLENBQUMsR0FBRyxVQUFVLEdBQUcsQ0FBQyxNQUFNO0lBQzNELElBQUksR0FBRyxHQUFHLFVBQVUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUM3QixHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQ3RCLE9BQU8sR0FBRyxDQUFDO0dBQ1osR0FBRyxDQUFDOztFQUVMLElBQUksV0FBVyxHQUFHLEtBQUssQ0FBQztFQUN4QixJQUFJLGVBQWUsR0FBRyxLQUFLLENBQUM7RUFFNUIsSUFBSSxLQUFLLEdBQUcsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO0VBQzdCLElBQUksSUFBSSxHQUFHLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQzs7RUFFL0IsSUFBSSxNQUFNLEdBQUcsS0FBSyxDQUFDO0VBQ25CLElBQUksU0FBUyxHQUFHLEtBQUssQ0FBQzs7RUFFdEIsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQzs7RUFTM0IsSUFBSSxVQUFVLEdBQUcsQ0FBQyxDQUFDOztFQTRCbkIsTUFBVyw2QkFBaUIsQ0FBQzs7RUFPN0IsT0FBTyxDQUFDLE1BQU07SUFDWixLQUFLLEdBQUcsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQzVCLElBQUksR0FBRyxRQUFRLENBQUMsV0FBVyxFQUFFLENBQUM7R0FDL0IsQ0FBQyxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O01BeENBLE1BQU0sR0FBRyxTQUFTLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxrQkFBa0IsRUFBRSxTQUFTLENBQUMsQ0FBQztFQUc5RDtRQUNELFVBQVUsR0FBRyxDQUFDLENBQUM7UUFDZixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFO1VBQ3pDLElBQUksTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssS0FBSyxLQUFLLElBQUksTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxJQUFJLEVBQUU7WUFDeEQsVUFBVSxHQUFHLENBQUMsQ0FBQztXQUNoQjtTQUNGO09BQ0Y7TUFDRSxZQUFZLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO01BRWxDLGNBQWMsR0FBRyxJQUFJLEdBQUcsS0FBSyxHQUFHLEdBQUcsQ0FBQztNQUNwQyxlQUFlLEdBQUcsWUFBWSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO01BQ2pGLGdCQUFnQixHQUFHLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztNQUN0RCxpQkFBaUIsR0FBRyxVQUFVLEdBQUcsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7TUFDbkQsaUJBQWlCLEdBQUcsVUFBVSxHQUFHLENBQUMsQ0FBQztNQUNuQyxZQUFZLEdBQUcsQ0FBQzttQ0FDVSxFQUFFLHFCQUFxQixDQUFDOzJCQUM1QixFQUFFLGlCQUFpQixDQUFDO3lCQUN0QixFQUFFLGVBQWUsQ0FBQzt1QkFDcEIsRUFBRSxjQUFjLENBQUM7NEJBQ1osRUFBRSxrQkFBa0IsQ0FBQztzQkFDM0IsRUFBRSxZQUFZLENBQUM7d0NBQ0csRUFBRSw2QkFBNkIsQ0FBQztrQ0FDdEMsRUFBRSx1QkFBdUIsQ0FBQztJQUN4RCxFQUFFLEtBQUssQ0FBQztNQUNWLENBQUMsQ0FBQztFQUdDO1FBQ0QsaUJBQWlCLEdBQUcsT0FBTyxNQUFNLEtBQUssVUFBVTtZQUM1QyxNQUFNLENBQUMsUUFBUSxDQUFDO1lBQ2hCLFVBQVUsQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7T0FDbEM7OzREQTZJWSxNQUFNLGdCQUNILFNBQVMsK0RBQ2xCLFlBQVk7O1lBTWhCLE9BQU87U0FISSxPQUFPO1NBQ1AsTUFBTTtXQUNKLFNBQVM7O3NCQUZYLE9BQU87c0JBQ1AsTUFBTTt3QkFDSixTQUFTOzs7Ozs7YUFPZCxRQUFRO3VCQUVWLGlCQUFpQjs7Ozs7Ozs7VUFRakIsS0FBSztTQUNMLElBQUk7c0JBQ0osaUJBQWlCO3NCQUNqQixpQkFBaUI7VUFDakIsS0FBSztRQUNMLEdBQUc7aUJBQ0gsWUFBWTs7O21CQUtOLGdCQUFnQixHQUFJLEdBQUcsOENBQ3ZCLE1BQU07OztpQkFJWixZQUFZO2FBQ1osUUFBUTtnQkFDUixXQUFXO29CQUNYLGVBQWU7T0FDWixjQUFjOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDOUxuQixlQUFlLE9BQU8sQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFO0VBQzNDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUU7SUFDdEQsSUFBSSxDQUFDLFNBQVMsRUFBRSxTQUFTLENBQUMsR0FBRyxNQUFNLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDeEYsSUFBSSxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9ELElBQUksSUFBSSxHQUFHLElBQUk7UUFDWCxFQUFFLEdBQUcsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2xELElBQUksaUJBQWlCLEdBQUcsTUFBTSxHQUFHLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3BHLElBQUksSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3ZDLE9BQU8sRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLGlCQUFpQixFQUFFLElBQUksRUFBRSxDQUFDO0dBQzFEO09BQ0k7SUFDSCxJQUFJLElBQUksR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM5QyxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUM7R0FDakI7Q0FDRjs7Ozs7RUFVTSxNQUFJLFNBQVMsRUFDVCxTQUFTLEVBQ1QsaUJBQWlCLEdBQUcsRUFBRSxFQUN0QixJQUFJLEdBQUcsSUFBSSxJQUFJLGNBQUUsQ0FBQztFQUM3QixJQUFJLFdBQVcsR0FBRyxTQUFTLElBQUksU0FBUyxFQUFFLENBQUMsRUFBRSxFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQzs7OztFQUkxRixTQUFTLFFBQVEsRUFBRTtJQUNqQixHQUFHLFNBQVMsSUFBSSxTQUFTLElBQUksSUFBSSxDQUFDO01BQ2hDLE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDM0Y7R0FDRjtFQVFELFNBQVMsbUJBQW1CLENBQUMsTUFBTSxFQUFFO0lBQ25DLEdBQUcsU0FBUyxJQUFJLE1BQU0sQ0FBQztNQUNyQixTQUFTLEdBQUcsTUFBTSxDQUFDO01BQ25CLFFBQVEsRUFBRSxDQUFDO0tBQ1o7R0FDRjtFQUNELFNBQVMsbUJBQW1CLENBQUMsTUFBTSxFQUFFO0lBQ25DLEdBQUcsU0FBUyxJQUFJLE1BQU0sQ0FBQztNQUNyQixTQUFTLEdBQUcsTUFBTSxDQUFDO01BQ25CLFFBQVEsRUFBRSxDQUFDO0tBQ1o7R0FDRjs7Ozs7Ozs7Ozs7Ozs7O3FFQXJLcUIsV0FBVzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7UUEyQm5CLFVBQVU7V0FDUCx5QkFBeUI7YUFDdkIsSUFBSTs7OzswQkFJWCx5QkFBeUI7Ozs7Ozs7Ozs7Z0JBVWYsNkJBQTZCOzthQUozQixtQkFBbUI7OzBCQUFuQixtQkFBbUI7Ozs7Ozs7O2dCQWFyQiw2QkFBNkI7O2FBSjNCLG1CQUFtQjs7MEJBQW5CLG1CQUFtQjs7Ozs7Ozs7a0NBWTdCLDJDQUEyQzthQUc5QyxTQUFTLHFGQUNvRCwyQkFBMkI7MEVBQ3ZDLGNBQWM7Ozs7O2FBUTNELFNBQVM7O1NBRWxCLElBQUk7Ozs7OztlQUtTLGlCQUFpQjs7UUFFeEIseUJBQXlCO1FBQ3pCLHlCQUF5Qjs7Ozs7a0NBSXZCLDJDQUEyQzthQUc5QyxTQUFTLHFGQUNvRCwyQkFBMkI7MEVBQ3ZDLGNBQWM7Ozs7O2FBUTNELFNBQVM7O1NBRWxCLElBQUk7Ozs7Ozs7OztBQ3ZHWjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUEwQkEsQUFBTyxNQUFNLE9BQU8sR0FBRyxDQUFDLFlBQVk7O0NBRW5DLElBQUksT0FBTyxHQUFHLEVBQUUsQ0FBQzs7Q0FFakIsSUFBSSxLQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUssR0FBRyxXQUFXO0VBQ3RDLElBQUksQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO0VBQ2xCLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO0VBQ2hCLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO0VBQ2hCLElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDOztFQUVwQixJQUFJLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQztFQUNwQixJQUFJLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQztFQUNwQixJQUFJLENBQUMsY0FBYyxHQUFHLEVBQUUsQ0FBQztFQUN6QixDQUFDOztDQUVGLElBQUksSUFBSSxHQUFHLE9BQU8sQ0FBQyxJQUFJLEdBQUcsU0FBUyxFQUFFLEVBQUUsSUFBSSxFQUFFO0VBQzVDLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO0VBQ2IsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLElBQUksS0FBSyxTQUFTLElBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQzs7Ozs7O0VBTTdDLENBQUM7O0NBRUYsSUFBSSxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksR0FBRyxTQUFTLEVBQUUsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRTtFQUM1RCxJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztFQUNiLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0VBQ3JCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0VBQ3JCLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxJQUFJLEtBQUssU0FBUyxJQUFJLElBQUksR0FBRyxFQUFFLENBQUM7Ozs7O0VBSzdDLENBQUM7O0NBRUYsS0FBSyxDQUFDLFNBQVMsQ0FBQyxPQUFPLEdBQUcsU0FBUyxJQUFJLEVBQUU7RUFDeEMsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFO0dBQy9CLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0dBQ3RCOztFQUVELElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQzs7RUFFN0IsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO0VBQ2QsT0FBTyxJQUFJLENBQUM7RUFDWixDQUFDOztDQUVGLEtBQUssQ0FBQyxTQUFTLENBQUMsUUFBUSxHQUFHLFdBQVc7OztFQUdyQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtHQUMxQyxJQUFJLElBQUksR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7R0FDeEIsSUFBSSxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7R0FDeEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztHQUNuQjtFQUNELENBQUM7O0NBRUYsS0FBSyxDQUFDLFNBQVMsQ0FBQyxPQUFPLEdBQUcsU0FBUyxJQUFJLEVBQUU7RUFDeEMsSUFBSSxNQUFNLEdBQUcsS0FBSyxDQUFDO0VBQ25CLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxFQUFFO0dBQzlCLElBQUksSUFBSSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsTUFBTSxHQUFHLElBQUksQ0FBQyxFQUFFO0dBQ3hDLENBQUMsQ0FBQzs7RUFFSCxJQUFJLENBQUMsTUFBTSxFQUFFO0dBQ1osSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7R0FDdEI7O0VBRUQsSUFBSSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRTtHQUN4QyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDO0dBQ3BDO0VBQ0QsSUFBSSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFO0dBQ3hELElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQztHQUNwRDs7RUFFRCxNQUFNLEdBQUcsS0FBSyxDQUFDO0VBQ2YsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxFQUFFO0lBQ2pFLElBQUksSUFBSSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsTUFBTSxHQUFHLElBQUksQ0FBQyxFQUFFO0dBQ3pDLENBQUMsQ0FBQzs7RUFFSCxJQUFJLENBQUMsTUFBTSxFQUFFO0dBQ1osSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElB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QUFDOztFQUVULElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztFQUNkLENBQUM7OztDQUdGLEtBQUssQ0FBQyxTQUFTLENBQUMsVUFBVSxHQUFHLFNBQVMsSUFBSSxFQUFFO0VBQzNDLEtBQUssSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7R0FDaEQsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxJQUFJLENBQUMsRUFBRSxFQUFFO0lBQ2pDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN4QjtHQUNEOztFQUVELEtBQUssSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtHQUM3QixLQUFLLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUU7SUFDaEMsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7SUFFakMsS0FBSyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO0tBQ3ZDLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssSUFBSSxDQUFDLEVBQUUsRUFBRTtNQUMzQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7TUFDbEM7S0FDRDs7O0lBR0QsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sSUFBSSxDQUFDLEVBQUU7S0FDckMsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQzVCO0lBQ0Q7OztHQUdELElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtJQUMvQixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDekI7R0FDRDs7RUFFRCxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7RUFDZCxDQUFDOzs7Ozs7Ozs7Ozs7O0NBYUYsS0FBSyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEdBQUcsU0FBUyxJQUFJLEVBQUU7RUFDdEMsSUFBSSxLQUFLLEdBQUcsRUFBRSxDQUFDO0VBQ2YsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEVBQUU7R0FDOUIsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztHQUNqRCxFQUFFLElBQUksQ0FBQyxDQUFDOztFQUVULElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxFQUFFO0dBQzlCLElBQUksSUFBSSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7R0FDekIsSUFBSSxFQUFFLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQzs7R0FFckIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsUUFBUTtPQUNoQixFQUFFLEdBQUcsQ0FBQyxDQUFDLElBQUksR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLEVBQUUsR0FBRyxHQUFHLEdBQUcsRUFBRSxDQUFDLEVBQUU7TUFDMUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFO09BQ2YsQ0FBQyxDQUFDLElBQUksR0FBRyxHQUFHLEdBQUcs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LEVBQUU7RUFDdkIsT0FBTyxNQUFNLElBQUksaUJBQWlCLEdBQUcsQ0FBQyxDQUFDLEdBQUcsaUJBQWlCLEdBQUcsQ0FBQyxDQUFDO0NBQ2pFO0FBQ0QsU0FBUyxXQUFXLEdBQUc7RUFDckIsSUFBSSxJQUFJLElBQUksSUFBSSxXQUFXLENBQUM7SUFDMUIsSUFBSSxDQUFDLElBQUksR0FBRztNQUNWLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDaEMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1VBQ1IsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNuQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7UUFDVixDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDOUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQztNQUNwQyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ2hDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztVQUNSLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxD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UyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsTUFBTSxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7WUFDOUYsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2hELEVBQUUsQ0FBQyxDQUFDO1FBQ0osV0FBVyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNyQixHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLElBQUksU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUM7VUFDeEYsSUFBSSxHQUFHLEdBQUcsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztVQUNwRyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsR0FBRyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQztVQUMvQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxHQUFHLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVB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O0FBVUEsTUFBTSxTQUFTLEdBQUcsQ0FBQyxNQUFNO0NBQ3hCLElBQUksR0FBRyxHQUFHLEVBQUU7RUFDWCxDQUFDLEdBQUcsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7RUFDckIsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO0VBQ3JCLENBQUMsR0FBRyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQ3ZCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUU7RUFDNUIsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQ3JDO0NBQ0QsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRTtFQUM1QixHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDckM7Q0FDRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFO0VBQzVCLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUNyQztDQUNELEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7Q0FDZCxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0NBQ2QsT0FBTyxHQUFHLENBQUM7Q0FDWCxHQUFHLENBQUM7O0FBRUwsU0FBUyxhQUFhLENBQUMsS0FBSyxFQUFFO0NBQzdCLElBQUksTUFBTSxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUM7Q0FDckMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRTtFQUMxQixNQUFNLElBQUksU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7RUFDdkMsTUFBTSxJQUFJLFNBQVMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLEtBQUssQ0FBQyxLQUFLLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUN4RSxNQUFNLElBQUksU0FBUyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksS0FBSyxDQUFDLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDcEUsTUFBTSxJQUFJLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUM7RUFDckM7Q0FDRCxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFO0VBQ2hCLE1BQU0sSUFBSSxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztFQUN2QyxNQUFNLElBQUksU0FBUyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUM7RUFDaEQsTUFBTSxJQUFJLElBQUksQ0FBQztFQUNmO0NBQ0QsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFO0VBQ1osTUFBTSxJQUFJLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0VBQ3ZDLE1BQU0sSUFBSSxTQUFTLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxLQUFLLENB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
