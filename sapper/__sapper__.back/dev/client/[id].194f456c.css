.node.svelte-160k95n{position:absolute;display:inline-block;transform:translate(-50%, -50%);width:fit-content;top:50%;left:50%}
.is_streaming_label.svelte-1mrw0kg{animation:svelte-1mrw0kg-blinker 1s linear infinite}@keyframes svelte-1mrw0kg-blinker{50%{opacity:0}}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */