.modal.svelte-9zy1a5{position:fixed;z-index:5000;top:0;height:100vh;width:100vw;justify-content:center;align-items:center;display:flex;opacity:0;background-color:#000000dd;visibility:hidden;transition:visibility 0s, opacity 0.25s ease-out}.modal.show{visibility:visible;opacity:1.0}.container.svelte-9zy1a5{width:max-content;max-width:100vw}
.canvas-container.svelte-jpbj{width:100%;height:calc(100vh - 2.85rem);overflow-y:hidden;background-color:#2D3343}.canvas.svelte-jpbj{}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */