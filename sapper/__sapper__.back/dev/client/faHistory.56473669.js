import { c as createCommonjsModule, u as unwrapExports } from './api.8ae65b01.js';

function random_hsl_color(min, max, seed) {
  let random;
  if(typeof(seed) == "string")
    random = mulberry32(hash(seed));
  else
    random = mulberry32(seed);
  return 'hsl(' +
    (random() * 360).toFixed() + ',' +
    (random() * 30 + 70).toFixed() + '%,' +
    (random() * (max - min) + min).toFixed() + '%)';
}
function mulberry32(a) {
  return function() {
    var t = a += 0x6D2B79F5;
    t = Math.imul(t ^ t >>> 15, t | 1);
    t ^= t + Math.imul(t ^ t >>> 7, t | 61);
    return ((t ^ t >>> 14) >>> 0) / 4294967296;
  }
}
function hash(seed) {
  let hash = 0, i, chr;
  if (seed.length === 0) return hash;
  for (i = 0; i < seed.length; i++) {
    chr   = seed.charCodeAt(i);
    hash  = ((hash << 5) - hash) + chr;
    hash |= 0; 
  }
  return hash;
}const dark_random_color = (seed) => {
  return random_hsl_color(10, 50, seed);
};



const locales = {
  prefix: '',
  sufix:  '',
  
  seconds: '몇초전',
  minute:  '1분전',
  minutes: '%d분전',
  hour:    '한시간전',
  hours:   '%d시간전',
  day:     '하루전',
  days:    '%d일전',
  month:   '한달전',
  months:  '%d달전',
  year:    '일년전',
  years:   '%d년전'
};

const time_ago = function(time) {
  var seconds = Math.floor((new Date() - time) / 1000),
      separator =  ' ',
      words = locales.prefix + separator,
      interval = 0,
      intervals = {
        year:   seconds / 31536000,
        month:  seconds / 2592000,
        day:    seconds / 86400,
        hour:   seconds / 3600,
        minute: seconds / 60
      };
  
  var distance = locales.seconds;
  
  for (var key in intervals) {
    interval = Math.floor(intervals[key]);
    
    if (interval > 1) {
      distance = locales[key + 's'];
      break;
    } else if (interval === 1) {
      distance = locales[key];
      break;
    }
  }
  
  distance = distance.replace(/%d/i, interval);
  words += distance + separator + locales.sufix;
  return words.trim();
};

const findLastIndex = function(array, predicate) {
    let l = array.length;
    while (l--) {
        if (predicate(array[l], l, array))
            return l;
    }
    return -1;
};

var faKey = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, '__esModule', { value: true });
var prefix = 'fas';
var iconName = 'key';
var width = 512;
var height = 512;
var ligatures = [];
var unicode = 'f084';
var svgPathData = 'M512 176.001C512 273.203 433.202 352 336 352c-11.22 0-22.19-1.062-32.827-3.069l-24.012 27.014A23.999 23.999 0 0 1 261.223 384H224v40c0 13.255-10.745 24-24 24h-40v40c0 13.255-10.745 24-24 24H24c-13.255 0-24-10.745-24-24v-78.059c0-6.365 2.529-12.47 7.029-16.971l161.802-161.802C163.108 213.814 160 195.271 160 176 160 78.798 238.797.001 335.999 0 433.488-.001 512 78.511 512 176.001zM336 128c0 26.51 21.49 48 48 48s48-21.49 48-48-21.49-48-48-48-48 21.49-48 48z';

exports.definition = {
  prefix: prefix,
  iconName: iconName,
  icon: [
    width,
    height,
    ligatures,
    unicode,
    svgPathData
  ]};

exports.faKey = exports.definition;
exports.prefix = prefix;
exports.iconName = iconName;
exports.width = width;
exports.height = height;
exports.ligatures = ligatures;
exports.unicode = unicode;
exports.svgPathData = svgPathData;
});

unwrapExports(faKey);
var faKey_1 = faKey.definition;
var faKey_2 = faKey.faKey;
var faKey_3 = faKey.prefix;
var faKey_4 = faKey.iconName;
var faKey_5 = faKey.width;
var faKey_6 = faKey.height;
var faKey_7 = faKey.ligatures;
var faKey_8 = faKey.unicode;
var faKey_9 = faKey.svgPathData;

var faUser = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, '__esModule', { value: true });
var prefix = 'fas';
var iconName = 'user';
var width = 448;
var height = 512;
var ligatures = [];
var unicode = 'f007';
var svgPathData = 'M224 256c70.7 0 128-57.3 128-128S294.7 0 224 0 96 57.3 96 128s57.3 128 128 128zm89.6 32h-16.7c-22.2 10.2-46.9 16-72.9 16s-50.6-5.8-72.9-16h-16.7C60.2 288 0 348.2 0 422.4V464c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48v-41.6c0-74.2-60.2-134.4-134.4-134.4z';

exports.definition = {
  prefix: prefix,
  iconName: iconName,
  icon: [
    width,
    height,
    ligatures,
    unicode,
    svgPathData
  ]};

exports.faUser = exports.definition;
exports.prefix = prefix;
exports.iconName = iconName;
exports.width = width;
exports.height = height;
exports.ligatures = ligatures;
exports.unicode = unicode;
exports.svgPathData = svgPathData;
});

unwrapExports(faUser);
var faUser_1 = faUser.definition;
var faUser_2 = faUser.faUser;
var faUser_3 = faUser.prefix;
var faUser_4 = faUser.iconName;
var faUser_5 = faUser.width;
var faUser_6 = faUser.height;
var faUser_7 = faUser.ligatures;
var faUser_8 = faUser.unicode;
var faUser_9 = faUser.svgPathData;

var faUserLock = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, '__esModule', { value: true });
var prefix = 'fas';
var iconName = 'user-lock';
var width = 640;
var height = 512;
var ligatures = [];
var unicode = 'f502';
var svgPathData = 'M224 256A128 128 0 1 0 96 128a128 128 0 0 0 128 128zm96 64a63.08 63.08 0 0 1 8.1-30.5c-4.8-.5-9.5-1.5-14.5-1.5h-16.7a174.08 174.08 0 0 1-145.8 0h-16.7A134.43 134.43 0 0 0 0 422.4V464a48 48 0 0 0 48 48h280.9a63.54 63.54 0 0 1-8.9-32zm288-32h-32v-80a80 80 0 0 0-160 0v80h-32a32 32 0 0 0-32 32v160a32 32 0 0 0 32 32h224a32 32 0 0 0 32-32V320a32 32 0 0 0-32-32zM496 432a32 32 0 1 1 32-32 32 32 0 0 1-32 32zm32-144h-64v-80a32 32 0 0 1 64 0z';

exports.definition = {
  prefix: prefix,
  iconName: iconName,
  icon: [
    width,
    height,
    ligatures,
    unicode,
    svgPathData
  ]};

exports.faUserLock = exports.definition;
exports.prefix = prefix;
exports.iconName = iconName;
exports.width = width;
exports.height = height;
exports.ligatures = ligatures;
exports.unicode = unicode;
exports.svgPathData = svgPathData;
});

unwrapExports(faUserLock);
var faUserLock_1 = faUserLock.definition;
var faUserLock_2 = faUserLock.faUserLock;
var faUserLock_3 = faUserLock.prefix;
var faUserLock_4 = faUserLock.iconName;
var faUserLock_5 = faUserLock.width;
var faUserLock_6 = faUserLock.height;
var faUserLock_7 = faUserLock.ligatures;
var faUserLock_8 = faUserLock.unicode;
var faUserLock_9 = faUserLock.svgPathData;

var faHistory = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, '__esModule', { value: true });
var prefix = 'fas';
var iconName = 'history';
var width = 512;
var height = 512;
var ligatures = [];
var unicode = 'f1da';
var svgPathData = 'M504 255.531c.253 136.64-111.18 248.372-247.82 248.468-59.015.042-113.223-20.53-155.822-54.911-11.077-8.94-11.905-25.541-1.839-35.607l11.267-11.267c8.609-8.609 22.353-9.551 31.891-1.984C173.062 425.135 212.781 440 256 440c101.705 0 184-82.311 184-184 0-101.705-82.311-184-184-184-48.814 0-93.149 18.969-126.068 49.932l50.754 50.754c10.08 10.08 2.941 27.314-11.313 27.314H24c-8.837 0-16-7.163-16-16V38.627c0-14.254 17.234-21.393 27.314-11.314l49.372 49.372C129.209 34.136 189.552 8 256 8c136.81 0 247.747 110.78 248 247.531zm-180.912 78.784l9.823-12.63c8.138-10.463 6.253-25.542-4.21-33.679L288 256.349V152c0-13.255-10.745-24-24-24h-16c-13.255 0-24 10.745-24 24v135.651l65.409 50.874c10.463 8.137 25.541 6.253 33.679-4.21z';

exports.definition = {
  prefix: prefix,
  iconName: iconName,
  icon: [
    width,
    height,
    ligatures,
    unicode,
    svgPathData
  ]};

exports.faHistory = exports.definition;
exports.prefix = prefix;
exports.iconName = iconName;
exports.width = width;
exports.height = height;
exports.ligatures = ligatures;
exports.unicode = unicode;
exports.svgPathData = svgPathData;
});

unwrapExports(faHistory);
var faHistory_1 = faHistory.definition;
var faHistory_2 = faHistory.faHistory;
var faHistory_3 = faHistory.prefix;
var faHistory_4 = faHistory.iconName;
var faHistory_5 = faHistory.width;
var faHistory_6 = faHistory.height;
var faHistory_7 = faHistory.ligatures;
var faHistory_8 = faHistory.unicode;
var faHistory_9 = faHistory.svgPathData;

export { faUserLock_2 as a, faHistory_2 as b, findLastIndex as c, dark_random_color as d, faKey_2 as e, faUser_2 as f, time_ago as t };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
