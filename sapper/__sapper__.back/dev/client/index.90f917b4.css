@media(min-width: 768px){.streamer-ranking.svelte-1lmtari tbody td.svelte-1lmtari{padding:0.5rem 0.25rem;padding-top:1.0rem;padding-bottom:1.0rem;text-align:center}.streamer-ranking.svelte-1lmtari thead th.svelte-1lmtari{padding-left:1rem;padding-right:1rem;padding-bottom:.5rem;padding-top:.5rem}}.streamer-ranking.svelte-1lmtari tbody td.svelte-1lmtari{padding:0.5rem 0.25rem;padding-top:1.0rem;padding-bottom:1.0rem;text-align:center}.streamer-ranking.svelte-1lmtari thead th.svelte-1lmtari{padding-left:0.5rem;padding-right:0.5rem;padding-bottom:.5rem;padding-top:.5rem}.streamer-ranking.svelte-1lmtari tbody tr td.svelte-1lmtari:last-child{padding-right:1rem}.streamer-ranking.svelte-1lmtari .ordered.svelte-1lmtari{border-bottom-width:2px}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */