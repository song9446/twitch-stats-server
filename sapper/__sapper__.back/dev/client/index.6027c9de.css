@keyframes svelte-1mrw0kg-blinker{50%{opacity:0}}
.week.svelte-5wjnn4{padding:0;margin:0;display:-webkit-box;display:-moz-box;display:-ms-flexbox;display:-webkit-flex;display:flex;flex-flow:row;-webkit-flex-flow:row;justify-content:space-around;-ms-grid-column:1;grid-column:1}.week.svelte-5wjnn4:nth-child(6n + 1){-ms-grid-row:1;grid-row:1}.week.svelte-5wjnn4:nth-child(6n + 2){-ms-grid-row:2;grid-row:2}.week.svelte-5wjnn4:nth-child(6n + 3){-ms-grid-row:3;grid-row:3}.week.svelte-5wjnn4:nth-child(6n + 4){-ms-grid-row:4;grid-row:4}.week.svelte-5wjnn4:nth-child(6n + 5){-ms-grid-row:5;grid-row:5}.week.svelte-5wjnn4:nth-child(6n + 6){-ms-grid-row:6;grid-row:6}.day.svelte-5wjnn4{margin:2px;color:var(--day-text-color);font-weight:bold;text-align:center;font-size:16px;flex:1 0 auto;height:auto;display:flex;flex-basis:0}.day.outside-month.svelte-5wjnn4,.day.is-disabled.svelte-5wjnn4{opacity:0.35}.day.svelte-5wjnn4:before{content:'';float:left;padding-top:100%}.day--label.svelte-5wjnn4{color:var(--day-text-color);display:flex;justify-content:center;flex-direction:column;width:100%;position:relative;border:1px solid #fff;border-radius:50%;margin:10%;padding:0;align-items:center;background:var(--day-background-color);cursor:pointer;transition:all 100ms linear;font-weight:normal}.day--label.disabled.svelte-5wjnn4{cursor:default}@media(min-width: 480px){.day--label.highlighted.svelte-5wjnn4,.day--label.svelte-5wjnn4:not(.disabled):hover{background:var(--day-highlighted-background-color);border-color:var(--day-highlighted-background-color);color:var(--day-highlighted-text-color)}}.day--label.shake-date.svelte-5wjnn4{animation:svelte-5wjnn4-shake 0.4s 1 linear}.day--label.selected.svelte-5wjnn4:hover,.day--label.selected.svelte-5wjnn4,.day--label.svelte-5wjnn4:active:not(.disabled){background-color:var(--highlight-color);border-color:var(--highlight-color);color:#fff}.day.is-today.svelte-5wjnn4 .day--label.svelte-5wjnn4,.day.is-today.svelte-5wjnn4 .day--label.svelte-5wjnn4:hover{opacity:1;background:none;border-color:var(--highlight-color);color:#000}@keyframes svelte-5wjnn4-shake{0%{transform:translate(7px)}20%{transform:translate(-7px)}40%{transform:translate(3px)}60%{transform:translate(-3px)}80%{transform:translate(1px)}100%{transform:translate(0px)}}
.month-container.svelte-1y5dcxc{width:100%;display:-ms-grid;display:grid;-ms-grid-columns:1fr;-ms-grid-rows:1fr}
.heading-section.svelte-1uccyem{font-size:20px;padding:24px 15px;display:flex;justify-content:space-between;color:#3d4548;font-weight:bold}.label.svelte-1uccyem{cursor:pointer}.month-selector.svelte-1uccyem{position:absolute;top:75px;left:0;right:0;bottom:0;background-color:#fff;transition:all 300ms;transform:scale(1.2);opacity:0;visibility:hidden;z-index:1;text-align:center}.month-selector.open.svelte-1uccyem{transform:scale(1);visibility:visible;opacity:1}.month-selector--month.svelte-1uccyem{width:31.333%;margin:.5%;height:23%;display:inline-block;color:#4a4a4a;border:1px solid #efefef;opacity:0.2}.month-selector--month.selectable.svelte-1uccyem{opacity:1}.month-selector--month.selectable.svelte-1uccyem:hover{cursor:pointer;box-shadow:0px 0px 3px rgba(0,0,0,0.15)}.month-selector--month.selected.svelte-1uccyem{background:var(--highlight-color);color:#fff}.month-selector--month.svelte-1uccyem:before{content:' ';display:inline-block;height:100%;vertical-align:middle}.month-selector--month.svelte-1uccyem span.svelte-1uccyem{vertical-align:middle;display:inline-block}.control.svelte-1uccyem{padding:0 8px;opacity:0.2;transform:translateY(3px)}.control.enabled.svelte-1uccyem{opacity:1;cursor:pointer}.arrow.svelte-1uccyem{display:inline-block;width:18px;height:18px;border-style:solid;border-color:#a9a9a9;border-width:0;border-bottom-width:2px;border-right-width:2px}.arrow.right.svelte-1uccyem{transform:rotate(-45deg);-webkit-transform:rotate(-45deg)}.arrow.left.svelte-1uccyem{transform:rotate(135deg);-webkit-transform:rotate(135deg)}
.sc-popover.svelte-1wmex1c{position:relative}.contents-wrapper.svelte-1wmex1c{transform:translate(-50%, -50%);position:absolute;top:50%;left:50%;transition:none;z-index:2;display:none}.contents.svelte-1wmex1c{background:#fff;box-shadow:0px 10px 26px rgba(0,0,0,0.4) ;opacity:.8;padding-top:0;display:none;animation:svelte-1wmex1c-grow 200ms forwards cubic-bezier(.92,.09,.18,1.05)}.contents-inner.svelte-1wmex1c{animation:svelte-1wmex1c-fadeIn 400ms forwards}.contents-wrapper.visible.svelte-1wmex1c{display:block}.contents-wrapper.visible.svelte-1wmex1c .contents.svelte-1wmex1c{opacity:1;transform:scale(1);display:block}.contents-wrapper.shrink.svelte-1wmex1c .contents.svelte-1wmex1c{animation:svelte-1wmex1c-shrink 150ms forwards cubic-bezier(.92,.09,.18,1.05)}@keyframes svelte-1wmex1c-grow{0%{transform:scale(.9,.1);opacity:0}30%{opacity:1}100%{transform:scale(1)}}@keyframes svelte-1wmex1c-shrink{0%{transform:scale(1);opacity:1}70%{opacity:1}100%{opacity:0;transform:scale(.9,.1)}}@keyframes svelte-1wmex1c-fadeIn{0%{opacity:0}50%{opacity:0}100%{opacity:1}}
.datepicker.svelte-1lorc63{display:inline-block;margin:0 auto;text-align:center;overflow:visible}.calendar-button.svelte-1lorc63{padding:10px 20px;border:1px solid var(--button-border-color);display:block;text-align:center;width:300px;text-decoration:none;cursor:pointer;background:var(--button-background-color);color:var(--button-text-color);border-radius:7px;box-shadow:0px 0px 3px rgba(0, 0, 0, 0.1)}.svelte-1lorc63,.svelte-1lorc63:before,.svelte-1lorc63:after{box-sizing:inherit}.calendar.svelte-1lorc63{box-sizing:border-box;position:relative;overflow:hidden;user-select:none;width:100vw;padding:10px;padding-top:0}@media(min-width: 480px){.calendar.svelte-1lorc63{height:auto;width:340px;max-width:100%}}.legend.svelte-1lorc63{color:#4a4a4a;padding:10px 0;margin-bottom:5px}.legend.svelte-1lorc63 span.svelte-1lorc63{width:14.285714%;display:inline-block;text-align:center}
.contents-wrapper{z-index:50 !important}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguNjAyN2M5ZGUuY3NzIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tcG9uZW50cy9NaWdyYXRpb25UaW1lbGluZS5zdmVsdGUiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3ZlbHRlLWNhbGVuZGFyL3NyYy9Db21wb25lbnRzL1dlZWsuc3ZlbHRlIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N2ZWx0ZS1jYWxlbmRhci9zcmMvQ29tcG9uZW50cy9Nb250aC5zdmVsdGUiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3ZlbHRlLWNhbGVuZGFyL3NyYy9Db21wb25lbnRzL05hdkJhci5zdmVsdGUiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3ZlbHRlLWNhbGVuZGFyL3NyYy9Db21wb25lbnRzL1BvcG92ZXIuc3ZlbHRlIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N2ZWx0ZS1jYWxlbmRhci9zcmMvQ29tcG9uZW50cy9EYXRlcGlja2VyLnN2ZWx0ZSIsIi4uLy4uLy4uL3NyYy9yb3V0ZXMvbWlncmF0aW9uL2luZGV4LnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8ZGl2IGNsYXNzPVwidy1mdWxsIHJlbGF0aXZlXCI+XG4gIDxkaXYgY2xhc3M9XCJ3LWZ1bGxcIj5cbiAgICA8c3ZnIGNsYXNzPVwiZmxleC1ncm93IGJvcmRlci1ncmF5LTkwMCB3LWZ1bGxcIiB3aWR0aD17d2lkdGh9IGhlaWdodD17aGVpZ2h0fSBiaW5kOnRoaXM9e3N2Z30+XG4gICAgICA8ZGVmcz5cbiAgICAgICAgeyNlYWNoIE9iamVjdC52YWx1ZXMoZ2FtZXMpIGFzIGdhbWV9XG4gICAgICAgIDxwYXR0ZXJuIGlkPVwiZ2FtZS1ib3gtYXJ0LXtnYW1lLmlkfVwiIHdpZHRoPXtnYW1lX2JveF9hcnRfd2lkdGh9IGhlaWdodD17Z2FtZV9ib3hfYXJ0X2hlaWdodH0gcGF0dGVyblVuaXRzPVwidXNlclNwYWNlT25Vc2VcIiB5PXtoZWlnaHQqMC4yNX0+XG4gICAgICAgICAgeyNpZiBnYW1lLmJveF9hcnRfdXJsfVxuICAgICAgICAgICAgPGltYWdlIHhsaW5rOmhyZWY9e2dhbWUuYm94X2FydF91cmwucmVwbGFjZShcInt3aWR0aH1cIiwgZ2FtZV9ib3hfYXJ0X3dpZHRoKS5yZXBsYWNlKFwie2hlaWdodH1cIiwgZ2FtZV9ib3hfYXJ0X2hlaWdodCl9IHdpZHRoPXtnYW1lX2JveF9hcnRfd2lkdGh9IGhlaWdodD17Z2FtZV9ib3hfYXJ0X2hlaWdodH0geD0wIHk9MCA+IDwvaW1hZ2U+XG4gICAgICAgICAgey9pZn1cbiAgICAgICAgPC9wYXR0ZXJuPlxuICAgICAgICB7L2VhY2h9XG4gICAgICAgIDxtYXJrZXIgaWQ9XCJiaWdoZWFkXCIgXG4gICAgICAgICAgbWFya2VyV2lkdGg9XCI0XCIgbWFya2VySGVpZ2h0PVwiOFwiIFxuICAgICAgICAgICAgICAgICAgICAgICAgICByZWZYPVwiMC4xXCIgcmVmWT1cIjRcIiBvcmllbnQ9XCJhdXRvXCIgPlxuICAgICAgICAgIDxwYXRoIGQ9XCJNMCwwIFY4IEw0LDQgWlwiIGZpbGw9XCIjNDQ0XCIgLz5cbiAgICAgICAgPC9tYXJrZXI+XG4gICAgICA8L2RlZnM+XG4gICAgICA8IS0tPGcgc2hhcGUtcmVuZGVyaW5nPVwiY3Jpc3BFZGdlc1wiPlxuICAgICAgICA8bGluZSB4MT1cInt3aWR0aCowLzh9XCIgeDI9XCJ7d2lkdGgqMC84fVwiIHkxPVwiMFwiIHkyPVwie2hlaWdodH1cIiBzdHJva2Utd2lkdGg9XCIxLjBcIiBzdHJva2U9XCIjNDQ0XCI+PC9saW5lPlxuICAgICAgICA8dGV4dCB4PVwiMFwiIHk9XCIwXCIgZmlsbD1cIiM0NDRcIiBmb250LXNpemU9XCIxMFwiIGZvbnQtZmFtaWx5PVwiQXJpYWxcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoe3dpZHRoKjAvOCArIDN9LCAzKSByb3RhdGUoOTApXCI+XG4gICAgICAgICAgMGFtXG4gICAgICAgIDwvdGV4dD5cbiAgICAgICAgPGxpbmUgeDE9XCJ7d2lkdGgqMS84fVwiIHgyPVwie3dpZHRoKjEvOH1cIiB5MT1cIjBcIiB5Mj1cIntoZWlnaHR9XCIgc3Ryb2tlLXdpZHRoPVwiMS4wXCIgc3Ryb2tlPVwiI2FhYVwiPjwvbGluZT5cbiAgICAgICAgPHRleHQgeD1cIjBcIiB5PVwiMFwiIGZpbGw9XCIjYWFhXCIgZm9udC1zaXplPVwiMTBcIiBmb250LWZhbWlseT1cIkFyaWFsXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKHt3aWR0aCoxLzggKyAzfSwgMykgcm90YXRlKDkwKVwiPlxuICAgICAgICAgIDNhbVxuICAgICAgICA8L3RleHQ+XG4gICAgICAgIDxsaW5lIHgxPVwie3dpZHRoKjIvOH1cIiB4Mj1cInt3aWR0aCoyLzh9XCIgeTE9XCIwXCIgeTI9XCJ7aGVpZ2h0fVwiIHN0cm9rZS13aWR0aD1cIjEuMFwiIHN0cm9rZT1cIiM2NjZcIj48L2xpbmU+XG4gICAgICAgIDx0ZXh0IGZpbGw9XCIjNjY2XCIgZm9udC1zaXplPVwiMTBcIiBmb250LWZhbWlseT1cIkFyaWFsXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKHt3aWR0aCoyLzggKyAzfSwgMykgcm90YXRlKDkwKVwiPlxuICAgICAgICAgIDZhbVxuICAgICAgICA8L3RleHQ+XG4gICAgICAgIDxsaW5lIHgxPVwie3dpZHRoKjMvOH1cIiB4Mj1cInt3aWR0aCozLzh9XCIgeTE9XCIwXCIgeTI9XCJ7aGVpZ2h0fVwiIHN0cm9rZS13aWR0aD1cIjEuMFwiIHN0cm9rZT1cIiNhYWFcIj48L2xpbmU+XG4gICAgICAgIDx0ZXh0IGZpbGw9XCIjYWFhXCIgZm9udC1zaXplPVwiMTBcIiBmb250LWZhbWlseT1cIkFyaWFsXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKHt3aWR0aCozLzggKyAzfSwgMykgcm90YXRlKDkwKVwiPlxuICAgICAgICAgIDlhbVxuICAgICAgICA8L3RleHQ+XG4gICAgICAgIDxsaW5lIHgxPVwie3dpZHRoKjQvOH1cIiB4Mj1cInt3aWR0aCo0Lzh9XCIgeTE9XCIwXCIgeTI9XCJ7aGVpZ2h0fVwiIHN0cm9rZS13aWR0aD1cIjEuMFwiIHN0cm9rZT1cIiM0NDRcIj48L2xpbmU+XG4gICAgICAgIDx0ZXh0IGZpbGw9XCIjNDQ0XCIgZm9udC1zaXplPVwiMTBcIiBmb250LWZhbWlseT1cIkFyaWFsXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKHt3aWR0aCo0LzggKyAzfSwgMykgcm90YXRlKDkwKVwiPlxuICAgICAgICAgIOygleyYpFxuICAgICAgICA8L3RleHQ+XG4gICAgICAgIDxsaW5lIHgxPVwie3dpZHRoKjUvOH1cIiB4Mj1cInt3aWR0aCo1Lzh9XCIgeTE9XCIwXCIgeTI9XCJ7aGVpZ2h0fVwiIHN0cm9rZS13aWR0aD1cIjEuMFwiIHN0cm9rZT1cIiNhYWFcIj48L2xpbmU+XG4gICAgICAgIDx0ZXh0IGZpbGw9XCIjYWFhXCIgZm9udC1zaXplPVwiMTBcIiBmb250LWZhbWlseT1cIkFyaWFsXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKHt3aWR0aCo1LzggKyAzfSwgMykgcm90YXRlKDkwKVwiPlxuICAgICAgICAgIDNwbVxuICAgICAgICA8L3RleHQ+XG4gICAgICAgIDxsaW5lIHgxPVwie3dpZHRoKjYvOH1cIiB4Mj1cInt3aWR0aCo2Lzh9XCIgeTE9XCIwXCIgeTI9XCJ7aGVpZ2h0fVwiIHN0cm9rZS13aWR0aD1cIjEuMFwiIHN0cm9rZT1cIiM2NjZcIj48L2xpbmU+XG4gICAgICAgIDx0ZXh0IGZpbGw9XCIjNjY2XCIgZm9udC1zaXplPVwiMTBcIiBmb250LWZhbWlseT1cIkFyaWFsXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKHt3aWR0aCo2LzggKyAzfSwgMykgcm90YXRlKDkwKVwiPlxuICAgICAgICAgIDZwbVxuICAgICAgICA8L3RleHQ+XG4gICAgICAgIDxsaW5lIHgxPVwie3dpZHRoKjcvOH1cIiB4Mj1cInt3aWR0aCo3Lzh9XCIgeTE9XCIwXCIgeTI9XCJ7aGVpZ2h0fVwiIHN0cm9rZS13aWR0aD1cIjEuMFwiIHN0cm9rZT1cIiNhYWFcIj48L2xpbmU+XG4gICAgICAgIDx0ZXh0IGZpbGw9XCIjYWFhXCIgZm9udC1zaXplPVwiMTBcIiBmb250LWZhbWlseT1cIkFyaWFsXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKHt3aWR0aCo3LzggKyAzfSwgMykgcm90YXRlKDkwKVwiPlxuICAgICAgICAgIDlwbVxuICAgICAgICA8L3RleHQ+XG4gICAgICAgIDxsaW5lIHgxPVwie3dpZHRoKjgvOH1cIiB4Mj1cInt3aWR0aCo4Lzh9XCIgeTE9XCIwXCIgeTI9XCJ7aGVpZ2h0fVwiIHN0cm9rZS13aWR0aD1cIjEuMFwiIHN0cm9rZT1cIiM0NDRcIj48L2xpbmU+XG4gICAgICAgIDx0ZXh0IHg9XCIwXCIgeT1cIjBcIiBmaWxsPVwiIzQ0NFwiIGZvbnQtc2l6ZT1cIjEwXCIgZm9udC1mYW1pbHk9XCJBcmlhbFwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSh7d2lkdGgqOC84ICsgM30sIDMpIHJvdGF0ZSg5MClcIj5cbiAgICAgICAgICAxMnBtXG4gICAgICAgIDwvdGV4dD5cbiAgICAgIDwvZz4tLT5cbiAgICAgIDxnIHN0cm9rZT1cIiNBMEFFQzBcIiBzdHJva2Utd2lkdGg9MS4wPlxuICAgICAgPHBhdGggXG4gICAgICAgICBkPVwiTTAse2hlaWdodCowLjV9IEx7d2lkdGggLSA0fSx7aGVpZ2h0KjAuNX1cIiBcbiAgICAgICAgIGZpbGw9XCJub25lXCJcbiAgICAgICAgIG1hcmtlci1lbmQ9XCJ1cmwoI2JpZ2hlYWQpXCJcbiAgICAgIC8+IFxuICAgICAgICB7I2VhY2ggZGF0YV9jaHVua3MgYXMgZGF0YX1cbiAgICAgICAgICB7I2lmIGRhdGFbMF0gJiYgZGF0YVswXVs1XSAmJiBkYXRhWzBdWzVdLmdhbWUgJiYgZ2FtZXNbZGF0YVswXVs1XS5nYW1lLmlkXSAmJiBkYXRhWzBdWzVdLmdhbWUuYm94X2FydF91cmx9XG4gICAgICAgICAgICA8cGF0aCBcbiAgICAgICAgICAgICAgc3R5bGU9XCJmaWxsOnVybCgjZ2FtZS1ib3gtYXJ0LXtkYXRhWzBdWzVdLmdhbWUuaWR9KTsgc3Ryb2tlLWxpbmVqb2luOiByb3VuZDtcIlxuICAgICAgICAgICAgICAgZD1cIntkYXRhLnBhdGh9XCIgLz5cbiAgICAgICAgICB7OmVsc2V9XG4gICAgICAgICAgICA8cGF0aCBcbiAgICAgICAgICAgICAgc3R5bGU9XCJzdHJva2UtbGluZWpvaW46IHJvdW5kO1wiXG4gICAgICAgICAgICAgIGZpbGw9XCIjMDAwMDAwXCIgXG4gICAgICAgICAgICAgICBkPVwie2RhdGEucGF0aH1cIiAvPlxuICAgICAgICAgIHsvaWZ9XG4gICAgICAgIHsvZWFjaH1cbiAgICAgIDwvZz5cbiAgICAgIDxnIHNoYXBlLXJlbmRlcmluZz1cImNyaXNwRWRnZXNcIj5cbiAgICAgICAgPGxpbmUgY2xhc3M6aGlkZGVuPXt0b29sdGlwX2RhdGEgPT0gbnVsbH0geDE9e3Rvb2x0aXBfeH0geDI9e3Rvb2x0aXBfeH0geTE9ezB9IHkyPXtoZWlnaHR9IHN0cm9rZT1cIiMwMDAwMDBcIiBzdHJva2Utd2lkdGg9MC41IFxuICAgICAgICAgIHN0cm9rZS1kYXNoYXJyYXk9XCI0IDFcIlxuICAgICAgICAgIC8+XG4gICAgICA8L2c+XG4gICAgPC9zdmc+XG4gIDwvZGl2PlxuXHR7I2lmIHRvb2x0aXBfZGF0YX0gXG4gICAgPGRpdiBjbGFzcz1cImFic29sdXRlIGJnLXdoaXRlIG9wYWNpdHktNzUgei01MFwiIHN0eWxlPVwie3Rvb2x0aXBfeCA8IHdpZHRoKjAuNT8gJ2xlZnQ6JyArICh0b29sdGlwX3grNSkgKyAncHgnOiAncmlnaHQ6JyArICgod2lkdGgtdG9vbHRpcF94KSs1KSArICdweCd9OyB0b3A6IHt0b29sdGlwX3kgKyA1fXB4XCI+IFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZsZXggZmxleC1jb2wgZm9udC1zYW5zIGN1c3RvbS10b29sdGlwIHAtMyB3LTQ4IGZsZXgtdW53cmFwXCI+IFxuXHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwidGV4dC1ncmF5LTYwMCB0ZXh0LXhzIGZvbnQtc2VtaWJvbGQgdHJhY2tpbmctd2lkZVwiPlxuXHRcdFx0XHRcdFx0XHRcdHt0b29sdGlwX2RhdGFfdGltZV9mb3JtYXQodG9vbHRpcF9kYXRhKX1cblx0XHRcdFx0XHRcdFx0PC9kaXY+XG4gICAgICAgICAgICAgIDxwIGNsYXNzPVwiYnJlYWstYWxsIG10LTEgdGV4dC1ncmF5IGl0YWxpYyB0cmFja2luZy10aWdodFwiIHN0eWxlPVwiZm9udC1zaXplOiAwLjVyZW1cIj5cblx0XHRcdFx0XHRcdFx0XHR7dG9vbHRpcF9kYXRhWzVdLnRpdGxlfVxuICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm10LTEgZmxleCBmbGV4LXJvdyBmbGV4LXdyYXAgaXRlbXMtY2VudGVyIHRleHQtZ3JheS05MDBcIj5cbiAgICAgICAgICAgICAgICAgIDxzdmcgYXJlYS1oaWRkZW49XCJ0cnVlXCIgcm9sZT1cImltZ1wiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIHtmYVVzZXIuaWNvblswXX0ge2ZhVXNlci5pY29uWzFdfVwiIGNsYXNzPVwidy00IGgtNCBtci0yIG92ZXJmbG93LXZpc2libGUgaW5saW5lLWJsb2NrXCI+XG4gICAgICAgICAgICAgICAgICAgIDxwYXRoIGZpbGw9XCJjdXJyZW50Q29sb3JcIiBkPVwie2ZhVXNlci5pY29uWzRdfVwiLz5cbiAgICAgICAgICAgICAgICAgIDwvc3ZnPlxuICAgICAgICAgICAgICAgICAgPGI+e3Rvb2x0aXBfZGF0YVsxXX3rqoU8L2I+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZsZXggZmxleC1yb3cgZmxleC13cmFwIGl0ZW1zLWNlbnRlciB0ZXh0LWdyYXktNjAwIHRleHQteHNcIj5cbiAgICAgICAgICAgICAgICAgIDxzdmcgYXJlYS1oaWRkZW49XCJ0cnVlXCIgcm9sZT1cImltZ1wiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIHtmYVVzZXJTZWNyZXQuaWNvblswXX0ge2ZhVXNlclNlY3JldC5pY29uWzFdfVwiIGNsYXNzPVwidy0zIGgtMyBtci0yIG92ZXJmbG93LXZpc2libGUgaW5saW5lLWJsb2NrXCI+XG4gICAgICAgICAgICAgICAgICAgIDxwYXRoIGZpbGw9XCJjdXJyZW50Q29sb3JcIiBkPVwie2ZhVXNlclNlY3JldC5pY29uWzRdfVwiLz5cbiAgICAgICAgICAgICAgICAgIDwvc3ZnPlxuICAgICAgICAgICAgICAgICAgPGI+e3Rvb2x0aXBfZGF0YVsxXSAtIHRvb2x0aXBfZGF0YVsyXX3rqoU8L2I+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZsZXggZmxleC1yb3cgZmxleC13cmFwIGl0ZW1zLWNlbnRlciB0ZXh0LXllbGxvdy03MDAgdGV4dC14c1wiPlxuICAgICAgICAgICAgICAgICAgPHN2ZyBhcmVhLWhpZGRlbj1cInRydWVcIiByb2xlPVwiaW1nXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAge2ZhS2V5Lmljb25bMF19IHtmYUtleS5pY29uWzFdfVwiIGNsYXNzPVwidy0zIGgtMyBtci0yIG92ZXJmbG93LXZpc2libGUgaW5saW5lLWJsb2NrXCI+XG4gICAgICAgICAgICAgICAgICAgIDxwYXRoIGZpbGw9XCJjdXJyZW50Q29sb3JcIiBkPVwie2ZhS2V5Lmljb25bNF19XCIvPlxuICAgICAgICAgICAgICAgICAgPC9zdmc+XG4gICAgICAgICAgICAgICAgICA8Yj57dG9vbHRpcF9kYXRhWzJdfeuqhTwvYj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibXQtMSBmbGV4IGZsZXgtcm93IGZsZXgtd3JhcCBpdGVtcy1jZW50ZXJcIiBzdHlsZT1cImNvbG9yOiAjRkY2RjYxXCI+XG4gICAgICAgICAgICAgICAgICA8c3ZnIGFyZWEtaGlkZGVuPVwidHJ1ZVwiIHJvbGU9XCJpbWdcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCB7ZmFDb21tZW50RG90cy5pY29uWzBdfSB7ZmFDb21tZW50RG90cy5pY29uWzFdfVwiIGNsYXNzPVwidy00IGgtNCBtci0yIG92ZXJmbG93LXZpc2libGUgaW5saW5lLWJsb2NrXCI+XG4gICAgICAgICAgICAgICAgICAgIDxwYXRoIGZpbGw9XCJjdXJyZW50Q29sb3JcIiBkPVwie2ZhQ29tbWVudERvdHMuaWNvbls0XX1cIi8+XG4gICAgICAgICAgICAgICAgICA8L3N2Zz5cbiAgICAgICAgICAgICAgICAgIDxiPnt0b29sdGlwX2RhdGFbNF0udG9GaXhlZCgxKX3ssYTtjIUv7LSIPC9iPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtdC0xIGZsZXggZmxleC1yb3cgZmxleC13cmFwIGl0ZW1zLWNlbnRlciB0ZXh0LXB1cnBsZS02MDBcIj5cbiAgICAgICAgICAgICAgICAgIDxzdmcgYXJlYS1oaWRkZW49XCJ0cnVlXCIgcm9sZT1cImltZ1wiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIHtmYUhpc3RvcnkuaWNvblswXX0ge2ZhSGlzdG9yeS5pY29uWzFdfVwiIGNsYXNzPVwidy00IGgtNCBtci0yIG92ZXJmbG93LXZpc2libGUgaW5saW5lLWJsb2NrXCI+XG4gICAgICAgICAgICAgICAgICAgIDxwYXRoIGZpbGw9XCJjdXJyZW50Q29sb3JcIiBkPVwie2ZhSGlzdG9yeS5pY29uWzRdfVwiLz5cbiAgICAgICAgICAgICAgICAgIDwvc3ZnPlxuICAgICAgICAgICAgICAgICAgPGI+7JeF7YOA7J6EIHtNYXRoLmZsb29yKCh0b29sdGlwX2RhdGFbMF0gLSB0b29sdGlwX2RhdGFbNV0uc3RhcnRlZF9hdCkgLyAzNjAwKX3si5zqsIR7TWF0aC5yb3VuZCgodG9vbHRpcF9kYXRhWzBdIC0gdG9vbHRpcF9kYXRhWzVdLnN0YXJ0ZWRfYXQpICUgMzYwMCAvIDYwKX3rtoQ8L2I+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDxwIGNsYXNzPVwibXQtMiB0ZXh0LXhzIHB4LTEgYm9yZGVyIHJvdW5kZWQtZnVsbCB0ZXh0LXdoaXRlIHRleHQtY2VudGVyXCIgc3R5bGU9XCJiYWNrZ3JvdW5kLWNvbG9yOiB7ZGFya19yYW5kb21fY29sb3IodG9vbHRpcF9kYXRhWzVdLmdhbWUgJiYgdG9vbHRpcF9kYXRhWzVdLmdhbWUuaWQgfHwgMCl9XCI+XG4gICAgICAgICAgICAgICAge3Rvb2x0aXBfZGF0YVs1XS5nYW1lICE9IG51bGw/IHRvb2x0aXBfZGF0YVs1XS5nYW1lLm5hbWUgOiBcIlwifVxuICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG5cdHsvaWZ9XG48L2Rpdj5cblxuPHNjcmlwdCBjb250ZXh0PVwibW9kdWxlXCI+XG4gIGltcG9ydCB7IHdyaXRhYmxlIH0gZnJvbSAnc3ZlbHRlL3N0b3JlJztcbiAgbGV0IG1heF95X2F4aXMgPSB3cml0YWJsZSgwKTtcbiAgbGV0IG1heF95X2F4aXNfcmlnaHQgPSB3cml0YWJsZSgwKTtcblxuXHRmdW5jdGlvbiB0b29sdGlwX2RhdGFfdGltZV9mb3JtYXQoZGF0YSkge1xuXHRcdGxldCBkID0gbmV3IERhdGUoZGF0YVswXSoxMDAwKSxcblx0XHRcdFx0aCA9IGQuZ2V0SG91cnMoKSwgbSA9IGQuZ2V0TWludXRlcygpO1xuXHRcdHJldHVybiBgJHtoPDEyPyBcIkFNXCI6IFwiUE1cIn0gJHsoXCIwXCIrKGg+MTI/IGgtMTI6IGgpKS5zbGljZSgtMil9OiR7KFwiMFwiK20pLnNsaWNlKC0yKX1gO1xuXHR9XG48L3NjcmlwdD5cblxuPHNjcmlwdD5cbmltcG9ydCB7IG9uTW91bnQgfSBmcm9tIFwic3ZlbHRlXCI7XG5pbXBvcnQgeyBmYVVzZXIgfSBmcm9tICdAZm9ydGF3ZXNvbWUvZnJlZS1zb2xpZC1zdmctaWNvbnMvZmFVc2VyJ1xuaW1wb3J0IHsgZmFVc2VyTG9jayB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYVVzZXJMb2NrJ1xuaW1wb3J0IHsgZmFVc2VyU2VjcmV0IH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhVXNlclNlY3JldCdcbmltcG9ydCB7IGZhVXNlckNoZWNrIH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhVXNlckNoZWNrJ1xuaW1wb3J0IHsgZmFDb21tZW50RG90cyB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYUNvbW1lbnREb3RzJ1xuaW1wb3J0IHsgZmFLZXkgfSBmcm9tICdAZm9ydGF3ZXNvbWUvZnJlZS1zb2xpZC1zdmctaWNvbnMvZmFLZXknXG5pbXBvcnQgeyBmYVN1biB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYVN1bidcbmltcG9ydCB7IGZhTW9vbiB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYU1vb24nXG5pbXBvcnQgeyBmYUV4dGVybmFsTGlua0FsdCB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYUV4dGVybmFsTGlua0FsdCdcbmltcG9ydCB7IGZhSGlzdG9yeSB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYUhpc3RvcnknO1xuaW1wb3J0IHsgZGFya19yYW5kb21fY29sb3IsIGZpbmRMYXN0SW5kZXggfSBmcm9tIFwiLi4vdXRpbC5qc1wiO1xuaW1wb3J0IHsgQVBJIH0gZnJvbSAnLi4vYXBpLmpzJztcblxuZXhwb3J0IGxldCBkYXRlO1xuZXhwb3J0IGxldCBzdHJlYW1lcjtcblxuXG5cbmxldCB0b29sdGlwX3g9MCwgXG5cdFx0dG9vbHRpcF95PTAsIFxuXHRcdHRvb2x0aXBfZGF0YT1udWxsO1xuXG5sZXQgdG9kYXkgPSBuZXcgRGF0ZShkYXRlKTsgdG9kYXkuc2V0SG91cnMoMCwwLDAsMCk7XG5sZXQgdG8gPSBuZXcgRGF0ZSh0b2RheS5nZXRUaW1lKCkgKyAxMDAwKjYwKjYwKjI0KTtcbmxldCBmcm9tID0gdG9kYXk7XG5cbmV4cG9ydCBsZXQgaGVpZ2h0ID0gMTAwO1xubGV0IHdpZHRoID0gNTAwO1xuXG5sZXQgZ2FtZXMgPSB7fTtcbmxldCBkYXRhX2NodW5rcyA9IFtdO1xubGV0IGxhc3RfZGF0YSA9IG51bGw7XG4kOiBnYW1lX2JveF9hcnRfd2lkdGggPSBoZWlnaHQqMC40O1xuJDogZ2FtZV9ib3hfYXJ0X2hlaWdodCA9IGhlaWdodCowLjU7XG5cbmxldCBzdmc7XG5cbmxldCB0b190aW1lc3RhbXAgPSB0by5nZXRUaW1lKCkvMTAwMDtcbmxldCBmcm9tX3RpbWVzdGFtcCA9IGZyb20uZ2V0VGltZSgpLzEwMDA7XG5mdW5jdGlvbiB4c2NhbGUoeCkge1xuICByZXR1cm4gd2lkdGggKiAoeCAtIGZyb21fdGltZXN0YW1wKSAvICgyNCo2MCo2MCk7XG59XG5mdW5jdGlvbiBpeHNjYWxlKHgpIHtcbiAgcmV0dXJuIHggLyB3aWR0aCAqICgyNCo2MCo2MCkgKyBmcm9tX3RpbWVzdGFtcFxufVxuZnVuY3Rpb24geXNjYWxlKHgpIHtcbiAgcmV0dXJuIGhlaWdodCAqICgkbWF4X3lfYXhpcyAtIHgpIC8gJG1heF95X2F4aXM7XG59XG5mdW5jdGlvbiB5c2NhbGVfcmlnaHQoeCkge1xuICByZXR1cm4gaGVpZ2h0ICogKCRtYXhfeV9heGlzX3JpZ2h0IC0geCkgLyAkbWF4X3lfYXhpc19yaWdodCArIDM7XG59XG5mdW5jdGlvbiB1cGRhdGVfcGF0aCgpIHtcbiAgZm9yKGxldCBkYXRhIG9mIGRhdGFfY2h1bmtzKXtcbiAgICBkYXRhLnBhdGggPSBcbiAgICAgIGBNJHt4c2NhbGUoZGF0YVswXVswXSl9LCR7aGVpZ2h0KjAuNX1gICtcbiAgICAgIGRhdGEubWFwKGQ9PlxuICAgICAgICBgTCR7eHNjYWxlKGRbMF0pfSwke3lzY2FsZShkWzJdKSowLjV9YFxuICAgICAgKS5qb2luKFwiXCIpICsgXG4gICAgICBkYXRhLm1hcCgoXywgaSwgYXJyKSA9PlxuICAgICAgICBgTCR7eHNjYWxlKGFyclthcnIubGVuZ3RoIC0gaSAtIDFdWzBdKX0sJHt5c2NhbGUoYXJyW2Fyci5sZW5ndGggLSBpIC0gMV1bMl0pKi0wLjUgKyBoZWlnaHQqMS4wfWBcbiAgICAgICkuam9pbihcIlwiKSArIFxuICAgICAgYEwke3hzY2FsZShkYXRhWzBdWzBdKX0sJHtoZWlnaHQqMC41fWA7XG4gIH1cbiAgZGF0YV9jaHVua3MgPSBkYXRhX2NodW5rcztcbn1cbmxldCBsYXN0X21heF95X2F4aXMgPSAkbWF4X3lfYXhpcztcbmxldCBsYXN0X21heF95X2F4aXNfcmlnaHQgPSAkbWF4X3lfYXhpc19yaWdodDtcbiQ6IGlmKGRhdGFfY2h1bmtzICYmICgobGFzdF9tYXhfeV9heGlzICE9ICRtYXhfeV9heGlzKSB8fCAobGFzdF9tYXhfeV9heGlzX3JpZ2h0ICE9ICRtYXhfeV9heGlzX3JpZ2h0KSkpIHtcbiAgbGFzdF9tYXhfeV9heGlzID0gJG1heF95X2F4aXM7XG4gIGxhc3RfbWF4X3lfYXhpc19yaWdodCA9ICRtYXhfeV9heGlzX3JpZ2h0O1xuICB1cGRhdGVfcGF0aCgpO1xufVxuXG5sZXQgbm93X3ggPSBudWxsO1xuXG5vbk1vdW50KGFzeW5jICgpPT4ge1xuXHR3aWR0aCA9IHN2Zy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aDtcbiAgbm93X3ggPSB4c2NhbGUobmV3IERhdGUoKS5nZXRUaW1lKCkvMTAwMCk7XG4gIGlmKHN0cmVhbWVyID09IG51bGwpXG4gICAgcmV0dXJuO1xuICBsZXQge3N0cmVhbV9jaGFuZ2VzLCBzdHJlYW1fbWV0YWRhdGFfY2hhbmdlc30gPSBhd2FpdCBBUEkudGltZWxpbmUoc3RyZWFtZXIuaWQsIGZyb20sIHRvKTtcbiAgbGFzdF9kYXRhID0gc3RyZWFtX2NoYW5nZXNbc3RyZWFtX2NoYW5nZXMubGVuZ3RoLTFdO1xuICBtYXhfeV9heGlzLnVwZGF0ZSh4ID0+IE1hdGgubWF4KHgsIC4uLnN0cmVhbV9jaGFuZ2VzLm1hcChkPT5NYXRoLm1heChkWzJdKSkpKTtcbiAgbWF4X3lfYXhpc19yaWdodC51cGRhdGUoeCA9PiBNYXRoLm1heCh4LCAuLi5zdHJlYW1fY2hhbmdlcy5tYXAoZD0+ZFs0XSkpKTtcbiAgbGV0IGo9MDtcbiAgbGV0IG1ldGFkYXRhcyA9IHN0cmVhbV9jaGFuZ2VzLm1hcCh4ID0+IHtcbiAgICB3aGlsZShzdHJlYW1fbWV0YWRhdGFfY2hhbmdlcy5sZW5ndGggPiBqICYmIHhbMF0gPj0gc3RyZWFtX21ldGFkYXRhX2NoYW5nZXNbal0udGltZSkgKytqO1xuICAgIGlmKHhbMV0gPT09IG51bGwpIHJldHVybiBudWxsO1xuICAgIGVsc2UgaWYoaj4wKSByZXR1cm4gc3RyZWFtX21ldGFkYXRhX2NoYW5nZXNbai0xXTtcbiAgICBlbHNlIHJldHVybiBudWxsO1xuICB9KTtcbiAgc3RyZWFtX2NoYW5nZXMgPSBzdHJlYW1fY2hhbmdlcy5tYXAoKGQsIGkpPT5bLi4uZCwgbWV0YWRhdGFzW2ldXSk7XG4gIGxldCBzbV9uID0gMjAsIGNoYXR0aW5nX3NwZWVkX3NtID0gW3N0cmVhbV9jaGFuZ2VzLnNsaWNlKDAsIHNtX24pLnJlZHVjZSgoYSxiKT0+YStiWzRdLCAwKS9zbV9uXTtcbiAgZm9yKGxldCBpPXNtX24sIGw9c3RyZWFtX2NoYW5nZXMubGVuZ3RoLCBzbT1jaGF0dGluZ19zcGVlZF9zbVswXTsgaTxsOyArK2kpe1xuICAgIHNtID0gc20gKyAoc3RyZWFtX2NoYW5nZXNbaV1bNF0gLSBzdHJlYW1fY2hhbmdlc1tpLXNtX25dWzRdKS9zbV9uO1xuICAgIGNoYXR0aW5nX3NwZWVkX3NtLnB1c2goc20pO1xuICB9XG4gIGZvcihsZXQgaT0wLCBzbT0wOyBpPE1hdGgubWluKHNtX24sIHN0cmVhbV9jaGFuZ2VzLmxlbmd0aCk7ICsraSl7XG4gICAgc20gPSBzbSppLyhpKzEpICsgc3RyZWFtX2NoYW5nZXNbaV1bNF0vKGkrMSk7XG4gICAgc3RyZWFtX2NoYW5nZXNbaV1bNF0gPSBzbTtcbiAgfVxuICBmb3IobGV0IGk9MCwgbD1jaGF0dGluZ19zcGVlZF9zbS5sZW5ndGg7IGk8bDsgKytpKVxuICAgIHN0cmVhbV9jaGFuZ2VzW01hdGgubWluKHN0cmVhbV9jaGFuZ2VzLmxlbmd0aC0xLCBpICsgc21fbi0xKV1bNF0gPSBjaGF0dGluZ19zcGVlZF9zbVtpXTtcblxuXHRzdmcub25tb3VzZW1vdmUgPSBmdW5jdGlvbihlKXtcblx0XHRsZXQgeCA9IGUuY2xpZW50WCAtIHN2Zy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS54LCBcblx0XHRcdFx0eSA9IGUuY2xpZW50WSAtIHN2Zy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS55O1xuICAgIHRvb2x0aXBfeCA9IHg7IFxuICAgIHRvb2x0aXBfeSA9IHk7XG4gICAgbGV0IHRhcmdldF9kYXRlID0gaXhzY2FsZSh4KTtcbiAgICBsZXQgcmlnaHRfaW5kZXggPSBzdHJlYW1fY2hhbmdlcy5maW5kSW5kZXgoZCA9PiBkWzBdID49IHRhcmdldF9kYXRlKSxcbiAgICAgICAgbGVmdF9pbmRleCA9IGZpbmRMYXN0SW5kZXgoc3RyZWFtX2NoYW5nZXMsIGQgPT4gZFswXSA8PSB0YXJnZXRfZGF0ZSk7XG4gICAgbGV0IG5lYXJlc3RfaW5kZXg7IFxuICAgIGlmKHJpZ2h0X2luZGV4ID49IDAgJiYgbGVmdF9pbmRleCA+PSAwKSBcbiAgICAgIG5lYXJlc3RfaW5kZXggPSBNYXRoLmFicyhzdHJlYW1fY2hhbmdlc1tsZWZ0X2luZGV4XVswXSAtIHRhcmdldF9kYXRlKSA8PSBNYXRoLmFicyhzdHJlYW1fY2hhbmdlc1tyaWdodF9pbmRleF1bMF0gLSB0YXJnZXRfZGF0ZSk/XG4gICAgICAgIGxlZnRfaW5kZXg6IHJpZ2h0X2luZGV4O1xuICAgIGVsc2UgaWYocmlnaHRfaW5kZXggPj0gMClcbiAgICAgIG5lYXJlc3RfaW5kZXggPSByaWdodF9pbmRleDtcbiAgICBlbHNlIGlmKGxlZnRfaW5kZXggPj0gMClcbiAgICAgIG5lYXJlc3RfaW5kZXggPSBsZWZ0X2luZGV4O1xuICAgIGVsc2Uge1xuICAgICAgdG9vbHRpcF9kYXRhID0gbnVsbDtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZihNYXRoLmFicyhzdHJlYW1fY2hhbmdlc1tuZWFyZXN0X2luZGV4XVswXSAtIHRhcmdldF9kYXRlKSA8IDYwKjYwKSB7Ly8gfHwgcmlnaHRfaW5kZXggIT0gMCAmJiBtZXRhZGF0YXNbcmlnaHRfaW5kZXhdLnN0YXJ0ZWRfYXQgPT0gbWV0YWRhdGFzW3JpZ2h0X2luZGV4LTFdLnN0YXJ0ZWRfYXQpIHtcbiAgICAgIHRvb2x0aXBfZGF0YSA9IHN0cmVhbV9jaGFuZ2VzW25lYXJlc3RfaW5kZXhdO1xuICAgIH1cbiAgICBlbHNlIFxuICAgICAgdG9vbHRpcF9kYXRhID0gbnVsbDtcbiAgfVxuICBzdmcub25tb3VzZWxlYXZlID0gZnVuY3Rpb24oZSl7XG4gICAgdG9vbHRpcF9kYXRhID0gbnVsbDtcbiAgfVxuICBkYXRhX2NodW5rcy5wdXNoKFtdKTtcblx0Zm9yKGxldCBpPTAsIGw9c3RyZWFtX2NoYW5nZXMubGVuZ3RoLCBqPTA7IGk8bDsgKytpKSB7XG4gICBcdCAgaWYoaT4wICYmIG1ldGFkYXRhc1tpXSAhPSBtZXRhZGF0YXNbaS0xXSAmJiBcbiAgICAgICAgICAoKG1ldGFkYXRhc1tpXSA9PSBudWxsIHx8IG1ldGFkYXRhc1tpLTFdID09IG51bGwpIHx8IFxuICAgICAgICAgICAgbWV0YWRhdGFzW2ldLnN0YXJ0ZWRfYXQgIT0gbWV0YWRhdGFzW2ktMV0uc3RhcnRlZF9hdCB8fCBcbiAgICAgICAgICAgIChtZXRhZGF0YXNbaV0uZ2FtZSAmJiBtZXRhZGF0YXNbaV0uZ2FtZS5pZCkgIT0gKG1ldGFkYXRhc1tpLTFdLmdhbWUgJiYgbWV0YWRhdGFzW2ktMV0uZ2FtZS5pZCkgfHxcbiAgICAgICAgICAgIG1ldGFkYXRhc1tpXS50aXRsZSAhPSBtZXRhZGF0YXNbaS0xXS50aXRsZSkpe1xuICAgICAgICArK2o7XG4gICAgICAgIGRhdGFfY2h1bmtzLnB1c2goW10pO1xuICAgICAgICBpZihtZXRhZGF0YXNbaV0gJiYgbWV0YWRhdGFzW2ktMV0gJiYgbWV0YWRhdGFzW2ldLnN0YXJ0ZWRfYXQgPT0gbWV0YWRhdGFzW2ktMV0uc3RhcnRlZF9hdCl7XG4gICAgICAgICAgbGV0IG1pZCA9IHN0cmVhbV9jaGFuZ2VzW2ldLnNsaWNlKDAsIDUpLm1hcCgoZCwgaikgPT4gTWF0aC5mbG9vcigoZCArIHN0cmVhbV9jaGFuZ2VzW2ktMV1bal0pKjAuNSkpO1xuICAgICAgICAgIGRhdGFfY2h1bmtzW2otMV0ucHVzaChbLi4ubWlkLCBtZXRhZGF0YXNbaS0xXV0pXG4gICAgICAgICAgZGF0YV9jaHVua3Nbal0ucHVzaChbLi4ubWlkLCBtZXRhZGF0YXNbaV1dKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBkYXRhX2NodW5rc1tqXS5wdXNoKHN0cmVhbV9jaGFuZ2VzW2ldKVxuICB9XG4gIHVwZGF0ZV9wYXRoKCk7XG4gIGRhdGFfY2h1bmtzID0gZGF0YV9jaHVua3M7XG4gIGZvcihsZXQgZGF0YSBvZiBkYXRhX2NodW5rcyl7XG4gIFx0aWYoZGF0YVswXSA9PSBudWxsIHx8IGRhdGFbMF1bNV0gPT0gbnVsbCB8fCBkYXRhWzBdWzVdLmdhbWUgPT0gbnVsbCkgY29udGludWU7XG5cdFx0Z2FtZXNbZGF0YVswXVs1XS5nYW1lLmlkXSA9IGRhdGFbMF1bNV0uZ2FtZTtcblx0fVxufSk7XG48L3NjcmlwdD5cblxuPHN0eWxlPlxuLmlzX3N0cmVhbWluZ19sYWJlbCB7XG4gIGFuaW1hdGlvbjogYmxpbmtlciAxcyBsaW5lYXIgaW5maW5pdGU7XG59XG5Aa2V5ZnJhbWVzIGJsaW5rZXIge1xuICA1MCUge1xuICAgIG9wYWNpdHk6IDA7XG4gIH1cbn1cbjwvc3R5bGU+XG4iLCI8c2NyaXB0PlxuICBpbXBvcnQgeyBhcmVEYXRlc0VxdWl2YWxlbnQgfSBmcm9tICcuL2xpYi9oZWxwZXJzJztcbiAgaW1wb3J0IHsgZmx5LCBmYWRlIH0gZnJvbSAnc3ZlbHRlL3RyYW5zaXRpb24nO1xuICBpbXBvcnQgeyBjcmVhdGVFdmVudERpc3BhdGNoZXIgfSBmcm9tICdzdmVsdGUnO1xuXG4gIGNvbnN0IGRpc3BhdGNoID0gY3JlYXRlRXZlbnREaXNwYXRjaGVyKCk7XG5cbiAgZXhwb3J0IGxldCBkYXlzO1xuICBleHBvcnQgbGV0IHNlbGVjdGVkO1xuICBleHBvcnQgbGV0IGhpZ2hsaWdodGVkO1xuICBleHBvcnQgbGV0IHNob3VsZFNoYWtlRGF0ZTtcbiAgZXhwb3J0IGxldCBkaXJlY3Rpb247XG48L3NjcmlwdD5cclxuXHJcbjxkaXYgXHJcbiAgY2xhc3M9XCJ3ZWVrXCIgXHJcbiAgaW46Zmx5PXt7IHg6IGRpcmVjdGlvbiAqIDUwLCBkdXJhdGlvbjogMTgwLCBkZWxheTogOTAgfX1cclxuICBvdXQ6ZmFkZT17eyBkdXJhdGlvbjogMTgwIH19XHJcbj5cclxuICB7I2VhY2ggZGF5cyBhcyBkYXl9XHJcbiAgICA8ZGl2IFxyXG4gICAgICBjbGFzcz1cImRheVwiIFxyXG4gICAgICBjbGFzczpvdXRzaWRlLW1vbnRoPXshZGF5LnBhcnRPZk1vbnRofVxyXG4gICAgICBjbGFzczppcy10b2RheT17ZGF5LmlzVG9kYXl9XHJcbiAgICAgIGNsYXNzOmlzLWRpc2FibGVkPXshZGF5LnNlbGVjdGFibGV9XHJcbiAgICA+XHJcbiAgICAgIDxidXR0b24gXHJcbiAgICAgICAgY2xhc3M9XCJkYXktLWxhYmVsXCIgXHJcbiAgICAgICAgY2xhc3M6c2VsZWN0ZWQ9e2FyZURhdGVzRXF1aXZhbGVudChkYXkuZGF0ZSwgc2VsZWN0ZWQpfVxyXG4gICAgICAgIGNsYXNzOmhpZ2hsaWdodGVkPXthcmVEYXRlc0VxdWl2YWxlbnQoZGF5LmRhdGUsIGhpZ2hsaWdodGVkKX1cclxuICAgICAgICBjbGFzczpzaGFrZS1kYXRlPXtzaG91bGRTaGFrZURhdGUgJiYgYXJlRGF0ZXNFcXVpdmFsZW50KGRheS5kYXRlLCBzaG91bGRTaGFrZURhdGUpfVxyXG4gICAgICAgIGNsYXNzOmRpc2FibGVkPXshZGF5LnNlbGVjdGFibGV9XHJcbiAgICAgICAgdHlwZT1cImJ1dHRvblwiXHJcbiAgICAgICAgb246Y2xpY2s9eygpID0+IGRpc3BhdGNoKCdkYXRlU2VsZWN0ZWQnLCBkYXkuZGF0ZSl9XHJcbiAgICAgID5cclxuICAgICAgICB7ZGF5LmRhdGUuZ2V0RGF0ZSgpfVxyXG4gICAgICA8L2J1dHRvbj5cclxuICAgIDwvZGl2PlxyXG4gIHsvZWFjaH1cclxuPC9kaXY+XHJcblxyXG48c3R5bGU+XHJcbiAgLndlZWsgeyBcclxuICAgIHBhZGRpbmc6IDA7XHJcbiAgICBtYXJnaW46IDA7XHJcbiAgICBkaXNwbGF5OiAtd2Via2l0LWJveDtcclxuICAgIGRpc3BsYXk6IC1tb3otYm94O1xyXG4gICAgZGlzcGxheTogLW1zLWZsZXhib3g7XHJcbiAgICBkaXNwbGF5OiAtd2Via2l0LWZsZXg7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgZmxleC1mbG93OiByb3c7XHJcbiAgICAtd2Via2l0LWZsZXgtZmxvdzogcm93O1xyXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1hcm91bmQ7XHJcbiAgICAtbXMtZ3JpZC1jb2x1bW46IDE7XHJcbiAgICBncmlkLWNvbHVtbjogMTsgXHJcbiAgfVxyXG4gIC53ZWVrOm50aC1jaGlsZCg2biArIDEpIHsgXHJcbiAgICAtbXMtZ3JpZC1yb3c6IDE7IFxyXG4gICAgZ3JpZC1yb3c6IDE7IFxyXG4gIH1cclxuICAud2VlazpudGgtY2hpbGQoNm4gKyAyKSB7IFxyXG4gICAgLW1zLWdyaWQtcm93OiAyOyBcclxuICAgIGdyaWQtcm93OiAyOyBcclxuICB9XHJcbiAgLndlZWs6bnRoLWNoaWxkKDZuICsgMykgeyBcclxuICAgIC1tcy1ncmlkLXJvdzogMzsgXHJcbiAgICBncmlkLXJvdzogMzsgXHJcbiAgfVxyXG4gIC53ZWVrOm50aC1jaGlsZCg2biArIDQpIHsgXHJcbiAgICAtbXMtZ3JpZC1yb3c6IDQ7IFxyXG4gICAgZ3JpZC1yb3c6IDQ7IFxyXG4gIH1cclxuICAud2VlazpudGgtY2hpbGQoNm4gKyA1KSB7IFxyXG4gICAgLW1zLWdyaWQtcm93OiA1OyBcclxuICAgIGdyaWQtcm93OiA1OyBcclxuICB9XHJcbiAgLndlZWs6bnRoLWNoaWxkKDZuICsgNikgeyBcclxuICAgIC1tcy1ncmlkLXJvdzogNjsgXHJcbiAgICBncmlkLXJvdzogNjsgXHJcbiAgfVxyXG4gIC5kYXkgeyBcclxuICAgIG1hcmdpbjogMnB4O1xyXG4gICAgY29sb3I6IHZhcigtLWRheS10ZXh0LWNvbG9yKTtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgZm9udC1zaXplOiAxNnB4O1xyXG4gICAgZmxleDogMSAwIGF1dG87XHJcbiAgICBoZWlnaHQ6IGF1dG87XHJcbiAgICBkaXNwbGF5OiBmbGV4OyBcclxuICAgIGZsZXgtYmFzaXM6IDA7XHJcbiAgfVxyXG4gIC5kYXkub3V0c2lkZS1tb250aCwgXHJcbiAgLmRheS5pcy1kaXNhYmxlZCB7IFxyXG4gICAgb3BhY2l0eTogMC4zNTtcclxuICB9XHJcbiAgLmRheTpiZWZvcmUgeyBcclxuICAgIGNvbnRlbnQ6ICcnO1xyXG4gICAgZmxvYXQ6IGxlZnQ7XHJcbiAgICBwYWRkaW5nLXRvcDogMTAwJTtcclxuICB9XHJcbiAgLmRheS0tbGFiZWwgeyBcclxuICAgIGNvbG9yOiB2YXIoLS1kYXktdGV4dC1jb2xvcik7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjZmZmO1xyXG4gICAgYm9yZGVyLXJhZGl1czogNTAlOyBcclxuICAgIG1hcmdpbjogMTAlO1xyXG4gICAgcGFkZGluZzogMDtcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICBiYWNrZ3JvdW5kOiB2YXIoLS1kYXktYmFja2dyb3VuZC1jb2xvcik7XHJcbiAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgICB0cmFuc2l0aW9uOiBhbGwgMTAwbXMgbGluZWFyO1xyXG4gICAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcclxuICB9XHJcbiAgLmRheS0tbGFiZWwuZGlzYWJsZWQgeyBcclxuICAgIGN1cnNvcjogZGVmYXVsdDtcclxuICB9XHJcbiAgQG1lZGlhIChtaW4td2lkdGg6IDQ4MHB4KSB7IFxyXG4gICAgLmRheS0tbGFiZWwuaGlnaGxpZ2h0ZWQsXHJcbiAgICAuZGF5LS1sYWJlbDpub3QoLmRpc2FibGVkKTpob3ZlciB7IFxyXG4gICAgICBiYWNrZ3JvdW5kOiB2YXIoLS1kYXktaGlnaGxpZ2h0ZWQtYmFja2dyb3VuZC1jb2xvcik7XHJcbiAgICAgIGJvcmRlci1jb2xvcjogdmFyKC0tZGF5LWhpZ2hsaWdodGVkLWJhY2tncm91bmQtY29sb3IpO1xyXG4gICAgICBjb2xvcjogdmFyKC0tZGF5LWhpZ2hsaWdodGVkLXRleHQtY29sb3IpO1xyXG4gICAgfVxyXG4gIH1cclxuICAuZGF5LS1sYWJlbC5zaGFrZS1kYXRlIHsgXHJcbiAgICBhbmltYXRpb246IHNoYWtlIDAuNHMgMSBsaW5lYXI7XHJcbiAgfVxyXG4gIC5kYXktLWxhYmVsLnNlbGVjdGVkOmhvdmVyLFxyXG4gIC5kYXktLWxhYmVsLnNlbGVjdGVkLFxyXG4gIC5kYXktLWxhYmVsOmFjdGl2ZTpub3QoLmRpc2FibGVkKSB7IFxyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0taGlnaGxpZ2h0LWNvbG9yKTtcclxuICAgIGJvcmRlci1jb2xvcjogdmFyKC0taGlnaGxpZ2h0LWNvbG9yKTtcclxuICAgIGNvbG9yOiAjZmZmO1xyXG4gIH1cclxuICAuZGF5LmlzLXRvZGF5IC5kYXktLWxhYmVsLCBcclxuICAuZGF5LmlzLXRvZGF5IC5kYXktLWxhYmVsOmhvdmVyIHsgXHJcbiAgICBvcGFjaXR5OiAxOyBcclxuICAgIGJhY2tncm91bmQ6IG5vbmU7XHJcbiAgICBib3JkZXItY29sb3I6IHZhcigtLWhpZ2hsaWdodC1jb2xvcik7XHJcbiAgICBjb2xvcjogIzAwMDtcclxuICB9XHJcblxyXG4gIEBrZXlmcmFtZXMgc2hha2Uge1xyXG4gICAgMCUgeyB0cmFuc2Zvcm06IHRyYW5zbGF0ZSg3cHgpOyB9XHJcbiAgICAyMCUgeyB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtN3B4KTsgfVxyXG4gICAgNDAlIHsgdHJhbnNmb3JtOiB0cmFuc2xhdGUoM3B4KTsgfVxyXG4gICAgNjAlIHsgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTNweCk7IH1cclxuICAgIDgwJSB7IHRyYW5zZm9ybTogdHJhbnNsYXRlKDFweCk7IH1cclxuICAgIDEwMCUgeyB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgwcHgpOyB9XHJcbiAgfVxyXG48L3N0eWxlPlxyXG4iLCI8c2NyaXB0PlxuICBpbXBvcnQgV2VlayBmcm9tICcuL1dlZWsuc3ZlbHRlJztcblxuICBleHBvcnQgbGV0IGlkO1xuICBleHBvcnQgbGV0IHZpc2libGVNb250aDtcbiAgZXhwb3J0IGxldCBzZWxlY3RlZDtcbiAgZXhwb3J0IGxldCBoaWdobGlnaHRlZDtcbiAgZXhwb3J0IGxldCBzaG91bGRTaGFrZURhdGU7XG5cbiAgbGV0IGxhc3RJZCA9IGlkO1xuICBsZXQgZGlyZWN0aW9uO1xuXG4gICQ6IHtcbiAgICBkaXJlY3Rpb24gPSBsYXN0SWQgPCBpZCA/IDEgOiAtMTtcbiAgICBsYXN0SWQgPSBpZDtcbiAgfVxuPC9zY3JpcHQ+XHJcblxyXG48ZGl2IGNsYXNzPVwibW9udGgtY29udGFpbmVyXCI+XHJcbiAgeyNlYWNoIHZpc2libGVNb250aC53ZWVrcyBhcyB3ZWVrICh3ZWVrLmlkKSB9XHJcbiAgICA8V2VlayBcclxuICAgICAgZGF5cz17d2Vlay5kYXlzfSBcclxuICAgICAge3NlbGVjdGVkfSBcclxuICAgICAge2hpZ2hsaWdodGVkfSBcclxuICAgICAge3Nob3VsZFNoYWtlRGF0ZX0gXHJcbiAgICAgIHtkaXJlY3Rpb259XHJcbiAgICAgIG9uOmRhdGVTZWxlY3RlZCBcclxuICAgIC8+XHJcbiAgey9lYWNofVxyXG48L2Rpdj5cclxuXHJcbjxzdHlsZT5cclxuICAubW9udGgtY29udGFpbmVyIHsgXHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIGRpc3BsYXk6IC1tcy1ncmlkO1xyXG4gICAgZGlzcGxheTogZ3JpZDtcclxuICAgIC1tcy1ncmlkLWNvbHVtbnM6IDFmcjtcclxuICAgIC1tcy1ncmlkLXJvd3M6IDFmcjtcclxuICB9XHJcbjwvc3R5bGU+XHJcbiIsIjxzY3JpcHQ+XG4gIGltcG9ydCB7IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlciB9IGZyb20gJ3N2ZWx0ZSc7XG5cbiAgY29uc3QgZGlzcGF0Y2ggPSBjcmVhdGVFdmVudERpc3BhdGNoZXIoKTtcblxuICBleHBvcnQgbGV0IG1vbnRoO1xuICBleHBvcnQgbGV0IHllYXI7XG4gIGV4cG9ydCBsZXQgc3RhcnQ7XG4gIGV4cG9ydCBsZXQgZW5kO1xuICBleHBvcnQgbGV0IGNhbkluY3JlbWVudE1vbnRoO1xuICBleHBvcnQgbGV0IGNhbkRlY3JlbWVudE1vbnRoO1xuICBleHBvcnQgbGV0IG1vbnRoc09mWWVhcjtcblxuICBsZXQgbW9udGhTZWxlY3Rvck9wZW4gPSBmYWxzZTtcbiAgbGV0IGF2YWlsYWJsZU1vbnRocztcblxuICAkOiB7XG4gICAgbGV0IGlzT25Mb3dlckJvdW5kYXJ5ID0gc3RhcnQuZ2V0RnVsbFllYXIoKSA9PT0geWVhcjtcbiAgICBsZXQgaXNPblVwcGVyQm91bmRhcnkgPSBlbmQuZ2V0RnVsbFllYXIoKSA9PT0geWVhcjtcbiAgICBhdmFpbGFibGVNb250aHMgPSBtb250aHNPZlllYXIubWFwKChtLCBpKSA9PiB7XG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwge1xuICAgICAgICBuYW1lOiBtWzBdLFxuICAgICAgICBhYmJyZXY6IG1bMV1cbiAgICAgIH0sIHtcbiAgICAgICAgc2VsZWN0YWJsZTpcbiAgICAgICAgICAoIWlzT25Mb3dlckJvdW5kYXJ5ICYmICFpc09uVXBwZXJCb3VuZGFyeSlcbiAgICAgICAgICB8fCAoXG4gICAgICAgICAgICAoIWlzT25Mb3dlckJvdW5kYXJ5IHx8IGkgPj0gc3RhcnQuZ2V0TW9udGgoKSlcbiAgICAgICAgICAgICYmICghaXNPblVwcGVyQm91bmRhcnkgfHwgaSA8PSBlbmQuZ2V0TW9udGgoKSlcbiAgICAgICAgICApXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRvZ2dsZU1vbnRoU2VsZWN0b3JPcGVuKCkge1xuICAgIG1vbnRoU2VsZWN0b3JPcGVuID0gIW1vbnRoU2VsZWN0b3JPcGVuO1xuICB9XG5cbiAgZnVuY3Rpb24gbW9udGhTZWxlY3RlZChldmVudCwgeyBtLCBpIH0pIHtcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBpZiAoIW0uc2VsZWN0YWJsZSkgcmV0dXJuO1xuICAgIGRpc3BhdGNoKCdtb250aFNlbGVjdGVkJywgaSk7XG4gICAgdG9nZ2xlTW9udGhTZWxlY3Rvck9wZW4oKTtcbiAgfVxuPC9zY3JpcHQ+XHJcblxyXG48ZGl2IGNsYXNzPVwidGl0bGVcIj5cclxuICA8ZGl2IGNsYXNzPVwiaGVhZGluZy1zZWN0aW9uXCI+XHJcbiAgICA8ZGl2IGNsYXNzPVwiY29udHJvbFwiIFxyXG4gICAgICBjbGFzczplbmFibGVkPXtjYW5EZWNyZW1lbnRNb250aH1cclxuICAgICAgb246Y2xpY2s9eygpID0+IGRpc3BhdGNoKCdpbmNyZW1lbnRNb250aCcsIC0xKX0+XHJcbiAgICAgIDxpIGNsYXNzPVwiYXJyb3cgbGVmdFwiPjwvaT5cclxuICAgIDwvZGl2PlxyXG4gICAgPGRpdiBjbGFzcz1cImxhYmVsXCIgb246Y2xpY2s9e3RvZ2dsZU1vbnRoU2VsZWN0b3JPcGVufT5cclxuICAgICAge21vbnRoc09mWWVhclttb250aF1bMF19IHt5ZWFyfVxyXG4gICAgPC9kaXY+IFxyXG4gICAgPGRpdiBjbGFzcz1cImNvbnRyb2xcIlxyXG4gICAgICBjbGFzczplbmFibGVkPXtjYW5JbmNyZW1lbnRNb250aH1cclxuICAgICAgb246Y2xpY2s9eygpID0+IGRpc3BhdGNoKCdpbmNyZW1lbnRNb250aCcsIDEpfT5cclxuICAgICAgPGkgY2xhc3M9XCJhcnJvdyByaWdodFwiPjwvaT5cclxuICAgIDwvZGl2PlxyXG4gIDwvZGl2PlxyXG4gIDxkaXYgY2xhc3M9XCJtb250aC1zZWxlY3RvclwiIGNsYXNzOm9wZW49e21vbnRoU2VsZWN0b3JPcGVufT5cclxuICAgIHsjZWFjaCBhdmFpbGFibGVNb250aHMgYXMgbW9udGhEZWZpbml0aW9uLCBpbmRleH1cclxuICAgICAgPGRpdiBcclxuICAgICAgICBjbGFzcz1cIm1vbnRoLXNlbGVjdG9yLS1tb250aFwiIFxyXG4gICAgICAgIGNsYXNzOnNlbGVjdGVkPXtpbmRleCA9PT0gbW9udGh9XHJcbiAgICAgICAgY2xhc3M6c2VsZWN0YWJsZT17bW9udGhEZWZpbml0aW9uLnNlbGVjdGFibGV9XHJcbiAgICAgICAgb246Y2xpY2s9e2UgPT4gbW9udGhTZWxlY3RlZChlLCB7IG06IG1vbnRoRGVmaW5pdGlvbiwgaTogaW5kZXggfSl9XHJcbiAgICAgID5cclxuICAgICAgICA8c3Bhbj57bW9udGhEZWZpbml0aW9uLmFiYnJldn08L3NwYW4+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgey9lYWNofVxyXG4gIDwvZGl2PlxyXG48L2Rpdj5cclxuXHJcbjxzdHlsZT5cclxuICAuaGVhZGluZy1zZWN0aW9uIHsgXHJcbiAgICBmb250LXNpemU6IDIwcHg7XHJcbiAgICBwYWRkaW5nOiAyNHB4IDE1cHg7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xyXG4gICAgY29sb3I6ICMzZDQ1NDg7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuICB9XHJcbiAgLmxhYmVsIHsgXHJcbiAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgfVxyXG4gIC5tb250aC1zZWxlY3RvciB7IFxyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgdG9wOiA3NXB4OyBcclxuICAgIGxlZnQ6IDA7IFxyXG4gICAgcmlnaHQ6IDA7IFxyXG4gICAgYm90dG9tOiAwOyBcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XHJcbiAgICB0cmFuc2l0aW9uOiBhbGwgMzAwbXM7IFxyXG4gICAgdHJhbnNmb3JtOiBzY2FsZSgxLjIpOyBcclxuICAgIG9wYWNpdHk6IDA7IFxyXG4gICAgdmlzaWJpbGl0eTogaGlkZGVuO1xyXG4gICAgei1pbmRleDogMTtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICB9XHJcbiAgLm1vbnRoLXNlbGVjdG9yLm9wZW4geyBcclxuICAgIHRyYW5zZm9ybTogc2NhbGUoMSk7IFxyXG4gICAgdmlzaWJpbGl0eTogdmlzaWJsZTtcclxuICAgIG9wYWNpdHk6IDE7XHJcbiAgfVxyXG4gIC5tb250aC1zZWxlY3Rvci0tbW9udGggeyBcclxuICAgIHdpZHRoOiAzMS4zMzMlOyBcclxuICAgIG1hcmdpbjogLjUlOyBcclxuICAgIGhlaWdodDogMjMlO1xyXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gICAgY29sb3I6ICM0YTRhNGE7XHJcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjZWZlZmVmO1xyXG4gICAgb3BhY2l0eTogMC4yO1xyXG4gIH1cclxuICAubW9udGgtc2VsZWN0b3ItLW1vbnRoLnNlbGVjdGFibGUgeyBcclxuICAgIG9wYWNpdHk6IDE7IFxyXG4gIH1cclxuICAubW9udGgtc2VsZWN0b3ItLW1vbnRoLnNlbGVjdGFibGU6aG92ZXIgeyBcclxuICAgIGN1cnNvcjogcG9pbnRlcjtcclxuICAgIGJveC1zaGFkb3c6IDBweCAwcHggM3B4IHJnYmEoMCwwLDAsMC4xNSk7XHJcbiAgfVxyXG4gIC5tb250aC1zZWxlY3Rvci0tbW9udGguc2VsZWN0ZWQgeyBcclxuICAgIGJhY2tncm91bmQ6IHZhcigtLWhpZ2hsaWdodC1jb2xvcik7XHJcbiAgICBjb2xvcjogI2ZmZjtcclxuICB9XHJcbiAgLm1vbnRoLXNlbGVjdG9yLS1tb250aDpiZWZvcmUgeyBcclxuICAgIGNvbnRlbnQ6ICcgJztcclxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuICAgIGhlaWdodDogMTAwJTtcclxuICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XHJcbiAgfVxyXG4gIC5tb250aC1zZWxlY3Rvci0tbW9udGggc3BhbiB7IFxyXG4gICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTsgXHJcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgfVxyXG5cclxuICAuY29udHJvbCB7IFxyXG4gICAgcGFkZGluZzogMCA4cHg7XHJcbiAgICBvcGFjaXR5OiAwLjI7XHJcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoM3B4KTtcclxuICB9XHJcblxyXG4gIC5jb250cm9sLmVuYWJsZWQgeyBcclxuICAgIG9wYWNpdHk6IDE7IFxyXG4gICAgY3Vyc29yOiBwb2ludGVyO1xyXG4gIH1cclxuXHJcbiAgLmFycm93IHtcclxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuICAgIHdpZHRoOiAxOHB4O1xyXG4gICAgaGVpZ2h0OiAxOHB4O1xyXG4gICAgYm9yZGVyLXN0eWxlOiBzb2xpZDtcclxuICAgIGJvcmRlci1jb2xvcjogI2E5YTlhOTtcclxuICAgIGJvcmRlci13aWR0aDogMDtcclxuICAgIGJvcmRlci1ib3R0b20td2lkdGg6IDJweDtcclxuICAgIGJvcmRlci1yaWdodC13aWR0aDogMnB4O1xyXG4gIH1cclxuXHJcbiAgLmFycm93LnJpZ2h0IHtcclxuICAgIHRyYW5zZm9ybTogcm90YXRlKC00NWRlZyk7XHJcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKC00NWRlZyk7XHJcbiAgfVxyXG5cclxuICAuYXJyb3cubGVmdCB7XHJcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSgxMzVkZWcpO1xyXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSgxMzVkZWcpO1xyXG4gIH1cclxuXHJcbjwvc3R5bGU+XHJcbiIsIjxzY3JpcHQ+XG4gIGltcG9ydCB7IG9uTW91bnQsIGNyZWF0ZUV2ZW50RGlzcGF0Y2hlciwgdGljayB9IGZyb20gJ3N2ZWx0ZSc7XG5cbiAgY29uc3QgZGlzcGF0Y2ggPSBjcmVhdGVFdmVudERpc3BhdGNoZXIoKTtcblxuICBsZXQgb25jZSA9IChlbCwgZXZ0LCBjYikgPT4ge1xuICAgIGZ1bmN0aW9uIGhhbmRsZXIoKSB7XG4gICAgICBjYi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldnQsIGhhbmRsZXIpO1xuICAgIH1cbiAgICBlbC5hZGRFdmVudExpc3RlbmVyKGV2dCwgaGFuZGxlcik7XG4gIH07XG5cbiAgbGV0IHBvcG92ZXI7XG4gIGxldCB3O1xuICBsZXQgdHJpZ2dlckNvbnRhaW5lcjtcbiAgbGV0IGNvbnRlbnRzQW5pbWF0ZWQ7XG4gIGxldCBjb250ZW50c1dyYXBwZXI7XG4gIGxldCB0cmFuc2xhdGVZID0gMDtcbiAgbGV0IHRyYW5zbGF0ZVggPSAwO1xuXG4gIGV4cG9ydCBsZXQgb3BlbiA9IGZhbHNlO1xuICBleHBvcnQgbGV0IHNocmluaztcbiAgZXhwb3J0IGxldCB0cmlnZ2VyO1xuICBleHBvcnQgY29uc3QgY2xvc2UgPSAoKSA9PiB7XG4gICAgc2hyaW5rID0gdHJ1ZTtcbiAgICBvbmNlKGNvbnRlbnRzQW5pbWF0ZWQsICdhbmltYXRpb25lbmQnLCAoKSA9PiB7XG4gICAgICBzaHJpbmsgPSBmYWxzZTtcbiAgICAgIG9wZW4gPSBmYWxzZTtcbiAgICAgIGRpc3BhdGNoKCdjbG9zZWQnKTtcbiAgICB9KTtcbiAgfTtcblxuICBmdW5jdGlvbiBjaGVja0ZvckZvY3VzTG9zcyhldnQpIHtcbiAgICBpZiAoIW9wZW4pIHJldHVybjtcbiAgICBsZXQgZWwgPSBldnQudGFyZ2V0O1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgIGRvIHtcclxuICAgICAgaWYgKGVsID09PSBwb3BvdmVyKSByZXR1cm47XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgfSB3aGlsZSAoZWwgPSBlbC5wYXJlbnROb2RlKTtcclxuICAgIGNsb3NlKCk7XG4gIH1cblxuICBvbk1vdW50KCgpID0+IHtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGNoZWNrRm9yRm9jdXNMb3NzKTtcbiAgICBpZiAoIXRyaWdnZXIpIHJldHVybjtcbiAgICB0cmlnZ2VyQ29udGFpbmVyLmFwcGVuZENoaWxkKHRyaWdnZXIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0cmlnZ2VyKSk7XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIGNoZWNrRm9yRm9jdXNMb3NzKTtcbiAgICB9O1xuICB9KTtcblxuICBjb25zdCBnZXREaXN0YW5jZVRvRWRnZXMgPSBhc3luYyAoKSA9PiB7XG4gICAgaWYgKCFvcGVuKSB7IG9wZW4gPSB0cnVlOyB9XG4gICAgYXdhaXQgdGljaygpO1xuICAgIGxldCByZWN0ID0gY29udGVudHNXcmFwcGVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIHJldHVybiB7XG4gICAgICB0b3A6IHJlY3QudG9wICsgKC0xICogdHJhbnNsYXRlWSksXG4gICAgICBib3R0b206IHdpbmRvdy5pbm5lckhlaWdodCAtIHJlY3QuYm90dG9tICsgdHJhbnNsYXRlWSxcbiAgICAgIGxlZnQ6IHJlY3QubGVmdCArICgtMSAqIHRyYW5zbGF0ZVgpLFxuICAgICAgcmlnaHQ6IGRvY3VtZW50LmJvZHkuY2xpZW50V2lkdGggLSByZWN0LnJpZ2h0ICsgdHJhbnNsYXRlWFxuICAgIH07XG4gIH07XG5cbiAgY29uc3QgZ2V0VHJhbnNsYXRlID0gYXN5bmMgKCkgPT4ge1xuICAgIGxldCBkaXN0ID0gYXdhaXQgZ2V0RGlzdGFuY2VUb0VkZ2VzKCk7XG4gICAgbGV0IHg7IGxldFxuICAgICAgeTtcbiAgICBpZiAodyA8IDQ4MCkge1xuICAgICAgeSA9IGRpc3QuYm90dG9tO1xuICAgIH0gZWxzZSBpZiAoZGlzdC50b3AgPCAwKSB7XG4gICAgICB5ID0gTWF0aC5hYnMoZGlzdC50b3ApO1xuICAgIH0gZWxzZSBpZiAoZGlzdC5ib3R0b20gPCAwKSB7XG4gICAgICB5ID0gZGlzdC5ib3R0b207XG4gICAgfSBlbHNlIHtcbiAgICAgIHkgPSAwO1xuICAgIH1cbiAgICBpZiAoZGlzdC5sZWZ0IDwgMCkge1xuICAgICAgeCA9IE1hdGguYWJzKGRpc3QubGVmdCk7XG4gICAgfSBlbHNlIGlmIChkaXN0LnJpZ2h0IDwgMCkge1xuICAgICAgeCA9IGRpc3QucmlnaHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHggPSAwO1xuICAgIH1cbiAgICByZXR1cm4geyB4LCB5IH07XG4gIH07XG5cbiAgY29uc3QgZG9PcGVuID0gYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHsgeCwgeSB9ID0gYXdhaXQgZ2V0VHJhbnNsYXRlKCk7XG5cbiAgICB0cmFuc2xhdGVYID0geDtcbiAgICB0cmFuc2xhdGVZID0geTtcbiAgICBvcGVuID0gdHJ1ZTtcblxuICAgIGRpc3BhdGNoKCdvcGVuZWQnKTtcbiAgfTtcbjwvc2NyaXB0PlxyXG5cclxuPHN2ZWx0ZTp3aW5kb3cgYmluZDppbm5lcldpZHRoPXt3fSAvPlxyXG48ZGl2IGNsYXNzPVwic2MtcG9wb3ZlclwiIGJpbmQ6dGhpcz17cG9wb3Zlcn0+XHJcbiAgPGRpdiBjbGFzcz1cInRyaWdnZXJcIiBvbjpjbGljaz17ZG9PcGVufSBiaW5kOnRoaXM9e3RyaWdnZXJDb250YWluZXJ9PlxyXG4gICAgPHNsb3QgbmFtZT1cInRyaWdnZXJcIj5cclxuICAgIDwvc2xvdD5cclxuICA8L2Rpdj5cclxuICA8ZGl2IFxyXG4gICAgY2xhc3M9XCJjb250ZW50cy13cmFwcGVyXCIgXHJcbiAgICBjbGFzczp2aXNpYmxlPXtvcGVufVxyXG4gICAgY2xhc3M6c2hyaW5rPXtzaHJpbmt9XHJcbiAgICBzdHlsZT1cInRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsLTUwJSkgdHJhbnNsYXRlKHt0cmFuc2xhdGVYfXB4LCB7dHJhbnNsYXRlWX1weClcIiBcclxuICAgIGJpbmQ6dGhpcz17Y29udGVudHNXcmFwcGVyfT5cclxuICAgIDxkaXYgY2xhc3M9XCJjb250ZW50c1wiIGJpbmQ6dGhpcz17Y29udGVudHNBbmltYXRlZH0+XHJcbiAgICAgIDxkaXYgY2xhc3M9XCJjb250ZW50cy1pbm5lclwiPlxyXG4gICAgICAgIDxzbG90IG5hbWU9XCJjb250ZW50c1wiPjwvc2xvdD5cclxuICAgICAgPC9kaXY+XHJcbiAgICA8L2Rpdj5cclxuICA8L2Rpdj5cclxuPC9kaXY+XHJcblxyXG48c3R5bGU+XHJcbiAgLnNjLXBvcG92ZXIgeyBcclxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICB9XHJcblxyXG4gIC5jb250ZW50cy13cmFwcGVyIHsgXHJcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTsgXHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICB0b3A6IDUwJTsgXHJcbiAgICBsZWZ0OiA1MCU7IFxyXG4gICAgdHJhbnNpdGlvbjogbm9uZTtcclxuICAgIHotaW5kZXg6IDI7XHJcbiAgICBkaXNwbGF5OiBub25lO1xyXG4gIH1cclxuXHJcbiAgLmNvbnRlbnRzIHsgXHJcbiAgICBiYWNrZ3JvdW5kOiAjZmZmO1xyXG4gICAgYm94LXNoYWRvdzogMHB4IDEwcHggMjZweCByZ2JhKDAsMCwwLDAuNCkgO1xyXG4gICAgb3BhY2l0eTogLjg7IFxyXG4gICAgcGFkZGluZy10b3A6IDA7XHJcbiAgICBkaXNwbGF5OiBub25lO1xyXG4gICAgYW5pbWF0aW9uOiBncm93IDIwMG1zIGZvcndhcmRzIGN1YmljLWJlemllciguOTIsLjA5LC4xOCwxLjA1KTtcclxuICB9XHJcblxyXG4gIC5jb250ZW50cy1pbm5lciB7IFxyXG4gICAgYW5pbWF0aW9uOiBmYWRlSW4gNDAwbXMgZm9yd2FyZHM7XHJcbiAgfVxyXG5cclxuICAuY29udGVudHMtd3JhcHBlci52aXNpYmxlIHsgXHJcbiAgICBkaXNwbGF5OiBibG9jaztcclxuICB9XHJcblxyXG4gIC5jb250ZW50cy13cmFwcGVyLnZpc2libGUgLmNvbnRlbnRzIHsgXHJcbiAgICBvcGFjaXR5OiAxOyBcclxuICAgIHRyYW5zZm9ybTogc2NhbGUoMSk7XHJcbiAgICBkaXNwbGF5OiBibG9jaztcclxuICB9XHJcblxyXG4gIC5jb250ZW50cy13cmFwcGVyLnNocmluayAuY29udGVudHMgeyBcclxuICAgIGFuaW1hdGlvbjogc2hyaW5rIDE1MG1zIGZvcndhcmRzIGN1YmljLWJlemllciguOTIsLjA5LC4xOCwxLjA1KTtcclxuICB9XHJcblxyXG4gIEBrZXlmcmFtZXMgZ3JvdyB7IFxyXG4gICAgMCUgeyBcclxuICAgICAgdHJhbnNmb3JtOiBzY2FsZSguOSwuMSk7IFxyXG4gICAgICBvcGFjaXR5OiAwOyBcclxuICAgIH1cclxuICAgIDMwJSB7IFxyXG4gICAgICBvcGFjaXR5OiAxOyBcclxuICAgIH1cclxuICAgIDEwMCUgeyBcclxuICAgICAgdHJhbnNmb3JtOiBzY2FsZSgxKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIEBrZXlmcmFtZXMgc2hyaW5rIHsgXHJcbiAgICAwJSB7IFxyXG4gICAgICB0cmFuc2Zvcm06IHNjYWxlKDEpOyBcclxuICAgICAgb3BhY2l0eTogMTsgXHJcbiAgICB9XHJcbiAgICA3MCUgeyBcclxuICAgICAgb3BhY2l0eTogMTsgXHJcbiAgICB9XHJcbiAgICAxMDAlIHsgXHJcbiAgICAgIG9wYWNpdHk6IDA7IFxyXG4gICAgICB0cmFuc2Zvcm06IHNjYWxlKC45LC4xKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIEBrZXlmcmFtZXMgZmFkZUluIHsgXHJcbiAgICAwJSB7IFxyXG4gICAgICBvcGFjaXR5OiAwOyBcclxuICAgIH1cclxuICAgIDUwJSB7IFxyXG4gICAgICBvcGFjaXR5OiAwO1xyXG4gICAgfVxyXG4gICAgMTAwJSB7IFxyXG4gICAgICBvcGFjaXR5OiAxOyBcclxuICAgIH1cclxuICB9XHJcbjwvc3R5bGU+XHJcbiIsIjxzY3JpcHQ+XG4gIGltcG9ydCBNb250aCBmcm9tICcuL01vbnRoLnN2ZWx0ZSc7XG4gIGltcG9ydCBOYXZCYXIgZnJvbSAnLi9OYXZCYXIuc3ZlbHRlJztcbiAgaW1wb3J0IFBvcG92ZXIgZnJvbSAnLi9Qb3BvdmVyLnN2ZWx0ZSc7XG4gIGltcG9ydCB7IGdldE1vbnRocyB9IGZyb20gJy4vbGliL2hlbHBlcnMnO1xuICBpbXBvcnQgeyBmb3JtYXREYXRlLCBpbnRlcm5hdGlvbmFsaXplIH0gZnJvbSAndGltZVV0aWxzJztcbiAgaW1wb3J0IHsga2V5Q29kZXMsIGtleUNvZGVzQXJyYXkgfSBmcm9tICcuL2xpYi9rZXlDb2Rlcyc7XG4gIGltcG9ydCB7IG9uTW91bnQsIGNyZWF0ZUV2ZW50RGlzcGF0Y2hlciB9IGZyb20gJ3N2ZWx0ZSc7XG5cbiAgY29uc3QgZGlzcGF0Y2ggPSBjcmVhdGVFdmVudERpc3BhdGNoZXIoKTtcbiAgY29uc3QgdG9kYXkgPSBuZXcgRGF0ZSgpO1xuXG4gIGxldCBwb3BvdmVyO1xuXG4gIGV4cG9ydCBsZXQgZm9ybWF0ID0gJyN7bX0vI3tkfS8je1l9JztcbiAgZXhwb3J0IGxldCBzdGFydCA9IG5ldyBEYXRlKDE5ODcsIDksIDI5KTtcbiAgZXhwb3J0IGxldCBlbmQgPSBuZXcgRGF0ZSgyMDIwLCA5LCAyOSk7XG4gIGV4cG9ydCBsZXQgc2VsZWN0ZWQgPSB0b2RheTtcbiAgZXhwb3J0IGxldCBkYXRlQ2hvc2VuID0gZmFsc2U7XG4gIGV4cG9ydCBsZXQgdHJpZ2dlciA9IG51bGw7XG4gIGV4cG9ydCBsZXQgc2VsZWN0YWJsZUNhbGxiYWNrID0gbnVsbDtcbiAgZXhwb3J0IGxldCB3ZWVrU3RhcnQgPSAwO1xuICBleHBvcnQgbGV0IGRheXNPZldlZWsgPSBbXG4gICAgWydTdW5kYXknLCAnU3VuJ10sXG4gICAgWydNb25kYXknLCAnTW9uJ10sXG4gICAgWydUdWVzZGF5JywgJ1R1ZSddLFxuICAgIFsnV2VkbmVzZGF5JywgJ1dlZCddLFxuICAgIFsnVGh1cnNkYXknLCAnVGh1J10sXG4gICAgWydGcmlkYXknLCAnRnJpJ10sXG4gICAgWydTYXR1cmRheScsICdTYXQnXVxuICBdO1xuICBleHBvcnQgbGV0IG1vbnRoc09mWWVhciA9IFtcbiAgICBbJ0phbnVhcnknLCAnSmFuJ10sXG4gICAgWydGZWJydWFyeScsICdGZWInXSxcbiAgICBbJ01hcmNoJywgJ01hciddLFxuICAgIFsnQXByaWwnLCAnQXByJ10sXG4gICAgWydNYXknLCAnTWF5J10sXG4gICAgWydKdW5lJywgJ0p1biddLFxuICAgIFsnSnVseScsICdKdWwnXSxcbiAgICBbJ0F1Z3VzdCcsICdBdWcnXSxcbiAgICBbJ1NlcHRlbWJlcicsICdTZXAnXSxcbiAgICBbJ09jdG9iZXInLCAnT2N0J10sXG4gICAgWydOb3ZlbWJlcicsICdOb3YnXSxcbiAgICBbJ0RlY2VtYmVyJywgJ0RlYyddXG4gIF07XG5cbiAgZXhwb3J0IGxldCBzdHlsZSA9ICcnO1xuICBcbiAgLy8gdGhlbWluZyB2YXJpYWJsZXM6XG4gIGV4cG9ydCBsZXQgYnV0dG9uQmFja2dyb3VuZENvbG9yID0gJyNmZmYnO1xuICBleHBvcnQgbGV0IGJ1dHRvbkJvcmRlckNvbG9yID0gJyNlZWUnO1xuICBleHBvcnQgbGV0IGJ1dHRvblRleHRDb2xvciA9ICcjMzMzJztcbiAgZXhwb3J0IGxldCBoaWdobGlnaHRDb2xvciA9ICcjZjc5MDFlJztcbiAgZXhwb3J0IGxldCBkYXlCYWNrZ3JvdW5kQ29sb3IgPSAnbm9uZSc7XG4gIGV4cG9ydCBsZXQgZGF5VGV4dENvbG9yID0gJyM0YTRhNGEnO1xuICBleHBvcnQgbGV0IGRheUhpZ2hsaWdodGVkQmFja2dyb3VuZENvbG9yID0gJyNlZmVmZWYnO1xuICBleHBvcnQgbGV0IGRheUhpZ2hsaWdodGVkVGV4dENvbG9yID0gJyM0YTRhNGEnO1xuXG4gIGludGVybmF0aW9uYWxpemUoeyBkYXlzT2ZXZWVrLCBtb250aHNPZlllYXIgfSk7XG4gIGxldCBzb3J0ZWREYXlzT2ZXZWVrID0gd2Vla1N0YXJ0ID09PSAwID8gZGF5c09mV2VlayA6ICgoKSA9PiB7XG4gICAgbGV0IGRvdyA9IGRheXNPZldlZWsuc2xpY2UoKTtcbiAgICBkb3cucHVzaChkb3cuc2hpZnQoKSk7XG4gICAgcmV0dXJuIGRvdztcbiAgfSkoKTtcblxuICBsZXQgaGlnaGxpZ2h0ZWQgPSB0b2RheTtcbiAgbGV0IHNob3VsZFNoYWtlRGF0ZSA9IGZhbHNlO1xuICBsZXQgc2hha2VIaWdobGlnaHRUaW1lb3V0O1xuICBsZXQgbW9udGggPSB0b2RheS5nZXRNb250aCgpO1xuICBsZXQgeWVhciA9IHRvZGF5LmdldEZ1bGxZZWFyKCk7XG5cbiAgbGV0IGlzT3BlbiA9IGZhbHNlO1xuICBsZXQgaXNDbG9zaW5nID0gZmFsc2U7XG5cbiAgdG9kYXkuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG5cbiAgZnVuY3Rpb24gYXNzaWdubWVudEhhbmRsZXIoZm9ybWF0dGVkKSB7XG4gICAgaWYgKCF0cmlnZ2VyKSByZXR1cm47XG4gICAgdHJpZ2dlci5pbm5lckhUTUwgPSBmb3JtYXR0ZWQ7XG4gIH1cblxuICAkOiBtb250aHMgPSBnZXRNb250aHMoc3RhcnQsIGVuZCwgc2VsZWN0YWJsZUNhbGxiYWNrLCB3ZWVrU3RhcnQpO1xuXG4gIGxldCBtb250aEluZGV4ID0gMDtcbiAgJDoge1xuICAgIG1vbnRoSW5kZXggPSAwO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbW9udGhzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBpZiAobW9udGhzW2ldLm1vbnRoID09PSBtb250aCAmJiBtb250aHNbaV0ueWVhciA9PT0geWVhcikge1xuICAgICAgICBtb250aEluZGV4ID0gaTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgJDogdmlzaWJsZU1vbnRoID0gbW9udGhzW21vbnRoSW5kZXhdO1xuXG4gICQ6IHZpc2libGVNb250aElkID0geWVhciArIG1vbnRoIC8gMTAwO1xuICAkOiBsYXN0VmlzaWJsZURhdGUgPSB2aXNpYmxlTW9udGgud2Vla3NbdmlzaWJsZU1vbnRoLndlZWtzLmxlbmd0aCAtIDFdLmRheXNbNl0uZGF0ZTtcbiAgJDogZmlyc3RWaXNpYmxlRGF0ZSA9IHZpc2libGVNb250aC53ZWVrc1swXS5kYXlzWzBdLmRhdGU7XG4gICQ6IGNhbkluY3JlbWVudE1vbnRoID0gbW9udGhJbmRleCA8IG1vbnRocy5sZW5ndGggLSAxO1xuICAkOiBjYW5EZWNyZW1lbnRNb250aCA9IG1vbnRoSW5kZXggPiAwO1xuICAkOiB3cmFwcGVyU3R5bGUgPSBgXG4gICAgLS1idXR0b24tYmFja2dyb3VuZC1jb2xvcjogJHtidXR0b25CYWNrZ3JvdW5kQ29sb3J9O1xuICAgIC0tYnV0dG9uLWJvcmRlci1jb2xvcjogJHtidXR0b25Cb3JkZXJDb2xvcn07XG4gICAgLS1idXR0b24tdGV4dC1jb2xvcjogJHtidXR0b25UZXh0Q29sb3J9O1xuICAgIC0taGlnaGxpZ2h0LWNvbG9yOiAke2hpZ2hsaWdodENvbG9yfTtcbiAgICAtLWRheS1iYWNrZ3JvdW5kLWNvbG9yOiAke2RheUJhY2tncm91bmRDb2xvcn07XG4gICAgLS1kYXktdGV4dC1jb2xvcjogJHtkYXlUZXh0Q29sb3J9O1xuICAgIC0tZGF5LWhpZ2hsaWdodGVkLWJhY2tncm91bmQtY29sb3I6ICR7ZGF5SGlnaGxpZ2h0ZWRCYWNrZ3JvdW5kQ29sb3J9O1xuICAgIC0tZGF5LWhpZ2hsaWdodGVkLXRleHQtY29sb3I6ICR7ZGF5SGlnaGxpZ2h0ZWRUZXh0Q29sb3J9O1xuICAgICR7c3R5bGV9XG4gIGA7XG5cbiAgZXhwb3J0IGxldCBmb3JtYXR0ZWRTZWxlY3RlZDtcbiAgJDoge1xuICAgIGZvcm1hdHRlZFNlbGVjdGVkID0gdHlwZW9mIGZvcm1hdCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgPyBmb3JtYXQoc2VsZWN0ZWQpXG4gICAgICA6IGZvcm1hdERhdGUoc2VsZWN0ZWQsIGZvcm1hdCk7XG4gIH1cblxuICBvbk1vdW50KCgpID0+IHtcbiAgICBtb250aCA9IHNlbGVjdGVkLmdldE1vbnRoKCk7XG4gICAgeWVhciA9IHNlbGVjdGVkLmdldEZ1bGxZZWFyKCk7XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIGNoYW5nZU1vbnRoKHNlbGVjdGVkTW9udGgpIHtcbiAgICBtb250aCA9IHNlbGVjdGVkTW9udGg7XG4gICAgaGlnaGxpZ2h0ZWQgPSBuZXcgRGF0ZSh5ZWFyLCBtb250aCwgMSk7XG4gIH1cblxuICBmdW5jdGlvbiBpbmNyZW1lbnRNb250aChkaXJlY3Rpb24sIGRheSA9IDEpIHtcbiAgICBpZiAoZGlyZWN0aW9uID09PSAxICYmICFjYW5JbmNyZW1lbnRNb250aCkgcmV0dXJuO1xuICAgIGlmIChkaXJlY3Rpb24gPT09IC0xICYmICFjYW5EZWNyZW1lbnRNb250aCkgcmV0dXJuO1xuICAgIGxldCBjdXJyZW50ID0gbmV3IERhdGUoeWVhciwgbW9udGgsIDEpO1xuICAgIGN1cnJlbnQuc2V0TW9udGgoY3VycmVudC5nZXRNb250aCgpICsgZGlyZWN0aW9uKTtcbiAgICBtb250aCA9IGN1cnJlbnQuZ2V0TW9udGgoKTtcbiAgICB5ZWFyID0gY3VycmVudC5nZXRGdWxsWWVhcigpO1xuICAgIGhpZ2hsaWdodGVkID0gbmV3IERhdGUoeWVhciwgbW9udGgsIGRheSk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXREZWZhdWx0SGlnaGxpZ2h0ZWQoKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKHNlbGVjdGVkKTtcbiAgfVxuXG4gIGNvbnN0IGdldERheSA9IChtLCBkLCB5KSA9PiB7XG4gICAgbGV0IHRoZU1vbnRoID0gbW9udGhzLmZpbmQoYU1vbnRoID0+IGFNb250aC5tb250aCA9PT0gbSAmJiBhTW9udGgueWVhciA9PT0geSk7XG4gICAgaWYgKCF0aGVNb250aCkgcmV0dXJuIG51bGw7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGVNb250aC53ZWVrcy5sZW5ndGg7ICsraSkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoZU1vbnRoLndlZWtzW2ldLmRheXMubGVuZ3RoOyArK2opIHtcbiAgICAgICAgbGV0IGFEYXkgPSB0aGVNb250aC53ZWVrc1tpXS5kYXlzW2pdO1xuICAgICAgICBpZiAoYURheS5tb250aCA9PT0gbSAmJiBhRGF5LmRheSA9PT0gZCAmJiBhRGF5LnllYXIgPT09IHkpIHJldHVybiBhRGF5O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICBmdW5jdGlvbiBpbmNyZW1lbnREYXlIaWdobGlnaHRlZChhbW91bnQpIHtcbiAgICBsZXQgcHJvcG9zZWREYXRlID0gbmV3IERhdGUoaGlnaGxpZ2h0ZWQpO1xuICAgIHByb3Bvc2VkRGF0ZS5zZXREYXRlKGhpZ2hsaWdodGVkLmdldERhdGUoKSArIGFtb3VudCk7XG4gICAgbGV0IGNvcnJlc3BvbmRpbmdEYXlPYmogPSBnZXREYXkoXG4gICAgICBwcm9wb3NlZERhdGUuZ2V0TW9udGgoKSxcbiAgICAgIHByb3Bvc2VkRGF0ZS5nZXREYXRlKCksXG4gICAgICBwcm9wb3NlZERhdGUuZ2V0RnVsbFllYXIoKVxuICAgICk7XG4gICAgaWYgKCFjb3JyZXNwb25kaW5nRGF5T2JqIHx8ICFjb3JyZXNwb25kaW5nRGF5T2JqLmlzSW5SYW5nZSkgcmV0dXJuO1xuICAgIGhpZ2hsaWdodGVkID0gcHJvcG9zZWREYXRlO1xuICAgIGlmIChhbW91bnQgPiAwICYmIGhpZ2hsaWdodGVkID4gbGFzdFZpc2libGVEYXRlKSB7XG4gICAgICBpbmNyZW1lbnRNb250aCgxLCBoaWdobGlnaHRlZC5nZXREYXRlKCkpO1xuICAgIH1cbiAgICBpZiAoYW1vdW50IDwgMCAmJiBoaWdobGlnaHRlZCA8IGZpcnN0VmlzaWJsZURhdGUpIHtcbiAgICAgIGluY3JlbWVudE1vbnRoKC0xLCBoaWdobGlnaHRlZC5nZXREYXRlKCkpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNoZWNrSWZWaXNpYmxlRGF0ZUlzU2VsZWN0YWJsZShkYXRlKSB7XG4gICAgY29uc3QgcHJvcG9zZWREYXkgPSBnZXREYXkoZGF0ZS5nZXRNb250aCgpLCBkYXRlLmdldERhdGUoKSwgZGF0ZS5nZXRGdWxsWWVhcigpKTtcbiAgICByZXR1cm4gcHJvcG9zZWREYXkgJiYgcHJvcG9zZWREYXkuc2VsZWN0YWJsZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNoYWtlRGF0ZShkYXRlKSB7XG4gICAgY2xlYXJUaW1lb3V0KHNoYWtlSGlnaGxpZ2h0VGltZW91dCk7XG4gICAgc2hvdWxkU2hha2VEYXRlID0gZGF0ZTtcbiAgICBzaGFrZUhpZ2hsaWdodFRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHNob3VsZFNoYWtlRGF0ZSA9IGZhbHNlO1xuICAgIH0sIDcwMCk7XG4gIH1cblxuICBmdW5jdGlvbiBhc3NpZ25WYWx1ZVRvVHJpZ2dlcihmb3JtYXR0ZWQpIHtcbiAgICBhc3NpZ25tZW50SGFuZGxlcihmb3JtYXR0ZWQpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVnaXN0ZXJTZWxlY3Rpb24oY2hvc2VuKSB7XG4gICAgaWYgKCFjaGVja0lmVmlzaWJsZURhdGVJc1NlbGVjdGFibGUoY2hvc2VuKSkgcmV0dXJuIHNoYWtlRGF0ZShjaG9zZW4pO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgIGNsb3NlKCk7XG4gICAgc2VsZWN0ZWQgPSBjaG9zZW47XG4gICAgZGF0ZUNob3NlbiA9IHRydWU7XG4gICAgYXNzaWduVmFsdWVUb1RyaWdnZXIoZm9ybWF0dGVkU2VsZWN0ZWQpO1xuICAgIHJldHVybiBkaXNwYXRjaCgnZGF0ZVNlbGVjdGVkJywgeyBkYXRlOiBjaG9zZW4gfSk7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVLZXlQcmVzcyhldnQpIHtcbiAgICBpZiAoa2V5Q29kZXNBcnJheS5pbmRleE9mKGV2dC5rZXlDb2RlKSA9PT0gLTEpIHJldHVybjtcbiAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICBzd2l0Y2ggKGV2dC5rZXlDb2RlKSB7XG4gICAgICBjYXNlIGtleUNvZGVzLmxlZnQ6XG4gICAgICAgIGluY3JlbWVudERheUhpZ2hsaWdodGVkKC0xKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGtleUNvZGVzLnVwOlxuICAgICAgICBpbmNyZW1lbnREYXlIaWdobGlnaHRlZCgtNyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBrZXlDb2Rlcy5yaWdodDpcbiAgICAgICAgaW5jcmVtZW50RGF5SGlnaGxpZ2h0ZWQoMSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBrZXlDb2Rlcy5kb3duOlxuICAgICAgICBpbmNyZW1lbnREYXlIaWdobGlnaHRlZCg3KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGtleUNvZGVzLnBndXA6XG4gICAgICAgIGluY3JlbWVudE1vbnRoKC0xKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGtleUNvZGVzLnBnZG93bjpcbiAgICAgICAgaW5jcmVtZW50TW9udGgoMSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBrZXlDb2Rlcy5lc2NhcGU6XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICBjbG9zZSgpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2Uga2V5Q29kZXMuZW50ZXI6XG4gICAgICAgIHJlZ2lzdGVyU2VsZWN0aW9uKGhpZ2hsaWdodGVkKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZWdpc3RlckNsb3NlKCkge1xuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBoYW5kbGVLZXlQcmVzcyk7XG4gICAgZGlzcGF0Y2goJ2Nsb3NlJyk7XG4gIH1cblxuICBmdW5jdGlvbiBjbG9zZSgpIHtcbiAgICBwb3BvdmVyLmNsb3NlKCk7XG4gICAgcmVnaXN0ZXJDbG9zZSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVnaXN0ZXJPcGVuKCkge1xuICAgIGhpZ2hsaWdodGVkID0gZ2V0RGVmYXVsdEhpZ2hsaWdodGVkKCk7XG4gICAgbW9udGggPSBzZWxlY3RlZC5nZXRNb250aCgpO1xuICAgIHllYXIgPSBzZWxlY3RlZC5nZXRGdWxsWWVhcigpO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBoYW5kbGVLZXlQcmVzcyk7XG4gICAgZGlzcGF0Y2goJ29wZW4nKTtcbiAgfVxuXG48L3NjcmlwdD5cblxuPGRpdiBcbiAgY2xhc3M9XCJkYXRlcGlja2VyXCIgXG4gIGNsYXNzOm9wZW49XCJ7aXNPcGVufVwiIFxuICBjbGFzczpjbG9zaW5nPVwie2lzQ2xvc2luZ31cIlxuICBzdHlsZT17d3JhcHBlclN0eWxlfVxuPlxuICA8UG9wb3ZlclxuICAgIGJpbmQ6dGhpcz1cIntwb3BvdmVyfVwiXG4gICAgYmluZDpvcGVuPVwie2lzT3Blbn1cIlxuICAgIGJpbmQ6c2hyaW5rPVwie2lzQ2xvc2luZ31cIlxuICAgIHt0cmlnZ2VyfVxuICAgIG9uOm9wZW5lZD1cIntyZWdpc3Rlck9wZW59XCJcbiAgICBvbjpjbG9zZWQ9XCJ7cmVnaXN0ZXJDbG9zZX1cIlxuICA+XG4gICAgPGRpdiBzbG90PVwidHJpZ2dlclwiPlxuICAgICAgPHNsb3Q+XG4gICAgICAgIHsjaWYgIXRyaWdnZXJ9XG4gICAgICAgIDxidXR0b24gY2xhc3M9XCJjYWxlbmRhci1idXR0b25cIiB0eXBlPVwiYnV0dG9uXCI+XG4gICAgICAgICAge2Zvcm1hdHRlZFNlbGVjdGVkfVxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgey9pZn1cbiAgICAgIDwvc2xvdD5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IHNsb3Q9XCJjb250ZW50c1wiPlxuICAgICAgPGRpdiBjbGFzcz1cImNhbGVuZGFyXCI+XG4gICAgICAgIDxOYXZCYXIgXG4gICAgICAgICAge21vbnRofVxuICAgICAgICAgIHt5ZWFyfVxuICAgICAgICAgIHtjYW5JbmNyZW1lbnRNb250aH1cbiAgICAgICAgICB7Y2FuRGVjcmVtZW50TW9udGh9XG4gICAgICAgICAge3N0YXJ0fVxuICAgICAgICAgIHtlbmR9XG4gICAgICAgICAge21vbnRoc09mWWVhcn1cbiAgICAgICAgICBvbjptb250aFNlbGVjdGVkPXtlID0+IGNoYW5nZU1vbnRoKGUuZGV0YWlsKX1cbiAgICAgICAgICBvbjppbmNyZW1lbnRNb250aD17ZSA9PiBpbmNyZW1lbnRNb250aChlLmRldGFpbCl9IFxuICAgICAgICAvPlxuICAgICAgICA8ZGl2IGNsYXNzPVwibGVnZW5kXCI+XG4gICAgICAgICAgeyNlYWNoIHNvcnRlZERheXNPZldlZWsgYXMgZGF5fVxuICAgICAgICAgIDxzcGFuPntkYXlbMV19PC9zcGFuPlxuICAgICAgICAgIHsvZWFjaH1cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxNb250aCBcbiAgICAgICAgICB7dmlzaWJsZU1vbnRofVxuICAgICAgICAgIHtzZWxlY3RlZH1cbiAgICAgICAgICB7aGlnaGxpZ2h0ZWR9XG4gICAgICAgICAge3Nob3VsZFNoYWtlRGF0ZX1cbiAgICAgICAgICBpZD17dmlzaWJsZU1vbnRoSWR9XG4gICAgICAgICAgb246ZGF0ZVNlbGVjdGVkPXtlID0+IHJlZ2lzdGVyU2VsZWN0aW9uKGUuZGV0YWlsKX0gXG4gICAgICAgIC8+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgPC9Qb3BvdmVyPlxuPC9kaXY+XG5cbjxzdHlsZT5cbiAgLmRhdGVwaWNrZXIge1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICBtYXJnaW46IDAgYXV0bztcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgb3ZlcmZsb3c6IHZpc2libGU7XG4gIH1cblxuICAuY2FsZW5kYXItYnV0dG9uIHtcbiAgICBwYWRkaW5nOiAxMHB4IDIwcHg7XG4gICAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tYnV0dG9uLWJvcmRlci1jb2xvcik7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIHdpZHRoOiAzMDBweDtcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xuICAgIGJhY2tncm91bmQ6IHZhcigtLWJ1dHRvbi1iYWNrZ3JvdW5kLWNvbG9yKTtcbiAgICBjb2xvcjogdmFyKC0tYnV0dG9uLXRleHQtY29sb3IpO1xuICAgIGJvcmRlci1yYWRpdXM6IDdweDtcbiAgICBib3gtc2hhZG93OiAwcHggMHB4IDNweCByZ2JhKDAsIDAsIDAsIDAuMSk7XG4gIH1cblxuICAqLFxuICAqOmJlZm9yZSxcbiAgKjphZnRlciB7XG4gICAgYm94LXNpemluZzogaW5oZXJpdDtcbiAgfVxuXG4gIC5jYWxlbmRhciB7XG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICB1c2VyLXNlbGVjdDogbm9uZTtcbiAgICB3aWR0aDogMTAwdnc7XG4gICAgcGFkZGluZzogMTBweDtcbiAgICBwYWRkaW5nLXRvcDogMDtcbiAgfVxuXG4gIEBtZWRpYSAobWluLXdpZHRoOiA0ODBweCkge1xuICAgIC5jYWxlbmRhciB7XG4gICAgICBoZWlnaHQ6IGF1dG87XG4gICAgICB3aWR0aDogMzQwcHg7XG4gICAgICBtYXgtd2lkdGg6IDEwMCU7XG4gICAgfVxuICB9XG5cbiAgLmxlZ2VuZCB7XG4gICAgY29sb3I6ICM0YTRhNGE7XG4gICAgcGFkZGluZzogMTBweCAwO1xuICAgIG1hcmdpbi1ib3R0b206IDVweDtcbiAgfVxuXG4gIC5sZWdlbmQgc3BhbiB7XG4gICAgd2lkdGg6IDE0LjI4NTcxNCU7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgfVxuPC9zdHlsZT5cbiIsIjxzdmVsdGU6aGVhZD5cbiAgPHRpdGxlPiDtirjsiJhnZyAtIOyLnOyyreyekCDsnbTrj5l7dGl0bGVfc3VmaXh9PC90aXRsZT5cbjwvc3ZlbHRlOmhlYWQ+XG5cblxuPGRpdiBjbGFzcz1cInAtNiB4bDphYnNvbHV0ZSByZWxhdGl2ZSBjb250YWluZXIgbS1hdXRvXCI+XG4gIDxoMSBjbGFzcz1cIm1kOnRleHQtM3hsIHRleHQtMnhsIGlubGluZS1ibG9ja1wiPuyLnOyyreyekCDsnbTrj5k8L2gxPlxuICA8VGlwID5cbiAgICA8c3BhbiBzbG90PVwidGlwXCI+IFxuICAgIOyXrOufrCDrsKnshqEg7IKs7J207JeQ7IScIOyLnOyyreyekOydmCDtnZDrpoTsnYQg7IK07Y6067O8IOyImCDsnojsirXri4jri6QuPGJyPiBcbiAgICDrgqDsp5zsmYAg7Iqk7Yq466as66i466W8IOyEoO2Dne2VtOuztOyEuOyalC48YnI+XG4gICAgKiDslb0g7ZWc7Iuc6rCEIOqwhOqyqeycvOuhnCDsl4XrjbDsnbTtirgg65Cp64uI64ukLlxuICAgIDwvc3Bhbj5cbiAgPC9UaXA+XG48L2Rpdj5cbjxkaXYgY2xhc3M9XCJjb250YWluZXIgbS1hdXRvIGZsZXggZmxleC1jb2wgaXRlbXMtc3RyZXRjaCBwYi04XCI+XG4gIDx0YWJsZSBjbGFzcz1cInRleHQtY2VudGVyIG1iLTEyIG10LTZcIj5cbiAgICA8dGhlYWQ+XG4gICAgICA8dHI+XG4gICAgICAgIDx0aD4g64Kg7KecIDwvdGg+XG4gICAgICAgIDx0aD4g7Iqk7Yq466as66i4MSA8L3RoPlxuICAgICAgICA8dGg+IOyKpO2KuOumrOuouDIgPC90aD5cbiAgICAgIDwvdHI+XG4gICAgPC90aGVhZD5cbiAgICA8dGJvZHk+XG4gICAgPHRyPlxuICAgICAgPHRkPlxuICAgICAgICA8RGF0ZXBpY2tlciBcbiAgICAgICAgICAgZW5kPXtuZXcgRGF0ZSgpfSBcbiAgICAgICAgICAgZm9ybWF0PXtkPT5kLnRvTG9jYWxlRGF0ZVN0cmluZygpfSBcbiAgICAgICAgICAgc2VsZWN0ZWQ9e2RhdGV9IFxuICAgICAgICAgICBvbjpkYXRlU2VsZWN0ZWQ9e29uX2RhdGVfcGlja30gXG4gICAgICAgICAgID5cbiAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cInAtMiBweC00IGJnLXdoaXRlIGJvcmRlciB3LWZ1bGwgdHJ1bmNhdGVcIj5cbiAgICAgICAgICAgICB7ZGF0ZS50b0xvY2FsZURhdGVTdHJpbmcoKX1cbiAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgIDwvRGF0ZXBpY2tlcj5cbiAgICAgIDwvdGQ+XG4gICAgICA8dGQ+XG4gICAgICAgIDxTdHJlYW1lckF1dG9Db21wbGV0ZSBcbiAgICAgICAgICAgYmluZDpvbnNlbGVjdD17b25fc3RyZWFtZXJfc2VhcmNoMX0gXG4gICAgICAgICAgIHBsYWNlaG9sZGVyPVwi7Iqk7Yq466as66i4IOyEoO2DnTFcIiBcbiAgICAgICAgICAgaWQ9XCJtaWdyYXRpb24tc3RyZWFtZXItc2VhcmNoMVwiIFxuICAgICAgICAgICBpbnB1dGlkPVwibWlncmF0aW9uLXN0cmVhbWVyLXNlYXJjaDEtaW5wdXRcIlxuICAgICAgICAgICBpbnB1dF92YWx1ZT17c3RyZWFtZXIxPyBzdHJlYW1lcjEubmFtZTogXCJcIn1cbiAgICAgICAgICAgaW5wdXRfY2xhc3M9XCJiZy13aGl0ZSB0ZXh0LXNtIHctZnVsbCB0cmFuc2l0aW9uLWFsbCB0cmFuc2l0aW9uLTEwMCBwbC03IHB5LTIgdHJ1bmNhdGUgYm9yZGVyXCIgLz5cbiAgICAgIDwvdGQ+XG4gICAgICA8dGQ+XG4gICAgICAgIDxTdHJlYW1lckF1dG9Db21wbGV0ZSBcbiAgICAgICAgICAgYmluZDpvbnNlbGVjdD17b25fc3RyZWFtZXJfc2VhcmNoMn1cbiAgICAgICAgICAgcGxhY2Vob2xkZXI9XCLsiqTtirjrpqzrqLgg7ISg7YOdMlwiIFxuICAgICAgICAgICBpZD1cIm1pZ3JhdGlvbi1zdHJlYW1lci1zZWFyY2gyXCIgXG4gICAgICAgICAgIGlucHV0aWQ9XCJtaWdyYXRpb24tc3RyZWFtZXItc2VhcmNoMi1pbnB1dFwiXG4gICAgICAgICAgIGlucHV0X3ZhbHVlPXtzdHJlYW1lcjI/IHN0cmVhbWVyMi5uYW1lOiBcIlwifVxuICAgICAgICAgICBpbnB1dF9jbGFzcz1cImJnLXdoaXRlIHRleHQtc20gdy1mdWxsIHRyYW5zaXRpb24tYWxsIHRyYW5zaXRpb24tMTAwIHBsLTcgcHktMiB0cnVuY2F0ZSBib3JkZXJcIiAvPlxuICAgICA8L3RkPlxuICAgIDwvdHI+XG4gICAgPC90Ym9keT5cbiAgPC90YWJsZT5cbiAgPGRpdiBjbGFzcz1cImZsZXggZmxleC1yb3cgdy1mdWxsIGl0ZW1zLWNlbnRlciB6LTIwXCI+XG4gICAgPGRpdiBjbGFzcz1cIlwiPlxuICAgICAgPGEgaHJlZj1cIntzdHJlYW1lcjE/ICcvc3RyZWFtZXIvJyArIHN0cmVhbWVyMS5pZCA6ICcnfVwiXG4gICAgICAgIGZvcj1cIm1pZ3JhdGlvbi1zdHJlYW1lci1zZWFyY2gxLWlucHV0XCJcbiAgICAgICAgY2xhc3M9XCJ3LTI0IGZsZXggZmxleC1jb2wgaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIG92ZXJmbG93LXZpc2libGUgcmVsYXRpdmVcIj5cbiAgICAgICAgeyNpZiBzdHJlYW1lcjF9XG4gICAgICAgICAgPGltZyBjbGFzcz1cInJvdW5kZWQtZnVsbCBoLTI0IHctMjQgYm9yZGVyIGJvcmRlci1ncmF5LTYwMFwiIHNyYz17c3RyZWFtZXIxLnByb2ZpbGVfaW1hZ2VfdXJsfSAvPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJwdC0yIGFic29sdXRlXCIgc3R5bGU9XCJ0b3A6IDEwMCVcIj48c3Bhbj57c3RyZWFtZXIxLm5hbWV9PC9zcGFuPjwvZGl2PlxuICAgICAgICB7OmVsc2V9XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInJvdW5kZWQtZnVsbCBoLTI0IHctMjQgYmctZ3JheS0xMDBcIiA+IDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJwdC0yIHRleHQtdHJhbnNwYXJlbnQgdGV4dC1ncmF5LTQwMCBhYnNvbHV0ZVwiIHN0eWxlPVwidG9wOiAxMDAlXCI+PHNwYW4+Pzwvc3Bhbj48L2Rpdj5cbiAgICAgICAgey9pZn1cbiAgICAgIDwvYT5cbiAgICA8L2Rpdj5cbiAgICA8TWlncmF0aW9uVGltZWxpbmUgXG4gICAgICAgc3RyZWFtZXI9e3N0cmVhbWVyMX0gXG4gICAgICAgaGVpZ2h0PVwiMTUwXCJcbiAgICAgICB7ZGF0ZX0gLz5cbiAgPC9kaXY+XG4gIDxkaXYgY2xhc3M9XCJmbGV4IGZsZXgtcm93IHctZnVsbFwiPlxuICAgIDxkaXYgY2xhc3M9XCJ3LTI0XCI+PC9kaXY+XG4gICAgPE1pZ3JhdGlvbnMgXG4gICAgICAgICBtaWdyYXRpb25zPXt2aWV3ZXJfbWlncmF0aW9uc31cbiAgICAgICAgIGNsYXNzPVwiZmxleC0xXCJcbiAgICAgICAgIGlkMT17c3RyZWFtZXIxICYmIHN0cmVhbWVyMS5pZH1cbiAgICAgICAgIGlkMj17c3RyZWFtZXIyICYmIHN0cmVhbWVyMi5pZH0gLz5cbiAgPC9kaXY+XG4gIDxkaXYgY2xhc3M9XCJmbGV4IGZsZXgtcm93IHctZnVsbCBpdGVtcy1jZW50ZXIgei0xMFwiPlxuICAgIDxkaXY+XG4gICAgICA8YSBocmVmPVwie3N0cmVhbWVyMj8gJy9zdHJlYW1lci8nICsgc3RyZWFtZXIyLmlkIDogJyd9XCJcbiAgICAgICAgZm9yPVwibWlncmF0aW9uLXN0cmVhbWVyLXNlYXJjaDItaW5wdXRcIlxuICAgICAgICBjbGFzcz1cInctMjQgZmxleCBmbGV4LWNvbCBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXIgb3ZlcmZsb3ctdmlzaWJsZSBjdXJzb3ItcG9pbnRlciByZWxhdGl2ZVwiPlxuICAgICAgICB7I2lmIHN0cmVhbWVyMn1cbiAgICAgICAgICA8aW1nIGNsYXNzPVwicm91bmRlZC1mdWxsIGgtMjQgdy0yNCBib3JkZXIgYm9yZGVyLWdyYXktNjAwXCIgc3JjPXtzdHJlYW1lcjIucHJvZmlsZV9pbWFnZV91cmx9IC8+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInB0LTIgYWJzb2x1dGVcIiBzdHlsZT1cInRvcDogMTAwJVwiPjxzcGFuPntzdHJlYW1lcjIubmFtZX08L3NwYW4+PC9kaXY+XG4gICAgICAgIHs6ZWxzZX1cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwicm91bmRlZC1mdWxsIGgtMjQgdy0yNCBiZy1ncmF5LTEwMFwiID4gPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInB0LTIgdGV4dC10cmFuc3BhcmVudCB0ZXh0LWdyYXktNDAwIGFic29sdXRlXCIgc3R5bGU9XCJ0b3A6IDEwMCVcIj48c3Bhbj4/PC9zcGFuPjwvZGl2PlxuICAgICAgICB7L2lmfVxuICAgICAgPC9hPlxuICAgIDwvZGl2PlxuICAgIDxNaWdyYXRpb25UaW1lbGluZSBcbiAgICAgICBzdHJlYW1lcj17c3RyZWFtZXIyfSBcbiAgICAgICBoZWlnaHQ9XCIxNTBcIlxuICAgICAgIHtkYXRlfSAvPlxuICA8L2Rpdj5cbjwvZGl2PlxuXG5cbjxzY3JpcHQgY29udGV4dD1cIm1vZHVsZVwiPlxuXHRpbXBvcnQgeyBBUEkgfSBmcm9tICcuLi8uLi9hcGkuanMnO1xuXG4gIGV4cG9ydCBhc3luYyBmdW5jdGlvbiBwcmVsb2FkKHBhZ2UsIHNlc3Npb24pIHtcbiAgICBpZihwYWdlLnF1ZXJ5LmlkMSAmJiBwYWdlLnF1ZXJ5LmlkMiAmJiBwYWdlLnF1ZXJ5LmRhdGUpIHtcbiAgICAgIGxldCBbc3RyZWFtZXIxLCBzdHJlYW1lcjJdID0gYXdhaXQgQVBJLnRoaW5fc3RyZWFtZXJzKFtwYWdlLnF1ZXJ5LmlkMSwgcGFnZS5xdWVyeS5pZDJdKTtcbiAgICAgIGxldCB0aW1lID0gbmV3IERhdGUocGFnZS5xdWVyeS5kYXRlLTApOyB0aW1lLnNldEhvdXJzKDAsMCwwLDApO1xuICAgICAgbGV0IGZyb20gPSB0aW1lLFxuICAgICAgICAgIHRvID0gbmV3IERhdGUodGltZS5nZXRUaW1lKCkgKyAxMDAwKjYwKjYwKjI0KTtcbiAgICAgIGxldCB2aWV3ZXJfbWlncmF0aW9ucyA9IGF3YWl0IEFQSS52aWV3ZXJfbWlncmF0aW9uX2NvdW50cyhwYWdlLnF1ZXJ5LmlkMSwgcGFnZS5xdWVyeS5pZDIsIGZyb20sIHRvKTtcbiAgICAgIGxldCBkYXRlID0gbmV3IERhdGUocGFnZS5xdWVyeS5kYXRlLTApO1xuICAgICAgcmV0dXJuIHsgc3RyZWFtZXIxLCBzdHJlYW1lcjIsIHZpZXdlcl9taWdyYXRpb25zLCBkYXRlIH07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgbGV0IGRhdGUgPSBuZXcgRGF0ZSgpOyBkYXRlLnNldEhvdXJzKDAsMCwwLDApO1xuICAgICAgcmV0dXJuIHsgZGF0ZSB9O1xuICAgIH1cbiAgfVxuPC9zY3JpcHQ+XG5cbjxzY3JpcHQ+XG4gIGltcG9ydCBTdHJlYW1lckF1dG9Db21wbGV0ZSBmcm9tICcuLi8uLi9jb21wb25lbnRzL1N0cmVhbWVyQXV0b0NvbXBsZXRlLnN2ZWx0ZSc7XG5cdGltcG9ydCBNaWdyYXRpb25UaW1lbGluZSBmcm9tICcuLi8uLi9jb21wb25lbnRzL01pZ3JhdGlvblRpbWVsaW5lLnN2ZWx0ZSc7XG5cdGltcG9ydCBNaWdyYXRpb25zIGZyb20gJy4uLy4uL2NvbXBvbmVudHMvTWlncmF0aW9ucy5zdmVsdGUnO1xuXHRpbXBvcnQgVGlwIGZyb20gJy4uLy4uL2NvbXBvbmVudHMvVGlwLnN2ZWx0ZSc7XG4gIGltcG9ydCBEYXRlcGlja2VyIGZyb20gXCJzdmVsdGUtY2FsZW5kYXJcIjtcblxuICBleHBvcnQgbGV0IHN0cmVhbWVyMTtcbiAgZXhwb3J0IGxldCBzdHJlYW1lcjI7XG4gIGV4cG9ydCBsZXQgdmlld2VyX21pZ3JhdGlvbnMgPSBbXTtcbiAgZXhwb3J0IGxldCBkYXRlID0gbmV3IERhdGUoKTtcbiAgbGV0IHRpdGxlX3N1Zml4ID0gc3RyZWFtZXIxICYmIHN0cmVhbWVyMj8gYHwgJHtzdHJlYW1lcjEubmFtZX0gPC0+ICR7c3RyZWFtZXIyLm5hbWV9YDogJyc7XG5cblxuXG4gIGZ1bmN0aW9uIHRyeV9sb2FkKCl7XG4gICAgaWYoc3RyZWFtZXIxICYmIHN0cmVhbWVyMiAmJiBkYXRlKXtcbiAgICAgIHdpbmRvdy5sb2NhdGlvbi5zZWFyY2ggPSBgaWQxPSR7c3RyZWFtZXIxLmlkfSZpZDI9JHtzdHJlYW1lcjIuaWR9JmRhdGU9JHtkYXRlLmdldFRpbWUoKX1gO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG9uX2RhdGVfcGljayhlKSB7XG4gICAgaWYoZS5kZXRhaWwuZGF0ZSAhPSBkYXRlKXtcbiAgICAgIGRhdGUgPSBlLmRldGFpbC5kYXRlO1xuICAgICAgdHJ5X2xvYWQoKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gb25fc3RyZWFtZXJfc2VhcmNoMSh0YXJnZXQpIHtcbiAgICBpZihzdHJlYW1lcjEgIT0gdGFyZ2V0KXtcbiAgICAgIHN0cmVhbWVyMSA9IHRhcmdldDtcbiAgICAgIHRyeV9sb2FkKCk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIG9uX3N0cmVhbWVyX3NlYXJjaDIodGFyZ2V0KSB7XG4gICAgaWYoc3RyZWFtZXIyICE9IHRhcmdldCl7XG4gICAgICBzdHJlYW1lcjIgPSB0YXJnZXQ7XG4gICAgICB0cnlfbG9hZCgpO1xuICAgIH1cbiAgfVxuPC9zY3JpcHQ+XG5cbjxzdHlsZT5cbiAgOmdsb2JhbCguY29udGVudHMtd3JhcHBlcikge1xuICAgIHotaW5kZXg6IDUwICFpbXBvcnRhbnQ7XG4gIH1cbjwvc3R5bGU+XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBa1RBLFdBQVcsc0JBQVEsQ0FBQyxBQUNsQixHQUFHLEFBQUMsQ0FBQyxBQUNILE9BQU8sQ0FBRSxDQUFDLEFBQ1osQ0FBQyxB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 */